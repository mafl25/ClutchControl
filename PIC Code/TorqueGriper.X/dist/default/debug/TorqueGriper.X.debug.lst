

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Aug 03 13:01:31 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    32  0000                     _TMR3	set	4018
    33  0000                     _ANSELHbits	set	3967
    34  0000                     _ANSELbits	set	3966
    35  0000                     _BAUDCON	set	4024
    36  0000                     _INTCON	set	4082
    37  0000                     _INTCON2bits	set	4081
    38  0000                     _INTCON3bits	set	4080
    39  0000                     _LATAbits	set	3977
    40  0000                     _LATCbits	set	3979
    41  0000                     _PIE2bits	set	4000
    42  0000                     _PIR2bits	set	4001
    43  0000                     _PORTCbits	set	3970
    44  0000                     _RCREG	set	4014
    45  0000                     _RCSTA	set	4011
    46  0000                     _RCSTAbits	set	4011
    47  0000                     _SPBRG	set	4015
    48  0000                     _SPBRGH	set	4016
    49  0000                     _SSPBUF	set	4041
    50  0000                     _SSPCON1	set	4038
    51  0000                     _SSPCON1bits	set	4038
    52  0000                     _SSPSTAT	set	4039
    53  0000                     _SSPSTATbits	set	4039
    54  0000                     _T3CON	set	4017
    55  0000                     _TRISAbits	set	3986
    56  0000                     _TRISBbits	set	3987
    57  0000                     _TRISCbits	set	3988
    58  0000                     _TXREG	set	4013
    59  0000                     _TXSTA	set	4012
    60  0000                     _INT2IF	set	32641
    61  0000                     _RCIE	set	31981
    62  0000                     _RCIF	set	31989
    63  0000                     _TXIE	set	31980
    64  0000                     _TXIF	set	31988
    65                           
    66 ;;
    67 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    68 ;;
    69 ;; *************** function _main *****************
    70 ;; Defined at:
    71 ;;		line 27 in file "main.c"
    72 ;; Parameters:    Size  Location     Type
    73 ;;		None
    74 ;; Auto vars:     Size  Location     Type
    75 ;;  value           2   19[COMRAM] int 
    76 ;;  i               2   17[COMRAM] int 
    77 ;;  pic_to_pic     34   55[COMRAM] struct circular_buffer
    78 ;;  pic_to_pc      34   21[COMRAM] struct circular_buffer
    79 ;;  value           1    0        unsigned char 
    80 ;; Return value:  Size  Location     Type
    81 ;;                  2   25[None  ] int 
    82 ;; Registers used:
    83 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
    84 ;; Tracked objects:
    85 ;;		On entry : 0/0
    86 ;;		On exit  : 0/0
    87 ;;		Unchanged: 0/0
    88 ;; Data sizes:     COMRAM   BANK0
    89 ;;      Params:         0       0
    90 ;;      Locals:        72       0
    91 ;;      Temps:          0       0
    92 ;;      Totals:        72       0
    93 ;;Total ram usage:       72 bytes
    94 ;; Hardware stack levels required when called:    2
    95 ;; This function calls:
    96 ;;		_buffer_empty
    97 ;;		_buffer_push
    98 ;;		_eserial_send_data
    99 ;;		_eserial_setup
   100 ;;		_espi_setup
   101 ;;		_espi_slave_receive
   102 ;;		_espi_slave_send
   103 ;;		_serial_send_byte
   104 ;;		_setup_timer3
   105 ;;		_spi_slave_peek_receive
   106 ;; This function is called by:
   107 ;;		Startup code after reset
   108 ;; This function uses a non-reentrant model
   109 ;;
   110                           
   111                           	psect	text0
   112  001C0A                     __ptext0:
   113                           	opt stack 0
   114  001C0A                     _main:
   115                           	opt stack 29
   116                           
   117                           ;main.c: 29: struct circular_buffer pic_to_pic = {0, 0, {0}};
   118                           
   119                           ;incstack = 0
   120  001C0A  EE20  F060         	lfsr	2,main@F4041
   121  001C0E  EE10  F038         	lfsr	1,main@pic_to_pic
   122  001C12  0E21               	movlw	33
   123  001C14                     u1411:
   124  001C14  CFDB FFE3          	movff	plusw2,plusw1
   125  001C18  06E8               	decf	wreg,f,c
   126  001C1A  E2FC               	bc	u1411
   127                           
   128                           ;main.c: 30: struct circular_buffer pic_to_pc = {0, 0, {0}};
   129  001C1C  EE20  F082         	lfsr	2,main@F4043
   130  001C20  EE10  F016         	lfsr	1,main@pic_to_pc
   131  001C24  0E21               	movlw	33
   132  001C26                     u1421:
   133  001C26  CFDB FFE3          	movff	plusw2,plusw1
   134  001C2A  06E8               	decf	wreg,f,c
   135  001C2C  E2FC               	bc	u1421
   136                           
   137                           ;main.c: 32: espi_setup(0x05);
   138  001C2E  0E05               	movlw	5
   139  001C30  EC3F  F00C         	call	_espi_setup
   140                           
   141                           ;main.c: 33: eserial_setup(0x08 | 0x04, 0x2A);
   142  001C34  0E00               	movlw	0
   143  001C36  6E09               	movwf	eserial_setup@baudrate_value+1,c
   144  001C38  0E2A               	movlw	42
   145  001C3A  6E08               	movwf	eserial_setup@baudrate_value,c
   146  001C3C  0E0C               	movlw	12
   147  001C3E  EC22  F00C         	call	_eserial_setup
   148                           
   149                           ;main.c: 34: setup_timer3(0x80 | 0x00 | 0x01);
   150  001C42  0E81               	movlw	129
   151  001C44  ECDF  F00B         	call	_setup_timer3
   152  001C48  D000               	goto	l1844
   153  001C4A                     l1844:
   154                           
   155                           ;main.c: 40: int i;
   156                           ;main.c: 42: if (buffer_empty(&pic_to_pic))
   157  001C4A  0E38               	movlw	low main@pic_to_pic
   158  001C4C  6E01               	movwf	buffer_empty@buffer,c
   159  001C4E  0E00               	movlw	high main@pic_to_pic
   160  001C50  6E02               	movwf	buffer_empty@buffer+1,c
   161  001C52  EC14  F00C         	call	_buffer_empty	;wreg free
   162  001C56  0900               	iorlw	0
   163  001C58  B4D8               	btfsc	status,2,c
   164  001C5A  D015               	goto	l1852
   165                           
   166                           ;main.c: 43: for (i = 0; !buffer_push(&pic_to_pic, i); i++);
   167  001C5C  0E00               	movlw	0
   168  001C5E  6E13               	movwf	main@i+1,c
   169  001C60  0E00               	movlw	0
   170  001C62  6E12               	movwf	main@i,c
   171  001C64  D003               	goto	l1850
   172  001C66                     l1848:
   173  001C66  4A12               	infsnz	main@i,f,c
   174  001C68  2A13               	incf	main@i+1,f,c
   175  001C6A  D000               	goto	l1850
   176  001C6C                     l1850:
   177  001C6C  0E38               	movlw	low main@pic_to_pic
   178  001C6E  6E01               	movwf	buffer_push@buffer,c
   179  001C70  0E00               	movlw	high main@pic_to_pic
   180  001C72  6E02               	movwf	buffer_push@buffer+1,c
   181  001C74  C012  F003         	movff	main@i,buffer_push@byte
   182  001C78  EC83  F00D         	call	_buffer_push	;wreg free
   183  001C7C  0900               	iorlw	0
   184  001C7E  A4D8               	btfss	status,2,c
   185  001C80  D002               	goto	l1852
   186  001C82  D7F1               	goto	l1848
   187  001C84  D000               	goto	l1852
   188  001C86                     l1852:
   189                           
   190                           ;main.c: 45: int16_t value;
   191                           ;main.c: 46: if (spi_slave_peek_receive(1, &value)) {
   192  001C86  0E14               	movlw	low main@value_98
   193  001C88  6E04               	movwf	spi_slave_peek_receive@byte,c
   194  001C8A  0E00               	movlw	high main@value_98
   195  001C8C  6E05               	movwf	spi_slave_peek_receive@byte+1,c
   196  001C8E  0E01               	movlw	1
   197  001C90  EC5B  F00C         	call	_spi_slave_peek_receive
   198  001C94  0900               	iorlw	0
   199  001C96  B4D8               	btfsc	status,2,c
   200  001C98  D021               	goto	l1868
   201                           
   202                           ;main.c: 47: serial_send_byte(value);
   203  001C9A  5014               	movf	main@value_98,w,c
   204  001C9C  ECE3  F00B         	call	_serial_send_byte
   205                           
   206                           ;main.c: 48: if (value == 0x20) {
   207  001CA0  0E20               	movlw	32
   208  001CA2  1814               	xorwf	main@value_98,w,c
   209  001CA4  1015               	iorwf	main@value_98+1,w,c
   210  001CA6  A4D8               	btfss	status,2,c
   211  001CA8  D00A               	goto	l1862
   212                           
   213                           ;main.c: 49: espi_slave_send(&pic_to_pic);
   214  001CAA  0E38               	movlw	low main@pic_to_pic
   215  001CAC  6E07               	movwf	espi_slave_send@buffer,c
   216  001CAE  0E00               	movlw	high main@pic_to_pic
   217  001CB0  6E08               	movwf	espi_slave_send@buffer+1,c
   218  001CB2  EC77  F00E         	call	_espi_slave_send	;wreg free
   219                           
   220                           ;main.c: 50: serial_send_byte('S');
   221  001CB6  0E53               	movlw	83
   222  001CB8  ECE3  F00B         	call	_serial_send_byte
   223                           
   224                           ;main.c: 51: } else if (value == 0x10) {
   225  001CBC  D00F               	goto	l1868
   226  001CBE                     l1862:
   227  001CBE  0E10               	movlw	16
   228  001CC0  1814               	xorwf	main@value_98,w,c
   229  001CC2  1015               	iorwf	main@value_98+1,w,c
   230  001CC4  A4D8               	btfss	status,2,c
   231  001CC6  D00A               	goto	l1868
   232                           
   233                           ;main.c: 52: espi_slave_receive(&pic_to_pc);
   234  001CC8  0E16               	movlw	low main@pic_to_pc
   235  001CCA  6E06               	movwf	espi_slave_receive@buffer,c
   236  001CCC  0E00               	movlw	high main@pic_to_pc
   237  001CCE  6E07               	movwf	espi_slave_receive@buffer+1,c
   238  001CD0  ECC3  F00D         	call	_espi_slave_receive	;wreg free
   239                           
   240                           ;main.c: 53: serial_send_byte('R');
   241  001CD4  0E52               	movlw	82
   242  001CD6  ECE3  F00B         	call	_serial_send_byte
   243  001CDA  D000               	goto	l1868
   244  001CDC                     l1868:
   245                           
   246                           ;main.c: 54: }
   247                           ;main.c: 55: }
   248                           ;main.c: 56: eserial_send_data(&pic_to_pc);
   249  001CDC  0E16               	movlw	low main@pic_to_pc
   250  001CDE  6E07               	movwf	eserial_send_data@buffer,c
   251  001CE0  0E00               	movlw	high main@pic_to_pc
   252  001CE2  6E08               	movwf	eserial_send_data@buffer+1,c
   253  001CE4  ECB5  F00C         	call	_eserial_send_data	;wreg free
   254  001CE8  D7B0               	goto	l1844
   255                           
   256                           ;main.c: 57: }
   257                           ;main.c: 59: return (0);
   258                           ;	Return value of _main is never used
   259  001CEA  EF01  F000         	goto	start
   260  001CEE                     __end_of_main:
   261                           	opt stack 0
   262                           wreg	equ	0xFE8
   263                           plusw1	equ	0xFE3
   264                           plusw2	equ	0xFDB
   265                           status	equ	0xFD8
   266                           
   267                           	psect	cinit
   268  001810                     __pcinit:
   269                           	opt stack 0
   270  001810                     start_initialization:
   271                           	opt stack 0
   272  001810                     __initialization:
   273                           	opt stack 0
   274                           
   275                           ; Clear objects allocated to BANK0 (68 bytes)
   276  001810  EE00  F060         	lfsr	0,__pbssBANK0
   277  001814  0E44               	movlw	68
   278  001816                     clear_0:
   279  001816  6AEE               	clrf	postinc0,c
   280  001818  06E8               	decf	wreg,f,c
   281  00181A  E1FD               	bnz	clear_0
   282                           
   283                           ; Clear objects allocated to COMRAM (1 bytes)
   284  00181C  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   285  00181E                     end_of_initialization:
   286                           	opt stack 0
   287  00181E                     __end_of__initialization:
   288                           	opt stack 0
   289  00181E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   290  001820  6EF8               	movwf	tblptru,c
   291  001822  0100               	movlb	0
   292  001824  EF05  F00E         	goto	_main	;jump to C main() function
   293                           tblptru	equ	0xFF8
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           plusw1	equ	0xFE3
   297                           plusw2	equ	0xFDB
   298                           status	equ	0xFD8
   299                           
   300                           	psect	bssCOMRAM
   301  00005A                     __pbssCOMRAM:
   302                           	opt stack 0
   303  00005A                     _dummy_byte:
   304                           	opt stack 0
   305  00005A                     	ds	1
   306                           tblptru	equ	0xFF8
   307                           postinc0	equ	0xFEE
   308                           wreg	equ	0xFE8
   309                           plusw1	equ	0xFE3
   310                           plusw2	equ	0xFDB
   311                           status	equ	0xFD8
   312                           
   313                           	psect	bssBANK0
   314  000060                     __pbssBANK0:
   315                           	opt stack 0
   316  000060                     main@F4041:
   317                           	opt stack 0
   318  000060                     	ds	34
   319  000082                     main@F4043:
   320                           	opt stack 0
   321  000082                     	ds	34
   322                           tblptru	equ	0xFF8
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           plusw1	equ	0xFE3
   326                           plusw2	equ	0xFDB
   327                           status	equ	0xFD8
   328                           
   329                           	psect	cstackCOMRAM
   330  000001                     __pcstackCOMRAM:
   331                           	opt stack 0
   332  000001                     ?_buffer_pop:
   333                           	opt stack 0
   334  000001                     ?_spi_slave_get_byte:
   335                           	opt stack 0
   336  000001                     ?_buffer_peek:
   337                           	opt stack 0
   338  000001                     serial_send_byte@byte:
   339                           	opt stack 0
   340  000001                     setup_timer3@T3CON_reg:
   341                           	opt stack 0
   342  000001                     setup_spi@SSPCON1_reg:
   343                           	opt stack 0
   344  000001                     spi_send_get_byte@byte:
   345                           	opt stack 0
   346  000001                     setup_simple_serial@baudrate_value:
   347                           	opt stack 0
   348  000001                     encode_data@byte_1:
   349                           	opt stack 0
   350  000001                     decode_data@data:
   351                           	opt stack 0
   352  000001                     buffer_count@buffer:
   353                           	opt stack 0
   354  000001                     buffer_space@buffer:
   355                           	opt stack 0
   356  000001                     buffer_empty@buffer:
   357                           	opt stack 0
   358  000001                     buffer_push@buffer:
   359                           	opt stack 0
   360  000001                     buffer_pop@buffer:
   361                           	opt stack 0
   362  000001                     buffer_peek@buffer:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x0
   366  000001                     	ds	1
   367  000002                     setup_spi@SSPSTAT_reg:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x1
   371  000002                     	ds	1
   372  000003                     ??_buffer_pop:
   373  000003                     ??_buffer_peek:
   374  000003                     decode_data@byte_1:
   375                           	opt stack 0
   376  000003                     buffer_push@byte:
   377                           	opt stack 0
   378  000003                     spi_slave_get_byte@byte:
   379                           	opt stack 0
   380  000003                     espi_setup@mode:
   381                           	opt stack 0
   382  000003                     _setup_simple_serial$211:
   383                           	opt stack 0
   384  000003                     encode_data@byte_2:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x2
   388  000003                     	ds	1
   389  000004                     ??_buffer_push:
   390  000004                     decode_data@byte_2:
   391                           	opt stack 0
   392  000004                     spi_slave_peek_receive@byte:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x3
   396  000004                     	ds	1
   397  000005                     ??_encode_data:
   398  000005                     ??_decode_data:
   399  000005                     buffer_push@current_position:
   400                           	opt stack 0
   401  000005                     _setup_simple_serial$212:
   402                           	opt stack 0
   403  000005                     buffer_pop@byte:
   404                           	opt stack 0
   405  000005                     buffer_peek@byte:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x4
   409  000005                     	ds	1
   410  000006                     encode_data@data:
   411                           	opt stack 0
   412  000006                     spi_slave_peek_receive@get_byte:
   413                           	opt stack 0
   414  000006                     espi_slave_receive@buffer:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x5
   418  000006                     	ds	1
   419  000007                     setup_simple_serial@baudrate_bits:
   420                           	opt stack 0
   421  000007                     eserial_send_data@buffer:
   422                           	opt stack 0
   423  000007                     espi_slave_send@buffer:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x6
   427  000007                     	ds	1
   428  000008                     ??_espi_slave_receive:
   429  000008                     eserial_setup@baudrate_value:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x7
   433  000008                     	ds	1
   434  000009                     ??_espi_slave_send:
   435  000009                     eserial_send_data@i:
   436                           	opt stack 0
   437  000009                     espi_slave_receive@value:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x8
   441  000009                     	ds	1
   442  00000A                     eserial_setup@baudrate_bits:
   443                           	opt stack 0
   444  00000A                     espi_slave_receive@received_1:
   445                           	opt stack 0
   446  00000A                     eserial_send_data@value:
   447                           	opt stack 0
   448  00000A                     espi_slave_send@byte_to_send:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x9
   452  00000A                     	ds	1
   453  00000B                     espi_slave_receive@received_2:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0xA
   457  00000B                     	ds	1
   458  00000C                     espi_slave_send@received_1:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0xB
   462  00000C                     	ds	2
   463  00000E                     espi_slave_send@received_2:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0xD
   467  00000E                     	ds	2
   468  000010                     espi_slave_send@byte_1:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0xF
   472  000010                     	ds	1
   473  000011                     espi_slave_send@byte_2:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x10
   477  000011                     	ds	1
   478  000012                     main@i:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x11
   482  000012                     	ds	2
   483  000014                     main@value_98:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x13
   487  000014                     	ds	2
   488  000016                     main@pic_to_pc:
   489                           	opt stack 0
   490                           
   491                           ; 34 bytes @ 0x15
   492  000016                     	ds	34
   493  000038                     main@pic_to_pic:
   494                           	opt stack 0
   495                           
   496                           ; 34 bytes @ 0x37
   497  000038                     	ds	34
   498                           tblptru	equ	0xFF8
   499                           postinc0	equ	0xFEE
   500                           wreg	equ	0xFE8
   501                           plusw1	equ	0xFE3
   502                           plusw2	equ	0xFDB
   503                           status	equ	0xFD8
   504                           
   505 ;; *************** function _spi_slave_peek_receive *****************
   506 ;; Defined at:
   507 ;;		line 42 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
   508 ;; Parameters:    Size  Location     Type
   509 ;;  get_byte        1    wreg     unsigned char 
   510 ;;  byte            2    3[COMRAM] PTR int 
   511 ;;		 -> main@value_98(2), 
   512 ;; Auto vars:     Size  Location     Type
   513 ;;  get_byte        1    5[COMRAM] unsigned char 
   514 ;; Return value:  Size  Location     Type
   515 ;;                  1    wreg      unsigned char 
   516 ;; Registers used:
   517 ;;		wreg, fsr2l, fsr2h, status,2, cstack
   518 ;; Tracked objects:
   519 ;;		On entry : 0/0
   520 ;;		On exit  : 0/0
   521 ;;		Unchanged: 0/0
   522 ;; Data sizes:     COMRAM   BANK0
   523 ;;      Params:         2       0
   524 ;;      Locals:         1       0
   525 ;;      Temps:          0       0
   526 ;;      Totals:         3       0
   527 ;;Total ram usage:        3 bytes
   528 ;; Hardware stack levels used:    1
   529 ;; Hardware stack levels required when called:    1
   530 ;; This function calls:
   531 ;;		_spi_slave_get_byte
   532 ;; This function is called by:
   533 ;;		_main
   534 ;; This function uses a non-reentrant model
   535 ;;
   536                           
   537                           	psect	text1
   538  0018B6                     __ptext1:
   539                           	opt stack 0
   540  0018B6                     _spi_slave_peek_receive:
   541                           	opt stack 29
   542                           
   543                           ;incstack = 0
   544                           ;spi_slave_peek_receive@get_byte stored from wreg
   545  0018B6  6E06               	movwf	spi_slave_peek_receive@get_byte,c
   546                           
   547                           ;spi_pic.c: 44: if (get_byte) {
   548  0018B8  5006               	movf	spi_slave_peek_receive@get_byte,w,c
   549  0018BA  B4D8               	btfsc	status,2,c
   550  0018BC  D012               	goto	l1750
   551                           
   552                           ;spi_pic.c: 45: if (SSPSTATbits.BF) {
   553  0018BE  A0C7               	btfss	4039,0,c	;volatile
   554  0018C0  D00D               	goto	l1746
   555                           
   556                           ;spi_pic.c: 46: *byte = spi_slave_get_byte();
   557  0018C2  EC30  F00C         	call	_spi_slave_get_byte	;wreg free
   558  0018C6  C004  FFD9         	movff	spi_slave_peek_receive@byte,fsr2l
   559  0018CA  C005  FFDA         	movff	spi_slave_peek_receive@byte+1,fsr2h
   560  0018CE  C001  FFDE         	movff	?_spi_slave_get_byte,postinc2
   561  0018D2  C002  FFDD         	movff	?_spi_slave_get_byte+1,postdec2
   562                           
   563                           ;spi_pic.c: 47: return 1;
   564  0018D6  0E01               	movlw	1
   565  0018D8  0012               	return	
   566                           
   567                           ;spi_pic.c: 48: } else {
   568  0018DA  D003               	goto	l1750
   569  0018DC                     l1746:
   570                           
   571                           ;spi_pic.c: 49: return 0;
   572  0018DC  0E00               	movlw	0
   573  0018DE  0012               	return	
   574  0018E0  D000               	goto	l1750
   575  0018E2                     l1750:
   576                           
   577                           ;spi_pic.c: 50: }
   578                           ;spi_pic.c: 51: }
   579                           ;spi_pic.c: 53: return (SSPSTATbits.BF) ? 1 : 0;
   580  0018E2  A0C7               	btfss	4039,0,c	;volatile
   581  0018E4  D002               	goto	u1260
   582  0018E6  0E01               	movlw	1
   583  0018E8  0012               	return	
   584  0018EA                     u1260:
   585  0018EA  0E00               	movlw	0
   586  0018EC  0012               	return	
   587  0018EE  0012               	return		;funcret
   588  0018F0                     __end_of_spi_slave_peek_receive:
   589                           	opt stack 0
   590                           tblptru	equ	0xFF8
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           plusw1	equ	0xFE3
   594                           postinc2	equ	0xFDE
   595                           postdec2	equ	0xFDD
   596                           plusw2	equ	0xFDB
   597                           fsr2h	equ	0xFDA
   598                           fsr2l	equ	0xFD9
   599                           status	equ	0xFD8
   600                           
   601 ;; *************** function _setup_timer3 *****************
   602 ;; Defined at:
   603 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  T3CON_reg       1    wreg     unsigned char 
   606 ;; Auto vars:     Size  Location     Type
   607 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   608 ;; Return value:  Size  Location     Type
   609 ;;		None               void
   610 ;; Registers used:
   611 ;;		wreg
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMRAM   BANK0
   617 ;;      Params:         0       0
   618 ;;      Locals:         1       0
   619 ;;      Temps:          0       0
   620 ;;      Totals:         1       0
   621 ;;Total ram usage:        1 bytes
   622 ;; Hardware stack levels used:    1
   623 ;; This function calls:
   624 ;;		Nothing
   625 ;; This function is called by:
   626 ;;		_main
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           	psect	text2
   631  0017BE                     __ptext2:
   632                           	opt stack 0
   633  0017BE                     _setup_timer3:
   634                           	opt stack 30
   635                           
   636                           ;incstack = 0
   637                           ;setup_timer3@T3CON_reg stored from wreg
   638  0017BE  6E01               	movwf	setup_timer3@T3CON_reg,c
   639                           
   640                           ;timers_pic.c: 5: T3CON = T3CON_reg;
   641  0017C0  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   642  0017C4  0012               	return		;funcret
   643  0017C6                     __end_of_setup_timer3:
   644                           	opt stack 0
   645                           tblptru	equ	0xFF8
   646                           postinc0	equ	0xFEE
   647                           wreg	equ	0xFE8
   648                           plusw1	equ	0xFE3
   649                           postinc2	equ	0xFDE
   650                           postdec2	equ	0xFDD
   651                           plusw2	equ	0xFDB
   652                           fsr2h	equ	0xFDA
   653                           fsr2l	equ	0xFD9
   654                           status	equ	0xFD8
   655                           
   656 ;; *************** function _espi_slave_send *****************
   657 ;; Defined at:
   658 ;;		line 77 in file "extended_spi.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
   661 ;;		 -> main@pic_to_pic(34), 
   662 ;; Auto vars:     Size  Location     Type
   663 ;;  received_2      2   13[COMRAM] int 
   664 ;;  received_1      2   11[COMRAM] int 
   665 ;;  byte_to_send    2    9[COMRAM] unsigned int 
   666 ;;  byte_2          1   16[COMRAM] unsigned char 
   667 ;;  byte_1          1   15[COMRAM] unsigned char 
   668 ;; Return value:  Size  Location     Type
   669 ;;		None               void
   670 ;; Registers used:
   671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMRAM   BANK0
   677 ;;      Params:         2       0
   678 ;;      Locals:         8       0
   679 ;;      Temps:          1       0
   680 ;;      Totals:        11       0
   681 ;;Total ram usage:       11 bytes
   682 ;; Hardware stack levels used:    1
   683 ;; Hardware stack levels required when called:    1
   684 ;; This function calls:
   685 ;;		_buffer_count
   686 ;;		_buffer_peek
   687 ;;		_buffer_pop
   688 ;;		_encode_data
   689 ;;		_spi_send_get_byte
   690 ;; This function is called by:
   691 ;;		_main
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           	psect	text3
   696  001CEE                     __ptext3:
   697                           	opt stack 0
   698  001CEE                     _espi_slave_send:
   699                           	opt stack 29
   700                           
   701                           ;extended_spi.c: 79: if (buffer_count(buffer)) {
   702                           
   703                           ;incstack = 0
   704  001CEE  C007  F001         	movff	espi_slave_send@buffer,buffer_count@buffer
   705  001CF2  C008  F002         	movff	espi_slave_send@buffer+1,buffer_count@buffer+1
   706  001CF6  ECEA  F00B         	call	_buffer_count	;wreg free
   707  001CFA  0900               	iorlw	0
   708  001CFC  B4D8               	btfsc	status,2,c
   709  001CFE  0012               	return	
   710                           
   711                           ;extended_spi.c: 80: uint16_t byte_to_send = buffer_peek(buffer);
   712  001D00  C007  F001         	movff	espi_slave_send@buffer,buffer_peek@buffer
   713  001D04  C008  F002         	movff	espi_slave_send@buffer+1,buffer_peek@buffer+1
   714  001D08  EC1D  F00D         	call	_buffer_peek	;wreg free
   715  001D0C  C001  F00A         	movff	?_buffer_peek,espi_slave_send@byte_to_send
   716  001D10  C002  F00B         	movff	?_buffer_peek+1,espi_slave_send@byte_to_send+1
   717                           
   718                           ;extended_spi.c: 81: uint8_t byte_1;
   719                           ;extended_spi.c: 82: uint8_t byte_2;
   720                           ;extended_spi.c: 84: encode_data(byte_to_send, &byte_1, &byte_2);
   721  001D14  0E10               	movlw	low espi_slave_send@byte_1
   722  001D16  6E01               	movwf	encode_data@byte_1,c
   723  001D18  0E00               	movlw	high espi_slave_send@byte_1
   724  001D1A  6E02               	movwf	encode_data@byte_1+1,c
   725  001D1C  0E11               	movlw	low espi_slave_send@byte_2
   726  001D1E  6E03               	movwf	encode_data@byte_2,c
   727  001D20  0E00               	movlw	high espi_slave_send@byte_2
   728  001D22  6E04               	movwf	encode_data@byte_2+1,c
   729  001D24  500A               	movf	espi_slave_send@byte_to_send,w,c
   730  001D26  ECFA  F00C         	call	_encode_data
   731                           
   732                           ;extended_spi.c: 86: LATAbits.LATA2 = 1;
   733  001D2A  8489               	bsf	3977,2,c	;volatile
   734                           
   735                           ;extended_spi.c: 87: LATAbits.LATA2 = 0;
   736  001D2C  9489               	bcf	3977,2,c	;volatile
   737                           
   738                           ;extended_spi.c: 89: int16_t received_1 = spi_send_get_byte(byte_1);
   739  001D2E  5010               	movf	espi_slave_send@byte_1,w,c
   740  001D30  ECF3  F00B         	call	_spi_send_get_byte
   741  001D34  6E09               	movwf	??_espi_slave_send& (0+255),c
   742  001D36  5009               	movf	??_espi_slave_send,w,c
   743  001D38  6E0C               	movwf	espi_slave_send@received_1,c
   744  001D3A  6A0D               	clrf	espi_slave_send@received_1+1,c
   745                           
   746                           ;extended_spi.c: 90: int16_t received_2 = spi_send_get_byte(byte_2);
   747  001D3C  5011               	movf	espi_slave_send@byte_2,w,c
   748  001D3E  ECF3  F00B         	call	_spi_send_get_byte
   749  001D42  6E09               	movwf	??_espi_slave_send& (0+255),c
   750  001D44  5009               	movf	??_espi_slave_send,w,c
   751  001D46  6E0E               	movwf	espi_slave_send@received_2,c
   752  001D48  6A0F               	clrf	espi_slave_send@received_2+1,c
   753                           
   754                           ;extended_spi.c: 92: while (received_1 != 0x30 && received_2 != 0x30) {
   755  001D4A  D03F               	goto	l1788
   756  001D4C                     l1768:
   757                           
   758                           ;extended_spi.c: 93: buffer_pop(buffer);
   759  001D4C  C007  F001         	movff	espi_slave_send@buffer,buffer_pop@buffer
   760  001D50  C008  F002         	movff	espi_slave_send@buffer+1,buffer_pop@buffer+1
   761  001D54  EC46  F00D         	call	_buffer_pop	;wreg free
   762                           
   763                           ;extended_spi.c: 94: byte_to_send = buffer_peek(buffer);
   764  001D58  C007  F001         	movff	espi_slave_send@buffer,buffer_peek@buffer
   765  001D5C  C008  F002         	movff	espi_slave_send@buffer+1,buffer_peek@buffer+1
   766  001D60  EC1D  F00D         	call	_buffer_peek	;wreg free
   767  001D64  C001  F00A         	movff	?_buffer_peek,espi_slave_send@byte_to_send
   768  001D68  C002  F00B         	movff	?_buffer_peek+1,espi_slave_send@byte_to_send+1
   769                           
   770                           ;extended_spi.c: 95: if (byte_to_send == -1)
   771  001D6C  280A               	incf	espi_slave_send@byte_to_send,w,c
   772  001D6E  E105               	bnz	l1774
   773  001D70  280B               	incf	espi_slave_send@byte_to_send+1,w,c
   774  001D72  B4D8               	btfsc	status,2,c
   775  001D74  D036               	goto	l1792
   776  001D76  D001               	goto	l1774
   777                           
   778                           ;extended_spi.c: 96: break;
   779  001D78  D034               	goto	l1792
   780  001D7A                     l1774:
   781                           
   782                           ;extended_spi.c: 98: encode_data(byte_to_send, &byte_1, &byte_2);
   783  001D7A  0E10               	movlw	low espi_slave_send@byte_1
   784  001D7C  6E01               	movwf	encode_data@byte_1,c
   785  001D7E  0E00               	movlw	high espi_slave_send@byte_1
   786  001D80  6E02               	movwf	encode_data@byte_1+1,c
   787  001D82  0E11               	movlw	low espi_slave_send@byte_2
   788  001D84  6E03               	movwf	encode_data@byte_2,c
   789  001D86  0E00               	movlw	high espi_slave_send@byte_2
   790  001D88  6E04               	movwf	encode_data@byte_2+1,c
   791  001D8A  500A               	movf	espi_slave_send@byte_to_send,w,c
   792  001D8C  ECFA  F00C         	call	_encode_data
   793                           
   794                           ;extended_spi.c: 100: received_1 = spi_send_get_byte(byte_1);
   795  001D90  5010               	movf	espi_slave_send@byte_1,w,c
   796  001D92  ECF3  F00B         	call	_spi_send_get_byte
   797  001D96  6E09               	movwf	??_espi_slave_send& (0+255),c
   798  001D98  5009               	movf	??_espi_slave_send,w,c
   799  001D9A  6E0C               	movwf	espi_slave_send@received_1,c
   800  001D9C  6A0D               	clrf	espi_slave_send@received_1+1,c
   801                           
   802                           ;extended_spi.c: 101: if (received_1 == 0x30)
   803  001D9E  0E30               	movlw	48
   804  001DA0  180C               	xorwf	espi_slave_send@received_1,w,c
   805  001DA2  100D               	iorwf	espi_slave_send@received_1+1,w,c
   806  001DA4  B4D8               	btfsc	status,2,c
   807  001DA6  D01D               	goto	l1792
   808  001DA8  D001               	goto	l1782
   809                           
   810                           ;extended_spi.c: 102: break;
   811  001DAA  D01B               	goto	l1792
   812  001DAC                     l1782:
   813                           
   814                           ;extended_spi.c: 103: received_2 = spi_send_get_byte(byte_2);
   815  001DAC  5011               	movf	espi_slave_send@byte_2,w,c
   816  001DAE  ECF3  F00B         	call	_spi_send_get_byte
   817  001DB2  6E09               	movwf	??_espi_slave_send& (0+255),c
   818  001DB4  5009               	movf	??_espi_slave_send,w,c
   819  001DB6  6E0E               	movwf	espi_slave_send@received_2,c
   820  001DB8  6A0F               	clrf	espi_slave_send@received_2+1,c
   821                           
   822                           ;extended_spi.c: 104: if (received_2 == 0x30)
   823  001DBA  0E30               	movlw	48
   824  001DBC  180E               	xorwf	espi_slave_send@received_2,w,c
   825  001DBE  100F               	iorwf	espi_slave_send@received_2+1,w,c
   826  001DC0  B4D8               	btfsc	status,2,c
   827  001DC2  D00F               	goto	l1792
   828  001DC4  D002               	goto	l1788
   829                           
   830                           ;extended_spi.c: 105: break;
   831  001DC6  D00D               	goto	l1792
   832  001DC8  D000               	goto	l1788
   833  001DCA                     l1788:
   834  001DCA  0E30               	movlw	48
   835  001DCC  180C               	xorwf	espi_slave_send@received_1,w,c
   836  001DCE  100D               	iorwf	espi_slave_send@received_1+1,w,c
   837  001DD0  B4D8               	btfsc	status,2,c
   838  001DD2  D007               	goto	l1792
   839  001DD4  0E30               	movlw	48
   840  001DD6  180E               	xorwf	espi_slave_send@received_2,w,c
   841  001DD8  100F               	iorwf	espi_slave_send@received_2+1,w,c
   842  001DDA  B4D8               	btfsc	status,2,c
   843  001DDC  D002               	goto	l1792
   844  001DDE  D7B6               	goto	l1768
   845  001DE0  D000               	goto	l1792
   846  001DE2                     l1792:
   847                           
   848                           ;extended_spi.c: 106: }
   849                           ;extended_spi.c: 108: if (received_1 != 0x30 && received_2 != 0x30)
   850  001DE2  0E30               	movlw	48
   851  001DE4  180C               	xorwf	espi_slave_send@received_1,w,c
   852  001DE6  100D               	iorwf	espi_slave_send@received_1+1,w,c
   853  001DE8  B4D8               	btfsc	status,2,c
   854  001DEA  0012               	return	
   855  001DEC  0E30               	movlw	48
   856  001DEE  180E               	xorwf	espi_slave_send@received_2,w,c
   857  001DF0  100F               	iorwf	espi_slave_send@received_2+1,w,c
   858  001DF2  B4D8               	btfsc	status,2,c
   859  001DF4  0012               	return	
   860                           
   861                           ;extended_spi.c: 109: spi_send_get_byte(0x30);
   862  001DF6  0E30               	movlw	48
   863  001DF8  ECF3  F00B         	call	_spi_send_get_byte
   864  001DFC  0012               	return	
   865  001DFE  0012               	return		;funcret
   866  001E00                     __end_of_espi_slave_send:
   867                           	opt stack 0
   868                           tblptru	equ	0xFF8
   869                           postinc0	equ	0xFEE
   870                           wreg	equ	0xFE8
   871                           plusw1	equ	0xFE3
   872                           postinc2	equ	0xFDE
   873                           postdec2	equ	0xFDD
   874                           plusw2	equ	0xFDB
   875                           fsr2h	equ	0xFDA
   876                           fsr2l	equ	0xFD9
   877                           status	equ	0xFD8
   878                           
   879 ;; *************** function _encode_data *****************
   880 ;; Defined at:
   881 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;  data            1    wreg     unsigned char 
   884 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
   885 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
   886 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
   887 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
   888 ;; Auto vars:     Size  Location     Type
   889 ;;  data            1    5[COMRAM] unsigned char 
   890 ;; Return value:  Size  Location     Type
   891 ;;		None               void
   892 ;; Registers used:
   893 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMRAM   BANK0
   899 ;;      Params:         4       0
   900 ;;      Locals:         1       0
   901 ;;      Temps:          1       0
   902 ;;      Totals:         6       0
   903 ;;Total ram usage:        6 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; This function calls:
   906 ;;		Nothing
   907 ;; This function is called by:
   908 ;;		_espi_slave_send
   909 ;;		_espi_master_send
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text4
   914  0019F4                     __ptext4:
   915                           	opt stack 0
   916  0019F4                     _encode_data:
   917                           	opt stack 29
   918                           
   919                           ;incstack = 0
   920                           ;encode_data@data stored from wreg
   921  0019F4  6E06               	movwf	encode_data@data,c
   922                           
   923                           ;encoding.c: 5: *byte_1 = 0xA0;
   924  0019F6  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   925  0019FA  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   926  0019FE  0EA0               	movlw	160
   927  001A00  6EDF               	movwf	indf2,c
   928                           
   929                           ;encoding.c: 6: *byte_2 = 0xA0;
   930  001A02  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   931  001A06  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   932  001A0A  0EA0               	movlw	160
   933  001A0C  6EDF               	movwf	indf2,c
   934                           
   935                           ;encoding.c: 8: *byte_1 |= data >> 4;
   936  001A0E  C006  F005         	movff	encode_data@data,??_encode_data
   937  001A12  3A05               	swapf	??_encode_data,f,c
   938  001A14  0E0F               	movlw	15
   939  001A16  1605               	andwf	??_encode_data,f,c
   940  001A18  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   941  001A1C  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   942  001A20  5005               	movf	??_encode_data,w,c
   943  001A22  12DF               	iorwf	indf2,f,c
   944                           
   945                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
   946  001A24  C006  F005         	movff	encode_data@data,??_encode_data
   947  001A28  0E0F               	movlw	15
   948  001A2A  1605               	andwf	??_encode_data,f,c
   949  001A2C  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   950  001A30  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   951  001A34  5005               	movf	??_encode_data,w,c
   952  001A36  12DF               	iorwf	indf2,f,c
   953  001A38  0012               	return		;funcret
   954  001A3A                     __end_of_encode_data:
   955                           	opt stack 0
   956                           tblptru	equ	0xFF8
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           plusw1	equ	0xFE3
   960                           indf2	equ	0xFDF
   961                           postinc2	equ	0xFDE
   962                           postdec2	equ	0xFDD
   963                           plusw2	equ	0xFDB
   964                           fsr2h	equ	0xFDA
   965                           fsr2l	equ	0xFD9
   966                           status	equ	0xFD8
   967                           
   968 ;; *************** function _buffer_peek *****************
   969 ;; Defined at:
   970 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   971 ;; Parameters:    Size  Location     Type
   972 ;;  buffer          2    0[COMRAM] PTR const struct circula
   973 ;;		 -> main@pic_to_pic(34), 
   974 ;; Auto vars:     Size  Location     Type
   975 ;;  byte            2    4[COMRAM] int 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  2    0[COMRAM] unsigned int 
   978 ;; Registers used:
   979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0
   985 ;;      Params:         2       0
   986 ;;      Locals:         2       0
   987 ;;      Temps:          2       0
   988 ;;      Totals:         6       0
   989 ;;Total ram usage:        6 bytes
   990 ;; Hardware stack levels used:    1
   991 ;; This function calls:
   992 ;;		Nothing
   993 ;; This function is called by:
   994 ;;		_espi_slave_send
   995 ;;		_espi_master_send
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           	psect	text5
  1000  001A3A                     __ptext5:
  1001                           	opt stack 0
  1002  001A3A                     _buffer_peek:
  1003                           	opt stack 29
  1004                           
  1005                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
  1006                           
  1007                           ;incstack = 0
  1008  001A3A  EE20 F001          	lfsr	2,1
  1009  001A3E  5001               	movf	buffer_peek@buffer,w,c
  1010  001A40  26D9               	addwf	fsr2l,f,c
  1011  001A42  5002               	movf	buffer_peek@buffer+1,w,c
  1012  001A44  22DA               	addwfc	fsr2h,f,c
  1013  001A46  50DF               	movf	indf2,w,c
  1014  001A48  A4D8               	btfss	status,2,c
  1015  001A4A  D003               	goto	l1684
  1016                           
  1017                           ;circular_buffer.c: 58: return -1;
  1018  001A4C  6801               	setf	?_buffer_peek,c
  1019  001A4E  6802               	setf	?_buffer_peek+1,c
  1020  001A50  0012               	return	
  1021  001A52                     l1684:
  1022                           
  1023                           ;circular_buffer.c: 59: }
  1024                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  1025  001A52  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
  1026  001A56  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
  1027  001A5A  50DF               	movf	indf2,w,c
  1028  001A5C  6E03               	movwf	??_buffer_peek& (0+255),c
  1029  001A5E  5003               	movf	??_buffer_peek,w,c
  1030  001A60  0D01               	mullw	1
  1031  001A62  0E02               	movlw	2
  1032  001A64  26F3               	addwf	prodl,f,c
  1033  001A66  0E00               	movlw	0
  1034  001A68  22F4               	addwfc	prodh,f,c
  1035  001A6A  50F3               	movf	prodl,w,c
  1036  001A6C  2401               	addwf	buffer_peek@buffer,w,c
  1037  001A6E  6ED9               	movwf	fsr2l,c
  1038  001A70  50F4               	movf	prodh,w,c
  1039  001A72  2002               	addwfc	buffer_peek@buffer+1,w,c
  1040  001A74  6EDA               	movwf	fsr2h,c
  1041  001A76  50DF               	movf	indf2,w,c
  1042  001A78  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
  1043  001A7A  5004               	movf	??_buffer_peek+1,w,c
  1044  001A7C  6E05               	movwf	buffer_peek@byte,c
  1045  001A7E  6A06               	clrf	buffer_peek@byte+1,c
  1046                           
  1047                           ;circular_buffer.c: 63: return byte;
  1048  001A80  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
  1049  001A84  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
  1050  001A88  0012               	return	
  1051  001A8A  0012               	return		;funcret
  1052  001A8C                     __end_of_buffer_peek:
  1053                           	opt stack 0
  1054                           tblptru	equ	0xFF8
  1055                           prodh	equ	0xFF4
  1056                           prodl	equ	0xFF3
  1057                           postinc0	equ	0xFEE
  1058                           wreg	equ	0xFE8
  1059                           plusw1	equ	0xFE3
  1060                           indf2	equ	0xFDF
  1061                           postinc2	equ	0xFDE
  1062                           postdec2	equ	0xFDD
  1063                           plusw2	equ	0xFDB
  1064                           fsr2h	equ	0xFDA
  1065                           fsr2l	equ	0xFD9
  1066                           status	equ	0xFD8
  1067                           
  1068 ;; *************** function _buffer_count *****************
  1069 ;; Defined at:
  1070 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1073 ;;		 -> main@pic_to_pic(34), 
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;		None
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      unsigned char 
  1078 ;; Registers used:
  1079 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0
  1085 ;;      Params:         2       0
  1086 ;;      Locals:         0       0
  1087 ;;      Temps:          0       0
  1088 ;;      Totals:         2       0
  1089 ;;Total ram usage:        2 bytes
  1090 ;; Hardware stack levels used:    1
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		_espi_slave_send
  1095 ;;		_espi_master_send
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text6
  1100  0017D4                     __ptext6:
  1101                           	opt stack 0
  1102  0017D4                     _buffer_count:
  1103                           	opt stack 29
  1104                           
  1105                           ;circular_buffer.c: 6: return buffer->count;
  1106                           
  1107                           ;incstack = 0
  1108  0017D4  EE20 F001          	lfsr	2,1
  1109  0017D8  5001               	movf	buffer_count@buffer,w,c
  1110  0017DA  26D9               	addwf	fsr2l,f,c
  1111  0017DC  5002               	movf	buffer_count@buffer+1,w,c
  1112  0017DE  22DA               	addwfc	fsr2h,f,c
  1113  0017E0  50DF               	movf	indf2,w,c
  1114  0017E2  0012               	return	
  1115  0017E4  0012               	return		;funcret
  1116  0017E6                     __end_of_buffer_count:
  1117                           	opt stack 0
  1118                           tblptru	equ	0xFF8
  1119                           prodh	equ	0xFF4
  1120                           prodl	equ	0xFF3
  1121                           postinc0	equ	0xFEE
  1122                           wreg	equ	0xFE8
  1123                           plusw1	equ	0xFE3
  1124                           indf2	equ	0xFDF
  1125                           postinc2	equ	0xFDE
  1126                           postdec2	equ	0xFDD
  1127                           plusw2	equ	0xFDB
  1128                           fsr2h	equ	0xFDA
  1129                           fsr2l	equ	0xFD9
  1130                           status	equ	0xFD8
  1131                           
  1132 ;; *************** function _espi_slave_receive *****************
  1133 ;; Defined at:
  1134 ;;		line 51 in file "extended_spi.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;  buffer          2    5[COMRAM] PTR struct circular_buff
  1137 ;;		 -> main@pic_to_pc(34), 
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  received_2      1   10[COMRAM] char 
  1140 ;;  received_1      1    9[COMRAM] char 
  1141 ;;  value           1    8[COMRAM] unsigned char 
  1142 ;; Return value:  Size  Location     Type
  1143 ;;		None               void
  1144 ;; Registers used:
  1145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMRAM   BANK0
  1151 ;;      Params:         2       0
  1152 ;;      Locals:         3       0
  1153 ;;      Temps:          1       0
  1154 ;;      Totals:         6       0
  1155 ;;Total ram usage:        6 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    1
  1158 ;; This function calls:
  1159 ;;		_buffer_push
  1160 ;;		_buffer_space
  1161 ;;		_decode_data
  1162 ;;		_spi_send_get_byte
  1163 ;;		_spi_slave_get_byte
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text7
  1170  001B86                     __ptext7:
  1171                           	opt stack 0
  1172  001B86                     _espi_slave_receive:
  1173                           	opt stack 29
  1174                           
  1175                           ;extended_spi.c: 53: uint8_t value;
  1176                           ;extended_spi.c: 54: int8_t received_1;
  1177                           ;extended_spi.c: 55: int8_t received_2;
  1178                           ;extended_spi.c: 57: LATAbits.LATA2 = 1;
  1179                           
  1180                           ;incstack = 0
  1181  001B86  8489               	bsf	3977,2,c	;volatile
  1182                           
  1183                           ;extended_spi.c: 58: LATAbits.LATA2 = 0;
  1184  001B88  9489               	bcf	3977,2,c	;volatile
  1185                           
  1186                           ;extended_spi.c: 60: while (buffer_space(buffer) > 5) {
  1187  001B8A  D027               	goto	l1816
  1188  001B8C                     l1800:
  1189                           
  1190                           ;extended_spi.c: 61: received_1 = spi_slave_get_byte();
  1191  001B8C  EC30  F00C         	call	_spi_slave_get_byte	;wreg free
  1192  001B90  5001               	movf	?_spi_slave_get_byte,w,c
  1193  001B92  6E0A               	movwf	espi_slave_receive@received_1,c
  1194                           
  1195                           ;extended_spi.c: 62: if (received_1 == 0x30)
  1196  001B94  0E30               	movlw	48
  1197  001B96  180A               	xorwf	espi_slave_receive@received_1,w,c
  1198  001B98  B4D8               	btfsc	status,2,c
  1199  001B9A  D02A               	goto	l1818
  1200  001B9C  D001               	goto	l1806
  1201                           
  1202                           ;extended_spi.c: 63: break;
  1203  001B9E  D028               	goto	l1818
  1204  001BA0                     l1806:
  1205                           
  1206                           ;extended_spi.c: 65: received_2 = spi_slave_get_byte();
  1207  001BA0  EC30  F00C         	call	_spi_slave_get_byte	;wreg free
  1208  001BA4  5001               	movf	?_spi_slave_get_byte,w,c
  1209  001BA6  6E0B               	movwf	espi_slave_receive@received_2,c
  1210                           
  1211                           ;extended_spi.c: 66: if (received_2 == 0x30)
  1212  001BA8  0E30               	movlw	48
  1213  001BAA  180B               	xorwf	espi_slave_receive@received_2,w,c
  1214  001BAC  B4D8               	btfsc	status,2,c
  1215  001BAE  D020               	goto	l1818
  1216  001BB0  D001               	goto	l1812
  1217                           
  1218                           ;extended_spi.c: 67: break;
  1219  001BB2  D01E               	goto	l1818
  1220  001BB4                     l1812:
  1221                           
  1222                           ;extended_spi.c: 69: decode_data( &value, (uint8_t)received_1, (uint8_t)received_2);
  1223  001BB4  0E09               	movlw	low espi_slave_receive@value
  1224  001BB6  6E01               	movwf	decode_data@data,c
  1225  001BB8  0E00               	movlw	high espi_slave_receive@value
  1226  001BBA  6E02               	movwf	decode_data@data+1,c
  1227  001BBC  C00A  F003         	movff	espi_slave_receive@received_1,decode_data@byte_1
  1228  001BC0  C00B  F004         	movff	espi_slave_receive@received_2,decode_data@byte_2
  1229  001BC4  EC78  F00C         	call	_decode_data	;wreg free
  1230                           
  1231                           ;extended_spi.c: 70: buffer_push(buffer, value);
  1232  001BC8  C006  F001         	movff	espi_slave_receive@buffer,buffer_push@buffer
  1233  001BCC  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_push@buffer+1
  1234  001BD0  C009  F003         	movff	espi_slave_receive@value,buffer_push@byte
  1235  001BD4  EC83  F00D         	call	_buffer_push	;wreg free
  1236  001BD8  D000               	goto	l1816
  1237  001BDA                     l1816:
  1238  001BDA  C006  F001         	movff	espi_slave_receive@buffer,buffer_space@buffer
  1239  001BDE  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_space@buffer+1
  1240  001BE2  ECFD  F00B         	call	_buffer_space	;wreg free
  1241  001BE6  6E08               	movwf	??_espi_slave_receive& (0+255),c
  1242  001BE8  0E06               	movlw	6
  1243  001BEA  6008               	cpfslt	??_espi_slave_receive,c
  1244  001BEC  D7CF               	goto	l1800
  1245  001BEE  D000               	goto	l1818
  1246  001BF0                     l1818:
  1247                           
  1248                           ;extended_spi.c: 71: }
  1249                           ;extended_spi.c: 73: if (received_1 != 0x30 && received_2 != 0x30)
  1250  001BF0  0E30               	movlw	48
  1251  001BF2  180A               	xorwf	espi_slave_receive@received_1,w,c
  1252  001BF4  B4D8               	btfsc	status,2,c
  1253  001BF6  0012               	return	
  1254  001BF8  0E30               	movlw	48
  1255  001BFA  180B               	xorwf	espi_slave_receive@received_2,w,c
  1256  001BFC  B4D8               	btfsc	status,2,c
  1257  001BFE  0012               	return	
  1258                           
  1259                           ;extended_spi.c: 74: spi_send_get_byte(0x30);
  1260  001C00  0E30               	movlw	48
  1261  001C02  ECF3  F00B         	call	_spi_send_get_byte
  1262  001C06  0012               	return	
  1263  001C08  0012               	return		;funcret
  1264  001C0A                     __end_of_espi_slave_receive:
  1265                           	opt stack 0
  1266                           tblptru	equ	0xFF8
  1267                           prodh	equ	0xFF4
  1268                           prodl	equ	0xFF3
  1269                           postinc0	equ	0xFEE
  1270                           wreg	equ	0xFE8
  1271                           plusw1	equ	0xFE3
  1272                           indf2	equ	0xFDF
  1273                           postinc2	equ	0xFDE
  1274                           postdec2	equ	0xFDD
  1275                           plusw2	equ	0xFDB
  1276                           fsr2h	equ	0xFDA
  1277                           fsr2l	equ	0xFD9
  1278                           status	equ	0xFD8
  1279                           
  1280 ;; *************** function _spi_slave_get_byte *****************
  1281 ;; Defined at:
  1282 ;;		line 111 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;		None
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  byte            1    2[COMRAM] unsigned char 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  2    0[COMRAM] int 
  1289 ;; Registers used:
  1290 ;;		None
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMRAM   BANK0
  1296 ;;      Params:         2       0
  1297 ;;      Locals:         1       0
  1298 ;;      Temps:          0       0
  1299 ;;      Totals:         3       0
  1300 ;;Total ram usage:        3 bytes
  1301 ;; Hardware stack levels used:    1
  1302 ;; This function calls:
  1303 ;;		Nothing
  1304 ;; This function is called by:
  1305 ;;		_spi_slave_peek_receive
  1306 ;;		_espi_slave_receive
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text8
  1311  001860                     __ptext8:
  1312                           	opt stack 0
  1313  001860                     _spi_slave_get_byte:
  1314                           	opt stack 29
  1315                           
  1316                           ;spi_pic.c: 113: while (!SSPSTATbits.BF);
  1317                           
  1318                           ;incstack = 0
  1319  001860  D000               	goto	l309
  1320  001862                     l309:
  1321  001862  A0C7               	btfss	4039,0,c	;volatile
  1322  001864  D7FE               	goto	l309
  1323                           
  1324                           ;spi_pic.c: 114: uint8_t byte = SSPBUF;
  1325  001866  CFC9 F003          	movff	4041,spi_slave_get_byte@byte	;volatile
  1326                           
  1327                           ;spi_pic.c: 115: SSPBUF = dummy_byte;
  1328  00186A  C05A  FFC9         	movff	_dummy_byte,4041	;volatile
  1329                           
  1330                           ;spi_pic.c: 116: if (SSPCON1bits.SSPOV) {
  1331  00186E  ACC6               	btfss	4038,6,c	;volatile
  1332  001870  D002               	goto	l312
  1333                           
  1334                           ;spi_pic.c: 117: SSPCON1bits.SSPOV = 0;
  1335  001872  9CC6               	bcf	4038,6,c	;volatile
  1336                           
  1337                           ;spi_pic.c: 118: byte = -1;
  1338  001874  6803               	setf	spi_slave_get_byte@byte,c
  1339  001876                     l312:
  1340                           
  1341                           ;spi_pic.c: 119: }
  1342                           ;spi_pic.c: 120: return byte;
  1343  001876  C003  F001         	movff	spi_slave_get_byte@byte,?_spi_slave_get_byte
  1344  00187A  6A02               	clrf	?_spi_slave_get_byte+1,c
  1345  00187C  0012               	return		;funcret
  1346  00187E                     __end_of_spi_slave_get_byte:
  1347                           	opt stack 0
  1348                           tblptru	equ	0xFF8
  1349                           prodh	equ	0xFF4
  1350                           prodl	equ	0xFF3
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           plusw1	equ	0xFE3
  1354                           indf2	equ	0xFDF
  1355                           postinc2	equ	0xFDE
  1356                           postdec2	equ	0xFDD
  1357                           plusw2	equ	0xFDB
  1358                           fsr2h	equ	0xFDA
  1359                           fsr2l	equ	0xFD9
  1360                           status	equ	0xFD8
  1361                           
  1362 ;; *************** function _spi_send_get_byte *****************
  1363 ;; Defined at:
  1364 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  byte            1    wreg     unsigned char 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  byte            1    0[COMRAM] unsigned char 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  1    wreg      unsigned char 
  1371 ;; Registers used:
  1372 ;;		wreg, status,2
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMRAM   BANK0
  1378 ;;      Params:         0       0
  1379 ;;      Locals:         1       0
  1380 ;;      Temps:          0       0
  1381 ;;      Totals:         1       0
  1382 ;;Total ram usage:        1 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_espi_slave_receive
  1388 ;;		_espi_slave_send
  1389 ;;		_espi_master_send
  1390 ;;		_espi_master_receive
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text9
  1395  0017E6                     __ptext9:
  1396                           	opt stack 0
  1397  0017E6                     _spi_send_get_byte:
  1398                           	opt stack 29
  1399                           
  1400                           ;incstack = 0
  1401                           ;spi_send_get_byte@byte stored from wreg
  1402  0017E6  6E01               	movwf	spi_send_get_byte@byte,c
  1403                           
  1404                           ;spi_pic.c: 35: SSPBUF = byte;
  1405  0017E8  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  1406                           
  1407                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  1408  0017EC  D000               	goto	l296
  1409  0017EE                     l296:
  1410  0017EE  A0C7               	btfss	4039,0,c	;volatile
  1411  0017F0  D7FE               	goto	l296
  1412                           
  1413                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  1414  0017F2  BEC6               	btfsc	4038,7,c	;volatile
  1415                           
  1416                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  1417  0017F4  9EC6               	bcf	4038,7,c	;volatile
  1418                           
  1419                           ;spi_pic.c: 39: return SSPBUF;
  1420  0017F6  50C9               	movf	4041,w,c	;volatile
  1421  0017F8  0012               	return		;funcret
  1422  0017FA                     __end_of_spi_send_get_byte:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           prodh	equ	0xFF4
  1426                           prodl	equ	0xFF3
  1427                           postinc0	equ	0xFEE
  1428                           wreg	equ	0xFE8
  1429                           plusw1	equ	0xFE3
  1430                           indf2	equ	0xFDF
  1431                           postinc2	equ	0xFDE
  1432                           postdec2	equ	0xFDD
  1433                           plusw2	equ	0xFDB
  1434                           fsr2h	equ	0xFDA
  1435                           fsr2l	equ	0xFD9
  1436                           status	equ	0xFD8
  1437                           
  1438 ;; *************** function _decode_data *****************
  1439 ;; Defined at:
  1440 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;  data            2    0[COMRAM] PTR unsigned char 
  1443 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  1444 ;;  byte_1          1    2[COMRAM] unsigned char 
  1445 ;;  byte_2          1    3[COMRAM] unsigned char 
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;		None
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      char 
  1450 ;; Registers used:
  1451 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMRAM   BANK0
  1457 ;;      Params:         4       0
  1458 ;;      Locals:         0       0
  1459 ;;      Temps:          1       0
  1460 ;;      Totals:         5       0
  1461 ;;Total ram usage:        5 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_espi_slave_receive
  1467 ;;		_espi_master_receive
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text10
  1472  0018F0                     __ptext10:
  1473                           	opt stack 0
  1474  0018F0                     _decode_data:
  1475                           	opt stack 29
  1476                           
  1477                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  1478                           
  1479                           ;incstack = 0
  1480  0018F0  5003               	movf	decode_data@byte_1,w,c
  1481  0018F2  0BF0               	andlw	240
  1482  0018F4  0AA0               	xorlw	160
  1483  0018F6  A4D8               	btfss	status,2,c
  1484  0018F8  0012               	return	
  1485  0018FA  D002               	goto	l1650
  1486                           
  1487                           ;encoding.c: 15: return -1;
  1488                           ;	Return value of _decode_data is never used
  1489  0018FC  0012               	return	
  1490  0018FE  D008               	goto	l1654
  1491  001900                     l1650:
  1492                           
  1493                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  1494  001900  5004               	movf	decode_data@byte_2,w,c
  1495  001902  0BF0               	andlw	240
  1496  001904  0AA0               	xorlw	160
  1497  001906  A4D8               	btfss	status,2,c
  1498  001908  0012               	return	
  1499  00190A  D002               	goto	l1654
  1500                           
  1501                           ;encoding.c: 17: return -2;
  1502                           ;	Return value of _decode_data is never used
  1503  00190C  0012               	return	
  1504  00190E  D000               	goto	l1654
  1505  001910                     l1654:
  1506                           
  1507                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  1508  001910  C004  F005         	movff	decode_data@byte_2,??_decode_data
  1509  001914  0E0F               	movlw	15
  1510  001916  1605               	andwf	??_decode_data,f,c
  1511  001918  3803               	swapf	decode_data@byte_1,w,c
  1512  00191A  0BF0               	andlw	240
  1513  00191C  1005               	iorwf	??_decode_data,w,c
  1514  00191E  C001  FFD9         	movff	decode_data@data,fsr2l
  1515  001922  C002  FFDA         	movff	decode_data@data+1,fsr2h
  1516  001926  6EDF               	movwf	indf2,c
  1517  001928  0012               	return	
  1518                           
  1519                           ;encoding.c: 21: return 0;
  1520                           ;	Return value of _decode_data is never used
  1521  00192A  0012               	return		;funcret
  1522  00192C                     __end_of_decode_data:
  1523                           	opt stack 0
  1524                           tblptru	equ	0xFF8
  1525                           prodh	equ	0xFF4
  1526                           prodl	equ	0xFF3
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           plusw1	equ	0xFE3
  1530                           indf2	equ	0xFDF
  1531                           postinc2	equ	0xFDE
  1532                           postdec2	equ	0xFDD
  1533                           plusw2	equ	0xFDB
  1534                           fsr2h	equ	0xFDA
  1535                           fsr2l	equ	0xFD9
  1536                           status	equ	0xFD8
  1537                           
  1538 ;; *************** function _buffer_space *****************
  1539 ;; Defined at:
  1540 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1543 ;;		 -> main@pic_to_pc(34), 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      unsigned char 
  1548 ;; Registers used:
  1549 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0
  1555 ;;      Params:         2       0
  1556 ;;      Locals:         0       0
  1557 ;;      Temps:          0       0
  1558 ;;      Totals:         2       0
  1559 ;;Total ram usage:        2 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; This function calls:
  1562 ;;		Nothing
  1563 ;; This function is called by:
  1564 ;;		_espi_slave_receive
  1565 ;;		_eserial_receive
  1566 ;;		_espi_master_receive
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           	psect	text11
  1571  0017FA                     __ptext11:
  1572                           	opt stack 0
  1573  0017FA                     _buffer_space:
  1574                           	opt stack 29
  1575                           
  1576                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  1577                           
  1578                           ;incstack = 0
  1579  0017FA  EE20 F001          	lfsr	2,1
  1580  0017FE  5001               	movf	buffer_space@buffer,w,c
  1581  001800  26D9               	addwf	fsr2l,f,c
  1582  001802  5002               	movf	buffer_space@buffer+1,w,c
  1583  001804  22DA               	addwfc	fsr2h,f,c
  1584  001806  50DF               	movf	indf2,w,c
  1585  001808  0800               	sublw	0
  1586  00180A  0F20               	addlw	32
  1587  00180C  0012               	return	
  1588  00180E  0012               	return		;funcret
  1589  001810                     __end_of_buffer_space:
  1590                           	opt stack 0
  1591                           tblptru	equ	0xFF8
  1592                           prodh	equ	0xFF4
  1593                           prodl	equ	0xFF3
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           plusw1	equ	0xFE3
  1597                           indf2	equ	0xFDF
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           plusw2	equ	0xFDB
  1601                           fsr2h	equ	0xFDA
  1602                           fsr2l	equ	0xFD9
  1603                           status	equ	0xFD8
  1604                           
  1605 ;; *************** function _buffer_push *****************
  1606 ;; Defined at:
  1607 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  1610 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  1611 ;;  byte            1    2[COMRAM] unsigned char 
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  current_posi    1    4[COMRAM] unsigned char 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      unsigned char 
  1616 ;; Registers used:
  1617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0
  1623 ;;      Params:         3       0
  1624 ;;      Locals:         1       0
  1625 ;;      Temps:          1       0
  1626 ;;      Totals:         5       0
  1627 ;;Total ram usage:        5 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; This function calls:
  1630 ;;		Nothing
  1631 ;; This function is called by:
  1632 ;;		_main
  1633 ;;		_espi_slave_receive
  1634 ;;		_eserial_receive
  1635 ;;		_espi_master_receive
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text12
  1640  001B06                     __ptext12:
  1641                           	opt stack 0
  1642  001B06                     _buffer_push:
  1643                           	opt stack 29
  1644                           
  1645                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  1646                           
  1647                           ;incstack = 0
  1648  001B06  EE20 F001          	lfsr	2,1
  1649  001B0A  5001               	movf	buffer_push@buffer,w,c
  1650  001B0C  26D9               	addwf	fsr2l,f,c
  1651  001B0E  5002               	movf	buffer_push@buffer+1,w,c
  1652  001B10  22DA               	addwfc	fsr2h,f,c
  1653  001B12  0E20               	movlw	32
  1654  001B14  18DE               	xorwf	postinc2,w,c
  1655  001B16  A4D8               	btfss	status,2,c
  1656  001B18  D002               	goto	l1604
  1657                           
  1658                           ;circular_buffer.c: 27: return 0;
  1659  001B1A  0E00               	movlw	0
  1660  001B1C  0012               	return	
  1661  001B1E                     l1604:
  1662                           
  1663                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  1664                           ;circular_buffer.c: 30: & (0x20 - 1);
  1665  001B1E  EE20 F001          	lfsr	2,1
  1666  001B22  5001               	movf	buffer_push@buffer,w,c
  1667  001B24  26D9               	addwf	fsr2l,f,c
  1668  001B26  5002               	movf	buffer_push@buffer+1,w,c
  1669  001B28  22DA               	addwfc	fsr2h,f,c
  1670  001B2A  50DF               	movf	indf2,w,c
  1671  001B2C  6E04               	movwf	??_buffer_push& (0+255),c
  1672  001B2E  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  1673  001B32  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  1674  001B36  50DF               	movf	indf2,w,c
  1675  001B38  2404               	addwf	??_buffer_push,w,c
  1676  001B3A  0B1F               	andlw	31
  1677  001B3C  6E05               	movwf	buffer_push@current_position,c
  1678                           
  1679                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  1680  001B3E  5005               	movf	buffer_push@current_position,w,c
  1681  001B40  0D01               	mullw	1
  1682  001B42  0E02               	movlw	2
  1683  001B44  26F3               	addwf	prodl,f,c
  1684  001B46  0E00               	movlw	0
  1685  001B48  22F4               	addwfc	prodh,f,c
  1686  001B4A  50F3               	movf	prodl,w,c
  1687  001B4C  2401               	addwf	buffer_push@buffer,w,c
  1688  001B4E  6ED9               	movwf	fsr2l,c
  1689  001B50  50F4               	movf	prodh,w,c
  1690  001B52  2002               	addwfc	buffer_push@buffer+1,w,c
  1691  001B54  6EDA               	movwf	fsr2h,c
  1692  001B56  C003  FFDF         	movff	buffer_push@byte,indf2
  1693                           
  1694                           ;circular_buffer.c: 32: buffer->count++;
  1695  001B5A  EE20 F001          	lfsr	2,1
  1696  001B5E  5001               	movf	buffer_push@buffer,w,c
  1697  001B60  26D9               	addwf	fsr2l,f,c
  1698  001B62  5002               	movf	buffer_push@buffer+1,w,c
  1699  001B64  22DA               	addwfc	fsr2h,f,c
  1700  001B66  2ADF               	incf	indf2,f,c
  1701                           
  1702                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  1703  001B68  EE20 F001          	lfsr	2,1
  1704  001B6C  5001               	movf	buffer_push@buffer,w,c
  1705  001B6E  26D9               	addwf	fsr2l,f,c
  1706  001B70  5002               	movf	buffer_push@buffer+1,w,c
  1707  001B72  22DA               	addwfc	fsr2h,f,c
  1708  001B74  0E20               	movlw	32
  1709  001B76  18DE               	xorwf	postinc2,w,c
  1710  001B78  A4D8               	btfss	status,2,c
  1711  001B7A  D002               	goto	u1040
  1712  001B7C  0E01               	movlw	1
  1713  001B7E  0012               	return	
  1714  001B80                     u1040:
  1715  001B80  0E00               	movlw	0
  1716  001B82  0012               	return	
  1717  001B84  0012               	return		;funcret
  1718  001B86                     __end_of_buffer_push:
  1719                           	opt stack 0
  1720                           tblptru	equ	0xFF8
  1721                           prodh	equ	0xFF4
  1722                           prodl	equ	0xFF3
  1723                           postinc0	equ	0xFEE
  1724                           wreg	equ	0xFE8
  1725                           plusw1	equ	0xFE3
  1726                           indf2	equ	0xFDF
  1727                           postinc2	equ	0xFDE
  1728                           postdec2	equ	0xFDD
  1729                           plusw2	equ	0xFDB
  1730                           fsr2h	equ	0xFDA
  1731                           fsr2l	equ	0xFD9
  1732                           status	equ	0xFD8
  1733                           
  1734 ;; *************** function _espi_setup *****************
  1735 ;; Defined at:
  1736 ;;		line 24 in file "extended_spi.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;  mode            1    wreg     unsigned char 
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;  mode            1    2[COMRAM] unsigned char 
  1741 ;; Return value:  Size  Location     Type
  1742 ;;		None               void
  1743 ;; Registers used:
  1744 ;;		wreg, status,2, status,0, cstack
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMRAM   BANK0
  1750 ;;      Params:         0       0
  1751 ;;      Locals:         1       0
  1752 ;;      Temps:          0       0
  1753 ;;      Totals:         1       0
  1754 ;;Total ram usage:        1 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; Hardware stack levels required when called:    1
  1757 ;; This function calls:
  1758 ;;		_setup_spi
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text13
  1765  00187E                     __ptext13:
  1766                           	opt stack 0
  1767  00187E                     _espi_setup:
  1768                           	opt stack 29
  1769                           
  1770                           ;incstack = 0
  1771                           ;espi_setup@mode stored from wreg
  1772  00187E  6E03               	movwf	espi_setup@mode,c
  1773                           
  1774                           ;extended_spi.c: 26: setup_spi(0, 0x20 | 0x10 | mode);
  1775  001880  5003               	movf	espi_setup@mode,w,c
  1776  001882  0930               	iorlw	48
  1777  001884  6E01               	movwf	setup_spi@SSPCON1_reg,c
  1778  001886  0E00               	movlw	0
  1779  001888  EC96  F00C         	call	_setup_spi
  1780                           
  1781                           ;extended_spi.c: 28: ANSELbits.ANS2 = 0;
  1782  00188C  947E               	bcf	3966,2,c	;volatile
  1783                           
  1784                           ;extended_spi.c: 29: ANSELHbits.ANS8 = 0;
  1785  00188E  907F               	bcf	3967,0,c	;volatile
  1786                           
  1787                           ;extended_spi.c: 31: if (mode == 0x04 || mode == 0x05) {
  1788  001890  0E04               	movlw	4
  1789  001892  1803               	xorwf	espi_setup@mode,w,c
  1790  001894  B4D8               	btfsc	status,2,c
  1791  001896  D004               	goto	l365
  1792  001898  0E05               	movlw	5
  1793  00189A  1803               	xorwf	espi_setup@mode,w,c
  1794  00189C  A4D8               	btfss	status,2,c
  1795  00189E  D004               	goto	l363
  1796  0018A0                     l365:
  1797                           
  1798                           ;extended_spi.c: 32: TRISAbits.RA2 = 0;
  1799  0018A0  9492               	bcf	3986,2,c	;volatile
  1800                           
  1801                           ;extended_spi.c: 33: LATAbits.LATA2 = 0;
  1802  0018A2  9489               	bcf	3977,2,c	;volatile
  1803                           
  1804                           ;extended_spi.c: 34: TRISCbits.RC6 = 1;
  1805  0018A4  8C94               	bsf	3988,6,c	;volatile
  1806                           
  1807                           ;extended_spi.c: 35: } else {
  1808  0018A6  0012               	return	
  1809  0018A8                     l363:
  1810                           
  1811                           ;extended_spi.c: 36: TRISAbits.RA2 = 1;
  1812  0018A8  8492               	bsf	3986,2,c	;volatile
  1813                           
  1814                           ;extended_spi.c: 37: TRISCbits.RC6 = 0;
  1815  0018AA  9C94               	bcf	3988,6,c	;volatile
  1816                           
  1817                           ;extended_spi.c: 38: LATCbits.LATC6 = 0;
  1818  0018AC  9C8B               	bcf	3979,6,c	;volatile
  1819                           
  1820                           ;extended_spi.c: 39: INTCON2bits.INTEDG2 = 1;
  1821  0018AE  88F1               	bsf	intcon2,4,c	;volatile
  1822                           
  1823                           ;extended_spi.c: 40: INTCON3bits.INT2E = 1;
  1824  0018B0  88F0               	bsf	intcon3,4,c	;volatile
  1825  0018B2  0012               	return	
  1826  0018B4  0012               	return		;funcret
  1827  0018B6                     __end_of_espi_setup:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           prodh	equ	0xFF4
  1831                           prodl	equ	0xFF3
  1832                           intcon2	equ	0xFF1
  1833                           intcon3	equ	0xFF0
  1834                           postinc0	equ	0xFEE
  1835                           wreg	equ	0xFE8
  1836                           plusw1	equ	0xFE3
  1837                           indf2	equ	0xFDF
  1838                           postinc2	equ	0xFDE
  1839                           postdec2	equ	0xFDD
  1840                           plusw2	equ	0xFDB
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _setup_spi *****************
  1846 ;; Defined at:
  1847 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;  SSPSTAT_reg     1    wreg     unsigned char 
  1850 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
  1853 ;; Return value:  Size  Location     Type
  1854 ;;		None               void
  1855 ;; Registers used:
  1856 ;;		wreg, status,2, status,0
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMRAM   BANK0
  1862 ;;      Params:         1       0
  1863 ;;      Locals:         1       0
  1864 ;;      Temps:          0       0
  1865 ;;      Totals:         2       0
  1866 ;;Total ram usage:        2 bytes
  1867 ;; Hardware stack levels used:    1
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_espi_setup
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	text14
  1876  00192C                     __ptext14:
  1877                           	opt stack 0
  1878  00192C                     _setup_spi:
  1879                           	opt stack 29
  1880                           
  1881                           ;incstack = 0
  1882                           ;setup_spi@SSPSTAT_reg stored from wreg
  1883  00192C  6E02               	movwf	setup_spi@SSPSTAT_reg,c
  1884                           
  1885                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
  1886  00192E  9E94               	bcf	3988,7,c	;volatile
  1887                           
  1888                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
  1889  001930  947F               	bcf	3967,2,c	;volatile
  1890                           
  1891                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
  1892  001932  8893               	bsf	3987,4,c	;volatile
  1893                           
  1894                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
  1895  001934  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
  1896                           
  1897                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
  1898  001938  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
  1899                           
  1900                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
  1901  00193C  50C6               	movf	4038,w,c	;volatile
  1902  00193E  0B0F               	andlw	15
  1903  001940  0A05               	xorlw	5
  1904  001942  B4D8               	btfsc	status,2,c
  1905  001944  D005               	goto	l290
  1906  001946  50C6               	movf	4038,w,c	;volatile
  1907  001948  0B0F               	andlw	15
  1908  00194A  0A04               	xorlw	4
  1909  00194C  A4D8               	btfss	status,2,c
  1910  00194E  D00A               	goto	l288
  1911  001950                     l290:
  1912                           
  1913                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
  1914  001950  8C93               	bsf	3987,6,c	;volatile
  1915                           
  1916                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
  1917  001952  50C6               	movf	4038,w,c	;volatile
  1918  001954  0B0F               	andlw	15
  1919  001956  0A04               	xorlw	4
  1920  001958  A4D8               	btfss	status,2,c
  1921  00195A  D002               	goto	l291
  1922                           
  1923                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
  1924  00195C  907F               	bcf	3967,0,c	;volatile
  1925                           
  1926                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
  1927  00195E  8C94               	bsf	3988,6,c	;volatile
  1928  001960                     l291:
  1929                           
  1930                           ;spi_pic.c: 26: }
  1931                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
  1932  001960  9EC7               	bcf	4039,7,c	;volatile
  1933                           
  1934                           ;spi_pic.c: 28: } else {
  1935  001962  0012               	return	
  1936  001964                     l288:
  1937                           
  1938                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
  1939  001964  9C93               	bcf	3987,6,c	;volatile
  1940  001966  0012               	return	
  1941  001968  0012               	return		;funcret
  1942  00196A                     __end_of_setup_spi:
  1943                           	opt stack 0
  1944                           tblptru	equ	0xFF8
  1945                           prodh	equ	0xFF4
  1946                           prodl	equ	0xFF3
  1947                           intcon2	equ	0xFF1
  1948                           intcon3	equ	0xFF0
  1949                           postinc0	equ	0xFEE
  1950                           wreg	equ	0xFE8
  1951                           plusw1	equ	0xFE3
  1952                           indf2	equ	0xFDF
  1953                           postinc2	equ	0xFDE
  1954                           postdec2	equ	0xFDD
  1955                           plusw2	equ	0xFDB
  1956                           fsr2h	equ	0xFDA
  1957                           fsr2l	equ	0xFD9
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _eserial_setup *****************
  1961 ;; Defined at:
  1962 ;;		line 21 in file "extended_serial.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  baudrate_bit    1    wreg     unsigned char 
  1965 ;;  baudrate_val    2    7[COMRAM] unsigned int 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  baudrate_bit    1    9[COMRAM] unsigned char 
  1968 ;; Return value:  Size  Location     Type
  1969 ;;		None               void
  1970 ;; Registers used:
  1971 ;;		wreg, status,2, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMRAM   BANK0
  1977 ;;      Params:         2       0
  1978 ;;      Locals:         1       0
  1979 ;;      Temps:          0       0
  1980 ;;      Totals:         3       0
  1981 ;;Total ram usage:        3 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    1
  1984 ;; This function calls:
  1985 ;;		_setup_simple_serial
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text15
  1992  001844                     __ptext15:
  1993                           	opt stack 0
  1994  001844                     _eserial_setup:
  1995                           	opt stack 29
  1996                           
  1997                           ;incstack = 0
  1998                           ;eserial_setup@baudrate_bits stored from wreg
  1999  001844  6E0A               	movwf	eserial_setup@baudrate_bits,c
  2000                           
  2001                           ;extended_serial.c: 23: ANSELbits.ANS5 = 0;
  2002  001846  9A7E               	bcf	3966,5,c	;volatile
  2003                           
  2004                           ;extended_serial.c: 24: ANSELHbits.ANS11 = 0;
  2005  001848  967F               	bcf	3967,3,c	;volatile
  2006                           
  2007                           ;extended_serial.c: 26: TRISCbits.RC0 = 0;
  2008  00184A  9094               	bcf	3988,0,c	;volatile
  2009                           
  2010                           ;extended_serial.c: 27: TRISCbits.RC1 = 1;
  2011  00184C  8294               	bsf	3988,1,c	;volatile
  2012                           
  2013                           ;extended_serial.c: 29: setup_simple_serial(baudrate_bits, baudrate_value);
  2014  00184E  C008  F001         	movff	eserial_setup@baudrate_value,setup_simple_serial@baudrate_value
  2015  001852  C009  F002         	movff	eserial_setup@baudrate_value+1,setup_simple_serial@baudrate_value+1
  2016  001856  500A               	movf	eserial_setup@baudrate_bits,w,c
  2017  001858  ECD7  F00C         	call	_setup_simple_serial
  2018                           
  2019                           ;extended_serial.c: 31: LATCbits.LATC0 = 1;
  2020  00185C  808B               	bsf	3979,0,c	;volatile
  2021  00185E  0012               	return		;funcret
  2022  001860                     __end_of_eserial_setup:
  2023                           	opt stack 0
  2024                           tblptru	equ	0xFF8
  2025                           prodh	equ	0xFF4
  2026                           prodl	equ	0xFF3
  2027                           intcon2	equ	0xFF1
  2028                           intcon3	equ	0xFF0
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           plusw1	equ	0xFE3
  2032                           indf2	equ	0xFDF
  2033                           postinc2	equ	0xFDE
  2034                           postdec2	equ	0xFDD
  2035                           plusw2	equ	0xFDB
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040 ;; *************** function _setup_simple_serial *****************
  2041 ;; Defined at:
  2042 ;;		line 18 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  baudrate_bit    1    wreg     unsigned char 
  2045 ;;  baudrate_val    2    0[COMRAM] unsigned int 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;  baudrate_bit    1    6[COMRAM] unsigned char 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;		None               void
  2050 ;; Registers used:
  2051 ;;		wreg, status,2
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0
  2057 ;;      Params:         2       0
  2058 ;;      Locals:         5       0
  2059 ;;      Temps:          0       0
  2060 ;;      Totals:         7       0
  2061 ;;Total ram usage:        7 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_eserial_setup
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text16
  2071  0019AE                     __ptext16:
  2072                           	opt stack 0
  2073  0019AE                     _setup_simple_serial:
  2074                           	opt stack 29
  2075                           
  2076                           ;incstack = 0
  2077                           ;setup_simple_serial@baudrate_bits stored from wreg
  2078  0019AE  6E07               	movwf	setup_simple_serial@baudrate_bits,c
  2079                           
  2080                           ;serial_pic.c: 20: ANSELHbits.ANS11 = 0;
  2081  0019B0  967F               	bcf	3967,3,c	;volatile
  2082                           
  2083                           ;serial_pic.c: 21: TXSTA = (baudrate_bits & 0x04) ? 0x24: 0x20;
  2084  0019B2  B407               	btfsc	setup_simple_serial@baudrate_bits,2,c
  2085  0019B4  D004               	goto	l1624
  2086  0019B6  0E00               	movlw	0
  2087  0019B8  6E04               	movwf	_setup_simple_serial$211+1,c
  2088  0019BA  0E20               	movlw	32
  2089  0019BC  D003               	goto	L1
  2090  0019BE                     l1624:
  2091  0019BE  0E00               	movlw	0
  2092  0019C0  6E04               	movwf	_setup_simple_serial$211+1,c
  2093  0019C2  0E24               	movlw	36
  2094  0019C4                     L1:
  2095  0019C4  6E03               	movwf	_setup_simple_serial$211,c
  2096  0019C6  D000               	goto	l1626
  2097  0019C8                     l1626:
  2098  0019C8  C003  FFAC         	movff	_setup_simple_serial$211,4012	;volatile
  2099                           
  2100                           ;serial_pic.c: 22: RCSTA = 0x90;
  2101  0019CC  0E90               	movlw	144
  2102  0019CE  6EAB               	movwf	4011,c	;volatile
  2103                           
  2104                           ;serial_pic.c: 23: BAUDCON = (baudrate_bits & 0x08) ? 0x08 : 0x00;
  2105  0019D0  B607               	btfsc	setup_simple_serial@baudrate_bits,3,c
  2106  0019D2  D004               	goto	l1632
  2107  0019D4  0E00               	movlw	0
  2108  0019D6  6E06               	movwf	_setup_simple_serial$212+1,c
  2109  0019D8  0E00               	movlw	0
  2110  0019DA  D003               	goto	L2
  2111  0019DC                     l1632:
  2112  0019DC  0E00               	movlw	0
  2113  0019DE  6E06               	movwf	_setup_simple_serial$212+1,c
  2114  0019E0  0E08               	movlw	8
  2115  0019E2                     L2:
  2116  0019E2  6E05               	movwf	_setup_simple_serial$212,c
  2117  0019E4  D000               	goto	l1634
  2118  0019E6                     l1634:
  2119  0019E6  C005  FFB8         	movff	_setup_simple_serial$212,4024	;volatile
  2120                           
  2121                           ;serial_pic.c: 25: SPBRGH = baudrate_value >> 8;
  2122  0019EA  5002               	movf	setup_simple_serial@baudrate_value+1,w,c
  2123  0019EC  6EB0               	movwf	4016,c	;volatile
  2124                           
  2125                           ;serial_pic.c: 26: SPBRG = baudrate_value;
  2126  0019EE  C001  FFAF         	movff	setup_simple_serial@baudrate_value,4015	;volatile
  2127  0019F2  0012               	return		;funcret
  2128  0019F4                     __end_of_setup_simple_serial:
  2129                           	opt stack 0
  2130                           tblptru	equ	0xFF8
  2131                           prodh	equ	0xFF4
  2132                           prodl	equ	0xFF3
  2133                           intcon2	equ	0xFF1
  2134                           intcon3	equ	0xFF0
  2135                           postinc0	equ	0xFEE
  2136                           wreg	equ	0xFE8
  2137                           plusw1	equ	0xFE3
  2138                           indf2	equ	0xFDF
  2139                           postinc2	equ	0xFDE
  2140                           postdec2	equ	0xFDD
  2141                           plusw2	equ	0xFDB
  2142                           fsr2h	equ	0xFDA
  2143                           fsr2l	equ	0xFD9
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _eserial_send_data *****************
  2147 ;; Defined at:
  2148 ;;		line 35 in file "extended_serial.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  2151 ;;		 -> main@pic_to_pc(34), 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  value           2    9[COMRAM] int 
  2154 ;;  i               1    8[COMRAM] char 
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      char 
  2157 ;; Registers used:
  2158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0
  2164 ;;      Params:         2       0
  2165 ;;      Locals:         3       0
  2166 ;;      Temps:          0       0
  2167 ;;      Totals:         5       0
  2168 ;;Total ram usage:        5 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    1
  2171 ;; This function calls:
  2172 ;;		_buffer_pop
  2173 ;;		_serial_send_byte
  2174 ;; This function is called by:
  2175 ;;		_main
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           	psect	text17
  2180  00196A                     __ptext17:
  2181                           	opt stack 0
  2182  00196A                     _eserial_send_data:
  2183                           	opt stack 29
  2184                           
  2185                           ;extended_serial.c: 40: int8_t i = 0;
  2186                           
  2187                           ;incstack = 0
  2188  00196A  0E00               	movlw	0
  2189  00196C  6E09               	movwf	eserial_send_data@i,c
  2190                           
  2191                           ;extended_serial.c: 41: int16_t value = buffer_pop(buffer);
  2192  00196E  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  2193  001972  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  2194  001976  EC46  F00D         	call	_buffer_pop	;wreg free
  2195  00197A  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  2196  00197E  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  2197                           
  2198                           ;extended_serial.c: 42: while (value != -1) {
  2199  001982  D00F               	goto	l1834
  2200  001984                     l1828:
  2201                           
  2202                           ;extended_serial.c: 43: serial_send_byte((uint8_t)value);
  2203  001984  500A               	movf	eserial_send_data@value,w,c
  2204  001986  ECE3  F00B         	call	_serial_send_byte
  2205                           
  2206                           ;extended_serial.c: 44: value = buffer_pop(buffer);
  2207  00198A  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  2208  00198E  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  2209  001992  EC46  F00D         	call	_buffer_pop	;wreg free
  2210  001996  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  2211  00199A  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  2212                           
  2213                           ;extended_serial.c: 45: i++;
  2214  00199E  2A09               	incf	eserial_send_data@i,f,c
  2215  0019A0  D000               	goto	l1834
  2216  0019A2                     l1834:
  2217  0019A2  280A               	incf	eserial_send_data@value,w,c
  2218  0019A4  E1EF               	bnz	l1828
  2219  0019A6  280B               	incf	eserial_send_data@value+1,w,c
  2220  0019A8  A4D8               	btfss	status,2,c
  2221  0019AA  D7EC               	goto	l1828
  2222                           
  2223                           ;extended_serial.c: 46: }
  2224                           ;extended_serial.c: 48: return i;
  2225                           ;	Return value of _eserial_send_data is never used
  2226  0019AC  0012               	return		;funcret
  2227  0019AE                     __end_of_eserial_send_data:
  2228                           	opt stack 0
  2229                           tblptru	equ	0xFF8
  2230                           prodh	equ	0xFF4
  2231                           prodl	equ	0xFF3
  2232                           intcon2	equ	0xFF1
  2233                           intcon3	equ	0xFF0
  2234                           postinc0	equ	0xFEE
  2235                           wreg	equ	0xFE8
  2236                           plusw1	equ	0xFE3
  2237                           indf2	equ	0xFDF
  2238                           postinc2	equ	0xFDE
  2239                           postdec2	equ	0xFDD
  2240                           plusw2	equ	0xFDB
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _serial_send_byte *****************
  2246 ;; Defined at:
  2247 ;;		line 66 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;  byte            1    wreg     unsigned char 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  byte            1    0[COMRAM] unsigned char 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;		None               void
  2254 ;; Registers used:
  2255 ;;		wreg
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0
  2261 ;;      Params:         0       0
  2262 ;;      Locals:         1       0
  2263 ;;      Temps:          0       0
  2264 ;;      Totals:         1       0
  2265 ;;Total ram usage:        1 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; This function calls:
  2268 ;;		Nothing
  2269 ;; This function is called by:
  2270 ;;		_main
  2271 ;;		_eserial_send_data
  2272 ;;		_serial_send_data
  2273 ;;		_serial_send_buffer
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text18
  2278  0017C6                     __ptext18:
  2279                           	opt stack 0
  2280  0017C6                     _serial_send_byte:
  2281                           	opt stack 30
  2282                           
  2283                           ;incstack = 0
  2284                           ;serial_send_byte@byte stored from wreg
  2285  0017C6  6E01               	movwf	serial_send_byte@byte,c
  2286                           
  2287                           ;serial_pic.c: 68: while (!TXIF);
  2288  0017C8  D000               	goto	l110
  2289  0017CA                     l110:
  2290  0017CA  A89E               	btfss	3998,4,c	;volatile
  2291  0017CC  D7FE               	goto	l110
  2292                           
  2293                           ;serial_pic.c: 69: TXREG = byte;
  2294  0017CE  C001  FFAD         	movff	serial_send_byte@byte,4013	;volatile
  2295  0017D2  0012               	return		;funcret
  2296  0017D4                     __end_of_serial_send_byte:
  2297                           	opt stack 0
  2298                           tblptru	equ	0xFF8
  2299                           prodh	equ	0xFF4
  2300                           prodl	equ	0xFF3
  2301                           intcon2	equ	0xFF1
  2302                           intcon3	equ	0xFF0
  2303                           postinc0	equ	0xFEE
  2304                           wreg	equ	0xFE8
  2305                           plusw1	equ	0xFE3
  2306                           indf2	equ	0xFDF
  2307                           postinc2	equ	0xFDE
  2308                           postdec2	equ	0xFDD
  2309                           plusw2	equ	0xFDB
  2310                           fsr2h	equ	0xFDA
  2311                           fsr2l	equ	0xFD9
  2312                           status	equ	0xFD8
  2313                           
  2314 ;; *************** function _buffer_pop *****************
  2315 ;; Defined at:
  2316 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2319 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  byte            2    4[COMRAM] int 
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  2    0[COMRAM] int 
  2324 ;; Registers used:
  2325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMRAM   BANK0
  2331 ;;      Params:         2       0
  2332 ;;      Locals:         2       0
  2333 ;;      Temps:          2       0
  2334 ;;      Totals:         6       0
  2335 ;;Total ram usage:        6 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; This function calls:
  2338 ;;		Nothing
  2339 ;; This function is called by:
  2340 ;;		_eserial_send_data
  2341 ;;		_espi_slave_send
  2342 ;;		_espi_master_send
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text19
  2347  001A8C                     __ptext19:
  2348                           	opt stack 0
  2349  001A8C                     _buffer_pop:
  2350                           	opt stack 29
  2351                           
  2352                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
  2353                           
  2354                           ;incstack = 0
  2355  001A8C  EE20 F001          	lfsr	2,1
  2356  001A90  5001               	movf	buffer_pop@buffer,w,c
  2357  001A92  26D9               	addwf	fsr2l,f,c
  2358  001A94  5002               	movf	buffer_pop@buffer+1,w,c
  2359  001A96  22DA               	addwfc	fsr2h,f,c
  2360  001A98  50DF               	movf	indf2,w,c
  2361  001A9A  A4D8               	btfss	status,2,c
  2362  001A9C  D003               	goto	l1662
  2363                           
  2364                           ;circular_buffer.c: 40: return -1;
  2365  001A9E  6801               	setf	?_buffer_pop,c
  2366  001AA0  6802               	setf	?_buffer_pop+1,c
  2367  001AA2  0012               	return	
  2368  001AA4                     l1662:
  2369                           
  2370                           ;circular_buffer.c: 41: }
  2371                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2372  001AA4  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2373  001AA8  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2374  001AAC  50DF               	movf	indf2,w,c
  2375  001AAE  6E03               	movwf	??_buffer_pop& (0+255),c
  2376  001AB0  5003               	movf	??_buffer_pop,w,c
  2377  001AB2  0D01               	mullw	1
  2378  001AB4  0E02               	movlw	2
  2379  001AB6  26F3               	addwf	prodl,f,c
  2380  001AB8  0E00               	movlw	0
  2381  001ABA  22F4               	addwfc	prodh,f,c
  2382  001ABC  50F3               	movf	prodl,w,c
  2383  001ABE  2401               	addwf	buffer_pop@buffer,w,c
  2384  001AC0  6ED9               	movwf	fsr2l,c
  2385  001AC2  50F4               	movf	prodh,w,c
  2386  001AC4  2002               	addwfc	buffer_pop@buffer+1,w,c
  2387  001AC6  6EDA               	movwf	fsr2h,c
  2388  001AC8  50DF               	movf	indf2,w,c
  2389  001ACA  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  2390  001ACC  5004               	movf	??_buffer_pop+1,w,c
  2391  001ACE  6E05               	movwf	buffer_pop@byte,c
  2392  001AD0  6A06               	clrf	buffer_pop@byte+1,c
  2393                           
  2394                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  2395  001AD2  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2396  001AD6  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2397  001ADA  50DF               	movf	indf2,w,c
  2398  001ADC  6E03               	movwf	??_buffer_pop& (0+255),c
  2399  001ADE  2803               	incf	??_buffer_pop,w,c
  2400  001AE0  0B1F               	andlw	31
  2401  001AE2  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2402  001AE6  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2403  001AEA  6EDF               	movwf	indf2,c
  2404                           
  2405                           ;circular_buffer.c: 45: buffer->count--;
  2406  001AEC  EE20 F001          	lfsr	2,1
  2407  001AF0  5001               	movf	buffer_pop@buffer,w,c
  2408  001AF2  26D9               	addwf	fsr2l,f,c
  2409  001AF4  5002               	movf	buffer_pop@buffer+1,w,c
  2410  001AF6  22DA               	addwfc	fsr2h,f,c
  2411  001AF8  06DF               	decf	indf2,f,c
  2412                           
  2413                           ;circular_buffer.c: 47: return byte;
  2414  001AFA  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  2415  001AFE  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  2416  001B02  0012               	return	
  2417  001B04  0012               	return		;funcret
  2418  001B06                     __end_of_buffer_pop:
  2419                           	opt stack 0
  2420                           tblptru	equ	0xFF8
  2421                           prodh	equ	0xFF4
  2422                           prodl	equ	0xFF3
  2423                           intcon2	equ	0xFF1
  2424                           intcon3	equ	0xFF0
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           plusw1	equ	0xFE3
  2428                           indf2	equ	0xFDF
  2429                           postinc2	equ	0xFDE
  2430                           postdec2	equ	0xFDD
  2431                           plusw2	equ	0xFDB
  2432                           fsr2h	equ	0xFDA
  2433                           fsr2l	equ	0xFD9
  2434                           status	equ	0xFD8
  2435                           
  2436 ;; *************** function _buffer_empty *****************
  2437 ;; Defined at:
  2438 ;;		line 14 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2441 ;;		 -> main@pic_to_pic(34), 
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;		None
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      unsigned char 
  2446 ;; Registers used:
  2447 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0
  2453 ;;      Params:         2       0
  2454 ;;      Locals:         0       0
  2455 ;;      Temps:          0       0
  2456 ;;      Totals:         2       0
  2457 ;;Total ram usage:        2 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_main
  2463 ;;		_espi_master_receive
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text20
  2468  001828                     __ptext20:
  2469                           	opt stack 0
  2470  001828                     _buffer_empty:
  2471                           	opt stack 30
  2472                           
  2473                           ;circular_buffer.c: 16: return (buffer->count == 0) ? 1 : 0;
  2474                           
  2475                           ;incstack = 0
  2476  001828  EE20 F001          	lfsr	2,1
  2477  00182C  5001               	movf	buffer_empty@buffer,w,c
  2478  00182E  26D9               	addwf	fsr2l,f,c
  2479  001830  5002               	movf	buffer_empty@buffer+1,w,c
  2480  001832  22DA               	addwfc	fsr2h,f,c
  2481  001834  50DF               	movf	indf2,w,c
  2482  001836  A4D8               	btfss	status,2,c
  2483  001838  D002               	goto	u1220
  2484  00183A  0E01               	movlw	1
  2485  00183C  0012               	return	
  2486  00183E                     u1220:
  2487  00183E  0E00               	movlw	0
  2488  001840  0012               	return	
  2489  001842  0012               	return		;funcret
  2490  001844                     __end_of_buffer_empty:
  2491                           	opt stack 0
  2492  0000                     tblptru	equ	0xFF8
  2493                           prodh	equ	0xFF4
  2494                           prodl	equ	0xFF3
  2495                           intcon2	equ	0xFF1
  2496                           intcon3	equ	0xFF0
  2497                           postinc0	equ	0xFEE
  2498                           wreg	equ	0xFE8
  2499                           plusw1	equ	0xFE3
  2500                           indf2	equ	0xFDF
  2501                           postinc2	equ	0xFDE
  2502                           postdec2	equ	0xFDD
  2503                           plusw2	equ	0xFDB
  2504                           fsr2h	equ	0xFDA
  2505                           fsr2l	equ	0xFD9
  2506                           status	equ	0xFD8
  2507                           tblptru	equ	0xFF8
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           intcon2	equ	0xFF1
  2511                           intcon3	equ	0xFF0
  2512                           postinc0	equ	0xFEE
  2513                           wreg	equ	0xFE8
  2514                           plusw1	equ	0xFE3
  2515                           indf2	equ	0xFDF
  2516                           postinc2	equ	0xFDE
  2517                           postdec2	equ	0xFDD
  2518                           plusw2	equ	0xFDB
  2519                           fsr2h	equ	0xFDA
  2520                           fsr2l	equ	0xFD9
  2521                           status	equ	0xFD8
  2522                           
  2523                           	psect	rparam
  2524  0000                     tblptru	equ	0xFF8
  2525                           prodh	equ	0xFF4
  2526                           prodl	equ	0xFF3
  2527                           intcon2	equ	0xFF1
  2528                           intcon3	equ	0xFF0
  2529                           postinc0	equ	0xFEE
  2530                           wreg	equ	0xFE8
  2531                           plusw1	equ	0xFE3
  2532                           indf2	equ	0xFDF
  2533                           postinc2	equ	0xFDE
  2534                           postdec2	equ	0xFDD
  2535                           plusw2	equ	0xFDB
  2536                           fsr2h	equ	0xFDA
  2537                           fsr2l	equ	0xFD9
  2538                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      90
    BANK0           160      0      68

Pointer List with Targets:

    espi_slave_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    espi_slave_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    spi_slave_peek_receive@byte	PTR int  size(2) Largest target is 2
		 -> main@value_98(COMRAM[2]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_empty@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    eserial_send_data@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    serial_send_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_load_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_disable_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    S137interrupt_serial$data	PTR unsigned char  size(2) Largest target is 0

    serial_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_espi_slave_send
    _spi_slave_peek_receive->_spi_slave_get_byte
    _espi_slave_send->_buffer_peek
    _espi_slave_send->_buffer_pop
    _espi_slave_send->_encode_data
    _espi_slave_receive->_buffer_push
    _espi_slave_receive->_decode_data
    _espi_setup->_setup_spi
    _eserial_setup->_setup_simple_serial
    _eserial_send_data->_buffer_pop

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                73    73      0    6776
                                             17 COMRAM    72    72      0
                       _buffer_empty
                        _buffer_push
                  _eserial_send_data
                      _eserial_setup
                         _espi_setup
                 _espi_slave_receive
                    _espi_slave_send
                   _serial_send_byte
                       _setup_timer3
             _spi_slave_peek_receive
 ---------------------------------------------------------------------------------
 (1) _spi_slave_peek_receive                               3     1      2     132
                                              3 COMRAM     3     1      2
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _espi_slave_send                                     11     9      2    2112
                                              6 COMRAM    11     9      2
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                  _spi_send_get_byte
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     644
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     345
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_slave_receive                                   6     4      2    2051
                                              5 COMRAM     6     4      2
                        _buffer_push
                       _buffer_space
                        _decode_data
                  _spi_send_get_byte
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (2) _spi_slave_get_byte                                   3     1      2      24
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _spi_send_get_byte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     278
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     945
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _eserial_setup                                        3     1      2     308
                                              7 COMRAM     3     1      2
                _setup_simple_serial
 ---------------------------------------------------------------------------------
 (2) _setup_simple_serial                                  7     5      2     200
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _eserial_send_data                                    5     3      2     595
                                              6 COMRAM     5     3      2
                         _buffer_pop
                   _serial_send_byte
 ---------------------------------------------------------------------------------
 (1) _serial_send_byte                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     411
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _buffer_empty                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buffer_empty
   _buffer_push
   _eserial_send_data
     _buffer_pop
     _serial_send_byte
   _eserial_setup
     _setup_simple_serial
   _espi_setup
     _setup_spi
   _espi_slave_receive
     _buffer_push
     _buffer_space
     _decode_data
     _spi_send_get_byte
     _spi_slave_get_byte
   _espi_slave_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _spi_send_get_byte
   _serial_send_byte
   _setup_timer3
   _spi_slave_peek_receive
     _spi_slave_get_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0      44       3       42.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5A       1       94.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9E       4        0.0%
DATA                 0      0      9E       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Aug 03 13:01:31 2015

                  _espi_slave_send 1CEE                        _SSPSTATbits 000FC7  
           eserial_send_data@value 000A                 _espi_slave_receive 1B86  
          ?_spi_slave_peek_receive 0004            eserial_send_data@buffer 0007  
                              l110 17CA                                l312 1876  
                              l309 1862                                l290 1950  
                              l291 1960                                l363 18A8  
                              l365 18A0                                l288 1964  
                              l296 17EE                                wreg 000FE8  
                     __CFG_FOSC$HS 000000                ?_espi_slave_receive 0006  
                     __CFG_LVP$OFF 000000                               l1604 1B1E  
                             l1632 19DC                               l1624 19BE  
                             l1800 1B8C                               l1634 19E6  
                             l1626 19C8                               l1650 1900  
                             l1812 1BB4                               l1662 1AA4  
                             l1654 1910                               l1806 1BA0  
                             l1750 18E2                               l1816 1BDA  
                             l1834 19A2                               l1818 1BF0  
                             l1746 18DC                               l1850 1C6C  
                             l1828 1984                               l1684 1A52  
                             l1852 1C86                               l1844 1C4A  
                             l1782 1DAC                               l1774 1D7A  
                             l1862 1CBE                               l1792 1DE2  
                             l1768 1D4C                               l1848 1C66  
                             l1788 1DCA                               l1868 1CDC  
      __size_of_spi_slave_get_byte 001E                               u1040 1B80  
                             u1220 183E                               u1411 1C14  
                             u1260 18EA                               u1421 1C26  
                             _RCIE 007CED                               _RCIF 007CF5  
           __size_of_eserial_setup 001C                               _TMR3 000FB2  
                             _TXIE 007CEC                               _TXIF 007CF4  
                             _main 1C0A                               fsr2h 000FDA  
                             indf2 000FDF                               fsr2l 000FD9  
                             prodh 000FF4                               prodl 000FF3  
                             start 0002              spi_send_get_byte@byte 0001  
                   ??_buffer_count 0003                     ??_buffer_empty 0003  
                   ??_buffer_space 0003               ??_espi_slave_receive 0008  
                     ___param_bank 000010               setup_spi@SSPCON1_reg 0001  
   __end_of_spi_slave_peek_receive 18F0                              ?_main 0001  
                            _T3CON 000FB1                              _RCREG 000FAE  
                            _RCSTA 000FAB                              _SPBRG 000FAF  
                            _TXREG 000FAD                              _TXSTA 000FAC  
             __size_of_decode_data 003C                       main@value_98 0014  
                            main@i 0012               serial_send_byte@byte 0001  
                            plusw1 000FE3                              plusw2 000FDB  
                            status 000FD8            __end_of_espi_slave_send 1E00  
             setup_spi@SSPSTAT_reg 0002                   buffer_pop@buffer 0001  
                  __initialization 1810                       __end_of_main 1CEE  
                    _eserial_setup 1844                             ??_main 0012  
                _spi_send_get_byte 17E6                      __activetblptr 000002  
               ?_spi_send_get_byte 0001                  buffer_peek@buffer 0001  
                  encode_data@data 0006       espi_slave_receive@received_1 000A  
     espi_slave_receive@received_2 000B                ??_spi_send_get_byte 0001  
                           _INT2IF 007F81                             _INTCON 000FF2  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
         __end_of_serial_send_byte 17D4                    decode_data@data 0001  
                    main@pic_to_pc 0016               __size_of_encode_data 0046  
                   ?_eserial_setup 0008               __size_of_buffer_peek 0052  
             __size_of_buffer_push 0080          __end_of_spi_send_get_byte 17FA  
                           clear_0 1816        __end_of_setup_simple_serial 19F4  
             __end_of_buffer_count 17E6               __end_of_buffer_empty 1844  
                           tblptru 000FF8              setup_timer3@T3CON_reg 0001  
             __end_of_buffer_space 1810                         __accesstop 0060  
          __end_of__initialization 181E                   ?_espi_slave_send 0007  
                    ___rparam_used 000001                     __pcstackCOMRAM 0001  
               buffer_count@buffer 0001           espi_slave_receive@buffer 0006  
                   buffer_pop@byte 0005                  _eserial_send_data 196A  
               ?_eserial_send_data 0007                 buffer_empty@buffer 0001  
                       __pbssBANK0 0060                ??_eserial_send_data 0009  
                  ??_eserial_setup 000A         __size_of_spi_send_get_byte 0014  
                          _BAUDCON 000FB8          __end_of_eserial_send_data 19AE  
                buffer_push@buffer 0001                 __size_of_setup_spi 003E  
       __end_of_spi_slave_get_byte 187E                         _buffer_pop 1A8C  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
           spi_slave_get_byte@byte 0003                     main@pic_to_pic 0038  
   spi_slave_peek_receive@get_byte 0006                            __Hparam 0000  
                          __Lparam 0000        __size_of_espi_slave_receive 0084  
                       _espi_setup 187E                         _dummy_byte 005A  
                          __pcinit 1810                          _ANSELbits 000F7E  
                          __ramtop 0100              __size_of_buffer_count 0012  
            __size_of_buffer_empty 001C                            __ptext0 1C0A  
                          __ptext1 18B6                            __ptext2 17BE  
                          __ptext3 1CEE                            __ptext4 19F4  
                          __ptext5 1A3A                            __ptext6 17D4  
                          __ptext7 1B86                            __ptext8 1860  
                          __ptext9 17E6              __size_of_buffer_space 0016  
                    ??_decode_data 0005              espi_slave_send@buffer 0007  
            espi_slave_send@byte_1 0010              espi_slave_send@byte_2 0011  
             end_of_initialization 181E                      __Lmediumconst 0000  
                ?_serial_send_byte 0001                       _buffer_count 17D4  
                     _buffer_empty 1828                  __end_of_setup_spi 196A  
               ??_serial_send_byte 0001                       _buffer_space 17FA  
                        _RCSTAbits 000FAB                            postdec2 000FDD  
        espi_slave_send@received_1 000C          espi_slave_send@received_2 000E  
                          postinc0 000FEE                            postinc2 000FDE  
       eserial_setup@baudrate_bits 000A         __size_of_eserial_send_data 0044  
                        _PORTCbits 000F82                      ?_setup_timer3 0001  
                        _TRISAbits 000F92                          _TRISBbits 000F93  
                        _TRISCbits 000F94                        ?_buffer_pop 0001  
              __end_of_decode_data 192C                      ??_encode_data 0005  
                    ??_buffer_peek 0003                      ??_buffer_push 0004  
         ??_spi_slave_peek_receive 0006                        ?_espi_setup 0001  
                  buffer_peek@byte 0005                     espi_setup@mode 0003  
                   ??_setup_timer3 0001                start_initialization 1810  
     __size_of_setup_simple_serial 0046                 buffer_space@buffer 0001  
                  buffer_push@byte 0003                __end_of_encode_data 1A3A  
              __size_of_buffer_pop 007A           __size_of_espi_slave_send 0112  
              __end_of_buffer_peek 1A8C                __end_of_buffer_push 1B86  
                      _decode_data 18F0                        __pbssCOMRAM 005A  
          espi_slave_receive@value 0009                __size_of_espi_setup 0038  
               _spi_slave_get_byte 1860    __size_of_spi_slave_peek_receive 003A  
            __end_of_eserial_setup 1860                ?_spi_slave_get_byte 0001  
                encode_data@byte_1 0001                  encode_data@byte_2 0003  
 setup_simple_serial@baudrate_bits 0007               ??_spi_slave_get_byte 0003  
                         _LATAbits 000F89                           _LATCbits 000F8B  
                      _encode_data 19F4         __end_of_espi_slave_receive 1C0A  
                         _PIE2bits 000FA0               __end_of_setup_timer3 17C6  
                         _PIR2bits 000FA1                        _buffer_peek 1A3A  
                      _buffer_push 1B06                          main@F4041 0060  
                        main@F4043 0082                          _setup_spi 192C  
        __size_of_serial_send_byte 000E                  ??_espi_slave_send 0009  
           _spi_slave_peek_receive 18B6                       ??_buffer_pop 0003  
       spi_slave_peek_receive@byte 0004                  decode_data@byte_1 0003  
                decode_data@byte_2 0004                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                           __Hrparam 0000  
                         __Lrparam 0000                       ??_espi_setup 0003  
               __end_of_buffer_pop 1B06                         ?_setup_spi 0001  
               eserial_send_data@i 0009                _setup_simple_serial 19AE  
                       _ANSELHbits 000F7F                           __ptext10 18F0  
                         __ptext11 17FA                           __ptext20 1828  
                         __ptext12 1B06                           __ptext13 187E  
                         __ptext14 192C                           __ptext15 1844  
                         __ptext16 19AE                           __ptext17 196A  
                         __ptext18 17C6                           __ptext19 1A8C  
             ?_setup_simple_serial 0001                 __end_of_espi_setup 18B6  
                    __size_of_main 00E4                       ?_decode_data 0001  
            ??_setup_simple_serial 0003              __size_of_setup_timer3 0008  
                      ??_setup_spi 0002                   _serial_send_byte 17C6  
                     _setup_timer3 17BE        buffer_push@current_position 0005  
                      _SSPCON1bits 000FC6        eserial_setup@baudrate_value 0008  
                     ?_encode_data 0001  setup_simple_serial@baudrate_value 0001  
      espi_slave_send@byte_to_send 000A                      ?_buffer_count 0001  
                    ?_buffer_empty 0001                       ?_buffer_peek 0001  
                    ?_buffer_space 0001            _setup_simple_serial$211 0003  
          _setup_simple_serial$212 0005                       ?_buffer_push 0001  
