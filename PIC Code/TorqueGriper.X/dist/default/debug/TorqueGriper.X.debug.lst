

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Jul 28 17:07:52 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    24  0000                     _ANSELHbits	set	3967
    25  0000                     _ANSELbits	set	3966
    26  0000                     _BAUDCON	set	4024
    27  0000                     _INTCON	set	4082
    28  0000                     _LATCbits	set	3979
    29  0000                     _RCREG	set	4014
    30  0000                     _RCSTA	set	4011
    31  0000                     _RCSTAbits	set	4011
    32  0000                     _SPBRG	set	4015
    33  0000                     _SPBRGH	set	4016
    34  0000                     _TRISCbits	set	3988
    35  0000                     _TXREG	set	4013
    36  0000                     _TXSTA	set	4012
    37  0000                     _RCIE	set	31981
    38  0000                     _RCIF	set	31989
    39  0000                     _TXIE	set	31980
    40  0000                     _TXIF	set	31988
    41                           
    42                           ; 0 bytes @ 0x20
    43 ;;
    44 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
    45 ;;
    46 ;; *************** function _main *****************
    47 ;; Defined at:
    48 ;;		line 23 in file "main.c"
    49 ;; Parameters:    Size  Location     Type
    50 ;;		None
    51 ;; Auto vars:     Size  Location     Type
    52 ;;		None
    53 ;; Return value:  Size  Location     Type
    54 ;;                  2   16[None  ] int 
    55 ;; Registers used:
    56 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
    57 ;; Tracked objects:
    58 ;;		On entry : 0/0
    59 ;;		On exit  : 0/0
    60 ;;		Unchanged: 0/0
    61 ;; Data sizes:     COMRAM   BANK0
    62 ;;      Params:         0       0
    63 ;;      Locals:         0       0
    64 ;;      Temps:          0       1
    65 ;;      Totals:         0       1
    66 ;;Total ram usage:        1 bytes
    67 ;; Hardware stack levels required when called:    5
    68 ;; This function calls:
    69 ;;		_eserial_send_data
    70 ;;		_eserial_setup
    71 ;; This function is called by:
    72 ;;		Startup code after reset
    73 ;; This function uses a non-reentrant model
    74 ;;
    75                           
    76                           	psect	text0
    77  000092                     __ptext0:
    78                           	opt stack 0
    79  000092                     _main:
    80                           	opt stack 26
    81                           
    82                           ;main.c: 25: eserial_setup(0x08 | 0x04, 0x04);
    83                           
    84                           ;incstack = 0
    85  000092  0E00               	movlw	0
    86  000094  6E48               	movwf	eserial_setup@baudrate_value+1,c
    87  000096  0E04               	movlw	4
    88  000098  6E47               	movwf	eserial_setup@baudrate_value,c
    89  00009A  0E0C               	movlw	12
    90  00009C  EC7D  F001         	call	_eserial_setup
    91  0000A0  D000               	goto	l1256
    92  0000A2                     l1256:
    93                           
    94                           ;main.c: 28: eserial_send_data(&my_buffer);
    95  0000A2  0E07               	movlw	low _my_buffer
    96  0000A4  6E46               	movwf	eserial_send_data@buffer,c
    97  0000A6  0E00               	movlw	high _my_buffer
    98  0000A8  6E47               	movwf	eserial_send_data@buffer+1,c
    99  0000AA  ECC4  F000         	call	_eserial_send_data	;wreg free
   100                           
   101                           ;main.c: 29: _delay((unsigned long)((10)*(20000000/4000.0)));
   102  0000AE  0E41               	movlw	65
   103  0000B0  0100               	movlb	0	; () banked
   104  0000B2  6F63               	movwf	??_main& (0+255),b
   105  0000B4  0EEE               	movlw	238
   106  0000B6                     u707:
   107  0000B6  2EE8               	decfsz	wreg,f,c
   108  0000B8  D7FE               	goto	u707
   109  0000BA  2F63               	decfsz	??_main& (0+255),f,b
   110  0000BC  D7FC               	goto	u707
   111  0000BE  D000               	nop2	
   112                           
   113                           ;main.c: 30: _delay((unsigned long)((10)*(20000000/4000.0)));
   114  0000C0  0E41               	movlw	65
   115  0000C2  0100               	movlb	0	; () banked
   116  0000C4  6F63               	movwf	??_main& (0+255),b
   117  0000C6  0EEE               	movlw	238
   118  0000C8                     u717:
   119  0000C8  2EE8               	decfsz	wreg,f,c
   120  0000CA  D7FE               	goto	u717
   121  0000CC  2F63               	decfsz	??_main& (0+255),f,b
   122  0000CE  D7FC               	goto	u717
   123  0000D0  D000               	nop2	
   124                           
   125                           ;main.c: 31: _delay((unsigned long)((10)*(20000000/4000.0)));
   126  0000D2  0E41               	movlw	65
   127  0000D4  0100               	movlb	0	; () banked
   128  0000D6  6F63               	movwf	??_main& (0+255),b
   129  0000D8  0EEE               	movlw	238
   130  0000DA                     u727:
   131  0000DA  2EE8               	decfsz	wreg,f,c
   132  0000DC  D7FE               	goto	u727
   133  0000DE  2F63               	decfsz	??_main& (0+255),f,b
   134  0000E0  D7FC               	goto	u727
   135  0000E2  D000               	nop2	
   136                           
   137                           ;main.c: 32: _delay((unsigned long)((10)*(20000000/4000.0)));
   138  0000E4  0E41               	movlw	65
   139  0000E6  0100               	movlb	0	; () banked
   140  0000E8  6F63               	movwf	??_main& (0+255),b
   141  0000EA  0EEE               	movlw	238
   142  0000EC                     u737:
   143  0000EC  2EE8               	decfsz	wreg,f,c
   144  0000EE  D7FE               	goto	u737
   145  0000F0  2F63               	decfsz	??_main& (0+255),f,b
   146  0000F2  D7FC               	goto	u737
   147  0000F4  D000               	nop2	
   148                           
   149                           ;main.c: 33: _delay((unsigned long)((10)*(20000000/4000.0)));
   150  0000F6  0E41               	movlw	65
   151  0000F8  0100               	movlb	0	; () banked
   152  0000FA  6F63               	movwf	??_main& (0+255),b
   153  0000FC  0EEE               	movlw	238
   154  0000FE                     u747:
   155  0000FE  2EE8               	decfsz	wreg,f,c
   156  000100  D7FE               	goto	u747
   157  000102  2F63               	decfsz	??_main& (0+255),f,b
   158  000104  D7FC               	goto	u747
   159  000106  D000               	nop2	
   160  000108  D7CC               	goto	l1256
   161                           
   162                           ;main.c: 34: }
   163                           ;main.c: 36: return (0);
   164                           ;	Return value of _main is never used
   165  00010A  EF47  F000         	goto	start
   166  00010E                     __end_of_main:
   167                           	opt stack 0
   168                           wreg	equ	0xFE8
   169                           
   170                           	psect	cinit
   171  00034C                     __pcinit:
   172                           	opt stack 0
   173  00034C                     start_initialization:
   174                           	opt stack 0
   175  00034C                     __initialization:
   176                           	opt stack 0
   177                           
   178                           ; Clear objects allocated to COMRAM (40 bytes)
   179  00034C  EE00  F001         	lfsr	0,__pbssCOMRAM
   180  000350  0E28               	movlw	40
   181  000352                     clear_0:
   182  000352  6AEE               	clrf	postinc0,c
   183  000354  06E8               	decf	wreg,f,c
   184  000356  E1FD               	bnz	clear_0
   185  000358                     end_of_initialization:
   186                           	opt stack 0
   187  000358                     __end_of__initialization:
   188                           	opt stack 0
   189  000358  0100               	movlb	0
   190  00035A  EF49  F000         	goto	_main	;jump to C main() function
   191                           postinc0	equ	0xFEE
   192                           wreg	equ	0xFE8
   193                           
   194                           	psect	bssCOMRAM
   195  000001                     __pbssCOMRAM:
   196                           	opt stack 0
   197  000001                     _interrupt_data:
   198                           	opt stack 0
   199  000001                     	ds	6
   200  000007                     _my_buffer:
   201                           	opt stack 0
   202  000007                     	ds	34
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           
   206                           	psect	cstackBANK0
   207  000060                     __pcstackBANK0:
   208                           	opt stack 0
   209  000060                     eserial_setup@baudrate_bits:
   210                           	opt stack 0
   211  000060                     eserial_send_data@i:
   212                           	opt stack 0
   213                           
   214                           ; 1 bytes @ 0x0
   215  000060                     	ds	1
   216  000061                     eserial_send_data@value:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x1
   220  000061                     	ds	2
   221  000063                     ??_main:
   222                           
   223                           ; 0 bytes @ 0x3
   224  000063                     	ds	1
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	cstackCOMRAM
   229  000029                     __pcstackCOMRAM:
   230                           	opt stack 0
   231  000029                     buffer_push@buffer:
   232                           	opt stack 0
   233  000029                     i2buffer_space@buffer:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x0
   237  000029                     	ds	2
   238  00002B                     buffer_push@byte:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0x2
   242  00002B                     	ds	1
   243  00002C                     ??_buffer_push:
   244                           
   245                           ; 0 bytes @ 0x3
   246  00002C                     	ds	1
   247  00002D                     buffer_push@current_position:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x4
   251  00002D                     	ds	1
   252  00002E                     eserial_receive@buffer:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x5
   256  00002E                     	ds	2
   257  000030                     ??_eserial_receive:
   258                           
   259                           ; 0 bytes @ 0x7
   260  000030                     	ds	1
   261  000031                     eserial_receive@value:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x8
   265  000031                     	ds	1
   266  000032                     ??_isr:
   267                           
   268                           ; 0 bytes @ 0x9
   269  000032                     	ds	14
   270  000040                     ??_serial_interrupts:
   271  000040                     ?_buffer_pop:
   272                           	opt stack 0
   273  000040                     serial_send_byte@byte:
   274                           	opt stack 0
   275  000040                     setup_simple_serial@baudrate_value:
   276                           	opt stack 0
   277  000040                     buffer_space@buffer:
   278                           	opt stack 0
   279  000040                     buffer_pop@buffer:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x17
   283  000040                     	ds	1
   284  000041                     serial_interrupts@interrupts:
   285                           	opt stack 0
   286                           
   287                           ; 1 bytes @ 0x18
   288  000041                     	ds	1
   289  000042                     ??_buffer_pop:
   290  000042                     _setup_simple_serial$173:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x19
   294  000042                     	ds	2
   295  000044                     _setup_simple_serial$174:
   296                           	opt stack 0
   297  000044                     buffer_pop@byte:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x1B
   301  000044                     	ds	2
   302  000046                     setup_simple_serial@baudrate_bits:
   303                           	opt stack 0
   304  000046                     eserial_send_data@buffer:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x1D
   308  000046                     	ds	1
   309  000047                     eserial_setup@baudrate_value:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x1E
   313  000047                     	ds	1
   314  000048                     ??_eserial_send_data:
   315                           
   316                           ; 0 bytes @ 0x1F
   317  000048                     	ds	1
   318  000049                     postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321 ;; *************** function _eserial_setup *****************
   322 ;; Defined at:
   323 ;;		line 20 in file "extended_serial.c"
   324 ;; Parameters:    Size  Location     Type
   325 ;;  baudrate_bit    1    wreg     unsigned char 
   326 ;;  baudrate_val    2   30[COMRAM] unsigned int 
   327 ;; Auto vars:     Size  Location     Type
   328 ;;  baudrate_bit    1    0[BANK0 ] unsigned char 
   329 ;; Return value:  Size  Location     Type
   330 ;;		None               void
   331 ;; Registers used:
   332 ;;		wreg, status,2, status,0, cstack
   333 ;; Tracked objects:
   334 ;;		On entry : 0/0
   335 ;;		On exit  : 0/0
   336 ;;		Unchanged: 0/0
   337 ;; Data sizes:     COMRAM   BANK0
   338 ;;      Params:         2       0
   339 ;;      Locals:         0       1
   340 ;;      Temps:          0       0
   341 ;;      Totals:         2       1
   342 ;;Total ram usage:        3 bytes
   343 ;; Hardware stack levels used:    1
   344 ;; Hardware stack levels required when called:    4
   345 ;; This function calls:
   346 ;;		_serial_interrupts
   347 ;;		_setup_simple_serial
   348 ;; This function is called by:
   349 ;;		_main
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353                           	psect	text1
   354  0002FA                     __ptext1:
   355                           	opt stack 0
   356  0002FA                     _eserial_setup:
   357                           	opt stack 26
   358                           
   359                           ;incstack = 0
   360                           ;eserial_setup@baudrate_bits stored from wreg
   361  0002FA  0100               	movlb	0	; () banked
   362  0002FC  6F60               	movwf	eserial_setup@baudrate_bits& (0+255),b
   363                           
   364                           ; BSR set to: 0
   365                           ;extended_serial.c: 22: ANSELbits.ANS5 = 0;
   366  0002FE  9A7E               	bcf	3966,5,c	;volatile
   367                           
   368                           ;extended_serial.c: 23: ANSELHbits.ANS11 = 0;
   369  000300  967F               	bcf	3967,3,c	;volatile
   370                           
   371                           ;extended_serial.c: 25: TRISCbits.RC0 = 0;
   372  000302  9094               	bcf	3988,0,c	;volatile
   373                           
   374                           ;extended_serial.c: 26: TRISCbits.RC1 = 1;
   375  000304  8294               	bsf	3988,1,c	;volatile
   376                           
   377                           ; BSR set to: 0
   378                           ;extended_serial.c: 28: setup_simple_serial(baudrate_bits, baudrate_value);
   379  000306  C047  F040         	movff	eserial_setup@baudrate_value,setup_simple_serial@baudrate_value
   380  00030A  C048  F041         	movff	eserial_setup@baudrate_value+1,setup_simple_serial@baudrate_value+1
   381  00030E  0100               	movlb	0	; () banked
   382  000310  5160               	movf	eserial_setup@baudrate_bits& (0+255),w,b
   383  000312  EC2A  F001         	call	_setup_simple_serial
   384                           
   385                           ;extended_serial.c: 29: serial_interrupts(0x01);
   386  000316  0E01               	movlw	1
   387  000318  EC67  F001         	call	_serial_interrupts
   388                           
   389                           ;extended_serial.c: 31: LATCbits.LATC0 = 0;
   390  00031C  908B               	bcf	3979,0,c	;volatile
   391  00031E  0012               	return		;funcret
   392  000320                     __end_of_eserial_setup:
   393                           	opt stack 0
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           
   397 ;; *************** function _setup_simple_serial *****************
   398 ;; Defined at:
   399 ;;		line 28 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;  baudrate_bit    1    wreg     unsigned char 
   402 ;;  baudrate_val    2   23[COMRAM] unsigned int 
   403 ;; Auto vars:     Size  Location     Type
   404 ;;  baudrate_bit    1   29[COMRAM] unsigned char 
   405 ;; Return value:  Size  Location     Type
   406 ;;		None               void
   407 ;; Registers used:
   408 ;;		wreg, status,2
   409 ;; Tracked objects:
   410 ;;		On entry : 0/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMRAM   BANK0
   414 ;;      Params:         2       0
   415 ;;      Locals:         5       0
   416 ;;      Temps:          0       0
   417 ;;      Totals:         7       0
   418 ;;Total ram usage:        7 bytes
   419 ;; Hardware stack levels used:    1
   420 ;; Hardware stack levels required when called:    3
   421 ;; This function calls:
   422 ;;		Nothing
   423 ;; This function is called by:
   424 ;;		_eserial_setup
   425 ;; This function uses a non-reentrant model
   426 ;;
   427                           
   428                           	psect	text2
   429  000254                     __ptext2:
   430                           	opt stack 0
   431  000254                     _setup_simple_serial:
   432                           	opt stack 26
   433                           
   434                           ;incstack = 0
   435                           ;setup_simple_serial@baudrate_bits stored from wreg
   436  000254  6E46               	movwf	setup_simple_serial@baudrate_bits,c
   437                           
   438                           ;serial_pic.c: 30: ANSELHbits.ANS11 = 0;
   439  000256  967F               	bcf	3967,3,c	;volatile
   440                           
   441                           ;serial_pic.c: 31: TXSTA = (baudrate_bits & 0x04) ? 0x24: 0x20;
   442  000258  B446               	btfsc	setup_simple_serial@baudrate_bits,2,c
   443  00025A  D004               	goto	l1186
   444  00025C  0E00               	movlw	0
   445  00025E  6E43               	movwf	_setup_simple_serial$173+1,c
   446  000260  0E20               	movlw	32
   447  000262  D003               	goto	L1
   448  000264                     l1186:
   449  000264  0E00               	movlw	0
   450  000266  6E43               	movwf	_setup_simple_serial$173+1,c
   451  000268  0E24               	movlw	36
   452  00026A                     L1:
   453  00026A  6E42               	movwf	_setup_simple_serial$173,c
   454  00026C  D000               	goto	l1188
   455  00026E                     l1188:
   456  00026E  C042  FFAC         	movff	_setup_simple_serial$173,4012	;volatile
   457                           
   458                           ;serial_pic.c: 32: RCSTA = 0x90;
   459  000272  0E90               	movlw	144
   460  000274  6EAB               	movwf	4011,c	;volatile
   461                           
   462                           ;serial_pic.c: 33: BAUDCON = (baudrate_bits & 0x08) ? 0x08 : 0x00;
   463  000276  B646               	btfsc	setup_simple_serial@baudrate_bits,3,c
   464  000278  D004               	goto	l1194
   465  00027A  0E00               	movlw	0
   466  00027C  6E45               	movwf	_setup_simple_serial$174+1,c
   467  00027E  0E00               	movlw	0
   468  000280  D003               	goto	L2
   469  000282                     l1194:
   470  000282  0E00               	movlw	0
   471  000284  6E45               	movwf	_setup_simple_serial$174+1,c
   472  000286  0E08               	movlw	8
   473  000288                     L2:
   474  000288  6E44               	movwf	_setup_simple_serial$174,c
   475  00028A  D000               	goto	l1196
   476  00028C                     l1196:
   477  00028C  C044  FFB8         	movff	_setup_simple_serial$174,4024	;volatile
   478                           
   479                           ;serial_pic.c: 35: SPBRGH = baudrate_value >> 8;
   480  000290  5041               	movf	setup_simple_serial@baudrate_value+1,w,c
   481  000292  6EB0               	movwf	4016,c	;volatile
   482                           
   483                           ;serial_pic.c: 36: SPBRG = baudrate_value;
   484  000294  C040  FFAF         	movff	setup_simple_serial@baudrate_value,4015	;volatile
   485  000298  0012               	return		;funcret
   486  00029A                     __end_of_setup_simple_serial:
   487                           	opt stack 0
   488                           postinc0	equ	0xFEE
   489                           wreg	equ	0xFE8
   490                           
   491 ;; *************** function _serial_interrupts *****************
   492 ;; Defined at:
   493 ;;		line 98 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;  interrupts      1    wreg     unsigned char 
   496 ;; Auto vars:     Size  Location     Type
   497 ;;  interrupts      1   24[COMRAM] unsigned char 
   498 ;; Return value:  Size  Location     Type
   499 ;;		None               void
   500 ;; Registers used:
   501 ;;		wreg, status,2, status,0
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0
   507 ;;      Params:         0       0
   508 ;;      Locals:         1       0
   509 ;;      Temps:          1       0
   510 ;;      Totals:         2       0
   511 ;;Total ram usage:        2 bytes
   512 ;; Hardware stack levels used:    1
   513 ;; Hardware stack levels required when called:    3
   514 ;; This function calls:
   515 ;;		Nothing
   516 ;; This function is called by:
   517 ;;		_eserial_setup
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text3
   522  0002CE                     __ptext3:
   523                           	opt stack 0
   524  0002CE                     _serial_interrupts:
   525                           	opt stack 26
   526                           
   527                           ;incstack = 0
   528                           ;serial_interrupts@interrupts stored from wreg
   529  0002CE  6E41               	movwf	serial_interrupts@interrupts,c
   530                           
   531                           ;serial_pic.c: 100: if (interrupts & (0x01 | 0x02)) {
   532  0002D0  C041  F040         	movff	serial_interrupts@interrupts,??_serial_interrupts
   533  0002D4  0E03               	movlw	3
   534  0002D6  1640               	andwf	??_serial_interrupts,f,c
   535  0002D8  B4D8               	btfsc	status,2,c
   536  0002DA  0012               	return	
   537                           
   538                           ;serial_pic.c: 101: INTCON |= 0xC0;
   539  0002DC  0EC0               	movlw	192
   540  0002DE  12F2               	iorwf	intcon,f,c	;volatile
   541                           
   542                           ;serial_pic.c: 102: RCIE = (interrupts & 0x01) ? 1 : 0;
   543  0002E0  A041               	btfss	serial_interrupts@interrupts,0,c
   544  0002E2  D002               	goto	u540
   545  0002E4  8A9D               	bsf	3997,5,c	;volatile
   546  0002E6  D001               	goto	l1210
   547  0002E8                     u540:
   548  0002E8  9A9D               	bcf	3997,5,c	;volatile
   549  0002EA                     l1210:
   550                           
   551                           ;serial_pic.c: 103: interrupt_data.tx_int_enable = (interrupts & 0x02) ? 1 : 0;
   552  0002EA  A241               	btfss	serial_interrupts@interrupts,1,c
   553  0002EC  D002               	goto	u560
   554  0002EE  0E01               	movlw	1
   555  0002F0  D001               	goto	u570
   556  0002F2                     u560:
   557  0002F2  0E00               	movlw	0
   558  0002F4                     u570:
   559  0002F4  6E01               	movwf	_interrupt_data,c
   560  0002F6  0012               	return	
   561  0002F8  0012               	return		;funcret
   562  0002FA                     __end_of_serial_interrupts:
   563                           	opt stack 0
   564                           intcon	equ	0xFF2
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           status	equ	0xFD8
   568                           
   569 ;; *************** function _eserial_send_data *****************
   570 ;; Defined at:
   571 ;;		line 38 in file "extended_serial.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;  buffer          2   29[COMRAM] PTR volatile struct circ
   574 ;;		 -> my_buffer(34), 
   575 ;; Auto vars:     Size  Location     Type
   576 ;;  value           2    1[BANK0 ] int 
   577 ;;  i               1    0[BANK0 ] char 
   578 ;; Return value:  Size  Location     Type
   579 ;;                  1    wreg      char 
   580 ;; Registers used:
   581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   582 ;; Tracked objects:
   583 ;;		On entry : 0/0
   584 ;;		On exit  : 0/0
   585 ;;		Unchanged: 0/0
   586 ;; Data sizes:     COMRAM   BANK0
   587 ;;      Params:         2       0
   588 ;;      Locals:         0       3
   589 ;;      Temps:          1       0
   590 ;;      Totals:         3       3
   591 ;;Total ram usage:        6 bytes
   592 ;; Hardware stack levels used:    1
   593 ;; Hardware stack levels required when called:    4
   594 ;; This function calls:
   595 ;;		_buffer_pop
   596 ;;		_buffer_space
   597 ;;		_serial_send_byte
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           	psect	text4
   604  000188                     __ptext4:
   605                           	opt stack 0
   606  000188                     _eserial_send_data:
   607                           	opt stack 26
   608                           
   609                           ;extended_serial.c: 43: int8_t i = 0;
   610                           
   611                           ;incstack = 0
   612  000188  0E00               	movlw	0
   613  00018A  0100               	movlb	0	; () banked
   614  00018C  6F60               	movwf	eserial_send_data@i& (0+255),b
   615                           
   616                           ; BSR set to: 0
   617                           ;extended_serial.c: 44: int16_t value = buffer_pop(buffer);
   618  00018E  C046  F040         	movff	eserial_send_data@buffer,buffer_pop@buffer
   619  000192  C047  F041         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
   620  000196  EC87  F000         	call	_buffer_pop	;wreg free
   621  00019A  C040  F061         	movff	?_buffer_pop,eserial_send_data@value
   622  00019E  C041  F062         	movff	?_buffer_pop+1,eserial_send_data@value+1
   623                           
   624                           ;extended_serial.c: 45: while (value != -1) {
   625  0001A2  D011               	goto	l1248
   626  0001A4                     l1242:
   627                           
   628                           ;extended_serial.c: 46: serial_send_byte((uint8_t)value);
   629  0001A4  0100               	movlb	0	; () banked
   630  0001A6  5161               	movf	eserial_send_data@value& (0+255),w,b
   631  0001A8  ECAF  F001         	call	_serial_send_byte
   632                           
   633                           ;extended_serial.c: 47: value = buffer_pop(buffer);
   634  0001AC  C046  F040         	movff	eserial_send_data@buffer,buffer_pop@buffer
   635  0001B0  C047  F041         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
   636  0001B4  EC87  F000         	call	_buffer_pop	;wreg free
   637  0001B8  C040  F061         	movff	?_buffer_pop,eserial_send_data@value
   638  0001BC  C041  F062         	movff	?_buffer_pop+1,eserial_send_data@value+1
   639                           
   640                           ;extended_serial.c: 48: i++;
   641  0001C0  0100               	movlb	0	; () banked
   642  0001C2  2B60               	incf	eserial_send_data@i& (0+255),f,b
   643  0001C4  D000               	goto	l1248
   644  0001C6                     l1248:
   645  0001C6  0100               	movlb	0	; () banked
   646  0001C8  2961               	incf	eserial_send_data@value& (0+255),w,b
   647  0001CA  E1EC               	bnz	l1242
   648  0001CC  0100               	movlb	0	; () banked
   649  0001CE  2962               	incf	(eserial_send_data@value+1)& (0+255),w,b
   650  0001D0  A4D8               	btfss	status,2,c
   651  0001D2  D7E8               	goto	l1242
   652                           
   653                           ; BSR set to: 0
   654                           ;extended_serial.c: 49: }
   655                           ;extended_serial.c: 51: if (buffer_space(buffer) > 2 * 0x05)
   656                           
   657                           ; BSR set to: 0
   658  0001D4  C046  F040         	movff	eserial_send_data@buffer,buffer_space@buffer
   659  0001D8  C047  F041         	movff	eserial_send_data@buffer+1,buffer_space@buffer+1
   660  0001DC  EC90  F001         	call	_buffer_space	;wreg free
   661  0001E0  6E48               	movwf	??_eserial_send_data& (0+255),c
   662  0001E2  0E0A               	movlw	10
   663  0001E4  6448               	cpfsgt	??_eserial_send_data,c
   664  0001E6  0012               	return	
   665                           
   666                           ;extended_serial.c: 54: LATCbits.LATC0 = 0;
   667  0001E8  908B               	bcf	3979,0,c	;volatile
   668  0001EA  0012               	return	
   669                           
   670                           ;extended_serial.c: 56: return i;
   671                           ;	Return value of _eserial_send_data is never used
   672  0001EC  0012               	return		;funcret
   673  0001EE                     __end_of_eserial_send_data:
   674                           	opt stack 0
   675                           intcon	equ	0xFF2
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           status	equ	0xFD8
   679                           
   680 ;; *************** function _serial_send_byte *****************
   681 ;; Defined at:
   682 ;;		line 76 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;  byte            1    wreg     unsigned char 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  byte            1   23[COMRAM] unsigned char 
   687 ;; Return value:  Size  Location     Type
   688 ;;		None               void
   689 ;; Registers used:
   690 ;;		wreg
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMRAM   BANK0
   696 ;;      Params:         0       0
   697 ;;      Locals:         1       0
   698 ;;      Temps:          0       0
   699 ;;      Totals:         1       0
   700 ;;Total ram usage:        1 bytes
   701 ;; Hardware stack levels used:    1
   702 ;; Hardware stack levels required when called:    3
   703 ;; This function calls:
   704 ;;		Nothing
   705 ;; This function is called by:
   706 ;;		_eserial_send_data
   707 ;;		_serial_send_data
   708 ;;		_serial_send_buffer
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           	psect	text5
   713  00035E                     __ptext5:
   714                           	opt stack 0
   715  00035E                     _serial_send_byte:
   716                           	opt stack 26
   717                           
   718                           ;incstack = 0
   719                           ;serial_send_byte@byte stored from wreg
   720  00035E  6E40               	movwf	serial_send_byte@byte,c
   721                           
   722                           ;serial_pic.c: 78: while (!TXIF);
   723  000360  D000               	goto	l95
   724  000362                     l95:
   725  000362  A89E               	btfss	3998,4,c	;volatile
   726  000364  D7FE               	goto	l95
   727                           
   728                           ;serial_pic.c: 79: TXREG = byte;
   729  000366  C040  FFAD         	movff	serial_send_byte@byte,4013	;volatile
   730  00036A  0012               	return		;funcret
   731  00036C                     __end_of_serial_send_byte:
   732                           	opt stack 0
   733                           intcon	equ	0xFF2
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           status	equ	0xFD8
   737                           
   738 ;; *************** function _buffer_space *****************
   739 ;; Defined at:
   740 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;  buffer          2   23[COMRAM] PTR  struct circular_buf
   743 ;;		 -> my_buffer(34), 
   744 ;; Auto vars:     Size  Location     Type
   745 ;;		None
   746 ;; Return value:  Size  Location     Type
   747 ;;                  1    wreg      unsigned char 
   748 ;; Registers used:
   749 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   750 ;; Tracked objects:
   751 ;;		On entry : 0/0
   752 ;;		On exit  : 0/0
   753 ;;		Unchanged: 0/0
   754 ;; Data sizes:     COMRAM   BANK0
   755 ;;      Params:         2       0
   756 ;;      Locals:         0       0
   757 ;;      Temps:          0       0
   758 ;;      Totals:         2       0
   759 ;;Total ram usage:        2 bytes
   760 ;; Hardware stack levels used:    1
   761 ;; Hardware stack levels required when called:    3
   762 ;; This function calls:
   763 ;;		Nothing
   764 ;; This function is called by:
   765 ;;		_eserial_send_data
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text6
   770  000320                     __ptext6:
   771                           	opt stack 0
   772  000320                     _buffer_space:
   773                           	opt stack 26
   774                           
   775                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
   776                           
   777                           ;incstack = 0
   778  000320  EE20 F001          	lfsr	2,1
   779  000324  5040               	movf	buffer_space@buffer,w,c
   780  000326  26D9               	addwf	fsr2l,f,c
   781  000328  5041               	movf	buffer_space@buffer+1,w,c
   782  00032A  22DA               	addwfc	fsr2h,f,c
   783  00032C  50DF               	movf	indf2,w,c
   784  00032E  0800               	sublw	0
   785  000330  0F20               	addlw	32
   786  000332  0012               	return	
   787  000334  0012               	return		;funcret
   788  000336                     __end_of_buffer_space:
   789                           	opt stack 0
   790                           intcon	equ	0xFF2
   791                           postinc0	equ	0xFEE
   792                           wreg	equ	0xFE8
   793                           indf2	equ	0xFDF
   794                           fsr2h	equ	0xFDA
   795                           fsr2l	equ	0xFD9
   796                           status	equ	0xFD8
   797                           
   798 ;; *************** function _buffer_pop *****************
   799 ;; Defined at:
   800 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;  buffer          2   23[COMRAM] PTR volatile struct circ
   803 ;;		 -> my_buffer(34), 
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  byte            2   27[COMRAM] int 
   806 ;; Return value:  Size  Location     Type
   807 ;;                  2   23[COMRAM] int 
   808 ;; Registers used:
   809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0
   815 ;;      Params:         2       0
   816 ;;      Locals:         2       0
   817 ;;      Temps:          2       0
   818 ;;      Totals:         6       0
   819 ;;Total ram usage:        6 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:    3
   822 ;; This function calls:
   823 ;;		Nothing
   824 ;; This function is called by:
   825 ;;		_eserial_send_data
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text7
   830  00010E                     __ptext7:
   831                           	opt stack 0
   832  00010E                     _buffer_pop:
   833                           	opt stack 26
   834                           
   835                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
   836                           
   837                           ;incstack = 0
   838  00010E  EE20 F001          	lfsr	2,1
   839  000112  5040               	movf	buffer_pop@buffer,w,c
   840  000114  26D9               	addwf	fsr2l,f,c
   841  000116  5041               	movf	buffer_pop@buffer+1,w,c
   842  000118  22DA               	addwfc	fsr2h,f,c
   843  00011A  50DF               	movf	indf2,w,c
   844  00011C  A4D8               	btfss	status,2,c
   845  00011E  D003               	goto	l1216
   846                           
   847                           ;circular_buffer.c: 40: return -1;
   848  000120  6840               	setf	?_buffer_pop,c
   849  000122  6841               	setf	?_buffer_pop+1,c
   850  000124  0012               	return	
   851  000126                     l1216:
   852                           
   853                           ;circular_buffer.c: 41: }
   854                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
   855  000126  C040  FFD9         	movff	buffer_pop@buffer,fsr2l
   856  00012A  C041  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   857  00012E  50DF               	movf	indf2,w,c
   858  000130  6E42               	movwf	??_buffer_pop& (0+255),c
   859  000132  5042               	movf	??_buffer_pop,w,c
   860  000134  0D01               	mullw	1
   861  000136  0E02               	movlw	2
   862  000138  26F3               	addwf	prodl,f,c
   863  00013A  0E00               	movlw	0
   864  00013C  22F4               	addwfc	prodh,f,c
   865  00013E  50F3               	movf	prodl,w,c
   866  000140  2440               	addwf	buffer_pop@buffer,w,c
   867  000142  6ED9               	movwf	fsr2l,c
   868  000144  50F4               	movf	prodh,w,c
   869  000146  2041               	addwfc	buffer_pop@buffer+1,w,c
   870  000148  6EDA               	movwf	fsr2h,c
   871  00014A  50DF               	movf	indf2,w,c
   872  00014C  6E43               	movwf	(??_buffer_pop+1)& (0+255),c
   873  00014E  5043               	movf	??_buffer_pop+1,w,c
   874  000150  6E44               	movwf	buffer_pop@byte,c
   875  000152  6A45               	clrf	buffer_pop@byte+1,c
   876                           
   877                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
   878  000154  C040  FFD9         	movff	buffer_pop@buffer,fsr2l
   879  000158  C041  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   880  00015C  50DF               	movf	indf2,w,c
   881  00015E  6E42               	movwf	??_buffer_pop& (0+255),c
   882  000160  2842               	incf	??_buffer_pop,w,c
   883  000162  0B1F               	andlw	31
   884  000164  C040  FFD9         	movff	buffer_pop@buffer,fsr2l
   885  000168  C041  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   886  00016C  6EDF               	movwf	indf2,c
   887                           
   888                           ;circular_buffer.c: 45: buffer->count--;
   889  00016E  EE20 F001          	lfsr	2,1
   890  000172  5040               	movf	buffer_pop@buffer,w,c
   891  000174  26D9               	addwf	fsr2l,f,c
   892  000176  5041               	movf	buffer_pop@buffer+1,w,c
   893  000178  22DA               	addwfc	fsr2h,f,c
   894  00017A  06DF               	decf	indf2,f,c
   895                           
   896                           ;circular_buffer.c: 47: return byte;
   897  00017C  C044  F040         	movff	buffer_pop@byte,?_buffer_pop
   898  000180  C045  F041         	movff	buffer_pop@byte+1,?_buffer_pop+1
   899  000184  0012               	return	
   900  000186  0012               	return		;funcret
   901  000188                     __end_of_buffer_pop:
   902                           	opt stack 0
   903                           prodh	equ	0xFF4
   904                           prodl	equ	0xFF3
   905                           intcon	equ	0xFF2
   906                           postinc0	equ	0xFEE
   907                           wreg	equ	0xFE8
   908                           indf2	equ	0xFDF
   909                           fsr2h	equ	0xFDA
   910                           fsr2l	equ	0xFD9
   911                           status	equ	0xFD8
   912                           
   913 ;; *************** function _isr *****************
   914 ;; Defined at:
   915 ;;		line 39 in file "main.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;		None               void
   922 ;; Registers used:
   923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMRAM   BANK0
   929 ;;      Params:         0       0
   930 ;;      Locals:         0       0
   931 ;;      Temps:         14       0
   932 ;;      Totals:        14       0
   933 ;;Total ram usage:       14 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    2
   936 ;; This function calls:
   937 ;;		_eserial_receive
   938 ;; This function is called by:
   939 ;;		Interrupt level 2
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	intcode
   944  000008                     __pintcode:
   945                           	opt stack 0
   946  000008                     _isr:
   947                           	opt stack 26
   948                           
   949                           ;incstack = 0
   950  000008  CFFA F032          	movff	pclath,??_isr
   951  00000C  CFFB F033          	movff	pclatu,??_isr+1
   952  000010  CFE9 F034          	movff	fsr0l,??_isr+2
   953  000014  CFEA F035          	movff	fsr0h,??_isr+3
   954  000018  CFE1 F036          	movff	fsr1l,??_isr+4
   955  00001C  CFE2 F037          	movff	fsr1h,??_isr+5
   956  000020  CFD9 F038          	movff	fsr2l,??_isr+6
   957  000024  CFDA F039          	movff	fsr2h,??_isr+7
   958  000028  CFF3 F03A          	movff	prodl,??_isr+8
   959  00002C  CFF4 F03B          	movff	prodh,??_isr+9
   960  000030  CFF6 F03C          	movff	tblptrl,??_isr+10
   961  000034  CFF7 F03D          	movff	tblptrh,??_isr+11
   962  000038  CFF8 F03E          	movff	tblptru,??_isr+12
   963  00003C  CFF5 F03F          	movff	tablat,??_isr+13
   964                           
   965                           ;main.c: 41: if (RCIF && RCIE) {
   966  000040  BA9E               	btfsc	3998,5,c	;volatile
   967  000042  AA9D               	btfss	3997,5,c	;volatile
   968  000044  D007               	goto	i2l24
   969                           
   970                           ;main.c: 42: eserial_receive(&my_buffer);
   971  000046  0E07               	movlw	low _my_buffer
   972  000048  6E2E               	movwf	eserial_receive@buffer,c
   973  00004A  0E00               	movlw	high _my_buffer
   974  00004C  6E2F               	movwf	eserial_receive@buffer+1,c
   975  00004E  EC4D  F001         	call	_eserial_receive	;wreg free
   976  000052  D000               	goto	i2l24
   977  000054                     i2l24:
   978  000054  C03F  FFF5         	movff	??_isr+13,tablat
   979  000058  C03E  FFF8         	movff	??_isr+12,tblptru
   980  00005C  C03D  FFF7         	movff	??_isr+11,tblptrh
   981  000060  C03C  FFF6         	movff	??_isr+10,tblptrl
   982  000064  C03B  FFF4         	movff	??_isr+9,prodh
   983  000068  C03A  FFF3         	movff	??_isr+8,prodl
   984  00006C  C039  FFDA         	movff	??_isr+7,fsr2h
   985  000070  C038  FFD9         	movff	??_isr+6,fsr2l
   986  000074  C037  FFE2         	movff	??_isr+5,fsr1h
   987  000078  C036  FFE1         	movff	??_isr+4,fsr1l
   988  00007C  C035  FFEA         	movff	??_isr+3,fsr0h
   989  000080  C034  FFE9         	movff	??_isr+2,fsr0l
   990  000084  C033  FFFB         	movff	??_isr+1,pclatu
   991  000088  C032  FFFA         	movff	??_isr,pclath
   992  00008C  0011               	retfie		f
   993  00008E                     __end_of_isr:
   994                           	opt stack 0
   995                           pclatu	equ	0xFFB
   996                           pclath	equ	0xFFA
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           prodh	equ	0xFF4
  1002                           prodl	equ	0xFF3
  1003                           intcon	equ	0xFF2
  1004                           postinc0	equ	0xFEE
  1005                           fsr0h	equ	0xFEA
  1006                           fsr0l	equ	0xFE9
  1007                           wreg	equ	0xFE8
  1008                           fsr1h	equ	0xFE2
  1009                           fsr1l	equ	0xFE1
  1010                           indf2	equ	0xFDF
  1011                           fsr2h	equ	0xFDA
  1012                           fsr2l	equ	0xFD9
  1013                           status	equ	0xFD8
  1014                           
  1015 ;; *************** function _eserial_receive *****************
  1016 ;; Defined at:
  1017 ;;		line 59 in file "extended_serial.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;  buffer          2    5[COMRAM] PTR volatile struct circ
  1020 ;;		 -> my_buffer(34), 
  1021 ;; Auto vars:     Size  Location     Type
  1022 ;;  value           1    8[COMRAM] unsigned char 
  1023 ;; Return value:  Size  Location     Type
  1024 ;;		None               void
  1025 ;; Registers used:
  1026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1027 ;; Tracked objects:
  1028 ;;		On entry : 0/0
  1029 ;;		On exit  : 0/0
  1030 ;;		Unchanged: 0/0
  1031 ;; Data sizes:     COMRAM   BANK0
  1032 ;;      Params:         2       0
  1033 ;;      Locals:         1       0
  1034 ;;      Temps:          1       0
  1035 ;;      Totals:         4       0
  1036 ;;Total ram usage:        4 bytes
  1037 ;; Hardware stack levels used:    1
  1038 ;; Hardware stack levels required when called:    1
  1039 ;; This function calls:
  1040 ;;		_buffer_push
  1041 ;;		_serial_get_byte
  1042 ;;		i2_buffer_space
  1043 ;; This function is called by:
  1044 ;;		_isr
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           	psect	text9
  1049  00029A                     __ptext9:
  1050                           	opt stack 0
  1051  00029A                     _eserial_receive:
  1052                           	opt stack 26
  1053                           
  1054                           ;extended_serial.c: 77: if (buffer_space(buffer) <= 0x05)
  1055                           
  1056                           ;incstack = 0
  1057  00029A  C02E  F029         	movff	eserial_receive@buffer,i2buffer_space@buffer
  1058  00029E  C02F  F02A         	movff	eserial_receive@buffer+1,i2buffer_space@buffer+1
  1059  0002A2  EC9B  F001         	call	i2_buffer_space	;wreg free
  1060  0002A6  6E30               	movwf	??_eserial_receive& (0+255),c
  1061  0002A8  0E06               	movlw	6
  1062  0002AA  6030               	cpfslt	??_eserial_receive,c
  1063  0002AC  D002               	goto	i2l187
  1064                           
  1065                           ;extended_serial.c: 78: LATCbits.LATC0 = 1;
  1066  0002AE  808B               	bsf	3979,0,c	;volatile
  1067  0002B0  D002               	goto	i2l1156
  1068  0002B2                     i2l187:
  1069                           
  1070                           ;extended_serial.c: 79: else
  1071                           ;extended_serial.c: 80: LATCbits.LATC0 = 0;
  1072  0002B2  908B               	bcf	3979,0,c	;volatile
  1073  0002B4  D000               	goto	i2l1156
  1074  0002B6                     i2l1156:
  1075                           
  1076                           ;extended_serial.c: 82: uint8_t value = serial_get_byte();
  1077  0002B6  ECB6  F001         	call	_serial_get_byte	;wreg free
  1078  0002BA  6E31               	movwf	eserial_receive@value,c
  1079                           
  1080                           ;extended_serial.c: 83: buffer_push(buffer, value);
  1081  0002BC  C02E  F029         	movff	eserial_receive@buffer,buffer_push@buffer
  1082  0002C0  C02F  F02A         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  1083  0002C4  C031  F02B         	movff	eserial_receive@value,buffer_push@byte
  1084  0002C8  ECF7  F000         	call	_buffer_push	;wreg free
  1085  0002CC  0012               	return		;funcret
  1086  0002CE                     __end_of_eserial_receive:
  1087                           	opt stack 0
  1088                           pclatu	equ	0xFFB
  1089                           pclath	equ	0xFFA
  1090                           tblptru	equ	0xFF8
  1091                           tblptrh	equ	0xFF7
  1092                           tblptrl	equ	0xFF6
  1093                           tablat	equ	0xFF5
  1094                           prodh	equ	0xFF4
  1095                           prodl	equ	0xFF3
  1096                           intcon	equ	0xFF2
  1097                           postinc0	equ	0xFEE
  1098                           fsr0h	equ	0xFEA
  1099                           fsr0l	equ	0xFE9
  1100                           wreg	equ	0xFE8
  1101                           fsr1h	equ	0xFE2
  1102                           fsr1l	equ	0xFE1
  1103                           indf2	equ	0xFDF
  1104                           fsr2h	equ	0xFDA
  1105                           fsr2l	equ	0xFD9
  1106                           status	equ	0xFD8
  1107                           
  1108 ;; *************** function i2_buffer_space *****************
  1109 ;; Defined at:
  1110 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;  buffer          2    0[COMRAM] PTR  struct circular_buf
  1113 ;;		 -> my_buffer(34), 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;		None
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      unsigned char 
  1118 ;; Registers used:
  1119 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0
  1125 ;;      Params:         2       0
  1126 ;;      Locals:         0       0
  1127 ;;      Temps:          0       0
  1128 ;;      Totals:         2       0
  1129 ;;Total ram usage:        2 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; This function calls:
  1132 ;;		Nothing
  1133 ;; This function is called by:
  1134 ;;		_eserial_receive
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text10
  1139  000336                     __ptext10:
  1140                           	opt stack 0
  1141  000336                     i2_buffer_space:
  1142                           	opt stack 26
  1143                           
  1144                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  1145                           
  1146                           ;incstack = 0
  1147  000336  EE20 F001          	lfsr	2,1
  1148  00033A  5029               	movf	i2buffer_space@buffer,w,c
  1149  00033C  26D9               	addwf	fsr2l,f,c
  1150  00033E  502A               	movf	i2buffer_space@buffer+1,w,c
  1151  000340  22DA               	addwfc	fsr2h,f,c
  1152  000342  50DF               	movf	indf2,w,c
  1153  000344  0800               	sublw	0
  1154  000346  0F20               	addlw	32
  1155  000348  0012               	return	
  1156  00034A  0012               	return		;funcret
  1157  00034C                     __end_ofi2_buffer_space:
  1158                           	opt stack 0
  1159                           pclatu	equ	0xFFB
  1160                           pclath	equ	0xFFA
  1161                           tblptru	equ	0xFF8
  1162                           tblptrh	equ	0xFF7
  1163                           tblptrl	equ	0xFF6
  1164                           tablat	equ	0xFF5
  1165                           prodh	equ	0xFF4
  1166                           prodl	equ	0xFF3
  1167                           intcon	equ	0xFF2
  1168                           postinc0	equ	0xFEE
  1169                           fsr0h	equ	0xFEA
  1170                           fsr0l	equ	0xFE9
  1171                           wreg	equ	0xFE8
  1172                           fsr1h	equ	0xFE2
  1173                           fsr1l	equ	0xFE1
  1174                           indf2	equ	0xFDF
  1175                           fsr2h	equ	0xFDA
  1176                           fsr2l	equ	0xFD9
  1177                           status	equ	0xFD8
  1178                           
  1179 ;; *************** function _serial_get_byte *****************
  1180 ;; Defined at:
  1181 ;;		line 53 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  1182 ;; Parameters:    Size  Location     Type
  1183 ;;		None
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;		None
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  1    wreg      unsigned char 
  1188 ;; Registers used:
  1189 ;;		wreg, status,2
  1190 ;; Tracked objects:
  1191 ;;		On entry : 0/0
  1192 ;;		On exit  : 0/0
  1193 ;;		Unchanged: 0/0
  1194 ;; Data sizes:     COMRAM   BANK0
  1195 ;;      Params:         0       0
  1196 ;;      Locals:         0       0
  1197 ;;      Temps:          0       0
  1198 ;;      Totals:         0       0
  1199 ;;Total ram usage:        0 bytes
  1200 ;; Hardware stack levels used:    1
  1201 ;; This function calls:
  1202 ;;		Nothing
  1203 ;; This function is called by:
  1204 ;;		_eserial_receive
  1205 ;;		_serial_get_data
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text11
  1210  00036C                     __ptext11:
  1211                           	opt stack 0
  1212  00036C                     _serial_get_byte:
  1213                           	opt stack 26
  1214                           
  1215                           ;serial_pic.c: 55: while (!RCIF);
  1216                           
  1217                           ;incstack = 0
  1218  00036C  D000               	goto	i2l78
  1219  00036E                     i2l78:
  1220  00036E  AA9E               	btfss	3998,5,c	;volatile
  1221  000370  D7FE               	goto	i2l78
  1222                           
  1223                           ;serial_pic.c: 57: return RCREG;
  1224  000372  50AE               	movf	4014,w,c	;volatile
  1225  000374  0012               	return	
  1226  000376  0012               	return		;funcret
  1227  000378                     __end_of_serial_get_byte:
  1228                           	opt stack 0
  1229                           pclatu	equ	0xFFB
  1230                           pclath	equ	0xFFA
  1231                           tblptru	equ	0xFF8
  1232                           tblptrh	equ	0xFF7
  1233                           tblptrl	equ	0xFF6
  1234                           tablat	equ	0xFF5
  1235                           prodh	equ	0xFF4
  1236                           prodl	equ	0xFF3
  1237                           intcon	equ	0xFF2
  1238                           postinc0	equ	0xFEE
  1239                           fsr0h	equ	0xFEA
  1240                           fsr0l	equ	0xFE9
  1241                           wreg	equ	0xFE8
  1242                           fsr1h	equ	0xFE2
  1243                           fsr1l	equ	0xFE1
  1244                           indf2	equ	0xFDF
  1245                           fsr2h	equ	0xFDA
  1246                           fsr2l	equ	0xFD9
  1247                           status	equ	0xFD8
  1248                           
  1249 ;; *************** function _buffer_push *****************
  1250 ;; Defined at:
  1251 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;  buffer          2    0[COMRAM] PTR volatile struct circ
  1254 ;;		 -> my_buffer(34), 
  1255 ;;  byte            1    2[COMRAM] unsigned char 
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  current_posi    1    4[COMRAM] unsigned char 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      unsigned char 
  1260 ;; Registers used:
  1261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0
  1267 ;;      Params:         3       0
  1268 ;;      Locals:         1       0
  1269 ;;      Temps:          1       0
  1270 ;;      Totals:         5       0
  1271 ;;Total ram usage:        5 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; This function calls:
  1274 ;;		Nothing
  1275 ;; This function is called by:
  1276 ;;		_eserial_receive
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           	psect	text12
  1281  0001EE                     __ptext12:
  1282                           	opt stack 0
  1283  0001EE                     _buffer_push:
  1284                           	opt stack 26
  1285                           
  1286                           ;circular_buffer.c: 26: if (buffer->count == 0x20) {
  1287                           
  1288                           ;incstack = 0
  1289  0001EE  EE20 F001          	lfsr	2,1
  1290  0001F2  5029               	movf	buffer_push@buffer,w,c
  1291  0001F4  26D9               	addwf	fsr2l,f,c
  1292  0001F6  502A               	movf	buffer_push@buffer+1,w,c
  1293  0001F8  22DA               	addwfc	fsr2h,f,c
  1294  0001FA  0E20               	movlw	32
  1295  0001FC  18DE               	xorwf	postinc2,w,c
  1296  0001FE  B4D8               	btfsc	status,2,c
  1297  000200  0012               	return	
  1298  000202  D001               	goto	i2l1116
  1299                           
  1300                           ;circular_buffer.c: 28: } else {
  1301                           
  1302                           ;circular_buffer.c: 27: return 0;
  1303                           ;	Return value of _buffer_push is never used
  1304  000204  0012               	return	
  1305  000206                     i2l1116:
  1306                           
  1307                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  1308                           ;circular_buffer.c: 30: & (0x20 - 1);
  1309  000206  EE20 F001          	lfsr	2,1
  1310  00020A  5029               	movf	buffer_push@buffer,w,c
  1311  00020C  26D9               	addwf	fsr2l,f,c
  1312  00020E  502A               	movf	buffer_push@buffer+1,w,c
  1313  000210  22DA               	addwfc	fsr2h,f,c
  1314  000212  50DF               	movf	indf2,w,c
  1315  000214  6E2C               	movwf	??_buffer_push& (0+255),c
  1316  000216  C029  FFD9         	movff	buffer_push@buffer,fsr2l
  1317  00021A  C02A  FFDA         	movff	buffer_push@buffer+1,fsr2h
  1318  00021E  50DF               	movf	indf2,w,c
  1319  000220  242C               	addwf	??_buffer_push,w,c
  1320  000222  0B1F               	andlw	31
  1321  000224  6E2D               	movwf	buffer_push@current_position,c
  1322                           
  1323                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  1324  000226  502D               	movf	buffer_push@current_position,w,c
  1325  000228  0D01               	mullw	1
  1326  00022A  0E02               	movlw	2
  1327  00022C  26F3               	addwf	prodl,f,c
  1328  00022E  0E00               	movlw	0
  1329  000230  22F4               	addwfc	prodh,f,c
  1330  000232  50F3               	movf	prodl,w,c
  1331  000234  2429               	addwf	buffer_push@buffer,w,c
  1332  000236  6ED9               	movwf	fsr2l,c
  1333  000238  50F4               	movf	prodh,w,c
  1334  00023A  202A               	addwfc	buffer_push@buffer+1,w,c
  1335  00023C  6EDA               	movwf	fsr2h,c
  1336  00023E  C02B  FFDF         	movff	buffer_push@byte,indf2
  1337                           
  1338                           ;circular_buffer.c: 32: buffer->count++;
  1339  000242  EE20 F001          	lfsr	2,1
  1340  000246  5029               	movf	buffer_push@buffer,w,c
  1341  000248  26D9               	addwf	fsr2l,f,c
  1342  00024A  502A               	movf	buffer_push@buffer+1,w,c
  1343  00024C  22DA               	addwfc	fsr2h,f,c
  1344  00024E  2ADF               	incf	indf2,f,c
  1345                           
  1346                           ;circular_buffer.c: 33: return 1;
  1347                           ;	Return value of _buffer_push is never used
  1348  000250  0012               	return	
  1349  000252  0012               	return		;funcret
  1350  000254                     __end_of_buffer_push:
  1351                           	opt stack 0
  1352  0000                     pclatu	equ	0xFFB
  1353                           pclath	equ	0xFFA
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           prodh	equ	0xFF4
  1359                           prodl	equ	0xFF3
  1360                           intcon	equ	0xFF2
  1361                           postinc0	equ	0xFEE
  1362                           fsr0h	equ	0xFEA
  1363                           fsr0l	equ	0xFE9
  1364                           wreg	equ	0xFE8
  1365                           fsr1h	equ	0xFE2
  1366                           fsr1l	equ	0xFE1
  1367                           indf2	equ	0xFDF
  1368                           postinc2	equ	0xFDE
  1369                           fsr2h	equ	0xFDA
  1370                           fsr2l	equ	0xFD9
  1371                           status	equ	0xFD8
  1372                           pclatu	equ	0xFFB
  1373                           pclath	equ	0xFFA
  1374                           tblptru	equ	0xFF8
  1375                           tblptrh	equ	0xFF7
  1376                           tblptrl	equ	0xFF6
  1377                           tablat	equ	0xFF5
  1378                           prodh	equ	0xFF4
  1379                           prodl	equ	0xFF3
  1380                           intcon	equ	0xFF2
  1381                           postinc0	equ	0xFEE
  1382                           fsr0h	equ	0xFEA
  1383                           fsr0l	equ	0xFE9
  1384                           wreg	equ	0xFE8
  1385                           fsr1h	equ	0xFE2
  1386                           fsr1l	equ	0xFE1
  1387                           indf2	equ	0xFDF
  1388                           postinc2	equ	0xFDE
  1389                           fsr2h	equ	0xFDA
  1390                           fsr2l	equ	0xFD9
  1391                           status	equ	0xFD8
  1392                           
  1393                           	psect	rparam
  1394  0000                     pclatu	equ	0xFFB
  1395                           pclath	equ	0xFFA
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           prodh	equ	0xFF4
  1401                           prodl	equ	0xFF3
  1402                           intcon	equ	0xFF2
  1403                           postinc0	equ	0xFEE
  1404                           fsr0h	equ	0xFEA
  1405                           fsr0l	equ	0xFE9
  1406                           wreg	equ	0xFE8
  1407                           fsr1h	equ	0xFE2
  1408                           fsr1l	equ	0xFE1
  1409                           indf2	equ	0xFDF
  1410                           postinc2	equ	0xFDE
  1411                           fsr2h	equ	0xFDA
  1412                           fsr2l	equ	0xFD9
  1413                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      72
    BANK0           160      4       4

Pointer List with Targets:

    buffer_pop@buffer	PTR volatile struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    buffer_push@buffer	PTR volatile struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    buffer_space@buffer	PTR  struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    eserial_receive@buffer	PTR volatile struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    eserial_send_data@buffer	PTR volatile struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    S56interrupt_serial$data	PTR unsigned char  size(2) Largest target is 0

    interrupt_data.data	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_eserial_send_data
    _main->_eserial_setup
    _eserial_setup->_setup_simple_serial
    _eserial_send_data->_buffer_pop

Critical Paths under _isr in COMRAM

    _isr->_eserial_receive
    _eserial_receive->_buffer_push

Critical Paths under _main in BANK0

    _main->_eserial_send_data

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1193
                                              3 BANK0      1     1      0
                  _eserial_send_data
                      _eserial_setup
 ---------------------------------------------------------------------------------
 (1) _eserial_setup                                        3     1      2     456
                                             30 COMRAM     2     0      2
                                              0 BANK0      1     1      0
                  _serial_interrupts
                _setup_simple_serial
 ---------------------------------------------------------------------------------
 (2) _setup_simple_serial                                  7     5      2     263
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _serial_interrupts                                    2     2      0      66
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _eserial_send_data                                    6     4      2     737
                                             29 COMRAM     3     1      2
                                              0 BANK0      3     3      0
                         _buffer_pop
                       _buffer_space
                   _serial_send_byte
 ---------------------------------------------------------------------------------
 (2) _serial_send_byte                                     1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     126
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     350
                                             23 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                 14    14      0     429
                                              9 COMRAM    14    14      0
                    _eserial_receive
 ---------------------------------------------------------------------------------
 (4) _eserial_receive                                      4     2      2     429
                                              5 COMRAM     4     2      2
                        _buffer_push
                    _serial_get_byte
                     i2_buffer_space
 ---------------------------------------------------------------------------------
 (5) i2_buffer_space                                       2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _serial_get_byte                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _buffer_push                                          5     2      3     261
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eserial_send_data
     _buffer_pop
     _buffer_space
     _serial_send_byte
   _eserial_setup
     _serial_interrupts
     _setup_simple_serial

 _isr (ROOT)
   _eserial_receive
     _buffer_push
     _serial_get_byte
     i2_buffer_space

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      4       4       3        2.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      48       1       75.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4C       4        0.0%
DATA                 0      0      4C       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Jul 28 17:07:52 2015

                               l95 0362             eserial_send_data@value 0061  
          eserial_send_data@buffer 0046                                u540 02E8  
                              u560 02F2                                u570 02F4  
                              u707 00B6                                u717 00C8  
                              u727 00DA                                u737 00EC  
                              u747 00FE                                _isr 0008  
                              wreg 000FE8                       __CFG_FOSC$HS 000000  
                     __CFG_LVP$OFF 000000                               l1210 02EA  
                             l1216 0126                               l1242 01A4  
                             l1248 01C6                               l1256 00A2  
                             l1194 0282                               l1186 0264  
                             l1196 028C                               l1188 026E  
                             ?_isr 0029                               _RCIE 007CED  
                             _RCIF 007CF5                               i2l24 0054  
           __size_of_eserial_setup 0026                               i2l78 036E  
                             _TXIE 007CEC                               _TXIF 007CF4  
                             _main 0092                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                 ??i2_buffer_space 002B                               pclat 000FFA  
                             prodh 000FF4                               prodl 000FF3  
                             start 008E                     ??_buffer_space 0042  
                     ___param_bank 000010            __end_of_serial_get_byte 0378  
             eserial_receive@value 0031                              ??_isr 0032  
       __size_of_serial_interrupts 002C                              ?_main 0029  
                            i2l187 02B2                              _RCREG 000FAE  
                            _RCSTA 000FAB                              _SPBRG 000FAF  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                            tablat 000FF5               serial_send_byte@byte 0040  
                            status 000FD8                   buffer_pop@buffer 0040  
                  __initialization 034C                       __end_of_main 010E  
            eserial_receive@buffer 002E                      _eserial_setup 02FA  
                           ??_main 0063                      __activetblptr 000000  
         __size_of_eserial_receive 0034                             i2l1116 0206  
                           i2l1156 02B6                             _INTCON 000FF2  
                           _SPBRGH 000FB0           __end_of_serial_send_byte 036C  
                 ?_serial_get_byte 0029                     ?_eserial_setup 0047  
             __size_of_buffer_push 0066                             clear_0 0352  
      __end_of_setup_simple_serial 029A                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
             __end_of_buffer_space 0336                         __accesstop 0060  
          __end_of__initialization 0358                      ___rparam_used 000001  
                   __pcstackCOMRAM 0029                     buffer_pop@byte 0044  
                _eserial_send_data 0188                 ?_eserial_send_data 0046  
              ??_eserial_send_data 0048                  ??_eserial_receive 0030  
                  ??_eserial_setup 0049                            _BAUDCON 000FB8  
        __end_of_eserial_send_data 01EE                  buffer_push@buffer 0029  
                       _buffer_pop 010E                            __Hparam 0000  
                          __Lparam 0000                            __pcinit 034C  
                        _ANSELbits 000F7E                            __ramtop 0100  
                          __ptext0 0092                            __ptext1 02FA  
                          __ptext2 0254                            __ptext3 02CE  
                          __ptext4 0188                            __ptext5 035E  
                          __ptext6 0320                            __ptext7 010E  
                          __ptext9 029A              __size_of_buffer_space 0016  
                     __size_of_isr 0086               end_of_initialization 0358  
                ?_serial_send_byte 0029                 ??_serial_send_byte 0040  
                     _buffer_space 0320                          _RCSTAbits 000FAB  
                          postinc0 000FEE                            postinc2 000FDE  
          __size_ofi2_buffer_space 0016         eserial_setup@baudrate_bits 0060  
       __size_of_eserial_send_data 0066                          _TRISCbits 000F94  
                      ?_buffer_pop 0040                      ??_buffer_push 002C  
         __size_of_serial_get_byte 000C                start_initialization 034C  
                      __end_of_isr 008E                    _eserial_receive 029A  
     __size_of_setup_simple_serial 0046                 buffer_space@buffer 0040  
                  buffer_push@byte 002B                __size_of_buffer_pop 007A  
              __end_of_buffer_push 0254                        __pbssCOMRAM 0001  
                    __pcstackBANK0 0060                          __pintcode 0008  
            __end_of_eserial_setup 0320                     i2_buffer_space 0336  
          __end_of_eserial_receive 02CE   setup_simple_serial@baudrate_bits 0046  
                ??_serial_get_byte 0029                           _LATCbits 000F8B  
      serial_interrupts@interrupts 0041                          _my_buffer 0007  
                      _buffer_push 01EE             __end_ofi2_buffer_space 034C  
        __size_of_serial_send_byte 000E                       ??_buffer_pop 0042  
                         __Hrparam 0000                           __Lrparam 0000  
                  ?i2_buffer_space 0029                 __end_of_buffer_pop 0188  
               eserial_send_data@i 0060                _setup_simple_serial 0254  
                 ?_eserial_receive 002E                         _ANSELHbits 000F7F  
                         __ptext10 0336                           __ptext11 036C  
                         __ptext12 01EE               ?_setup_simple_serial 0040  
                    __size_of_main 007C                  _serial_interrupts 02CE  
               ?_serial_interrupts 0029              ??_setup_simple_serial 0042  
                         intlevel2 0000                ??_serial_interrupts 0040  
        __end_of_serial_interrupts 02FA                   _serial_send_byte 035E  
                  _serial_get_byte 036C                     _interrupt_data 0001  
      buffer_push@current_position 002D        eserial_setup@baudrate_value 0047  
             i2buffer_space@buffer 0029  setup_simple_serial@baudrate_value 0040  
                    ?_buffer_space 0040                       ?_buffer_push 0029  
          _setup_simple_serial$173 0042            _setup_simple_serial$174 0044  
