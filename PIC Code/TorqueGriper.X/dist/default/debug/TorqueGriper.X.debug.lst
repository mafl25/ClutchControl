

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Jul 24 17:10:56 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    18  0000                     _TMR3	set	4018
    19  0000                     _ANSELHbits	set	3967
    20  0000                     _ANSELbits	set	3966
    21  0000                     _BAUDCON	set	4024
    22  0000                     _CCP1CONbits	set	4029
    23  0000                     _CCPR1L	set	4030
    24  0000                     _INTCONbits	set	4082
    25  0000                     _LATCbits	set	3979
    26  0000                     _PIR2bits	set	4001
    27  0000                     _PR2	set	4043
    28  0000                     _PSTRCON	set	4025
    29  0000                     _PSTRCONbits	set	4025
    30  0000                     _RCREG	set	4014
    31  0000                     _RCSTA	set	4011
    32  0000                     _RCSTAbits	set	4011
    33  0000                     _SPBRG	set	4015
    34  0000                     _SPBRGH	set	4016
    35  0000                     _T0CONbits	set	4053
    36  0000                     _T2CONbits	set	4042
    37  0000                     _T3CONbits	set	4017
    38  0000                     _TMR0H	set	4055
    39  0000                     _TMR0L	set	4054
    40  0000                     _TRISBbits	set	3987
    41  0000                     _TRISCbits	set	3988
    42  0000                     _TXREG	set	4013
    43  0000                     _TXSTA	set	4012
    44  0000                     _TXSTAbits	set	4012
    45  0000                     _RCIF	set	31989
    46                           
    47 ;;
    48 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
    49 ;;
    50 ;; *************** function _main *****************
    51 ;; Defined at:
    52 ;;		line 47 in file "main.c"
    53 ;; Parameters:    Size  Location     Type
    54 ;;		None
    55 ;; Auto vars:     Size  Location     Type
    56 ;;  data            8   15[COMRAM] struct receiveBuffer
    57 ;;  i               2   13[COMRAM] int 
    58 ;;  wat             1   12[COMRAM] unsigned char 
    59 ;; Return value:  Size  Location     Type
    60 ;;                  2   24[None  ] int 
    61 ;; Registers used:
    62 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
    63 ;; Tracked objects:
    64 ;;		On entry : 0/0
    65 ;;		On exit  : 0/0
    66 ;;		Unchanged: 0/0
    67 ;; Data sizes:     COMRAM   BANK0
    68 ;;      Params:         0       0
    69 ;;      Locals:        11       0
    70 ;;      Temps:          2       0
    71 ;;      Totals:        13       0
    72 ;;Total ram usage:       13 bytes
    73 ;; Hardware stack levels required when called:    2
    74 ;; This function calls:
    75 ;;		_pmwSingleModeSetUp
    76 ;;		_receiveData
    77 ;;		_selectOutput
    78 ;;		_serialSetUp
    79 ;;		_setPulseWidth
    80 ;;		_setup_tmr0
    81 ;; This function is called by:
    82 ;;		Startup code after reset
    83 ;; This function uses a non-reentrant model
    84 ;;
    85                           
    86                           	psect	text0
    87  001C36                     __ptext0:
    88                           	opt stack 0
    89  001C36                     _main:
    90                           	opt stack 29
    91                           
    92                           ;main.c: 48: _delay((unsigned long)((1)*(20000000/4000.0)));
    93                           
    94                           ;incstack = 0
    95  001C36  0E07               	movlw	7
    96  001C38  6E0B               	movwf	??_main& (0+255),c
    97  001C3A  0E7D               	movlw	125
    98  001C3C                     u667:
    99  001C3C  2EE8               	decfsz	wreg,f,c
   100  001C3E  D7FE               	goto	u667
   101  001C40  2E0B               	decfsz	??_main& (0+255),f,c
   102  001C42  D7FC               	goto	u667
   103  001C44  F000               	nop	
   104                           
   105                           ;main.c: 50: setup_tmr0(65340);
   106  001C46  0EFF               	movlw	255
   107  001C48  6E02               	movwf	setup_tmr0@tmr0_value+1,c
   108  001C4A  0E3C               	movlw	60
   109  001C4C  6E01               	movwf	setup_tmr0@tmr0_value,c
   110  001C4E  EC2F  F00D         	call	_setup_tmr0	;wreg free
   111                           
   112                           ;main.c: 51: serialSetUp(1, 1, 0x04);
   113  001C52  0E01               	movlw	1
   114  001C54  6E01               	movwf	serialSetUp@brgh_bit,c
   115  001C56  0E00               	movlw	0
   116  001C58  6E03               	movwf	serialSetUp@spbrg16+1,c
   117  001C5A  0E04               	movlw	4
   118  001C5C  6E02               	movwf	serialSetUp@spbrg16,c
   119  001C5E  0E01               	movlw	1
   120  001C60  EC52  F00D         	call	_serialSetUp
   121                           
   122                           ;main.c: 52: pmwSingleModeSetUp(PACH_PBDH, 254, TMRP_1, 0x04 | 0x02);
   123  001C64  0EFE               	movlw	254
   124  001C66  6E01               	movwf	pmwSingleModeSetUp@valuePR2,c
   125  001C68  0E00               	movlw	0
   126  001C6A  6E02               	movwf	pmwSingleModeSetUp@scaler,c
   127  001C6C  0E06               	movlw	6
   128  001C6E  6E03               	movwf	pmwSingleModeSetUp@outputs,c
   129  001C70  0E00               	movlw	0
   130  001C72  EC7D  F00D         	call	_pmwSingleModeSetUp
   131                           
   132                           ;main.c: 53: setPulseWidth(0);
   133  001C76  0E00               	movlw	0
   134  001C78  6E02               	movwf	setPulseWidth@width+1,c
   135  001C7A  0E00               	movlw	0
   136  001C7C  6E01               	movwf	setPulseWidth@width,c
   137  001C7E  EC3D  F00D         	call	_setPulseWidth	;wreg free
   138                           
   139                           ;main.c: 55: struct receiveBuffer data;
   140                           ;main.c: 56: int i = 0;
   141  001C82  0E00               	movlw	0
   142  001C84  6E0F               	movwf	main@i+1,c
   143  001C86  0E00               	movlw	0
   144  001C88  6E0E               	movwf	main@i,c
   145                           
   146                           ;main.c: 57: unsigned char wat = 0;
   147  001C8A  0E00               	movlw	0
   148  001C8C  6E0D               	movwf	main@wat,c
   149  001C8E  D000               	goto	l1101
   150  001C90                     l1101:
   151                           
   152                           ;main.c: 61: i = receiveData(&data);
   153  001C90  0E10               	movlw	low main@data
   154  001C92  6E02               	movwf	receiveData@buffer,c
   155  001C94  0E00               	movlw	high main@data
   156  001C96  6E03               	movwf	receiveData@buffer+1,c
   157  001C98  EC81  F00E         	call	_receiveData	;wreg free
   158  001C9C  C002  F00E         	movff	?_receiveData,main@i
   159  001CA0  C003  F00F         	movff	?_receiveData+1,main@i+1
   160                           
   161                           ;main.c: 64: if (i) {
   162  001CA4  500E               	movf	main@i,w,c
   163  001CA6  100F               	iorwf	main@i+1,w,c
   164  001CA8  B4D8               	btfsc	status,2,c
   165  001CAA  D7F2               	goto	l1101
   166                           
   167                           ;main.c: 65: if (data.buffer[0] == 0xAA) {
   168  001CAC  0EAA               	movlw	170
   169  001CAE  1810               	xorwf	main@data,w,c
   170  001CB0  A4D8               	btfss	status,2,c
   171  001CB2  D006               	goto	l1109
   172                           
   173                           ;main.c: 66: selectOutput(data.buffer[1], 1);
   174  001CB4  0E01               	movlw	1
   175  001CB6  6E01               	movwf	selectOutput@toggle,c
   176  001CB8  5011               	movf	main@data+1,w,c
   177  001CBA  ECCA  F00D         	call	_selectOutput
   178                           
   179                           ;main.c: 67: } else if (data.buffer[0] == 0xAB) {
   180  001CBE  D7E8               	goto	l1101
   181  001CC0                     l1109:
   182  001CC0  0EAB               	movlw	171
   183  001CC2  1810               	xorwf	main@data,w,c
   184  001CC4  A4D8               	btfss	status,2,c
   185  001CC6  D006               	goto	l1113
   186                           
   187                           ;main.c: 68: selectOutput(data.buffer[1], 0);
   188  001CC8  0E00               	movlw	0
   189  001CCA  6E01               	movwf	selectOutput@toggle,c
   190  001CCC  5011               	movf	main@data+1,w,c
   191  001CCE  ECCA  F00D         	call	_selectOutput
   192                           
   193                           ;main.c: 69: } else if (data.buffer[0] == 0xAC) {
   194  001CD2  D7DE               	goto	l1101
   195  001CD4                     l1113:
   196  001CD4  0EAC               	movlw	172
   197  001CD6  1810               	xorwf	main@data,w,c
   198  001CD8  A4D8               	btfss	status,2,c
   199  001CDA  D7DA               	goto	l1101
   200                           
   201                           ;main.c: 70: setPulseWidth(data.buffer[1] << 2 | data.buffer[2]);
   202  001CDC  5012               	movf	main@data+2,w,c
   203  001CDE  C011  F00B         	movff	main@data+1,??_main
   204  001CE2  6A0C               	clrf	(??_main+1)& (0+255),c
   205  001CE4  90D8               	bcf	status,0,c
   206  001CE6  360B               	rlcf	??_main,f,c
   207  001CE8  360C               	rlcf	??_main+1,f,c
   208  001CEA  90D8               	bcf	status,0,c
   209  001CEC  360B               	rlcf	??_main,f,c
   210  001CEE  360C               	rlcf	??_main+1,f,c
   211  001CF0  100B               	iorwf	??_main,w,c
   212  001CF2  6E01               	movwf	setPulseWidth@width,c
   213  001CF4  500C               	movf	??_main+1,w,c
   214  001CF6  6E02               	movwf	setPulseWidth@width+1,c
   215  001CF8  EC3D  F00D         	call	_setPulseWidth	;wreg free
   216  001CFC  D7C9               	goto	l1101
   217                           
   218                           ;main.c: 71: }
   219                           ;main.c: 72: }
   220                           ;main.c: 80: }
   221                           ;main.c: 82: return (0);
   222                           ;	Return value of _main is never used
   223  001CFE  EF01  F000         	goto	start
   224  001D02                     __end_of_main:
   225                           	opt stack 0
   226                           wreg	equ	0xFE8
   227                           status	equ	0xFD8
   228                           
   229                           	psect	cinit
   230  001A50                     __pcinit:
   231                           	opt stack 0
   232  001A50                     start_initialization:
   233                           	opt stack 0
   234  001A50                     __initialization:
   235                           	opt stack 0
   236                           
   237                           ; Clear objects allocated to COMRAM (2 bytes)
   238  001A50  6A19               	clrf	(__pbssCOMRAM+1)& (0+255),c
   239  001A52  6A18               	clrf	__pbssCOMRAM& (0+255),c
   240  001A54                     end_of_initialization:
   241                           	opt stack 0
   242  001A54                     __end_of__initialization:
   243                           	opt stack 0
   244  001A54  0E00               	movlw	low (__Lmediumconst shr (0+16))
   245  001A56  6EF8               	movwf	tblptru,c
   246  001A58  0100               	movlb	0
   247  001A5A  EF1B  F00E         	goto	_main	;jump to C main() function
   248                           tblptru	equ	0xFF8
   249                           wreg	equ	0xFE8
   250                           status	equ	0xFD8
   251                           
   252                           	psect	bssCOMRAM
   253  000018                     __pbssCOMRAM:
   254                           	opt stack 0
   255  000018                     _timer3Time:
   256                           	opt stack 0
   257  000018                     	ds	2
   258                           tblptru	equ	0xFF8
   259                           wreg	equ	0xFE8
   260                           status	equ	0xFD8
   261                           
   262                           	psect	cstackCOMRAM
   263  000001                     __pcstackCOMRAM:
   264                           	opt stack 0
   265  000001                     serialSetUp@brgh_bit:
   266                           	opt stack 0
   267  000001                     sendChar@character:
   268                           	opt stack 0
   269  000001                     pmwSingleModeSetUp@valuePR2:
   270                           	opt stack 0
   271  000001                     selectOutput@toggle:
   272                           	opt stack 0
   273  000001                     setup_tmr0@tmr0_value:
   274                           	opt stack 0
   275  000001                     setPulseWidth@width:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x0
   279  000001                     	ds	1
   280  000002                     ??_selectOutput:
   281  000002                     ?_receiveData:
   282                           	opt stack 0
   283  000002                     pmwSingleModeSetUp@scaler:
   284                           	opt stack 0
   285  000002                     serialSetUp@spbrg16:
   286                           	opt stack 0
   287  000002                     receiveData@buffer:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x1
   291  000002                     	ds	1
   292  000003                     ??_setPulseWidth:
   293  000003                     pmwSingleModeSetUp@outputs:
   294                           	opt stack 0
   295  000003                     selectOutput@outputs:
   296                           	opt stack 0
   297                           
   298                           ; 1 bytes @ 0x2
   299  000003                     	ds	1
   300  000004                     ??_receiveData:
   301  000004                     serialSetUp@brg16_bit:
   302                           	opt stack 0
   303  000004                     pmwSingleModeSetUp@polarity:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x3
   307  000004                     	ds	1
   308  000005                     _serialSetUp$689:
   309                           	opt stack 0
   310  000005                     receiveData@size:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x4
   314  000005                     	ds	2
   315  000007                     receiveData@byte_2:
   316                           	opt stack 0
   317  000007                     _serialSetUp$690:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x6
   321  000007                     	ds	1
   322  000008                     receiveData@byte_1:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x7
   326  000008                     	ds	1
   327  000009                     receiveData@i:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x8
   331  000009                     	ds	2
   332  00000B                     ??_main:
   333                           
   334                           ; 0 bytes @ 0xA
   335  00000B                     	ds	2
   336  00000D                     main@wat:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0xC
   340  00000D                     	ds	1
   341  00000E                     main@i:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0xD
   345  00000E                     	ds	2
   346  000010                     main@data:
   347                           	opt stack 0
   348                           
   349                           ; 8 bytes @ 0xF
   350  000010                     	ds	8
   351                           tblptru	equ	0xFF8
   352                           wreg	equ	0xFE8
   353                           status	equ	0xFD8
   354                           
   355 ;; *************** function _setup_tmr0 *****************
   356 ;; Defined at:
   357 ;;		line 85 in file "main.c"
   358 ;; Parameters:    Size  Location     Type
   359 ;;  tmr0_value      2    0[COMRAM] int 
   360 ;; Auto vars:     Size  Location     Type
   361 ;;		None
   362 ;; Return value:  Size  Location     Type
   363 ;;		None               void
   364 ;; Registers used:
   365 ;;		wreg, status,2
   366 ;; Tracked objects:
   367 ;;		On entry : 0/0
   368 ;;		On exit  : 0/0
   369 ;;		Unchanged: 0/0
   370 ;; Data sizes:     COMRAM   BANK0
   371 ;;      Params:         2       0
   372 ;;      Locals:         0       0
   373 ;;      Temps:          0       0
   374 ;;      Totals:         2       0
   375 ;;Total ram usage:        2 bytes
   376 ;; Hardware stack levels used:    1
   377 ;; This function calls:
   378 ;;		Nothing
   379 ;; This function is called by:
   380 ;;		_main
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384                           	psect	text1
   385  001A5E                     __ptext1:
   386                           	opt stack 0
   387  001A5E                     _setup_tmr0:
   388                           	opt stack 30
   389                           
   390                           ;main.c: 87: T0CONbits.PSA = 0;
   391                           
   392                           ;incstack = 0
   393  001A5E  96D5               	bcf	4053,3,c	;volatile
   394                           
   395                           ;main.c: 88: T0CONbits.T0PS = 0x06;
   396  001A60  50D5               	movf	4053,w,c	;volatile
   397  001A62  0BF8               	andlw	-8
   398  001A64  0906               	iorlw	6
   399  001A66  6ED5               	movwf	4053,c	;volatile
   400                           
   401                           ;main.c: 89: T0CONbits.T0CS = 0;
   402  001A68  9AD5               	bcf	4053,5,c	;volatile
   403                           
   404                           ;main.c: 90: T0CONbits.T08BIT = 0;
   405  001A6A  9CD5               	bcf	4053,6,c	;volatile
   406                           
   407                           ;main.c: 91: INTCONbits.TMR0IF = 0;
   408  001A6C  94F2               	bcf	intcon,2,c	;volatile
   409                           
   410                           ;main.c: 92: TMR0H = tmr0_value >> 8;
   411  001A6E  5002               	movf	setup_tmr0@tmr0_value+1,w,c
   412  001A70  6ED7               	movwf	4055,c	;volatile
   413                           
   414                           ;main.c: 93: TMR0L = tmr0_value;
   415  001A72  C001  FFD6         	movff	setup_tmr0@tmr0_value,4054	;volatile
   416                           
   417                           ;main.c: 94: T0CONbits.TMR0ON = 1;
   418  001A76  8ED5               	bsf	4053,7,c	;volatile
   419  001A78  0012               	return		;funcret
   420  001A7A                     __end_of_setup_tmr0:
   421                           	opt stack 0
   422                           tblptru	equ	0xFF8
   423                           intcon	equ	0xFF2
   424                           wreg	equ	0xFE8
   425                           status	equ	0xFD8
   426                           
   427 ;; *************** function _setPulseWidth *****************
   428 ;; Defined at:
   429 ;;		line 57 in file "pwm.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;  width           2    0[COMRAM] unsigned int 
   432 ;; Auto vars:     Size  Location     Type
   433 ;;		None
   434 ;; Return value:  Size  Location     Type
   435 ;;		None               void
   436 ;; Registers used:
   437 ;;		wreg, status,2, status,0
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0
   443 ;;      Params:         2       0
   444 ;;      Locals:         0       0
   445 ;;      Temps:          2       0
   446 ;;      Totals:         4       0
   447 ;;Total ram usage:        4 bytes
   448 ;; Hardware stack levels used:    1
   449 ;; This function calls:
   450 ;;		Nothing
   451 ;; This function is called by:
   452 ;;		_main
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           	psect	text2
   457  001A7A                     __ptext2:
   458                           	opt stack 0
   459  001A7A                     _setPulseWidth:
   460                           	opt stack 30
   461                           
   462                           ;pwm.c: 59: CCP1CONbits.DC1B = width;
   463                           
   464                           ;incstack = 0
   465  001A7A  C001  F003         	movff	setPulseWidth@width,??_setPulseWidth
   466  001A7E  3A03               	swapf	??_setPulseWidth,f,c
   467  001A80  50BD               	movf	4029,w,c	;volatile
   468  001A82  1803               	xorwf	??_setPulseWidth,w,c
   469  001A84  0BCF               	andlw	-49
   470  001A86  1803               	xorwf	??_setPulseWidth,w,c
   471  001A88  6EBD               	movwf	4029,c	;volatile
   472                           
   473                           ;pwm.c: 60: CCPR1L = width >> 2;
   474  001A8A  C001  F003         	movff	setPulseWidth@width,??_setPulseWidth
   475  001A8E  C002  F004         	movff	setPulseWidth@width+1,??_setPulseWidth+1
   476  001A92  90D8               	bcf	status,0,c
   477  001A94  3204               	rrcf	??_setPulseWidth+1,f,c
   478  001A96  3203               	rrcf	??_setPulseWidth,f,c
   479  001A98  90D8               	bcf	status,0,c
   480  001A9A  3204               	rrcf	??_setPulseWidth+1,f,c
   481  001A9C  3203               	rrcf	??_setPulseWidth,f,c
   482  001A9E  5003               	movf	??_setPulseWidth,w,c
   483  001AA0  6EBE               	movwf	4030,c	;volatile
   484  001AA2  0012               	return		;funcret
   485  001AA4                     __end_of_setPulseWidth:
   486                           	opt stack 0
   487                           tblptru	equ	0xFF8
   488                           intcon	equ	0xFF2
   489                           wreg	equ	0xFE8
   490                           status	equ	0xFD8
   491                           
   492 ;; *************** function _serialSetUp *****************
   493 ;; Defined at:
   494 ;;		line 23 in file "serialprotocol.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;  brg16_bit       1    wreg     unsigned char 
   497 ;;  brgh_bit        1    0[COMRAM] unsigned char 
   498 ;;  spbrg16         2    1[COMRAM] unsigned int 
   499 ;; Auto vars:     Size  Location     Type
   500 ;;  brg16_bit       1    3[COMRAM] unsigned char 
   501 ;; Return value:  Size  Location     Type
   502 ;;		None               void
   503 ;; Registers used:
   504 ;;		wreg, status,2
   505 ;; Tracked objects:
   506 ;;		On entry : 0/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMRAM   BANK0
   510 ;;      Params:         3       0
   511 ;;      Locals:         5       0
   512 ;;      Temps:          0       0
   513 ;;      Totals:         8       0
   514 ;;Total ram usage:        8 bytes
   515 ;; Hardware stack levels used:    1
   516 ;; This function calls:
   517 ;;		Nothing
   518 ;; This function is called by:
   519 ;;		_main
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           	psect	text3
   524  001AA4                     __ptext3:
   525                           	opt stack 0
   526  001AA4                     _serialSetUp:
   527                           	opt stack 30
   528                           
   529                           ;incstack = 0
   530                           ;serialSetUp@brg16_bit stored from wreg
   531  001AA4  6E04               	movwf	serialSetUp@brg16_bit,c
   532                           
   533                           ;serialprotocol.c: 26: ANSELbits.ANS5 = 0;
   534  001AA6  9A7E               	bcf	3966,5,c	;volatile
   535                           
   536                           ;serialprotocol.c: 27: ANSELHbits.ANS11 = 0;
   537  001AA8  967F               	bcf	3967,3,c	;volatile
   538                           
   539                           ;serialprotocol.c: 29: TRISBbits.RB5 = 1;
   540  001AAA  8A93               	bsf	3987,5,c	;volatile
   541                           
   542                           ;serialprotocol.c: 30: TRISBbits.RB7 = 0;
   543  001AAC  9E93               	bcf	3987,7,c	;volatile
   544                           
   545                           ;serialprotocol.c: 31: TRISCbits.RC0 = 0;
   546  001AAE  9094               	bcf	3988,0,c	;volatile
   547                           
   548                           ;serialprotocol.c: 32: TRISCbits.RC1 = 1;
   549  001AB0  8294               	bsf	3988,1,c	;volatile
   550                           
   551                           ;serialprotocol.c: 34: BAUDCON = (brg16_bit) ? 0x08 : 0x00;
   552  001AB2  5004               	movf	serialSetUp@brg16_bit,w,c
   553  001AB4  A4D8               	btfss	status,2,c
   554  001AB6  D004               	goto	l987
   555  001AB8  0E00               	movlw	0
   556  001ABA  6E06               	movwf	_serialSetUp$689+1,c
   557  001ABC  0E00               	movlw	0
   558  001ABE  D003               	goto	L1
   559  001AC0                     l987:
   560  001AC0  0E00               	movlw	0
   561  001AC2  6E06               	movwf	_serialSetUp$689+1,c
   562  001AC4  0E08               	movlw	8
   563  001AC6                     L1:
   564  001AC6  6E05               	movwf	_serialSetUp$689,c
   565  001AC8  D000               	goto	l989
   566  001ACA                     l989:
   567  001ACA  C005  FFB8         	movff	_serialSetUp$689,4024	;volatile
   568                           
   569                           ;serialprotocol.c: 35: TXSTA = (brgh_bit) ? 0x24: 0x20;
   570  001ACE  5001               	movf	serialSetUp@brgh_bit,w,c
   571  001AD0  A4D8               	btfss	status,2,c
   572  001AD2  D004               	goto	l995
   573  001AD4  0E00               	movlw	0
   574  001AD6  6E08               	movwf	_serialSetUp$690+1,c
   575  001AD8  0E20               	movlw	32
   576  001ADA  D003               	goto	L2
   577  001ADC                     l995:
   578  001ADC  0E00               	movlw	0
   579  001ADE  6E08               	movwf	_serialSetUp$690+1,c
   580  001AE0  0E24               	movlw	36
   581  001AE2                     L2:
   582  001AE2  6E07               	movwf	_serialSetUp$690,c
   583  001AE4  D000               	goto	l997
   584  001AE6                     l997:
   585  001AE6  C007  FFAC         	movff	_serialSetUp$690,4012	;volatile
   586                           
   587                           ;serialprotocol.c: 36: SPBRGH = spbrg16 >> 8;
   588  001AEA  5003               	movf	serialSetUp@spbrg16+1,w,c
   589  001AEC  6EB0               	movwf	4016,c	;volatile
   590                           
   591                           ;serialprotocol.c: 37: SPBRG = spbrg16;
   592  001AEE  C002  FFAF         	movff	serialSetUp@spbrg16,4015	;volatile
   593                           
   594                           ;serialprotocol.c: 38: RCSTA = 0x90;
   595  001AF2  0E90               	movlw	144
   596  001AF4  6EAB               	movwf	4011,c	;volatile
   597                           
   598                           ;serialprotocol.c: 42: LATCbits.LATC0 = 1;
   599  001AF6  808B               	bsf	3979,0,c	;volatile
   600  001AF8  0012               	return		;funcret
   601  001AFA                     __end_of_serialSetUp:
   602                           	opt stack 0
   603                           tblptru	equ	0xFF8
   604                           intcon	equ	0xFF2
   605                           wreg	equ	0xFE8
   606                           status	equ	0xFD8
   607                           
   608 ;; *************** function _selectOutput *****************
   609 ;; Defined at:
   610 ;;		line 63 in file "pwm.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;  outputs         1    wreg     unsigned char 
   613 ;;  toggle          1    0[COMRAM] unsigned char 
   614 ;; Auto vars:     Size  Location     Type
   615 ;;  outputs         1    2[COMRAM] unsigned char 
   616 ;; Return value:  Size  Location     Type
   617 ;;		None               void
   618 ;; Registers used:
   619 ;;		wreg, status,2, status,0
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMRAM   BANK0
   625 ;;      Params:         1       0
   626 ;;      Locals:         1       0
   627 ;;      Temps:          1       0
   628 ;;      Totals:         3       0
   629 ;;Total ram usage:        3 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; This function calls:
   632 ;;		Nothing
   633 ;; This function is called by:
   634 ;;		_main
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text4
   639  001B94                     __ptext4:
   640                           	opt stack 0
   641  001B94                     _selectOutput:
   642                           	opt stack 30
   643                           
   644                           ;incstack = 0
   645                           ;selectOutput@outputs stored from wreg
   646  001B94  6E03               	movwf	selectOutput@outputs,c
   647                           
   648                           ;pwm.c: 65: switch (outputs){
   649  001B96  D03D               	goto	l1085
   650  001B98                     l1073:
   651                           
   652                           ;pwm.c: 67: PSTRCON = 0xF0;
   653  001B98  0EF0               	movlw	240
   654  001B9A  6EB9               	movwf	4025,c	;volatile
   655                           
   656                           ;pwm.c: 68: break;
   657  001B9C  0012               	return	
   658  001B9E                     l1075:
   659                           
   660                           ;pwm.c: 70: PSTRCONbits.STRA = (toggle) ? 1 : 0;
   661  001B9E  5001               	movf	selectOutput@toggle,w,c
   662  001BA0  B4D8               	btfsc	status,2,c
   663  001BA2  D003               	goto	u540
   664  001BA4  6A02               	clrf	??_selectOutput& (0+255),c
   665  001BA6  2A02               	incf	??_selectOutput& (0+255),f,c
   666  001BA8  D001               	goto	u558
   667  001BAA                     u540:
   668  001BAA  6A02               	clrf	??_selectOutput& (0+255),c
   669  001BAC                     u558:
   670  001BAC  50B9               	movf	4025,w,c	;volatile
   671  001BAE  1802               	xorwf	??_selectOutput,w,c
   672  001BB0  0BFE               	andlw	-2
   673  001BB2  1802               	xorwf	??_selectOutput,w,c
   674  001BB4  6EB9               	movwf	4025,c	;volatile
   675                           
   676                           ;pwm.c: 71: break;
   677  001BB6  0012               	return	
   678  001BB8                     l1077:
   679                           
   680                           ;pwm.c: 73: PSTRCONbits.STRB = (toggle) ? 1 : 0;
   681  001BB8  5001               	movf	selectOutput@toggle,w,c
   682  001BBA  B4D8               	btfsc	status,2,c
   683  001BBC  D003               	goto	u560
   684  001BBE  6A02               	clrf	??_selectOutput& (0+255),c
   685  001BC0  2A02               	incf	??_selectOutput& (0+255),f,c
   686  001BC2  D001               	goto	u578
   687  001BC4                     u560:
   688  001BC4  6A02               	clrf	??_selectOutput& (0+255),c
   689  001BC6                     u578:
   690  001BC6  4602               	rlncf	??_selectOutput,f,c
   691  001BC8  50B9               	movf	4025,w,c	;volatile
   692  001BCA  1802               	xorwf	??_selectOutput,w,c
   693  001BCC  0BFD               	andlw	-3
   694  001BCE  1802               	xorwf	??_selectOutput,w,c
   695  001BD0  6EB9               	movwf	4025,c	;volatile
   696                           
   697                           ;pwm.c: 74: break;
   698  001BD2  0012               	return	
   699  001BD4                     l1079:
   700                           
   701                           ;pwm.c: 76: PSTRCONbits.STRC = (toggle) ? 1 : 0;
   702  001BD4  5001               	movf	selectOutput@toggle,w,c
   703  001BD6  B4D8               	btfsc	status,2,c
   704  001BD8  D003               	goto	u580
   705  001BDA  6A02               	clrf	??_selectOutput& (0+255),c
   706  001BDC  2A02               	incf	??_selectOutput& (0+255),f,c
   707  001BDE  D001               	goto	u598
   708  001BE0                     u580:
   709  001BE0  6A02               	clrf	??_selectOutput& (0+255),c
   710  001BE2                     u598:
   711  001BE2  4602               	rlncf	??_selectOutput,f,c
   712  001BE4  4602               	rlncf	??_selectOutput,f,c
   713  001BE6  50B9               	movf	4025,w,c	;volatile
   714  001BE8  1802               	xorwf	??_selectOutput,w,c
   715  001BEA  0BFB               	andlw	-5
   716  001BEC  1802               	xorwf	??_selectOutput,w,c
   717  001BEE  6EB9               	movwf	4025,c	;volatile
   718                           
   719                           ;pwm.c: 77: break;
   720  001BF0  0012               	return	
   721  001BF2                     l1081:
   722                           
   723                           ;pwm.c: 79: PSTRCONbits.STRD = (toggle) ? 1 : 0;
   724  001BF2  5001               	movf	selectOutput@toggle,w,c
   725  001BF4  B4D8               	btfsc	status,2,c
   726  001BF6  D003               	goto	u600
   727  001BF8  6A02               	clrf	??_selectOutput& (0+255),c
   728  001BFA  2A02               	incf	??_selectOutput& (0+255),f,c
   729  001BFC  D001               	goto	u618
   730  001BFE                     u600:
   731  001BFE  6A02               	clrf	??_selectOutput& (0+255),c
   732  001C00                     u618:
   733  001C00  4602               	rlncf	??_selectOutput,f,c
   734  001C02  4602               	rlncf	??_selectOutput,f,c
   735  001C04  4602               	rlncf	??_selectOutput,f,c
   736  001C06  50B9               	movf	4025,w,c	;volatile
   737  001C08  1802               	xorwf	??_selectOutput,w,c
   738  001C0A  0BF7               	andlw	-9
   739  001C0C  1802               	xorwf	??_selectOutput,w,c
   740  001C0E  6EB9               	movwf	4025,c	;volatile
   741                           
   742                           ;pwm.c: 81: }
   743                           
   744                           ;pwm.c: 80: break;
   745  001C10  0012               	return	
   746  001C12                     l1085:
   747  001C12  5003               	movf	selectOutput@outputs,w,c
   748                           
   749                           ; Switch size 1, requested type "space"
   750                           ; Number of cases is 5, Range of values is 0 to 8
   751                           ; switch strategies available:
   752                           ; Name         Instructions Cycles
   753                           ; simple_byte           16     9 (average)
   754                           ;	Chosen strategy is simple_byte
   755  001C14  0A00               	xorlw	0	; case 0
   756  001C16  B4D8               	btfsc	status,2,c
   757  001C18  D7BF               	goto	l1073
   758  001C1A  0A01               	xorlw	1	; case 1
   759  001C1C  B4D8               	btfsc	status,2,c
   760  001C1E  D7BF               	goto	l1075
   761  001C20  0A03               	xorlw	3	; case 2
   762  001C22  B4D8               	btfsc	status,2,c
   763  001C24  D7C9               	goto	l1077
   764  001C26  0A06               	xorlw	6	; case 4
   765  001C28  B4D8               	btfsc	status,2,c
   766  001C2A  D7D4               	goto	l1079
   767  001C2C  0A0C               	xorlw	12	; case 8
   768  001C2E  A4D8               	btfss	status,2,c
   769  001C30  0012               	return	
   770  001C32  D7DF               	goto	l1081
   771  001C34  0012               	return		;funcret
   772  001C36                     __end_of_selectOutput:
   773                           	opt stack 0
   774                           tblptru	equ	0xFF8
   775                           intcon	equ	0xFF2
   776                           wreg	equ	0xFE8
   777                           status	equ	0xFD8
   778                           
   779 ;; *************** function _receiveData *****************
   780 ;; Defined at:
   781 ;;		line 78 in file "serialprotocol.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  buffer          2    1[COMRAM] PTR struct receiveBuffer
   784 ;;		 -> main@data(8), 
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  i               2    8[COMRAM] int 
   787 ;;  size            2    4[COMRAM] int 
   788 ;;  byte_1          1    7[COMRAM] unsigned char 
   789 ;;  byte_2          1    6[COMRAM] unsigned char 
   790 ;; Return value:  Size  Location     Type
   791 ;;                  2    1[COMRAM] int 
   792 ;; Registers used:
   793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMRAM   BANK0
   799 ;;      Params:         2       0
   800 ;;      Locals:         6       0
   801 ;;      Temps:          1       0
   802 ;;      Totals:         9       0
   803 ;;Total ram usage:        9 bytes
   804 ;; Hardware stack levels used:    1
   805 ;; Hardware stack levels required when called:    1
   806 ;; This function calls:
   807 ;;		_sendChar
   808 ;; This function is called by:
   809 ;;		_main
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text5
   814  001D02                     __ptext5:
   815                           	opt stack 0
   816  001D02                     _receiveData:
   817                           	opt stack 29
   818                           
   819                           ;serialprotocol.c: 80: uint8_t byte_1;
   820                           ;serialprotocol.c: 81: uint8_t byte_2;
   821                           ;serialprotocol.c: 82: int i = 0;
   822                           
   823                           ;incstack = 0
   824  001D02  0E00               	movlw	0
   825  001D04  6E0A               	movwf	receiveData@i+1,c
   826  001D06  0E00               	movlw	0
   827  001D08  6E09               	movwf	receiveData@i,c
   828                           
   829                           ;serialprotocol.c: 83: int size = 0;
   830  001D0A  0E00               	movlw	0
   831  001D0C  6E06               	movwf	receiveData@size+1,c
   832  001D0E  0E00               	movlw	0
   833  001D10  6E05               	movwf	receiveData@size,c
   834                           
   835                           ;serialprotocol.c: 85: if (RCSTAbits.OERR) {
   836  001D12  A2AB               	btfss	4011,1,c	;volatile
   837  001D14  D006               	goto	l118
   838                           
   839                           ;serialprotocol.c: 86: RCSTAbits.CREN = 0;
   840  001D16  98AB               	bcf	4011,4,c	;volatile
   841                           
   842                           ;serialprotocol.c: 87: RCSTAbits.CREN = 1;
   843  001D18  88AB               	bsf	4011,4,c	;volatile
   844                           
   845                           ;serialprotocol.c: 88: byte_1 = RCREG;
   846  001D1A  CFAE F008          	movff	4014,receiveData@byte_1	;volatile
   847                           
   848                           ;serialprotocol.c: 89: byte_1 = RCREG;
   849  001D1E  CFAE F008          	movff	4014,receiveData@byte_1	;volatile
   850  001D22                     l118:
   851                           
   852                           ;serialprotocol.c: 90: }
   853                           ;serialprotocol.c: 92: if (RCIF){
   854  001D22  AA9E               	btfss	3998,5,c	;volatile
   855  001D24  D057               	goto	l1063
   856                           
   857                           ;serialprotocol.c: 94: byte_1 = RCREG;
   858  001D26  CFAE F008          	movff	4014,receiveData@byte_1	;volatile
   859                           
   860                           ;serialprotocol.c: 96: if ((byte_1 & 0xF0) == 0xE0){
   861  001D2A  5008               	movf	receiveData@byte_1,w,c
   862  001D2C  0BF0               	andlw	240
   863  001D2E  0AE0               	xorlw	224
   864  001D30  A4D8               	btfss	status,2,c
   865  001D32  D050               	goto	l1063
   866                           
   867                           ;serialprotocol.c: 97: size = byte_1 & 0x0F;
   868  001D34  C008  F004         	movff	receiveData@byte_1,??_receiveData
   869  001D38  0E0F               	movlw	15
   870  001D3A  1604               	andwf	??_receiveData,f,c
   871  001D3C  5004               	movf	??_receiveData,w,c
   872  001D3E  6E05               	movwf	receiveData@size,c
   873  001D40  6A06               	clrf	receiveData@size+1,c
   874                           
   875                           ;serialprotocol.c: 98: if (size < 7) {
   876  001D42  BE06               	btfsc	receiveData@size+1,7,c
   877  001D44  D006               	goto	l1045
   878  001D46  5006               	movf	receiveData@size+1,w,c
   879  001D48  E141               	bnz	l1061
   880  001D4A  0E07               	movlw	7
   881  001D4C  5C05               	subwf	receiveData@size,w,c
   882  001D4E  B0D8               	btfsc	status,0,c
   883  001D50  D03D               	goto	l1061
   884  001D52                     l1045:
   885                           
   886                           ;serialprotocol.c: 99: sendChar(0x70);
   887  001D52  0E70               	movlw	112
   888  001D54  EC21  F00D         	call	_sendChar
   889                           
   890                           ;serialprotocol.c: 100: for (; i < size; i++){
   891  001D58  D02D               	goto	l1059
   892                           
   893                           ;serialprotocol.c: 102: while (!RCIF);
   894  001D5A  D000               	goto	l124
   895  001D5C                     l124:
   896  001D5C  AA9E               	btfss	3998,5,c	;volatile
   897  001D5E  D7FE               	goto	l124
   898                           
   899                           ;serialprotocol.c: 103: byte_1 = RCREG;
   900  001D60  CFAE F008          	movff	4014,receiveData@byte_1	;volatile
   901                           
   902                           ;serialprotocol.c: 104: while (!RCIF);
   903  001D64  D000               	goto	l127
   904  001D66                     l127:
   905  001D66  AA9E               	btfss	3998,5,c	;volatile
   906  001D68  D7FE               	goto	l127
   907                           
   908                           ;serialprotocol.c: 105: byte_2 = RCREG;
   909  001D6A  CFAE F007          	movff	4014,receiveData@byte_2	;volatile
   910                           
   911                           ;serialprotocol.c: 107: if ((byte_1 & 0xF0) == 0xA0 && (byte_2 & 0xF0) == 0xA0){
   912  001D6E  5008               	movf	receiveData@byte_1,w,c
   913  001D70  0BF0               	andlw	240
   914  001D72  0AA0               	xorlw	160
   915  001D74  A4D8               	btfss	status,2,c
   916  001D76  D017               	goto	l1055
   917  001D78  5007               	movf	receiveData@byte_2,w,c
   918  001D7A  0BF0               	andlw	240
   919  001D7C  0AA0               	xorlw	160
   920  001D7E  A4D8               	btfss	status,2,c
   921  001D80  D012               	goto	l1055
   922                           
   923                           ;serialprotocol.c: 108: buffer->buffer[i] = byte_1 << 4 | (byte_2 & 0x0F);
   924  001D82  5009               	movf	receiveData@i,w,c
   925  001D84  2402               	addwf	receiveData@buffer,w,c
   926  001D86  6ED9               	movwf	fsr2l,c
   927  001D88  500A               	movf	receiveData@i+1,w,c
   928  001D8A  2003               	addwfc	receiveData@buffer+1,w,c
   929  001D8C  6EDA               	movwf	fsr2h,c
   930  001D8E  C007  F004         	movff	receiveData@byte_2,??_receiveData
   931  001D92  0E0F               	movlw	15
   932  001D94  1604               	andwf	??_receiveData,f,c
   933  001D96  3808               	swapf	receiveData@byte_1,w,c
   934  001D98  0BF0               	andlw	240
   935  001D9A  1004               	iorwf	??_receiveData,w,c
   936  001D9C  6EDF               	movwf	indf2,c
   937                           
   938                           ;serialprotocol.c: 109: sendChar(0x60);
   939  001D9E  0E60               	movlw	96
   940  001DA0  EC21  F00D         	call	_sendChar
   941                           
   942                           ;serialprotocol.c: 110: } else {
   943  001DA4  D004               	goto	l1057
   944  001DA6                     l1055:
   945                           
   946                           ;serialprotocol.c: 111: sendChar(0x50);
   947  001DA6  0E50               	movlw	80
   948  001DA8  EC21  F00D         	call	_sendChar
   949                           
   950                           ;serialprotocol.c: 112: break;
   951  001DAC  D013               	goto	l1063
   952  001DAE                     l1057:
   953  001DAE  4A09               	infsnz	receiveData@i,f,c
   954  001DB0  2A0A               	incf	receiveData@i+1,f,c
   955  001DB2  D000               	goto	l1059
   956  001DB4                     l1059:
   957  001DB4  5005               	movf	receiveData@size,w,c
   958  001DB6  5C09               	subwf	receiveData@i,w,c
   959  001DB8  500A               	movf	receiveData@i+1,w,c
   960  001DBA  0A80               	xorlw	128
   961  001DBC  6E04               	movwf	??_receiveData& (0+255),c
   962  001DBE  5006               	movf	receiveData@size+1,w,c
   963  001DC0  0A80               	xorlw	128
   964  001DC2  5804               	subwfb	??_receiveData& (0+255),w,c
   965  001DC4  B0D8               	btfsc	status,0,c
   966  001DC6  D006               	goto	l1063
   967  001DC8  D7C9               	goto	l124
   968                           
   969                           ;serialprotocol.c: 113: }
   970                           ;serialprotocol.c: 114: }
   971                           ;serialprotocol.c: 115: } else {
   972  001DCA  D004               	goto	l1063
   973  001DCC                     l1061:
   974                           
   975                           ;serialprotocol.c: 116: sendChar(0x40);
   976  001DCC  0E40               	movlw	64
   977  001DCE  EC21  F00D         	call	_sendChar
   978  001DD2  D000               	goto	l1063
   979  001DD4                     l1063:
   980                           
   981                           ;serialprotocol.c: 117: }
   982                           ;serialprotocol.c: 118: }
   983                           ;serialprotocol.c: 119: }
   984                           ;serialprotocol.c: 121: buffer->length = i;
   985  001DD4  EE20 F007          	lfsr	2,7
   986  001DD8  5002               	movf	receiveData@buffer,w,c
   987  001DDA  26D9               	addwf	fsr2l,f,c
   988  001DDC  5003               	movf	receiveData@buffer+1,w,c
   989  001DDE  22DA               	addwfc	fsr2h,f,c
   990  001DE0  C009  FFDF         	movff	receiveData@i,indf2
   991                           
   992                           ;serialprotocol.c: 122: buffer->buffer[i] = 0;
   993  001DE4  5009               	movf	receiveData@i,w,c
   994  001DE6  2402               	addwf	receiveData@buffer,w,c
   995  001DE8  6ED9               	movwf	fsr2l,c
   996  001DEA  500A               	movf	receiveData@i+1,w,c
   997  001DEC  2003               	addwfc	receiveData@buffer+1,w,c
   998  001DEE  6EDA               	movwf	fsr2h,c
   999  001DF0  0E00               	movlw	0
  1000  001DF2  6EDF               	movwf	indf2,c
  1001                           
  1002                           ;serialprotocol.c: 124: return i;
  1003  001DF4  C009  F002         	movff	receiveData@i,?_receiveData
  1004  001DF8  C00A  F003         	movff	receiveData@i+1,?_receiveData+1
  1005  001DFC  0012               	return	
  1006  001DFE  0012               	return		;funcret
  1007  001E00                     __end_of_receiveData:
  1008                           	opt stack 0
  1009                           tblptru	equ	0xFF8
  1010                           intcon	equ	0xFF2
  1011                           wreg	equ	0xFE8
  1012                           indf2	equ	0xFDF
  1013                           fsr2h	equ	0xFDA
  1014                           fsr2l	equ	0xFD9
  1015                           status	equ	0xFD8
  1016                           
  1017 ;; *************** function _sendChar *****************
  1018 ;; Defined at:
  1019 ;;		line 60 in file "serialprotocol.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;  character       1    wreg     unsigned char 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  character       1    0[COMRAM] unsigned char 
  1024 ;; Return value:  Size  Location     Type
  1025 ;;		None               void
  1026 ;; Registers used:
  1027 ;;		wreg
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMRAM   BANK0
  1033 ;;      Params:         0       0
  1034 ;;      Locals:         1       0
  1035 ;;      Temps:          0       0
  1036 ;;      Totals:         1       0
  1037 ;;Total ram usage:        1 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; This function calls:
  1040 ;;		Nothing
  1041 ;; This function is called by:
  1042 ;;		_receiveData
  1043 ;;		_sendData
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text6
  1048  001A42                     __ptext6:
  1049                           	opt stack 0
  1050  001A42                     _sendChar:
  1051                           	opt stack 29
  1052                           
  1053                           ;incstack = 0
  1054                           ;sendChar@character stored from wreg
  1055  001A42  6E01               	movwf	sendChar@character,c
  1056                           
  1057                           ;serialprotocol.c: 62: while(!TXSTAbits.TRMT);
  1058  001A44  D000               	goto	l106
  1059  001A46                     l106:
  1060  001A46  A2AC               	btfss	4012,1,c	;volatile
  1061  001A48  D7FE               	goto	l106
  1062                           
  1063                           ;serialprotocol.c: 63: TXREG = character;
  1064  001A4A  C001  FFAD         	movff	sendChar@character,4013	;volatile
  1065  001A4E  0012               	return		;funcret
  1066  001A50                     __end_of_sendChar:
  1067                           	opt stack 0
  1068                           tblptru	equ	0xFF8
  1069                           intcon	equ	0xFF2
  1070                           wreg	equ	0xFE8
  1071                           indf2	equ	0xFDF
  1072                           fsr2h	equ	0xFDA
  1073                           fsr2l	equ	0xFD9
  1074                           status	equ	0xFD8
  1075                           
  1076 ;; *************** function _pmwSingleModeSetUp *****************
  1077 ;; Defined at:
  1078 ;;		line 3 in file "pwm.c"
  1079 ;; Parameters:    Size  Location     Type
  1080 ;;  polarity        1    wreg     enum E3874
  1081 ;;  valuePR2        1    0[COMRAM] unsigned char 
  1082 ;;  scaler          1    1[COMRAM] enum E3880
  1083 ;;  outputs         1    2[COMRAM] unsigned char 
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;  polarity        1    3[COMRAM] enum E3874
  1086 ;; Return value:  Size  Location     Type
  1087 ;;		None               void
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0
  1095 ;;      Params:         3       0
  1096 ;;      Locals:         1       0
  1097 ;;      Temps:          0       0
  1098 ;;      Totals:         4       0
  1099 ;;Total ram usage:        4 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; This function calls:
  1102 ;;		Nothing
  1103 ;; This function is called by:
  1104 ;;		_main
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108                           	psect	text7
  1109  001AFA                     __ptext7:
  1110                           	opt stack 0
  1111  001AFA                     _pmwSingleModeSetUp:
  1112                           	opt stack 30
  1113                           
  1114                           ;incstack = 0
  1115                           ;pmwSingleModeSetUp@polarity stored from wreg
  1116  001AFA  6E04               	movwf	pmwSingleModeSetUp@polarity,c
  1117                           
  1118                           ;pwm.c: 6: T2CONbits.TMR2ON = 1;
  1119  001AFC  84CA               	bsf	4042,2,c	;volatile
  1120                           
  1121                           ;pwm.c: 8: switch (scaler) {
  1122  001AFE  D009               	goto	l1011
  1123  001B00                     l1005:
  1124                           
  1125                           ;pwm.c: 10: T2CONbits.T2CKPS = 0x00;
  1126  001B00  0EFC               	movlw	-4
  1127  001B02  16CA               	andwf	4042,f,c	;volatile
  1128                           
  1129                           ;pwm.c: 11: break;
  1130  001B04  D011               	goto	l1013
  1131                           
  1132                           ;pwm.c: 12: case TMRP_4:
  1133  001B06  D000               	goto	l1009
  1134  001B08                     l1009:
  1135                           
  1136                           ;pwm.c: 16: T2CONbits.T2CKPS = 0x11;
  1137  001B08  50CA               	movf	4042,w,c	;volatile
  1138  001B0A  0BFC               	andlw	-4
  1139  001B0C  0901               	iorlw	1
  1140  001B0E  6ECA               	movwf	4042,c	;volatile
  1141                           
  1142                           ;pwm.c: 17: }
  1143  001B10  D00B               	goto	l1013
  1144  001B12                     l1011:
  1145  001B12  5002               	movf	pmwSingleModeSetUp@scaler,w,c
  1146                           
  1147                           ; Switch size 1, requested type "space"
  1148                           ; Number of cases is 3, Range of values is 0 to 2
  1149                           ; switch strategies available:
  1150                           ; Name         Instructions Cycles
  1151                           ; simple_byte           10     6 (average)
  1152                           ;	Chosen strategy is simple_byte
  1153  001B14  0A00               	xorlw	0	; case 0
  1154  001B16  B4D8               	btfsc	status,2,c
  1155  001B18  D7F3               	goto	l1005
  1156  001B1A  0A01               	xorlw	1	; case 1
  1157  001B1C  B4D8               	btfsc	status,2,c
  1158  001B1E  D7F4               	goto	l1009
  1159  001B20  0A03               	xorlw	3	; case 2
  1160  001B22  B4D8               	btfsc	status,2,c
  1161  001B24  D7F1               	goto	l1009
  1162  001B26  D000               	goto	l1013
  1163  001B28                     l1013:
  1164                           
  1165                           ;pwm.c: 19: CCP1CONbits.P1M = 0x00;
  1166  001B28  0E3F               	movlw	-193
  1167  001B2A  16BD               	andwf	4029,f,c	;volatile
  1168                           
  1169                           ;pwm.c: 21: switch (polarity) {
  1170  001B2C  D012               	goto	l1021
  1171  001B2E                     l1015:
  1172                           
  1173                           ;pwm.c: 23: CCP1CONbits.CCP1M = 0b1100;
  1174  001B2E  50BD               	movf	4029,w,c	;volatile
  1175  001B30  0BF0               	andlw	-16
  1176  001B32  090C               	iorlw	12
  1177  001B34  D007               	goto	L4
  1178  001B36                     l1017:
  1179                           
  1180                           ;pwm.c: 26: CCP1CONbits.CCP1M = 0b1101;
  1181  001B36  50BD               	movf	4029,w,c	;volatile
  1182  001B38  0BF0               	andlw	-16
  1183  001B3A  090D               	iorlw	13
  1184  001B3C  D003               	goto	L4
  1185  001B3E                     l1019:
  1186                           
  1187                           ;pwm.c: 29: CCP1CONbits.CCP1M = 0b1110;
  1188  001B3E  50BD               	movf	4029,w,c	;volatile
  1189  001B40  0BF0               	andlw	-16
  1190  001B42  090E               	iorlw	14
  1191  001B44                     L4:
  1192  001B44  6EBD               	movwf	4029,c	;volatile
  1193                           
  1194                           ;pwm.c: 30: break;
  1195  001B46  D012               	goto	l160
  1196  001B48                     l163:
  1197                           
  1198                           ;pwm.c: 32: CCP1CONbits.CCP1M = 0b1111;
  1199  001B48  80BD               	bsf	4029,0,c	;volatile
  1200  001B4A  82BD               	bsf	4029,1,c	;volatile
  1201  001B4C  84BD               	bsf	4029,2,c	;volatile
  1202  001B4E  86BD               	bsf	4029,3,c	;volatile
  1203                           
  1204                           ;pwm.c: 33: }
  1205  001B50  D00D               	goto	l160
  1206  001B52                     l1021:
  1207  001B52  5004               	movf	pmwSingleModeSetUp@polarity,w,c
  1208                           
  1209                           ; Switch size 1, requested type "space"
  1210                           ; Number of cases is 4, Range of values is 0 to 3
  1211                           ; switch strategies available:
  1212                           ; Name         Instructions Cycles
  1213                           ; simple_byte           13     7 (average)
  1214                           ;	Chosen strategy is simple_byte
  1215  001B54  0A00               	xorlw	0	; case 0
  1216  001B56  B4D8               	btfsc	status,2,c
  1217  001B58  D7EA               	goto	l1015
  1218  001B5A  0A01               	xorlw	1	; case 1
  1219  001B5C  B4D8               	btfsc	status,2,c
  1220  001B5E  D7EB               	goto	l1017
  1221  001B60  0A03               	xorlw	3	; case 2
  1222  001B62  B4D8               	btfsc	status,2,c
  1223  001B64  D7EC               	goto	l1019
  1224  001B66  0A01               	xorlw	1	; case 3
  1225  001B68  B4D8               	btfsc	status,2,c
  1226  001B6A  D7EE               	goto	l163
  1227  001B6C                     l160:
  1228                           
  1229                           ;pwm.c: 35: PSTRCONbits.STRSYNC = 1;
  1230  001B6C  88B9               	bsf	4025,4,c	;volatile
  1231                           
  1232                           ;pwm.c: 37: if (outputs & 0x01) {
  1233  001B6E  A003               	btfss	pmwSingleModeSetUp@outputs,0,c
  1234  001B70  D002               	goto	l164
  1235                           
  1236                           ;pwm.c: 38: LATCbits.LATC5 = 0;
  1237  001B72  9A8B               	bcf	3979,5,c	;volatile
  1238                           
  1239                           ;pwm.c: 39: TRISCbits.RC5 = 0;
  1240  001B74  9A94               	bcf	3988,5,c	;volatile
  1241  001B76                     l164:
  1242                           
  1243                           ;pwm.c: 40: }
  1244                           ;pwm.c: 41: if (outputs & 0x02) {
  1245  001B76  A203               	btfss	pmwSingleModeSetUp@outputs,1,c
  1246  001B78  D002               	goto	l165
  1247                           
  1248                           ;pwm.c: 42: LATCbits.LATC4 = 0;
  1249  001B7A  988B               	bcf	3979,4,c	;volatile
  1250                           
  1251                           ;pwm.c: 43: TRISCbits.RC4 = 0;
  1252  001B7C  9894               	bcf	3988,4,c	;volatile
  1253  001B7E                     l165:
  1254                           
  1255                           ;pwm.c: 44: }
  1256                           ;pwm.c: 45: if (outputs & 0x04) {
  1257  001B7E  A403               	btfss	pmwSingleModeSetUp@outputs,2,c
  1258  001B80  D002               	goto	l166
  1259                           
  1260                           ;pwm.c: 46: LATCbits.LATC3 = 0;
  1261  001B82  968B               	bcf	3979,3,c	;volatile
  1262                           
  1263                           ;pwm.c: 47: TRISCbits.RC3 = 0;
  1264  001B84  9694               	bcf	3988,3,c	;volatile
  1265  001B86                     l166:
  1266                           
  1267                           ;pwm.c: 48: }
  1268                           ;pwm.c: 49: if (outputs & 0x08) {
  1269  001B86  A603               	btfss	pmwSingleModeSetUp@outputs,3,c
  1270  001B88  D002               	goto	l167
  1271                           
  1272                           ;pwm.c: 50: LATCbits.LATC2 = 0;
  1273  001B8A  948B               	bcf	3979,2,c	;volatile
  1274                           
  1275                           ;pwm.c: 51: TRISCbits.RC2 = 0;
  1276  001B8C  9494               	bcf	3988,2,c	;volatile
  1277  001B8E                     l167:
  1278                           
  1279                           ;pwm.c: 52: }
  1280                           ;pwm.c: 54: PR2 = valuePR2;
  1281  001B8E  C001  FFCB         	movff	pmwSingleModeSetUp@valuePR2,4043	;volatile
  1282  001B92  0012               	return		;funcret
  1283  001B94                     __end_of_pmwSingleModeSetUp:
  1284                           	opt stack 0
  1285  0000                     tblptru	equ	0xFF8
  1286                           intcon	equ	0xFF2
  1287                           wreg	equ	0xFE8
  1288                           indf2	equ	0xFDF
  1289                           fsr2h	equ	0xFDA
  1290                           fsr2l	equ	0xFD9
  1291                           status	equ	0xFD8
  1292                           tblptru	equ	0xFF8
  1293                           intcon	equ	0xFF2
  1294                           wreg	equ	0xFE8
  1295                           indf2	equ	0xFDF
  1296                           fsr2h	equ	0xFDA
  1297                           fsr2l	equ	0xFD9
  1298                           status	equ	0xFD8
  1299                           
  1300                           	psect	rparam
  1301  0000                     tblptru	equ	0xFF8
  1302                           intcon	equ	0xFF2
  1303                           wreg	equ	0xFE8
  1304                           indf2	equ	0xFDF
  1305                           fsr2h	equ	0xFDA
  1306                           fsr2l	equ	0xFD9
  1307                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      25
    BANK0           160      0       0

Pointer List with Targets:

    receiveData@buffer	PTR struct receiveBuffer size(2) Largest target is 8
		 -> main@data(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_receiveData
    _receiveData->_sendChar

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0    1777
                                             10 COMRAM    13    13      0
                 _pmwSingleModeSetUp
                        _receiveData
                       _selectOutput
                        _serialSetUp
                      _setPulseWidth
                         _setup_tmr0
 ---------------------------------------------------------------------------------
 (1) _setup_tmr0                                           2     0      2     108
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _setPulseWidth                                        4     2      2     172
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _serialSetUp                                          8     5      3     264
                                              0 COMRAM     8     5      3
 ---------------------------------------------------------------------------------
 (1) _selectOutput                                         3     2      1     238
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _receiveData                                          9     7      2     440
                                              1 COMRAM     9     7      2
                           _sendChar
 ---------------------------------------------------------------------------------
 (2) _sendChar                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _pmwSingleModeSetUp                                   4     1      3     346
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _pmwSingleModeSetUp
   _receiveData
     _sendChar
   _selectOutput
   _serialSetUp
   _setPulseWidth
   _setup_tmr0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       3        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     17      19       1       26.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      19       4        0.0%
DATA                 0      0      19       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Jul 24 17:10:56 2015

        ?_pmwSingleModeSetUp 0001         serialSetUp@brg16_bit 0004                          l106 1A46  
                        l124 1D5C                          l118 1D22                          l127 1D66  
                        l160 1B6C                          l163 1B48                          l164 1B76  
                        l165 1B7E                          l166 1B86                          l167 1B8E  
                        l995 1ADC                          l987 1AC0                          l997 1AE6  
                        l989 1ACA                          _PR2 000FCB                          u600 1BFE  
                        u540 1BAA                          u560 1BC4                          u618 1C00  
                        u580 1BE0                          u558 1BAC                          u578 1BC6  
                        u667 1C3C                          u598 1BE2                 __CFG_BORV$19 000000  
        serialSetUp@brgh_bit 0001           serialSetUp@spbrg16 0002                          wreg 000FE8  
               __CFG_FOSC$HS 000000         ??_pmwSingleModeSetUp 0004                 __CFG_LVP$OFF 000000  
                       l1011 1B12                         l1021 1B52                         l1013 1B28  
                       l1005 1B00                         l1101 1C90                         l1015 1B2E  
                       l1017 1B36                         l1009 1B08                         l1113 1CD4  
                       l1019 1B3E                         l1045 1D52                         l1061 1DCC  
                       l1109 1CC0                         l1055 1DA6                         l1063 1DD4  
                       l1057 1DAE                         l1081 1BF2                         l1073 1B98  
                       l1059 1DB4                         l1075 1B9E                         l1077 1BB8  
                       l1085 1C12                         l1079 1BD4                         _RCIF 007CF5  
                       _TMR3 000FB2                         _main 1C36                         fsr2h 000FDA  
                       indf2 000FDF                         fsr2l 000FD9                         start 0002  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000010  
                      ?_main 0001                        _RCREG 000FAE               __CFG_BBSIZ$OFF 000000  
                      _RCSTA 000FAB                        _TMR0H 000FD7                        _TMR0L 000FD6  
                      _SPBRG 000FAF                        _TXREG 000FAD                        _TXSTA 000FAC  
             __CFG_FCMEN$OFF 000000                        main@i 000E                        status 000FD8  
             __CFG_HFOFST$ON 000000                 ?_receiveData 0002              __initialization 1A50  
               __end_of_main 1D02               __CFG_PCLKEN$ON 000000          selectOutput@outputs 0003  
                     ??_main 000B                __activetblptr 000002               __CFG_PLLEN$OFF 000000  
                     _CCPR1L 000FBE               __CFG_WDTEN$OFF 000000                       _SPBRGH 000FB0  
       setup_tmr0@tmr0_value 0001        __end_of_setPulseWidth 1AA4    pmwSingleModeSetUp@outputs 0003  
               ?_serialSetUp 0001               __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000  
           __end_of_sendChar 1A50                       tblptru 000FF8                   __accesstop 0060  
    __end_of__initialization 1A54                ___rparam_used 000001               __pcstackCOMRAM 0001  
   pmwSingleModeSetUp@scaler 0002         __size_of_receiveData 00FE                ?_selectOutput 0001  
                    _BAUDCON 000FB8  __size_of_pmwSingleModeSetUp 009A                      _PSTRCON 000FB9  
                  ?_sendChar 0001              __CFG_PWRTEN$OFF 000000                      __Hparam 0000  
                    __Lparam 0000               ??_selectOutput 0002         __size_of_serialSetUp 0056  
                    __pcinit 1A50                    _ANSELbits 000F7E                      __ramtop 0100  
                    __ptext0 1C36                      __ptext1 1A5E                      __ptext2 1A7A  
                    __ptext3 1AA4                      __ptext4 1B94                      __ptext5 1D02  
                    __ptext6 1A42                      __ptext7 1AFA                    _T0CONbits 000FD5  
                  _T2CONbits 000FCA                    _T3CONbits 000FB1                      main@wat 000D  
       end_of_initialization 1A54                __Lmediumconst 0000                   ??_sendChar 0001  
                  _RCSTAbits 000FAB                   _timer3Time 0018              receiveData@size 0005  
                 _setup_tmr0 1A5E                    _TRISBbits 000F93                    _TRISCbits 000F94  
                _CCP1CONbits 000FBD                    _TXSTAbits 000FAC                 receiveData@i 0009  
     __size_of_setPulseWidth 002A          start_initialization 1A50           selectOutput@toggle 0001  
       __end_of_selectOutput 1C36                  ?_setup_tmr0 0001                  __pbssCOMRAM 0018  
              ??_receiveData 0004                _setPulseWidth 1A7A            __size_of_sendChar 000E  
 __end_of_pmwSingleModeSetUp 1B94                     _LATCbits 000F8B               ?_setPulseWidth 0001  
              ??_serialSetUp 0004          __size_of_setup_tmr0 001C                     _PIR2bits 000FA1  
           __CFG_WDTPS$32768 000000          __end_of_receiveData 1E00        __size_of_selectOutput 00A2  
                   __Hrparam 0000                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
               _selectOutput 1B94          __end_of_serialSetUp 1AFA                   _ANSELHbits 000F7F  
            ??_setPulseWidth 0003                __size_of_main 00CC                  _receiveData 1D02  
                   _sendChar 1A42                     main@data 0010            receiveData@buffer 0002  
          receiveData@byte_1 0008            receiveData@byte_2 0007              _serialSetUp$690 0007  
            _serialSetUp$689 0005                 ??_setup_tmr0 0003                   _INTCONbits 000FF2  
                _serialSetUp 1AA4           __end_of_setup_tmr0 1A7A           setPulseWidth@width 0001  
                _PSTRCONbits 000FB9   pmwSingleModeSetUp@valuePR2 0001   pmwSingleModeSetUp@polarity 0004  
         _pmwSingleModeSetUp 1AFA            sendChar@character 0001  
