

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Aug 04 15:36:41 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31  0000                     _TMR0	set	4054
    32  0000                     _TMR3	set	4018
    33  0000                     _ANSELHbits	set	3967
    34  0000                     _ANSELbits	set	3966
    35  0000                     _BAUDCON	set	4024
    36  0000                     _INTCON	set	4082
    37  0000                     _INTCON2bits	set	4081
    38  0000                     _INTCON3bits	set	4080
    39  0000                     _INTCONbits	set	4082
    40  0000                     _LATAbits	set	3977
    41  0000                     _LATCbits	set	3979
    42  0000                     _PIE2bits	set	4000
    43  0000                     _PIR2bits	set	4001
    44  0000                     _RCREG	set	4014
    45  0000                     _RCSTA	set	4011
    46  0000                     _RCSTAbits	set	4011
    47  0000                     _SPBRG	set	4015
    48  0000                     _SPBRGH	set	4016
    49  0000                     _SSPBUF	set	4041
    50  0000                     _SSPCON1	set	4038
    51  0000                     _SSPCON1bits	set	4038
    52  0000                     _SSPSTAT	set	4039
    53  0000                     _SSPSTATbits	set	4039
    54  0000                     _T0CON	set	4053
    55  0000                     _T3CON	set	4017
    56  0000                     _TRISAbits	set	3986
    57  0000                     _TRISBbits	set	3987
    58  0000                     _TRISCbits	set	3988
    59  0000                     _TXREG	set	4013
    60  0000                     _TXSTA	set	4012
    61  0000                     _INT2IF	set	32641
    62  0000                     _RCIE	set	31981
    63  0000                     _RCIF	set	31989
    64  0000                     _TXIE	set	31980
    65  0000                     _TXIF	set	31988
    66                           
    67 ;;
    68 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    69 ;;
    70 ;; *************** function _main *****************
    71 ;; Defined at:
    72 ;;		line 27 in file "main.c"
    73 ;; Parameters:    Size  Location     Type
    74 ;;		None
    75 ;; Auto vars:     Size  Location     Type
    76 ;;  value           2   51[COMRAM] int 
    77 ;;  pic_to_pc      34   53[COMRAM] struct circular_buffer
    78 ;;  pic_to_pic     34   17[COMRAM] struct circular_buffer
    79 ;;  value           1    0        unsigned char 
    80 ;; Return value:  Size  Location     Type
    81 ;;                  2   21[None  ] int 
    82 ;; Registers used:
    83 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
    84 ;; Tracked objects:
    85 ;;		On entry : 0/0
    86 ;;		On exit  : 0/0
    87 ;;		Unchanged: 0/0
    88 ;; Data sizes:     COMRAM   BANK0
    89 ;;      Params:         0       0
    90 ;;      Locals:        70       0
    91 ;;      Temps:          0       0
    92 ;;      Totals:        70       0
    93 ;;Total ram usage:       70 bytes
    94 ;; Hardware stack levels required when called:    2
    95 ;; This function calls:
    96 ;;		_eserial_send_data
    97 ;;		_eserial_setup
    98 ;;		_espi_setup
    99 ;;		_espi_slave_receive
   100 ;;		_espi_slave_send
   101 ;;		_serial_send_byte
   102 ;;		_setup_timer3
   103 ;;		_spi_slave_peek_receive
   104 ;; This function is called by:
   105 ;;		Startup code after reset
   106 ;; This function uses a non-reentrant model
   107 ;;
   108                           
   109                           	psect	text0
   110  001C16                     __ptext0:
   111                           	opt stack 0
   112  001C16                     _main:
   113                           	opt stack 29
   114                           
   115                           ;main.c: 29: struct circular_buffer pic_to_pic = {0, 0, {0}};
   116                           
   117                           ;incstack = 0
   118  001C16  EE20  F060         	lfsr	2,main@F4057
   119  001C1A  EE10  F012         	lfsr	1,main@pic_to_pic
   120  001C1E  0E21               	movlw	33
   121  001C20                     u1701:
   122  001C20  CFDB FFE3          	movff	plusw2,plusw1
   123  001C24  06E8               	decf	wreg,f,c
   124  001C26  E2FC               	bc	u1701
   125                           
   126                           ;main.c: 30: struct circular_buffer pic_to_pc = {0, 0, {0}};
   127  001C28  EE20  F082         	lfsr	2,main@F4059
   128  001C2C  EE10  F036         	lfsr	1,main@pic_to_pc
   129  001C30  0E21               	movlw	33
   130  001C32                     u1711:
   131  001C32  CFDB FFE3          	movff	plusw2,plusw1
   132  001C36  06E8               	decf	wreg,f,c
   133  001C38  E2FC               	bc	u1711
   134                           
   135                           ;main.c: 32: espi_setup(0x05);
   136  001C3A  0E05               	movlw	5
   137  001C3C  EC47  F00C         	call	_espi_setup
   138                           
   139                           ;main.c: 33: eserial_setup(0x08 | 0x04, 0x10);
   140  001C40  0E00               	movlw	0
   141  001C42  6E09               	movwf	eserial_setup@baudrate_value+1,c
   142  001C44  0E10               	movlw	16
   143  001C46  6E08               	movwf	eserial_setup@baudrate_value,c
   144  001C48  0E0C               	movlw	12
   145  001C4A  EC2A  F00C         	call	_eserial_setup
   146                           
   147                           ;main.c: 34: setup_timer3(0x80 | 0x00 | 0x01);
   148  001C4E  0E81               	movlw	129
   149  001C50  ECF5  F00B         	call	_setup_timer3
   150  001C54  D000               	goto	l1982
   151  001C56                     l1982:
   152                           
   153                           ;main.c: 43: int16_t value;
   154                           ;main.c: 44: if (spi_slave_peek_receive(1, &value)) {
   155  001C56  0E34               	movlw	low main@value_87
   156  001C58  6E04               	movwf	spi_slave_peek_receive@byte,c
   157  001C5A  0E00               	movlw	high main@value_87
   158  001C5C  6E05               	movwf	spi_slave_peek_receive@byte+1,c
   159  001C5E  0E01               	movlw	1
   160  001C60  EC63  F00C         	call	_spi_slave_peek_receive
   161  001C64  0900               	iorlw	0
   162  001C66  B4D8               	btfsc	status,2,c
   163  001C68  D01B               	goto	l27
   164                           
   165                           ;main.c: 45: serial_send_byte(value);
   166  001C6A  5034               	movf	main@value_87,w,c
   167  001C6C  ECF9  F00B         	call	_serial_send_byte
   168                           
   169                           ;main.c: 46: if (value == 0x20) {
   170  001C70  0E20               	movlw	32
   171  001C72  1834               	xorwf	main@value_87,w,c
   172  001C74  1035               	iorwf	main@value_87+1,w,c
   173  001C76  A4D8               	btfss	status,2,c
   174  001C78  D007               	goto	l1990
   175                           
   176                           ;main.c: 47: espi_slave_send(&pic_to_pic);
   177  001C7A  0E12               	movlw	low main@pic_to_pic
   178  001C7C  6E07               	movwf	espi_slave_send@buffer,c
   179  001C7E  0E00               	movlw	high main@pic_to_pic
   180  001C80  6E08               	movwf	espi_slave_send@buffer+1,c
   181  001C82  EC59  F00E         	call	_espi_slave_send	;wreg free
   182                           
   183                           ;main.c: 48: } else if (value == 0x10) {
   184  001C86  D00C               	goto	l27
   185  001C88                     l1990:
   186  001C88  0E10               	movlw	16
   187  001C8A  1834               	xorwf	main@value_87,w,c
   188  001C8C  1035               	iorwf	main@value_87+1,w,c
   189  001C8E  A4D8               	btfss	status,2,c
   190  001C90  D007               	goto	l27
   191                           
   192                           ;main.c: 49: espi_slave_receive(&pic_to_pc);
   193  001C92  0E36               	movlw	low main@pic_to_pc
   194  001C94  6E06               	movwf	espi_slave_receive@buffer,c
   195  001C96  0E00               	movlw	high main@pic_to_pc
   196  001C98  6E07               	movwf	espi_slave_receive@buffer+1,c
   197  001C9A  ECBE  F00D         	call	_espi_slave_receive	;wreg free
   198  001C9E  D000               	goto	l27
   199  001CA0                     l27:
   200                           
   201                           ;main.c: 50: }
   202                           ;main.c: 51: }
   203                           ;main.c: 53: eserial_send_data(&pic_to_pc);
   204  001CA0  0E36               	movlw	low main@pic_to_pc
   205  001CA2  6E07               	movwf	eserial_send_data@buffer,c
   206  001CA4  0E00               	movlw	high main@pic_to_pc
   207  001CA6  6E08               	movwf	eserial_send_data@buffer+1,c
   208  001CA8  ECBD  F00C         	call	_eserial_send_data	;wreg free
   209  001CAC  D7D4               	goto	l1982
   210                           
   211                           ;main.c: 54: }
   212                           ;main.c: 56: return (0);
   213                           ;	Return value of _main is never used
   214  001CAE  EF01  F000         	goto	start
   215  001CB2                     __end_of_main:
   216                           	opt stack 0
   217                           wreg	equ	0xFE8
   218                           plusw1	equ	0xFE3
   219                           plusw2	equ	0xFDB
   220                           status	equ	0xFD8
   221                           
   222                           	psect	cinit
   223  00183C                     __pcinit:
   224                           	opt stack 0
   225  00183C                     start_initialization:
   226                           	opt stack 0
   227  00183C                     __initialization:
   228                           	opt stack 0
   229                           
   230                           ; Clear objects allocated to BANK0 (68 bytes)
   231  00183C  EE00  F060         	lfsr	0,__pbssBANK0
   232  001840  0E44               	movlw	68
   233  001842                     clear_0:
   234  001842  6AEE               	clrf	postinc0,c
   235  001844  06E8               	decf	wreg,f,c
   236  001846  E1FD               	bnz	clear_0
   237                           
   238                           ; Clear objects allocated to COMRAM (1 bytes)
   239  001848  6A58               	clrf	__pbssCOMRAM& (0+255),c
   240  00184A                     end_of_initialization:
   241                           	opt stack 0
   242  00184A                     __end_of__initialization:
   243                           	opt stack 0
   244  00184A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   245  00184C  6EF8               	movwf	tblptru,c
   246  00184E  0100               	movlb	0
   247  001850  EF0B  F00E         	goto	_main	;jump to C main() function
   248                           tblptru	equ	0xFF8
   249                           postinc0	equ	0xFEE
   250                           wreg	equ	0xFE8
   251                           plusw1	equ	0xFE3
   252                           plusw2	equ	0xFDB
   253                           status	equ	0xFD8
   254                           
   255                           	psect	bssCOMRAM
   256  000058                     __pbssCOMRAM:
   257                           	opt stack 0
   258  000058                     _dummy_byte:
   259                           	opt stack 0
   260  000058                     	ds	1
   261                           tblptru	equ	0xFF8
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           plusw1	equ	0xFE3
   265                           plusw2	equ	0xFDB
   266                           status	equ	0xFD8
   267                           
   268                           	psect	bssBANK0
   269  000060                     __pbssBANK0:
   270                           	opt stack 0
   271  000060                     main@F4057:
   272                           	opt stack 0
   273  000060                     	ds	34
   274  000082                     main@F4059:
   275                           	opt stack 0
   276  000082                     	ds	34
   277                           tblptru	equ	0xFF8
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           plusw1	equ	0xFE3
   281                           plusw2	equ	0xFDB
   282                           status	equ	0xFD8
   283                           
   284                           	psect	cstackCOMRAM
   285  000001                     __pcstackCOMRAM:
   286                           	opt stack 0
   287  000001                     ?_buffer_pop:
   288                           	opt stack 0
   289  000001                     ?_spi_slave_get_byte:
   290                           	opt stack 0
   291  000001                     ?_buffer_peek:
   292                           	opt stack 0
   293  000001                     serial_send_byte@byte:
   294                           	opt stack 0
   295  000001                     setup_timer3@T3CON_reg:
   296                           	opt stack 0
   297  000001                     setup_spi@SSPCON1_reg:
   298                           	opt stack 0
   299  000001                     spi_send_get_byte@byte:
   300                           	opt stack 0
   301  000001                     setup_simple_serial@baudrate_value:
   302                           	opt stack 0
   303  000001                     encode_data@byte_1:
   304                           	opt stack 0
   305  000001                     decode_data@data:
   306                           	opt stack 0
   307  000001                     buffer_count@buffer:
   308                           	opt stack 0
   309  000001                     buffer_space@buffer:
   310                           	opt stack 0
   311  000001                     buffer_push@buffer:
   312                           	opt stack 0
   313  000001                     buffer_pop@buffer:
   314                           	opt stack 0
   315  000001                     buffer_peek@buffer:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x0
   319  000001                     	ds	1
   320  000002                     setup_spi@SSPSTAT_reg:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x1
   324  000002                     	ds	1
   325  000003                     ??_buffer_pop:
   326  000003                     ??_buffer_peek:
   327  000003                     decode_data@byte_1:
   328                           	opt stack 0
   329  000003                     buffer_push@byte:
   330                           	opt stack 0
   331  000003                     spi_slave_get_byte@byte:
   332                           	opt stack 0
   333  000003                     espi_setup@mode:
   334                           	opt stack 0
   335  000003                     _setup_simple_serial$200:
   336                           	opt stack 0
   337  000003                     encode_data@byte_2:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x2
   341  000003                     	ds	1
   342  000004                     ??_buffer_push:
   343  000004                     decode_data@byte_2:
   344                           	opt stack 0
   345  000004                     spi_slave_peek_receive@byte:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x3
   349  000004                     	ds	1
   350  000005                     ??_encode_data:
   351  000005                     ??_decode_data:
   352  000005                     buffer_push@current_position:
   353                           	opt stack 0
   354  000005                     _setup_simple_serial$201:
   355                           	opt stack 0
   356  000005                     buffer_pop@byte:
   357                           	opt stack 0
   358  000005                     buffer_peek@byte:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x4
   362  000005                     	ds	1
   363  000006                     encode_data@data:
   364                           	opt stack 0
   365  000006                     spi_slave_peek_receive@get_byte:
   366                           	opt stack 0
   367  000006                     espi_slave_receive@buffer:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x5
   371  000006                     	ds	1
   372  000007                     setup_simple_serial@baudrate_bits:
   373                           	opt stack 0
   374  000007                     eserial_send_data@buffer:
   375                           	opt stack 0
   376  000007                     espi_slave_send@buffer:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x6
   380  000007                     	ds	1
   381  000008                     espi_slave_receive@value:
   382                           	opt stack 0
   383  000008                     eserial_setup@baudrate_value:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x7
   387  000008                     	ds	1
   388  000009                     ??_espi_slave_send:
   389  000009                     eserial_send_data@i:
   390                           	opt stack 0
   391  000009                     espi_slave_receive@received_1:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x8
   395  000009                     	ds	1
   396  00000A                     eserial_setup@baudrate_bits:
   397                           	opt stack 0
   398  00000A                     espi_slave_receive@received_2:
   399                           	opt stack 0
   400  00000A                     eserial_send_data@value:
   401                           	opt stack 0
   402  00000A                     espi_slave_send@byte_to_send:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x9
   406  00000A                     	ds	2
   407  00000C                     espi_slave_send@byte_1:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0xB
   411  00000C                     	ds	1
   412  00000D                     espi_slave_send@byte_2:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0xC
   416  00000D                     	ds	1
   417  00000E                     espi_slave_send@received_1:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0xD
   421  00000E                     	ds	2
   422  000010                     espi_slave_send@received_2:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0xF
   426  000010                     	ds	2
   427  000012                     main@pic_to_pic:
   428                           	opt stack 0
   429                           
   430                           ; 34 bytes @ 0x11
   431  000012                     	ds	34
   432  000034                     main@value_87:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x33
   436  000034                     	ds	2
   437  000036                     main@pic_to_pc:
   438                           	opt stack 0
   439                           
   440                           ; 34 bytes @ 0x35
   441  000036                     	ds	34
   442                           tblptru	equ	0xFF8
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           plusw1	equ	0xFE3
   446                           plusw2	equ	0xFDB
   447                           status	equ	0xFD8
   448                           
   449 ;; *************** function _spi_slave_peek_receive *****************
   450 ;; Defined at:
   451 ;;		line 42 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;  get_byte        1    wreg     unsigned char 
   454 ;;  byte            2    3[COMRAM] PTR int 
   455 ;;		 -> main@value_87(2), NULL(0), 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  get_byte        1    5[COMRAM] unsigned char 
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      unsigned char 
   460 ;; Registers used:
   461 ;;		wreg, fsr2l, fsr2h, status,2, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMRAM   BANK0
   467 ;;      Params:         2       0
   468 ;;      Locals:         1       0
   469 ;;      Temps:          0       0
   470 ;;      Totals:         3       0
   471 ;;Total ram usage:        3 bytes
   472 ;; Hardware stack levels used:    1
   473 ;; Hardware stack levels required when called:    1
   474 ;; This function calls:
   475 ;;		_spi_slave_get_byte
   476 ;; This function is called by:
   477 ;;		_main
   478 ;;		_return_false
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           	psect	text1
   483  0018C6                     __ptext1:
   484                           	opt stack 0
   485  0018C6                     _spi_slave_peek_receive:
   486                           	opt stack 29
   487                           
   488                           ;incstack = 0
   489                           ;spi_slave_peek_receive@get_byte stored from wreg
   490  0018C6  6E06               	movwf	spi_slave_peek_receive@get_byte,c
   491                           
   492                           ;spi_pic.c: 44: if (get_byte) {
   493  0018C8  5006               	movf	spi_slave_peek_receive@get_byte,w,c
   494  0018CA  B4D8               	btfsc	status,2,c
   495  0018CC  D012               	goto	l1840
   496                           
   497                           ;spi_pic.c: 45: if (SSPSTATbits.BF) {
   498  0018CE  A0C7               	btfss	4039,0,c	;volatile
   499  0018D0  D00D               	goto	l1836
   500                           
   501                           ;spi_pic.c: 46: *byte = spi_slave_get_byte();
   502  0018D2  EC38  F00C         	call	_spi_slave_get_byte	;wreg free
   503  0018D6  C004  FFD9         	movff	spi_slave_peek_receive@byte,fsr2l
   504  0018DA  C005  FFDA         	movff	spi_slave_peek_receive@byte+1,fsr2h
   505  0018DE  C001  FFDE         	movff	?_spi_slave_get_byte,postinc2
   506  0018E2  C002  FFDD         	movff	?_spi_slave_get_byte+1,postdec2
   507                           
   508                           ;spi_pic.c: 47: return 1;
   509  0018E6  0E01               	movlw	1
   510  0018E8  0012               	return	
   511                           
   512                           ;spi_pic.c: 48: } else {
   513  0018EA  D003               	goto	l1840
   514  0018EC                     l1836:
   515                           
   516                           ;spi_pic.c: 49: return 0;
   517  0018EC  0E00               	movlw	0
   518  0018EE  0012               	return	
   519  0018F0  D000               	goto	l1840
   520  0018F2                     l1840:
   521                           
   522                           ;spi_pic.c: 50: }
   523                           ;spi_pic.c: 51: }
   524                           ;spi_pic.c: 53: return (SSPSTATbits.BF) ? 1 : 0;
   525  0018F2  A0C7               	btfss	4039,0,c	;volatile
   526  0018F4  D002               	goto	u1380
   527  0018F6  0E01               	movlw	1
   528  0018F8  0012               	return	
   529  0018FA                     u1380:
   530  0018FA  0E00               	movlw	0
   531  0018FC  0012               	return	
   532  0018FE  0012               	return		;funcret
   533  001900                     __end_of_spi_slave_peek_receive:
   534                           	opt stack 0
   535                           tblptru	equ	0xFF8
   536                           postinc0	equ	0xFEE
   537                           wreg	equ	0xFE8
   538                           plusw1	equ	0xFE3
   539                           postinc2	equ	0xFDE
   540                           postdec2	equ	0xFDD
   541                           plusw2	equ	0xFDB
   542                           fsr2h	equ	0xFDA
   543                           fsr2l	equ	0xFD9
   544                           status	equ	0xFD8
   545                           
   546 ;; *************** function _setup_timer3 *****************
   547 ;; Defined at:
   548 ;;		line 29 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;  T3CON_reg       1    wreg     unsigned char 
   551 ;; Auto vars:     Size  Location     Type
   552 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   553 ;; Return value:  Size  Location     Type
   554 ;;		None               void
   555 ;; Registers used:
   556 ;;		wreg
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0
   562 ;;      Params:         0       0
   563 ;;      Locals:         1       0
   564 ;;      Temps:          0       0
   565 ;;      Totals:         1       0
   566 ;;Total ram usage:        1 bytes
   567 ;; Hardware stack levels used:    1
   568 ;; This function calls:
   569 ;;		Nothing
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           	psect	text2
   576  0017EA                     __ptext2:
   577                           	opt stack 0
   578  0017EA                     _setup_timer3:
   579                           	opt stack 30
   580                           
   581                           ;incstack = 0
   582                           ;setup_timer3@T3CON_reg stored from wreg
   583  0017EA  6E01               	movwf	setup_timer3@T3CON_reg,c
   584                           
   585                           ;timers_pic.c: 31: T3CON = T3CON_reg;
   586  0017EC  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   587  0017F0  0012               	return		;funcret
   588  0017F2                     __end_of_setup_timer3:
   589                           	opt stack 0
   590                           tblptru	equ	0xFF8
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           plusw1	equ	0xFE3
   594                           postinc2	equ	0xFDE
   595                           postdec2	equ	0xFDD
   596                           plusw2	equ	0xFDB
   597                           fsr2h	equ	0xFDA
   598                           fsr2l	equ	0xFD9
   599                           status	equ	0xFD8
   600                           
   601 ;; *************** function _espi_slave_send *****************
   602 ;; Defined at:
   603 ;;		line 76 in file "extended_spi.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
   606 ;;		 -> main@pic_to_pic(34), 
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  received_2      2   15[COMRAM] int 
   609 ;;  received_1      2   13[COMRAM] int 
   610 ;;  byte_to_send    2    9[COMRAM] unsigned int 
   611 ;;  byte_2          1   12[COMRAM] unsigned char 
   612 ;;  byte_1          1   11[COMRAM] unsigned char 
   613 ;; Return value:  Size  Location     Type
   614 ;;		None               void
   615 ;; Registers used:
   616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0
   622 ;;      Params:         2       0
   623 ;;      Locals:         8       0
   624 ;;      Temps:          1       0
   625 ;;      Totals:        11       0
   626 ;;Total ram usage:       11 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    1
   629 ;; This function calls:
   630 ;;		_buffer_count
   631 ;;		_buffer_peek
   632 ;;		_buffer_pop
   633 ;;		_encode_data
   634 ;;		_spi_send_get_byte
   635 ;; This function is called by:
   636 ;;		_main
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           	psect	text3
   641  001CB2                     __ptext3:
   642                           	opt stack 0
   643  001CB2                     _espi_slave_send:
   644                           	opt stack 29
   645                           
   646                           ;extended_spi.c: 78: if (buffer_count(buffer)) {
   647                           
   648                           ;incstack = 0
   649  001CB2  C007  F001         	movff	espi_slave_send@buffer,buffer_count@buffer
   650  001CB6  C008  F002         	movff	espi_slave_send@buffer+1,buffer_count@buffer+1
   651  001CBA  EC00  F00C         	call	_buffer_count	;wreg free
   652  001CBE  0900               	iorlw	0
   653  001CC0  B4D8               	btfsc	status,2,c
   654  001CC2  0012               	return	
   655                           
   656                           ;extended_spi.c: 79: uint16_t byte_to_send = buffer_peek(buffer);
   657  001CC4  C007  F001         	movff	espi_slave_send@buffer,buffer_peek@buffer
   658  001CC8  C008  F002         	movff	espi_slave_send@buffer+1,buffer_peek@buffer+1
   659  001CCC  EC25  F00D         	call	_buffer_peek	;wreg free
   660  001CD0  C001  F00A         	movff	?_buffer_peek,espi_slave_send@byte_to_send
   661  001CD4  C002  F00B         	movff	?_buffer_peek+1,espi_slave_send@byte_to_send+1
   662                           
   663                           ;extended_spi.c: 80: uint8_t byte_1;
   664                           ;extended_spi.c: 81: uint8_t byte_2;
   665                           ;extended_spi.c: 83: encode_data(byte_to_send, &byte_1, &byte_2);
   666  001CD8  0E0C               	movlw	low espi_slave_send@byte_1
   667  001CDA  6E01               	movwf	encode_data@byte_1,c
   668  001CDC  0E00               	movlw	high espi_slave_send@byte_1
   669  001CDE  6E02               	movwf	encode_data@byte_1+1,c
   670  001CE0  0E0D               	movlw	low espi_slave_send@byte_2
   671  001CE2  6E03               	movwf	encode_data@byte_2,c
   672  001CE4  0E00               	movlw	high espi_slave_send@byte_2
   673  001CE6  6E04               	movwf	encode_data@byte_2+1,c
   674  001CE8  500A               	movf	espi_slave_send@byte_to_send,w,c
   675  001CEA  EC02  F00D         	call	_encode_data
   676                           
   677                           ;extended_spi.c: 85: LATAbits.LATA2 = 1;
   678  001CEE  8489               	bsf	3977,2,c	;volatile
   679                           
   680                           ;extended_spi.c: 86: LATAbits.LATA2 = 0;
   681  001CF0  9489               	bcf	3977,2,c	;volatile
   682                           
   683                           ;extended_spi.c: 88: int16_t received_1 = spi_send_get_byte(byte_1);
   684  001CF2  500C               	movf	espi_slave_send@byte_1,w,c
   685  001CF4  EC09  F00C         	call	_spi_send_get_byte
   686  001CF8  6E09               	movwf	??_espi_slave_send& (0+255),c
   687  001CFA  5009               	movf	??_espi_slave_send,w,c
   688  001CFC  6E0E               	movwf	espi_slave_send@received_1,c
   689  001CFE  6A0F               	clrf	espi_slave_send@received_1+1,c
   690                           
   691                           ;extended_spi.c: 89: if (received_1 == 0x30 || received_1 == 0x10 ||
   692                           ;extended_spi.c: 90: received_1 == 0x20 || received_1 == -1)
   693  001D00  0E30               	movlw	48
   694  001D02  180E               	xorwf	espi_slave_send@received_1,w,c
   695  001D04  100F               	iorwf	espi_slave_send@received_1+1,w,c
   696  001D06  B4D8               	btfsc	status,2,c
   697  001D08  0012               	return	
   698  001D0A  0E10               	movlw	16
   699  001D0C  180E               	xorwf	espi_slave_send@received_1,w,c
   700  001D0E  100F               	iorwf	espi_slave_send@received_1+1,w,c
   701  001D10  B4D8               	btfsc	status,2,c
   702  001D12  0012               	return	
   703  001D14  0E20               	movlw	32
   704  001D16  180E               	xorwf	espi_slave_send@received_1,w,c
   705  001D18  100F               	iorwf	espi_slave_send@received_1+1,w,c
   706  001D1A  B4D8               	btfsc	status,2,c
   707  001D1C  0012               	return	
   708  001D1E  280E               	incf	espi_slave_send@received_1,w,c
   709  001D20  E105               	bnz	l1882
   710  001D22  280F               	incf	espi_slave_send@received_1+1,w,c
   711  001D24  B4D8               	btfsc	status,2,c
   712  001D26  0012               	return	
   713  001D28  D001               	goto	l1882
   714                           
   715                           ;extended_spi.c: 91: return;
   716  001D2A  0012               	return	
   717  001D2C                     l1882:
   718                           
   719                           ;extended_spi.c: 92: int16_t received_2 = spi_send_get_byte(byte_2);
   720  001D2C  500D               	movf	espi_slave_send@byte_2,w,c
   721  001D2E  EC09  F00C         	call	_spi_send_get_byte
   722  001D32  6E09               	movwf	??_espi_slave_send& (0+255),c
   723  001D34  5009               	movf	??_espi_slave_send,w,c
   724  001D36  6E10               	movwf	espi_slave_send@received_2,c
   725  001D38  6A11               	clrf	espi_slave_send@received_2+1,c
   726  001D3A                     l1884:
   727                           
   728                           ;extended_spi.c: 93: if (received_2 == 0x30 || received_2 == 0x10 ||
   729                           ;extended_spi.c: 94: received_2 == 0x20 || received_2 == -1)
   730  001D3A  0E30               	movlw	48
   731  001D3C  1810               	xorwf	espi_slave_send@received_2,w,c
   732  001D3E  1011               	iorwf	espi_slave_send@received_2+1,w,c
   733  001D40  B4D8               	btfsc	status,2,c
   734  001D42  0012               	return	
   735  001D44  0E10               	movlw	16
   736  001D46  1810               	xorwf	espi_slave_send@received_2,w,c
   737  001D48  1011               	iorwf	espi_slave_send@received_2+1,w,c
   738  001D4A  B4D8               	btfsc	status,2,c
   739  001D4C  0012               	return	
   740  001D4E  0E20               	movlw	32
   741  001D50  1810               	xorwf	espi_slave_send@received_2,w,c
   742  001D52  1011               	iorwf	espi_slave_send@received_2+1,w,c
   743  001D54  B4D8               	btfsc	status,2,c
   744  001D56  0012               	return	
   745  001D58  2810               	incf	espi_slave_send@received_2,w,c
   746  001D5A  E106               	bnz	l1892
   747  001D5C  2811               	incf	espi_slave_send@received_2+1,w,c
   748  001D5E  B4D8               	btfsc	status,2,c
   749  001D60  0012               	return	
   750  001D62  D002               	goto	l1892
   751                           
   752                           ;extended_spi.c: 95: return;
   753  001D64  0012               	return	
   754  001D66  D000               	goto	l1892
   755  001D68                     l1892:
   756                           
   757                           ;extended_spi.c: 98: buffer_pop(buffer);
   758  001D68  C007  F001         	movff	espi_slave_send@buffer,buffer_pop@buffer
   759  001D6C  C008  F002         	movff	espi_slave_send@buffer+1,buffer_pop@buffer+1
   760  001D70  EC81  F00D         	call	_buffer_pop	;wreg free
   761                           
   762                           ;extended_spi.c: 99: byte_to_send = buffer_peek(buffer);
   763  001D74  C007  F001         	movff	espi_slave_send@buffer,buffer_peek@buffer
   764  001D78  C008  F002         	movff	espi_slave_send@buffer+1,buffer_peek@buffer+1
   765  001D7C  EC25  F00D         	call	_buffer_peek	;wreg free
   766  001D80  C001  F00A         	movff	?_buffer_peek,espi_slave_send@byte_to_send
   767  001D84  C002  F00B         	movff	?_buffer_peek+1,espi_slave_send@byte_to_send+1
   768                           
   769                           ;extended_spi.c: 100: if (byte_to_send == -1)
   770  001D88  280A               	incf	espi_slave_send@byte_to_send,w,c
   771  001D8A  E105               	bnz	l1898
   772  001D8C  280B               	incf	espi_slave_send@byte_to_send+1,w,c
   773  001D8E  B4D8               	btfsc	status,2,c
   774  001D90  D032               	goto	l1920
   775  001D92  D001               	goto	l1898
   776                           
   777                           ;extended_spi.c: 101: break;
   778  001D94  D030               	goto	l1920
   779  001D96                     l1898:
   780                           
   781                           ;extended_spi.c: 103: encode_data(byte_to_send, &byte_1, &byte_2);
   782  001D96  0E0C               	movlw	low espi_slave_send@byte_1
   783  001D98  6E01               	movwf	encode_data@byte_1,c
   784  001D9A  0E00               	movlw	high espi_slave_send@byte_1
   785  001D9C  6E02               	movwf	encode_data@byte_1+1,c
   786  001D9E  0E0D               	movlw	low espi_slave_send@byte_2
   787  001DA0  6E03               	movwf	encode_data@byte_2,c
   788  001DA2  0E00               	movlw	high espi_slave_send@byte_2
   789  001DA4  6E04               	movwf	encode_data@byte_2+1,c
   790  001DA6  500A               	movf	espi_slave_send@byte_to_send,w,c
   791  001DA8  EC02  F00D         	call	_encode_data
   792                           
   793                           ;extended_spi.c: 105: received_1 = spi_send_get_byte(byte_1);
   794  001DAC  500C               	movf	espi_slave_send@byte_1,w,c
   795  001DAE  EC09  F00C         	call	_spi_send_get_byte
   796  001DB2  6E09               	movwf	??_espi_slave_send& (0+255),c
   797  001DB4  5009               	movf	??_espi_slave_send,w,c
   798  001DB6  6E0E               	movwf	espi_slave_send@received_1,c
   799  001DB8  6A0F               	clrf	espi_slave_send@received_1+1,c
   800                           
   801                           ;extended_spi.c: 106: if (received_1 == 0x30 || received_1 == 0x10 ||
   802                           ;extended_spi.c: 107: received_1 == 0x20 || received_1 == -1)
   803  001DBA  0E30               	movlw	48
   804  001DBC  180E               	xorwf	espi_slave_send@received_1,w,c
   805  001DBE  100F               	iorwf	espi_slave_send@received_1+1,w,c
   806  001DC0  B4D8               	btfsc	status,2,c
   807  001DC2  0012               	return	
   808  001DC4  0E10               	movlw	16
   809  001DC6  180E               	xorwf	espi_slave_send@received_1,w,c
   810  001DC8  100F               	iorwf	espi_slave_send@received_1+1,w,c
   811  001DCA  B4D8               	btfsc	status,2,c
   812  001DCC  0012               	return	
   813  001DCE  0E20               	movlw	32
   814  001DD0  180E               	xorwf	espi_slave_send@received_1,w,c
   815  001DD2  100F               	iorwf	espi_slave_send@received_1+1,w,c
   816  001DD4  B4D8               	btfsc	status,2,c
   817  001DD6  0012               	return	
   818  001DD8  280E               	incf	espi_slave_send@received_1,w,c
   819  001DDA  E105               	bnz	l1910
   820  001DDC  280F               	incf	espi_slave_send@received_1+1,w,c
   821  001DDE  B4D8               	btfsc	status,2,c
   822  001DE0  0012               	return	
   823  001DE2  D001               	goto	l1910
   824                           
   825                           ;extended_spi.c: 108: return;
   826  001DE4  0012               	return	
   827  001DE6                     l1910:
   828                           
   829                           ;extended_spi.c: 110: received_2 = spi_send_get_byte(byte_2);
   830  001DE6  500D               	movf	espi_slave_send@byte_2,w,c
   831  001DE8  EC09  F00C         	call	_spi_send_get_byte
   832  001DEC  D7A2               	goto	L1
   833  001DEE  D7A5               	goto	l1884
   834                           
   835                           ;extended_spi.c: 111: if (received_2 == 0x30 || received_2 == 0x10 ||
   836                           ;extended_spi.c: 112: received_2 == 0x20 || received_2 == -1)
   837  001DF0  D7BB               	goto	l1892
   838                           
   839                           ;extended_spi.c: 113: return;
   840  001DF2  0012               	return	
   841  001DF4  D7B9               	goto	l1892
   842  001DF6                     l1920:
   843                           
   844                           ;extended_spi.c: 114: }
   845                           ;extended_spi.c: 116: spi_send_get_byte(0x30);
   846  001DF6  0E30               	movlw	48
   847  001DF8  EC09  F00C         	call	_spi_send_get_byte
   848  001DFC  0012               	return	
   849  001DFE  0012               	return		;funcret
   850  001E00                     __end_of_espi_slave_send:
   851                           	opt stack 0
   852                           tblptru	equ	0xFF8
   853                           postinc0	equ	0xFEE
   854                           wreg	equ	0xFE8
   855                           plusw1	equ	0xFE3
   856                           postinc2	equ	0xFDE
   857                           postdec2	equ	0xFDD
   858                           plusw2	equ	0xFDB
   859                           fsr2h	equ	0xFDA
   860                           fsr2l	equ	0xFD9
   861                           status	equ	0xFD8
   862                           
   863 ;; *************** function _encode_data *****************
   864 ;; Defined at:
   865 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;  data            1    wreg     unsigned char 
   868 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
   869 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
   870 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
   871 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  data            1    5[COMRAM] unsigned char 
   874 ;; Return value:  Size  Location     Type
   875 ;;		None               void
   876 ;; Registers used:
   877 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMRAM   BANK0
   883 ;;      Params:         4       0
   884 ;;      Locals:         1       0
   885 ;;      Temps:          1       0
   886 ;;      Totals:         6       0
   887 ;;Total ram usage:        6 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; This function calls:
   890 ;;		Nothing
   891 ;; This function is called by:
   892 ;;		_espi_slave_send
   893 ;;		_espi_master_send
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           	psect	text4
   898  001A04                     __ptext4:
   899                           	opt stack 0
   900  001A04                     _encode_data:
   901                           	opt stack 29
   902                           
   903                           ;incstack = 0
   904                           ;encode_data@data stored from wreg
   905  001A04  6E06               	movwf	encode_data@data,c
   906                           
   907                           ;encoding.c: 5: *byte_1 = 0xA0;
   908  001A06  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   909  001A0A  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   910  001A0E  0EA0               	movlw	160
   911  001A10  6EDF               	movwf	indf2,c
   912                           
   913                           ;encoding.c: 6: *byte_2 = 0xA0;
   914  001A12  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   915  001A16  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   916  001A1A  0EA0               	movlw	160
   917  001A1C  6EDF               	movwf	indf2,c
   918                           
   919                           ;encoding.c: 8: *byte_1 |= data >> 4;
   920  001A1E  C006  F005         	movff	encode_data@data,??_encode_data
   921  001A22  3A05               	swapf	??_encode_data,f,c
   922  001A24  0E0F               	movlw	15
   923  001A26  1605               	andwf	??_encode_data,f,c
   924  001A28  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   925  001A2C  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   926  001A30  5005               	movf	??_encode_data,w,c
   927  001A32  12DF               	iorwf	indf2,f,c
   928                           
   929                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
   930  001A34  C006  F005         	movff	encode_data@data,??_encode_data
   931  001A38  0E0F               	movlw	15
   932  001A3A  1605               	andwf	??_encode_data,f,c
   933  001A3C  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   934  001A40  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   935  001A44  5005               	movf	??_encode_data,w,c
   936  001A46  12DF               	iorwf	indf2,f,c
   937  001A48  0012               	return		;funcret
   938  001A4A                     __end_of_encode_data:
   939                           	opt stack 0
   940                           tblptru	equ	0xFF8
   941                           postinc0	equ	0xFEE
   942                           wreg	equ	0xFE8
   943                           plusw1	equ	0xFE3
   944                           indf2	equ	0xFDF
   945                           postinc2	equ	0xFDE
   946                           postdec2	equ	0xFDD
   947                           plusw2	equ	0xFDB
   948                           fsr2h	equ	0xFDA
   949                           fsr2l	equ	0xFD9
   950                           status	equ	0xFD8
   951                           
   952 ;; *************** function _buffer_peek *****************
   953 ;; Defined at:
   954 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;  buffer          2    0[COMRAM] PTR const struct circula
   957 ;;		 -> main@pic_to_pic(34), 
   958 ;; Auto vars:     Size  Location     Type
   959 ;;  byte            2    4[COMRAM] int 
   960 ;; Return value:  Size  Location     Type
   961 ;;                  2    0[COMRAM] int 
   962 ;; Registers used:
   963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0
   969 ;;      Params:         2       0
   970 ;;      Locals:         2       0
   971 ;;      Temps:          2       0
   972 ;;      Totals:         6       0
   973 ;;Total ram usage:        6 bytes
   974 ;; Hardware stack levels used:    1
   975 ;; This function calls:
   976 ;;		Nothing
   977 ;; This function is called by:
   978 ;;		_espi_slave_send
   979 ;;		_espi_master_send
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           	psect	text5
   984  001A4A                     __ptext5:
   985                           	opt stack 0
   986  001A4A                     _buffer_peek:
   987                           	opt stack 29
   988                           
   989                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
   990                           
   991                           ;incstack = 0
   992  001A4A  EE20 F001          	lfsr	2,1
   993  001A4E  5001               	movf	buffer_peek@buffer,w,c
   994  001A50  26D9               	addwf	fsr2l,f,c
   995  001A52  5002               	movf	buffer_peek@buffer+1,w,c
   996  001A54  22DA               	addwfc	fsr2h,f,c
   997  001A56  50DF               	movf	indf2,w,c
   998  001A58  A4D8               	btfss	status,2,c
   999  001A5A  D003               	goto	l1796
  1000                           
  1001                           ;circular_buffer.c: 58: return -1;
  1002  001A5C  6801               	setf	?_buffer_peek,c
  1003  001A5E  6802               	setf	?_buffer_peek+1,c
  1004  001A60  0012               	return	
  1005  001A62                     l1796:
  1006                           
  1007                           ;circular_buffer.c: 59: }
  1008                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  1009  001A62  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
  1010  001A66  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
  1011  001A6A  50DF               	movf	indf2,w,c
  1012  001A6C  6E03               	movwf	??_buffer_peek& (0+255),c
  1013  001A6E  5003               	movf	??_buffer_peek,w,c
  1014  001A70  0D01               	mullw	1
  1015  001A72  0E02               	movlw	2
  1016  001A74  26F3               	addwf	prodl,f,c
  1017  001A76  0E00               	movlw	0
  1018  001A78  22F4               	addwfc	prodh,f,c
  1019  001A7A  50F3               	movf	prodl,w,c
  1020  001A7C  2401               	addwf	buffer_peek@buffer,w,c
  1021  001A7E  6ED9               	movwf	fsr2l,c
  1022  001A80  50F4               	movf	prodh,w,c
  1023  001A82  2002               	addwfc	buffer_peek@buffer+1,w,c
  1024  001A84  6EDA               	movwf	fsr2h,c
  1025  001A86  50DF               	movf	indf2,w,c
  1026  001A88  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
  1027  001A8A  5004               	movf	??_buffer_peek+1,w,c
  1028  001A8C  6E05               	movwf	buffer_peek@byte,c
  1029  001A8E  6A06               	clrf	buffer_peek@byte+1,c
  1030                           
  1031                           ;circular_buffer.c: 63: return byte;
  1032  001A90  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
  1033  001A94  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
  1034  001A98  0012               	return	
  1035  001A9A  0012               	return		;funcret
  1036  001A9C                     __end_of_buffer_peek:
  1037                           	opt stack 0
  1038                           tblptru	equ	0xFF8
  1039                           prodh	equ	0xFF4
  1040                           prodl	equ	0xFF3
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           plusw1	equ	0xFE3
  1044                           indf2	equ	0xFDF
  1045                           postinc2	equ	0xFDE
  1046                           postdec2	equ	0xFDD
  1047                           plusw2	equ	0xFDB
  1048                           fsr2h	equ	0xFDA
  1049                           fsr2l	equ	0xFD9
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _buffer_count *****************
  1053 ;; Defined at:
  1054 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1057 ;;		 -> main@pic_to_pic(34), 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      unsigned char 
  1062 ;; Registers used:
  1063 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0
  1069 ;;      Params:         2       0
  1070 ;;      Locals:         0       0
  1071 ;;      Temps:          0       0
  1072 ;;      Totals:         2       0
  1073 ;;Total ram usage:        2 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_espi_slave_send
  1079 ;;		_espi_master_send
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text6
  1084  001800                     __ptext6:
  1085                           	opt stack 0
  1086  001800                     _buffer_count:
  1087                           	opt stack 29
  1088                           
  1089                           ;circular_buffer.c: 6: return buffer->count;
  1090                           
  1091                           ;incstack = 0
  1092  001800  EE20 F001          	lfsr	2,1
  1093  001804  5001               	movf	buffer_count@buffer,w,c
  1094  001806  26D9               	addwf	fsr2l,f,c
  1095  001808  5002               	movf	buffer_count@buffer+1,w,c
  1096  00180A  22DA               	addwfc	fsr2h,f,c
  1097  00180C  50DF               	movf	indf2,w,c
  1098  00180E  0012               	return	
  1099  001810  0012               	return		;funcret
  1100  001812                     __end_of_buffer_count:
  1101                           	opt stack 0
  1102                           tblptru	equ	0xFF8
  1103                           prodh	equ	0xFF4
  1104                           prodl	equ	0xFF3
  1105                           postinc0	equ	0xFEE
  1106                           wreg	equ	0xFE8
  1107                           plusw1	equ	0xFE3
  1108                           indf2	equ	0xFDF
  1109                           postinc2	equ	0xFDE
  1110                           postdec2	equ	0xFDD
  1111                           plusw2	equ	0xFDB
  1112                           fsr2h	equ	0xFDA
  1113                           fsr2l	equ	0xFD9
  1114                           status	equ	0xFD8
  1115                           
  1116 ;; *************** function _espi_slave_receive *****************
  1117 ;; Defined at:
  1118 ;;		line 49 in file "extended_spi.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  buffer          2    5[COMRAM] PTR struct circular_buff
  1121 ;;		 -> main@pic_to_pc(34), 
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  received_2      1    9[COMRAM] char 
  1124 ;;  received_1      1    8[COMRAM] char 
  1125 ;;  value           1    7[COMRAM] unsigned char 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;		None               void
  1128 ;; Registers used:
  1129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMRAM   BANK0
  1135 ;;      Params:         2       0
  1136 ;;      Locals:         3       0
  1137 ;;      Temps:          0       0
  1138 ;;      Totals:         5       0
  1139 ;;Total ram usage:        5 bytes
  1140 ;; Hardware stack levels used:    1
  1141 ;; Hardware stack levels required when called:    1
  1142 ;; This function calls:
  1143 ;;		_buffer_push
  1144 ;;		_buffer_space
  1145 ;;		_decode_data
  1146 ;;		_spi_send_get_byte
  1147 ;;		_spi_slave_get_byte
  1148 ;; This function is called by:
  1149 ;;		_main
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text7
  1154  001B7C                     __ptext7:
  1155                           	opt stack 0
  1156  001B7C                     _espi_slave_receive:
  1157                           	opt stack 29
  1158                           
  1159                           ;extended_spi.c: 51: uint8_t value;
  1160                           ;extended_spi.c: 52: int8_t received_1;
  1161                           ;extended_spi.c: 53: int8_t received_2;
  1162                           ;extended_spi.c: 55: LATAbits.LATA2 = 1;
  1163                           
  1164                           ;incstack = 0
  1165  001B7C  8489               	bsf	3977,2,c	;volatile
  1166                           
  1167                           ;extended_spi.c: 56: LATAbits.LATA2 = 0;
  1168  001B7E  9489               	bcf	3977,2,c	;volatile
  1169                           
  1170                           ;extended_spi.c: 58: while (buffer_space(buffer)) {
  1171  001B80  D03D               	goto	l1948
  1172  001B82                     l1924:
  1173                           
  1174                           ;extended_spi.c: 59: received_1 = spi_slave_get_byte();
  1175  001B82  EC38  F00C         	call	_spi_slave_get_byte	;wreg free
  1176  001B86  5001               	movf	?_spi_slave_get_byte,w,c
  1177  001B88  6E09               	movwf	espi_slave_receive@received_1,c
  1178                           
  1179                           ;extended_spi.c: 60: if (received_1 == 0x30 || received_1 == 0x10 ||
  1180                           ;extended_spi.c: 61: received_1 == 0x20 || received_1 == -1)
  1181  001B8A  0E30               	movlw	48
  1182  001B8C  1809               	xorwf	espi_slave_receive@received_1,w,c
  1183  001B8E  B4D8               	btfsc	status,2,c
  1184  001B90  0012               	return	
  1185  001B92  0E10               	movlw	16
  1186  001B94  1809               	xorwf	espi_slave_receive@received_1,w,c
  1187  001B96  B4D8               	btfsc	status,2,c
  1188  001B98  0012               	return	
  1189  001B9A  0E20               	movlw	32
  1190  001B9C  1809               	xorwf	espi_slave_receive@received_1,w,c
  1191  001B9E  B4D8               	btfsc	status,2,c
  1192  001BA0  0012               	return	
  1193  001BA2  2809               	incf	espi_slave_receive@received_1,w,c
  1194  001BA4  B4D8               	btfsc	status,2,c
  1195  001BA6  0012               	return	
  1196  001BA8  D001               	goto	l1934
  1197                           
  1198                           ;extended_spi.c: 62: return;
  1199  001BAA  0012               	return	
  1200  001BAC                     l1934:
  1201                           
  1202                           ;extended_spi.c: 64: received_2 = spi_slave_get_byte();
  1203  001BAC  EC38  F00C         	call	_spi_slave_get_byte	;wreg free
  1204  001BB0  5001               	movf	?_spi_slave_get_byte,w,c
  1205  001BB2  6E0A               	movwf	espi_slave_receive@received_2,c
  1206                           
  1207                           ;extended_spi.c: 65: if (received_2 == 0x30 || received_2 == 0x10 ||
  1208                           ;extended_spi.c: 66: received_2 == 0x20 || received_2 == -1)
  1209  001BB4  0E30               	movlw	48
  1210  001BB6  180A               	xorwf	espi_slave_receive@received_2,w,c
  1211  001BB8  B4D8               	btfsc	status,2,c
  1212  001BBA  0012               	return	
  1213  001BBC  0E10               	movlw	16
  1214  001BBE  180A               	xorwf	espi_slave_receive@received_2,w,c
  1215  001BC0  B4D8               	btfsc	status,2,c
  1216  001BC2  0012               	return	
  1217  001BC4  0E20               	movlw	32
  1218  001BC6  180A               	xorwf	espi_slave_receive@received_2,w,c
  1219  001BC8  B4D8               	btfsc	status,2,c
  1220  001BCA  0012               	return	
  1221  001BCC  280A               	incf	espi_slave_receive@received_2,w,c
  1222  001BCE  B4D8               	btfsc	status,2,c
  1223  001BD0  0012               	return	
  1224  001BD2  D001               	goto	l1944
  1225                           
  1226                           ;extended_spi.c: 67: return;
  1227  001BD4  0012               	return	
  1228  001BD6                     l1944:
  1229                           
  1230                           ;extended_spi.c: 69: decode_data( &value, (uint8_t)received_1, (uint8_t)received_2);
  1231  001BD6  0E08               	movlw	low espi_slave_receive@value
  1232  001BD8  6E01               	movwf	decode_data@data,c
  1233  001BDA  0E00               	movlw	high espi_slave_receive@value
  1234  001BDC  6E02               	movwf	decode_data@data+1,c
  1235  001BDE  C009  F003         	movff	espi_slave_receive@received_1,decode_data@byte_1
  1236  001BE2  C00A  F004         	movff	espi_slave_receive@received_2,decode_data@byte_2
  1237  001BE6  EC80  F00C         	call	_decode_data	;wreg free
  1238                           
  1239                           ;extended_spi.c: 70: buffer_push(buffer, value);
  1240  001BEA  C006  F001         	movff	espi_slave_receive@buffer,buffer_push@buffer
  1241  001BEE  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_push@buffer+1
  1242  001BF2  C008  F003         	movff	espi_slave_receive@value,buffer_push@byte
  1243  001BF6  EC4E  F00D         	call	_buffer_push	;wreg free
  1244  001BFA  D000               	goto	l1948
  1245  001BFC                     l1948:
  1246  001BFC  C006  F001         	movff	espi_slave_receive@buffer,buffer_space@buffer
  1247  001C00  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_space@buffer+1
  1248  001C04  EC13  F00C         	call	_buffer_space	;wreg free
  1249  001C08  0900               	iorlw	0
  1250  001C0A  A4D8               	btfss	status,2,c
  1251  001C0C  D7BA               	goto	l1924
  1252                           
  1253                           ;extended_spi.c: 71: }
  1254                           ;extended_spi.c: 73: spi_send_get_byte(0x30);
  1255  001C0E  0E30               	movlw	48
  1256  001C10  EC09  F00C         	call	_spi_send_get_byte
  1257  001C14  0012               	return		;funcret
  1258  001C16                     __end_of_espi_slave_receive:
  1259                           	opt stack 0
  1260                           tblptru	equ	0xFF8
  1261                           prodh	equ	0xFF4
  1262                           prodl	equ	0xFF3
  1263                           postinc0	equ	0xFEE
  1264                           wreg	equ	0xFE8
  1265                           plusw1	equ	0xFE3
  1266                           indf2	equ	0xFDF
  1267                           postinc2	equ	0xFDE
  1268                           postdec2	equ	0xFDD
  1269                           plusw2	equ	0xFDB
  1270                           fsr2h	equ	0xFDA
  1271                           fsr2l	equ	0xFD9
  1272                           status	equ	0xFD8
  1273                           
  1274 ;; *************** function _spi_slave_get_byte *****************
  1275 ;; Defined at:
  1276 ;;		line 111 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;		None
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  byte            1    2[COMRAM] unsigned char 
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  2    0[COMRAM] int 
  1283 ;; Registers used:
  1284 ;;		None
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0
  1290 ;;      Params:         2       0
  1291 ;;      Locals:         1       0
  1292 ;;      Temps:          0       0
  1293 ;;      Totals:         3       0
  1294 ;;Total ram usage:        3 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; This function calls:
  1297 ;;		Nothing
  1298 ;; This function is called by:
  1299 ;;		_spi_slave_peek_receive
  1300 ;;		_espi_slave_receive
  1301 ;;		_spi_slave_get_data
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           	psect	text8
  1306  001870                     __ptext8:
  1307                           	opt stack 0
  1308  001870                     _spi_slave_get_byte:
  1309                           	opt stack 29
  1310                           
  1311                           ;spi_pic.c: 113: while (!SSPSTATbits.BF);
  1312                           
  1313                           ;incstack = 0
  1314  001870  D000               	goto	l357
  1315  001872                     l357:
  1316  001872  A0C7               	btfss	4039,0,c	;volatile
  1317  001874  D7FE               	goto	l357
  1318                           
  1319                           ;spi_pic.c: 114: uint8_t byte = SSPBUF;
  1320  001876  CFC9 F003          	movff	4041,spi_slave_get_byte@byte	;volatile
  1321                           
  1322                           ;spi_pic.c: 115: SSPBUF = dummy_byte;
  1323  00187A  C058  FFC9         	movff	_dummy_byte,4041	;volatile
  1324                           
  1325                           ;spi_pic.c: 116: if (SSPCON1bits.SSPOV) {
  1326  00187E  ACC6               	btfss	4038,6,c	;volatile
  1327  001880  D002               	goto	l360
  1328                           
  1329                           ;spi_pic.c: 117: SSPCON1bits.SSPOV = 0;
  1330  001882  9CC6               	bcf	4038,6,c	;volatile
  1331                           
  1332                           ;spi_pic.c: 118: byte = -1;
  1333  001884  6803               	setf	spi_slave_get_byte@byte,c
  1334  001886                     l360:
  1335                           
  1336                           ;spi_pic.c: 119: }
  1337                           ;spi_pic.c: 120: return byte;
  1338  001886  C003  F001         	movff	spi_slave_get_byte@byte,?_spi_slave_get_byte
  1339  00188A  6A02               	clrf	?_spi_slave_get_byte+1,c
  1340  00188C  0012               	return		;funcret
  1341  00188E                     __end_of_spi_slave_get_byte:
  1342                           	opt stack 0
  1343                           tblptru	equ	0xFF8
  1344                           prodh	equ	0xFF4
  1345                           prodl	equ	0xFF3
  1346                           postinc0	equ	0xFEE
  1347                           wreg	equ	0xFE8
  1348                           plusw1	equ	0xFE3
  1349                           indf2	equ	0xFDF
  1350                           postinc2	equ	0xFDE
  1351                           postdec2	equ	0xFDD
  1352                           plusw2	equ	0xFDB
  1353                           fsr2h	equ	0xFDA
  1354                           fsr2l	equ	0xFD9
  1355                           status	equ	0xFD8
  1356                           
  1357 ;; *************** function _spi_send_get_byte *****************
  1358 ;; Defined at:
  1359 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  byte            1    wreg     unsigned char 
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;  byte            1    0[COMRAM] unsigned char 
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  1    wreg      unsigned char 
  1366 ;; Registers used:
  1367 ;;		wreg, status,2
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0
  1373 ;;      Params:         0       0
  1374 ;;      Locals:         1       0
  1375 ;;      Temps:          0       0
  1376 ;;      Totals:         1       0
  1377 ;;Total ram usage:        1 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; This function calls:
  1380 ;;		Nothing
  1381 ;; This function is called by:
  1382 ;;		_espi_slave_receive
  1383 ;;		_espi_slave_send
  1384 ;;		_spi_send_data
  1385 ;;		_spi_master_get_data
  1386 ;;		_wait_pulse
  1387 ;;		_espi_master_send
  1388 ;;		_espi_master_receive
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           	psect	text9
  1393  001812                     __ptext9:
  1394                           	opt stack 0
  1395  001812                     _spi_send_get_byte:
  1396                           	opt stack 29
  1397                           
  1398                           ;incstack = 0
  1399                           ;spi_send_get_byte@byte stored from wreg
  1400  001812  6E01               	movwf	spi_send_get_byte@byte,c
  1401                           
  1402                           ;spi_pic.c: 35: SSPBUF = byte;
  1403  001814  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  1404                           
  1405                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  1406  001818  D000               	goto	l310
  1407  00181A                     l310:
  1408  00181A  A0C7               	btfss	4039,0,c	;volatile
  1409  00181C  D7FE               	goto	l310
  1410                           
  1411                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  1412  00181E  BEC6               	btfsc	4038,7,c	;volatile
  1413                           
  1414                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  1415  001820  9EC6               	bcf	4038,7,c	;volatile
  1416                           
  1417                           ;spi_pic.c: 39: return SSPBUF;
  1418  001822  50C9               	movf	4041,w,c	;volatile
  1419  001824  0012               	return		;funcret
  1420  001826                     __end_of_spi_send_get_byte:
  1421                           	opt stack 0
  1422                           tblptru	equ	0xFF8
  1423                           prodh	equ	0xFF4
  1424                           prodl	equ	0xFF3
  1425                           postinc0	equ	0xFEE
  1426                           wreg	equ	0xFE8
  1427                           plusw1	equ	0xFE3
  1428                           indf2	equ	0xFDF
  1429                           postinc2	equ	0xFDE
  1430                           postdec2	equ	0xFDD
  1431                           plusw2	equ	0xFDB
  1432                           fsr2h	equ	0xFDA
  1433                           fsr2l	equ	0xFD9
  1434                           status	equ	0xFD8
  1435                           
  1436 ;; *************** function _decode_data *****************
  1437 ;; Defined at:
  1438 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  data            2    0[COMRAM] PTR unsigned char 
  1441 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  1442 ;;  byte_1          1    2[COMRAM] unsigned char 
  1443 ;;  byte_2          1    3[COMRAM] unsigned char 
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      char 
  1448 ;; Registers used:
  1449 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMRAM   BANK0
  1455 ;;      Params:         4       0
  1456 ;;      Locals:         0       0
  1457 ;;      Temps:          1       0
  1458 ;;      Totals:         5       0
  1459 ;;Total ram usage:        5 bytes
  1460 ;; Hardware stack levels used:    1
  1461 ;; This function calls:
  1462 ;;		Nothing
  1463 ;; This function is called by:
  1464 ;;		_espi_slave_receive
  1465 ;;		_espi_master_receive
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           	psect	text10
  1470  001900                     __ptext10:
  1471                           	opt stack 0
  1472  001900                     _decode_data:
  1473                           	opt stack 29
  1474                           
  1475                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  1476                           
  1477                           ;incstack = 0
  1478  001900  5003               	movf	decode_data@byte_1,w,c
  1479  001902  0BF0               	andlw	240
  1480  001904  0AA0               	xorlw	160
  1481  001906  A4D8               	btfss	status,2,c
  1482  001908  0012               	return	
  1483  00190A  D002               	goto	l1750
  1484                           
  1485                           ;encoding.c: 15: return -1;
  1486                           ;	Return value of _decode_data is never used
  1487  00190C  0012               	return	
  1488  00190E  D008               	goto	l1754
  1489  001910                     l1750:
  1490                           
  1491                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  1492  001910  5004               	movf	decode_data@byte_2,w,c
  1493  001912  0BF0               	andlw	240
  1494  001914  0AA0               	xorlw	160
  1495  001916  A4D8               	btfss	status,2,c
  1496  001918  0012               	return	
  1497  00191A  D002               	goto	l1754
  1498                           
  1499                           ;encoding.c: 17: return -2;
  1500                           ;	Return value of _decode_data is never used
  1501  00191C  0012               	return	
  1502  00191E  D000               	goto	l1754
  1503  001920                     l1754:
  1504                           
  1505                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  1506  001920  C004  F005         	movff	decode_data@byte_2,??_decode_data
  1507  001924  0E0F               	movlw	15
  1508  001926  1605               	andwf	??_decode_data,f,c
  1509  001928  3803               	swapf	decode_data@byte_1,w,c
  1510  00192A  0BF0               	andlw	240
  1511  00192C  1005               	iorwf	??_decode_data,w,c
  1512  00192E  C001  FFD9         	movff	decode_data@data,fsr2l
  1513  001932  C002  FFDA         	movff	decode_data@data+1,fsr2h
  1514  001936  6EDF               	movwf	indf2,c
  1515  001938  0012               	return	
  1516                           
  1517                           ;encoding.c: 21: return 0;
  1518                           ;	Return value of _decode_data is never used
  1519  00193A  0012               	return		;funcret
  1520  00193C                     __end_of_decode_data:
  1521                           	opt stack 0
  1522                           tblptru	equ	0xFF8
  1523                           prodh	equ	0xFF4
  1524                           prodl	equ	0xFF3
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           plusw1	equ	0xFE3
  1528                           indf2	equ	0xFDF
  1529                           postinc2	equ	0xFDE
  1530                           postdec2	equ	0xFDD
  1531                           plusw2	equ	0xFDB
  1532                           fsr2h	equ	0xFDA
  1533                           fsr2l	equ	0xFD9
  1534                           status	equ	0xFD8
  1535                           
  1536 ;; *************** function _buffer_space *****************
  1537 ;; Defined at:
  1538 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1541 ;;		 -> main@pic_to_pc(34), 
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;		None
  1544 ;; Return value:  Size  Location     Type
  1545 ;;                  1    wreg      unsigned char 
  1546 ;; Registers used:
  1547 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMRAM   BANK0
  1553 ;;      Params:         2       0
  1554 ;;      Locals:         0       0
  1555 ;;      Temps:          0       0
  1556 ;;      Totals:         2       0
  1557 ;;Total ram usage:        2 bytes
  1558 ;; Hardware stack levels used:    1
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		_espi_slave_receive
  1563 ;;		_eserial_receive
  1564 ;;		_espi_master_receive
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text11
  1569  001826                     __ptext11:
  1570                           	opt stack 0
  1571  001826                     _buffer_space:
  1572                           	opt stack 29
  1573                           
  1574                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  1575                           
  1576                           ;incstack = 0
  1577  001826  EE20 F001          	lfsr	2,1
  1578  00182A  5001               	movf	buffer_space@buffer,w,c
  1579  00182C  26D9               	addwf	fsr2l,f,c
  1580  00182E  5002               	movf	buffer_space@buffer+1,w,c
  1581  001830  22DA               	addwfc	fsr2h,f,c
  1582  001832  50DF               	movf	indf2,w,c
  1583  001834  0800               	sublw	0
  1584  001836  0F20               	addlw	32
  1585  001838  0012               	return	
  1586  00183A  0012               	return		;funcret
  1587  00183C                     __end_of_buffer_space:
  1588                           	opt stack 0
  1589                           tblptru	equ	0xFF8
  1590                           prodh	equ	0xFF4
  1591                           prodl	equ	0xFF3
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           plusw1	equ	0xFE3
  1595                           indf2	equ	0xFDF
  1596                           postinc2	equ	0xFDE
  1597                           postdec2	equ	0xFDD
  1598                           plusw2	equ	0xFDB
  1599                           fsr2h	equ	0xFDA
  1600                           fsr2l	equ	0xFD9
  1601                           status	equ	0xFD8
  1602                           
  1603 ;; *************** function _buffer_push *****************
  1604 ;; Defined at:
  1605 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  1608 ;;		 -> main@pic_to_pc(34), 
  1609 ;;  byte            1    2[COMRAM] unsigned char 
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  current_posi    1    4[COMRAM] unsigned char 
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      unsigned char 
  1614 ;; Registers used:
  1615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0
  1621 ;;      Params:         3       0
  1622 ;;      Locals:         1       0
  1623 ;;      Temps:          1       0
  1624 ;;      Totals:         5       0
  1625 ;;Total ram usage:        5 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_espi_slave_receive
  1631 ;;		_eserial_receive
  1632 ;;		_espi_master_receive
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text12
  1637  001A9C                     __ptext12:
  1638                           	opt stack 0
  1639  001A9C                     _buffer_push:
  1640                           	opt stack 29
  1641                           
  1642                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  1643                           
  1644                           ;incstack = 0
  1645  001A9C  EE20 F001          	lfsr	2,1
  1646  001AA0  5001               	movf	buffer_push@buffer,w,c
  1647  001AA2  26D9               	addwf	fsr2l,f,c
  1648  001AA4  5002               	movf	buffer_push@buffer+1,w,c
  1649  001AA6  22DA               	addwfc	fsr2h,f,c
  1650  001AA8  0E20               	movlw	32
  1651  001AAA  18DE               	xorwf	postinc2,w,c
  1652  001AAC  B4D8               	btfsc	status,2,c
  1653  001AAE  0012               	return	
  1654  001AB0  D001               	goto	l1776
  1655                           
  1656                           ;circular_buffer.c: 27: return 0;
  1657                           ;	Return value of _buffer_push is never used
  1658  001AB2  0012               	return	
  1659  001AB4                     l1776:
  1660                           
  1661                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  1662                           ;circular_buffer.c: 30: & (0x20 - 1);
  1663  001AB4  EE20 F001          	lfsr	2,1
  1664  001AB8  5001               	movf	buffer_push@buffer,w,c
  1665  001ABA  26D9               	addwf	fsr2l,f,c
  1666  001ABC  5002               	movf	buffer_push@buffer+1,w,c
  1667  001ABE  22DA               	addwfc	fsr2h,f,c
  1668  001AC0  50DF               	movf	indf2,w,c
  1669  001AC2  6E04               	movwf	??_buffer_push& (0+255),c
  1670  001AC4  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  1671  001AC8  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  1672  001ACC  50DF               	movf	indf2,w,c
  1673  001ACE  2404               	addwf	??_buffer_push,w,c
  1674  001AD0  0B1F               	andlw	31
  1675  001AD2  6E05               	movwf	buffer_push@current_position,c
  1676                           
  1677                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  1678  001AD4  5005               	movf	buffer_push@current_position,w,c
  1679  001AD6  0D01               	mullw	1
  1680  001AD8  0E02               	movlw	2
  1681  001ADA  26F3               	addwf	prodl,f,c
  1682  001ADC  0E00               	movlw	0
  1683  001ADE  22F4               	addwfc	prodh,f,c
  1684  001AE0  50F3               	movf	prodl,w,c
  1685  001AE2  2401               	addwf	buffer_push@buffer,w,c
  1686  001AE4  6ED9               	movwf	fsr2l,c
  1687  001AE6  50F4               	movf	prodh,w,c
  1688  001AE8  2002               	addwfc	buffer_push@buffer+1,w,c
  1689  001AEA  6EDA               	movwf	fsr2h,c
  1690  001AEC  C003  FFDF         	movff	buffer_push@byte,indf2
  1691                           
  1692                           ;circular_buffer.c: 32: buffer->count++;
  1693  001AF0  EE20 F001          	lfsr	2,1
  1694  001AF4  5001               	movf	buffer_push@buffer,w,c
  1695  001AF6  26D9               	addwf	fsr2l,f,c
  1696  001AF8  5002               	movf	buffer_push@buffer+1,w,c
  1697  001AFA  22DA               	addwfc	fsr2h,f,c
  1698  001AFC  2ADF               	incf	indf2,f,c
  1699  001AFE  0012               	return	
  1700                           
  1701                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  1702                           ;	Return value of _buffer_push is never used
  1703  001B00  0012               	return		;funcret
  1704  001B02                     __end_of_buffer_push:
  1705                           	opt stack 0
  1706                           tblptru	equ	0xFF8
  1707                           prodh	equ	0xFF4
  1708                           prodl	equ	0xFF3
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           plusw1	equ	0xFE3
  1712                           indf2	equ	0xFDF
  1713                           postinc2	equ	0xFDE
  1714                           postdec2	equ	0xFDD
  1715                           plusw2	equ	0xFDB
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function _espi_setup *****************
  1721 ;; Defined at:
  1722 ;;		line 27 in file "extended_spi.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  mode            1    wreg     unsigned char 
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;  mode            1    2[COMRAM] unsigned char 
  1727 ;; Return value:  Size  Location     Type
  1728 ;;		None               void
  1729 ;; Registers used:
  1730 ;;		wreg, status,2, status,0, cstack
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMRAM   BANK0
  1736 ;;      Params:         0       0
  1737 ;;      Locals:         1       0
  1738 ;;      Temps:          0       0
  1739 ;;      Totals:         1       0
  1740 ;;Total ram usage:        1 bytes
  1741 ;; Hardware stack levels used:    1
  1742 ;; Hardware stack levels required when called:    1
  1743 ;; This function calls:
  1744 ;;		_setup_spi
  1745 ;; This function is called by:
  1746 ;;		_main
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text13
  1751  00188E                     __ptext13:
  1752                           	opt stack 0
  1753  00188E                     _espi_setup:
  1754                           	opt stack 29
  1755                           
  1756                           ;incstack = 0
  1757                           ;espi_setup@mode stored from wreg
  1758  00188E  6E03               	movwf	espi_setup@mode,c
  1759                           
  1760                           ;extended_spi.c: 29: setup_spi(0, 0x20 | 0x10 | mode);
  1761  001890  5003               	movf	espi_setup@mode,w,c
  1762  001892  0930               	iorlw	48
  1763  001894  6E01               	movwf	setup_spi@SSPCON1_reg,c
  1764  001896  0E00               	movlw	0
  1765  001898  EC9E  F00C         	call	_setup_spi
  1766                           
  1767                           ;extended_spi.c: 31: ANSELbits.ANS2 = 0;
  1768  00189C  947E               	bcf	3966,2,c	;volatile
  1769                           
  1770                           ;extended_spi.c: 32: ANSELHbits.ANS8 = 0;
  1771  00189E  907F               	bcf	3967,0,c	;volatile
  1772                           
  1773                           ;extended_spi.c: 34: if (mode == 0x04 || mode == 0x05) {
  1774  0018A0  0E04               	movlw	4
  1775  0018A2  1803               	xorwf	espi_setup@mode,w,c
  1776  0018A4  B4D8               	btfsc	status,2,c
  1777  0018A6  D004               	goto	l422
  1778  0018A8  0E05               	movlw	5
  1779  0018AA  1803               	xorwf	espi_setup@mode,w,c
  1780  0018AC  A4D8               	btfss	status,2,c
  1781  0018AE  D004               	goto	l420
  1782  0018B0                     l422:
  1783                           
  1784                           ;extended_spi.c: 35: TRISAbits.RA2 = 0;
  1785  0018B0  9492               	bcf	3986,2,c	;volatile
  1786                           
  1787                           ;extended_spi.c: 36: LATAbits.LATA2 = 0;
  1788  0018B2  9489               	bcf	3977,2,c	;volatile
  1789                           
  1790                           ;extended_spi.c: 37: TRISCbits.RC6 = 1;
  1791  0018B4  8C94               	bsf	3988,6,c	;volatile
  1792                           
  1793                           ;extended_spi.c: 38: } else {
  1794  0018B6  0012               	return	
  1795  0018B8                     l420:
  1796                           
  1797                           ;extended_spi.c: 39: TRISAbits.RA2 = 1;
  1798  0018B8  8492               	bsf	3986,2,c	;volatile
  1799                           
  1800                           ;extended_spi.c: 40: TRISCbits.RC6 = 0;
  1801  0018BA  9C94               	bcf	3988,6,c	;volatile
  1802                           
  1803                           ;extended_spi.c: 41: LATCbits.LATC6 = 0;
  1804  0018BC  9C8B               	bcf	3979,6,c	;volatile
  1805                           
  1806                           ;extended_spi.c: 42: INTCON2bits.INTEDG2 = 1;
  1807  0018BE  88F1               	bsf	intcon2,4,c	;volatile
  1808                           
  1809                           ;extended_spi.c: 43: INTCON3bits.INT2E = 1;
  1810  0018C0  88F0               	bsf	intcon3,4,c	;volatile
  1811  0018C2  0012               	return	
  1812  0018C4  0012               	return		;funcret
  1813  0018C6                     __end_of_espi_setup:
  1814                           	opt stack 0
  1815                           tblptru	equ	0xFF8
  1816                           prodh	equ	0xFF4
  1817                           prodl	equ	0xFF3
  1818                           intcon2	equ	0xFF1
  1819                           intcon3	equ	0xFF0
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           plusw1	equ	0xFE3
  1823                           indf2	equ	0xFDF
  1824                           postinc2	equ	0xFDE
  1825                           postdec2	equ	0xFDD
  1826                           plusw2	equ	0xFDB
  1827                           fsr2h	equ	0xFDA
  1828                           fsr2l	equ	0xFD9
  1829                           status	equ	0xFD8
  1830                           
  1831 ;; *************** function _setup_spi *****************
  1832 ;; Defined at:
  1833 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  SSPSTAT_reg     1    wreg     unsigned char 
  1836 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
  1839 ;; Return value:  Size  Location     Type
  1840 ;;		None               void
  1841 ;; Registers used:
  1842 ;;		wreg, status,2, status,0
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0
  1848 ;;      Params:         1       0
  1849 ;;      Locals:         1       0
  1850 ;;      Temps:          0       0
  1851 ;;      Totals:         2       0
  1852 ;;Total ram usage:        2 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		_espi_setup
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text14
  1862  00193C                     __ptext14:
  1863                           	opt stack 0
  1864  00193C                     _setup_spi:
  1865                           	opt stack 29
  1866                           
  1867                           ;incstack = 0
  1868                           ;setup_spi@SSPSTAT_reg stored from wreg
  1869  00193C  6E02               	movwf	setup_spi@SSPSTAT_reg,c
  1870                           
  1871                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
  1872  00193E  9E94               	bcf	3988,7,c	;volatile
  1873                           
  1874                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
  1875  001940  947F               	bcf	3967,2,c	;volatile
  1876                           
  1877                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
  1878  001942  8893               	bsf	3987,4,c	;volatile
  1879                           
  1880                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
  1881  001944  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
  1882                           
  1883                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
  1884  001948  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
  1885                           
  1886                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
  1887  00194C  50C6               	movf	4038,w,c	;volatile
  1888  00194E  0B0F               	andlw	15
  1889  001950  0A05               	xorlw	5
  1890  001952  B4D8               	btfsc	status,2,c
  1891  001954  D005               	goto	l304
  1892  001956  50C6               	movf	4038,w,c	;volatile
  1893  001958  0B0F               	andlw	15
  1894  00195A  0A04               	xorlw	4
  1895  00195C  A4D8               	btfss	status,2,c
  1896  00195E  D00A               	goto	l302
  1897  001960                     l304:
  1898                           
  1899                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
  1900  001960  8C93               	bsf	3987,6,c	;volatile
  1901                           
  1902                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
  1903  001962  50C6               	movf	4038,w,c	;volatile
  1904  001964  0B0F               	andlw	15
  1905  001966  0A04               	xorlw	4
  1906  001968  A4D8               	btfss	status,2,c
  1907  00196A  D002               	goto	l305
  1908                           
  1909                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
  1910  00196C  907F               	bcf	3967,0,c	;volatile
  1911                           
  1912                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
  1913  00196E  8C94               	bsf	3988,6,c	;volatile
  1914  001970                     l305:
  1915                           
  1916                           ;spi_pic.c: 26: }
  1917                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
  1918  001970  9EC7               	bcf	4039,7,c	;volatile
  1919                           
  1920                           ;spi_pic.c: 28: } else {
  1921  001972  0012               	return	
  1922  001974                     l302:
  1923                           
  1924                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
  1925  001974  9C93               	bcf	3987,6,c	;volatile
  1926  001976  0012               	return	
  1927  001978  0012               	return		;funcret
  1928  00197A                     __end_of_setup_spi:
  1929                           	opt stack 0
  1930                           tblptru	equ	0xFF8
  1931                           prodh	equ	0xFF4
  1932                           prodl	equ	0xFF3
  1933                           intcon2	equ	0xFF1
  1934                           intcon3	equ	0xFF0
  1935                           postinc0	equ	0xFEE
  1936                           wreg	equ	0xFE8
  1937                           plusw1	equ	0xFE3
  1938                           indf2	equ	0xFDF
  1939                           postinc2	equ	0xFDE
  1940                           postdec2	equ	0xFDD
  1941                           plusw2	equ	0xFDB
  1942                           fsr2h	equ	0xFDA
  1943                           fsr2l	equ	0xFD9
  1944                           status	equ	0xFD8
  1945                           
  1946 ;; *************** function _eserial_setup *****************
  1947 ;; Defined at:
  1948 ;;		line 16 in file "extended_serial.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;  baudrate_bit    1    wreg     unsigned char 
  1951 ;;  baudrate_val    2    7[COMRAM] unsigned int 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  baudrate_bit    1    9[COMRAM] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;		None               void
  1956 ;; Registers used:
  1957 ;;		wreg, status,2, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0
  1963 ;;      Params:         2       0
  1964 ;;      Locals:         1       0
  1965 ;;      Temps:          0       0
  1966 ;;      Totals:         3       0
  1967 ;;Total ram usage:        3 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    1
  1970 ;; This function calls:
  1971 ;;		_setup_simple_serial
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text15
  1978  001854                     __ptext15:
  1979                           	opt stack 0
  1980  001854                     _eserial_setup:
  1981                           	opt stack 29
  1982                           
  1983                           ;incstack = 0
  1984                           ;eserial_setup@baudrate_bits stored from wreg
  1985  001854  6E0A               	movwf	eserial_setup@baudrate_bits,c
  1986                           
  1987                           ;extended_serial.c: 18: ANSELbits.ANS5 = 0;
  1988  001856  9A7E               	bcf	3966,5,c	;volatile
  1989                           
  1990                           ;extended_serial.c: 19: ANSELHbits.ANS11 = 0;
  1991  001858  967F               	bcf	3967,3,c	;volatile
  1992                           
  1993                           ;extended_serial.c: 21: TRISCbits.RC0 = 0;
  1994  00185A  9094               	bcf	3988,0,c	;volatile
  1995                           
  1996                           ;extended_serial.c: 22: TRISCbits.RC1 = 1;
  1997  00185C  8294               	bsf	3988,1,c	;volatile
  1998                           
  1999                           ;extended_serial.c: 24: setup_simple_serial(baudrate_bits, baudrate_value);
  2000  00185E  C008  F001         	movff	eserial_setup@baudrate_value,setup_simple_serial@baudrate_value
  2001  001862  C009  F002         	movff	eserial_setup@baudrate_value+1,setup_simple_serial@baudrate_value+1
  2002  001866  500A               	movf	eserial_setup@baudrate_bits,w,c
  2003  001868  ECDF  F00C         	call	_setup_simple_serial
  2004                           
  2005                           ;extended_serial.c: 26: LATCbits.LATC0 = 1;
  2006  00186C  808B               	bsf	3979,0,c	;volatile
  2007  00186E  0012               	return		;funcret
  2008  001870                     __end_of_eserial_setup:
  2009                           	opt stack 0
  2010                           tblptru	equ	0xFF8
  2011                           prodh	equ	0xFF4
  2012                           prodl	equ	0xFF3
  2013                           intcon2	equ	0xFF1
  2014                           intcon3	equ	0xFF0
  2015                           postinc0	equ	0xFEE
  2016                           wreg	equ	0xFE8
  2017                           plusw1	equ	0xFE3
  2018                           indf2	equ	0xFDF
  2019                           postinc2	equ	0xFDE
  2020                           postdec2	equ	0xFDD
  2021                           plusw2	equ	0xFDB
  2022                           fsr2h	equ	0xFDA
  2023                           fsr2l	equ	0xFD9
  2024                           status	equ	0xFD8
  2025                           
  2026 ;; *************** function _setup_simple_serial *****************
  2027 ;; Defined at:
  2028 ;;		line 18 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  baudrate_bit    1    wreg     unsigned char 
  2031 ;;  baudrate_val    2    0[COMRAM] unsigned int 
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  baudrate_bit    1    6[COMRAM] unsigned char 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;		None               void
  2036 ;; Registers used:
  2037 ;;		wreg, status,2
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0
  2043 ;;      Params:         2       0
  2044 ;;      Locals:         5       0
  2045 ;;      Temps:          0       0
  2046 ;;      Totals:         7       0
  2047 ;;Total ram usage:        7 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; This function calls:
  2050 ;;		Nothing
  2051 ;; This function is called by:
  2052 ;;		_eserial_setup
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text16
  2057  0019BE                     __ptext16:
  2058                           	opt stack 0
  2059  0019BE                     _setup_simple_serial:
  2060                           	opt stack 29
  2061                           
  2062                           ;incstack = 0
  2063                           ;setup_simple_serial@baudrate_bits stored from wreg
  2064  0019BE  6E07               	movwf	setup_simple_serial@baudrate_bits,c
  2065                           
  2066                           ;serial_pic.c: 20: ANSELHbits.ANS11 = 0;
  2067  0019C0  967F               	bcf	3967,3,c	;volatile
  2068                           
  2069                           ;serial_pic.c: 21: TXSTA = (baudrate_bits & 0x04) ? 0x24: 0x20;
  2070  0019C2  B407               	btfsc	setup_simple_serial@baudrate_bits,2,c
  2071  0019C4  D004               	goto	l1724
  2072  0019C6  0E00               	movlw	0
  2073  0019C8  6E04               	movwf	_setup_simple_serial$200+1,c
  2074  0019CA  0E20               	movlw	32
  2075  0019CC  D003               	goto	L2
  2076  0019CE                     l1724:
  2077  0019CE  0E00               	movlw	0
  2078  0019D0  6E04               	movwf	_setup_simple_serial$200+1,c
  2079  0019D2  0E24               	movlw	36
  2080  0019D4                     L2:
  2081  0019D4  6E03               	movwf	_setup_simple_serial$200,c
  2082  0019D6  D000               	goto	l1726
  2083  0019D8                     l1726:
  2084  0019D8  C003  FFAC         	movff	_setup_simple_serial$200,4012	;volatile
  2085                           
  2086                           ;serial_pic.c: 22: RCSTA = 0x90;
  2087  0019DC  0E90               	movlw	144
  2088  0019DE  6EAB               	movwf	4011,c	;volatile
  2089                           
  2090                           ;serial_pic.c: 23: BAUDCON = (baudrate_bits & 0x08) ? 0x08 : 0x00;
  2091  0019E0  B607               	btfsc	setup_simple_serial@baudrate_bits,3,c
  2092  0019E2  D004               	goto	l1732
  2093  0019E4  0E00               	movlw	0
  2094  0019E6  6E06               	movwf	_setup_simple_serial$201+1,c
  2095  0019E8  0E00               	movlw	0
  2096  0019EA  D003               	goto	L3
  2097  0019EC                     l1732:
  2098  0019EC  0E00               	movlw	0
  2099  0019EE  6E06               	movwf	_setup_simple_serial$201+1,c
  2100  0019F0  0E08               	movlw	8
  2101  0019F2                     L3:
  2102  0019F2  6E05               	movwf	_setup_simple_serial$201,c
  2103  0019F4  D000               	goto	l1734
  2104  0019F6                     l1734:
  2105  0019F6  C005  FFB8         	movff	_setup_simple_serial$201,4024	;volatile
  2106                           
  2107                           ;serial_pic.c: 25: SPBRGH = baudrate_value >> 8;
  2108  0019FA  5002               	movf	setup_simple_serial@baudrate_value+1,w,c
  2109  0019FC  6EB0               	movwf	4016,c	;volatile
  2110                           
  2111                           ;serial_pic.c: 26: SPBRG = baudrate_value;
  2112  0019FE  C001  FFAF         	movff	setup_simple_serial@baudrate_value,4015	;volatile
  2113  001A02  0012               	return		;funcret
  2114  001A04                     __end_of_setup_simple_serial:
  2115                           	opt stack 0
  2116                           tblptru	equ	0xFF8
  2117                           prodh	equ	0xFF4
  2118                           prodl	equ	0xFF3
  2119                           intcon2	equ	0xFF1
  2120                           intcon3	equ	0xFF0
  2121                           postinc0	equ	0xFEE
  2122                           wreg	equ	0xFE8
  2123                           plusw1	equ	0xFE3
  2124                           indf2	equ	0xFDF
  2125                           postinc2	equ	0xFDE
  2126                           postdec2	equ	0xFDD
  2127                           plusw2	equ	0xFDB
  2128                           fsr2h	equ	0xFDA
  2129                           fsr2l	equ	0xFD9
  2130                           status	equ	0xFD8
  2131                           
  2132 ;; *************** function _eserial_send_data *****************
  2133 ;; Defined at:
  2134 ;;		line 29 in file "extended_serial.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  2137 ;;		 -> main@pic_to_pc(34), 
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;  value           2    9[COMRAM] int 
  2140 ;;  i               1    8[COMRAM] char 
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      char 
  2143 ;; Registers used:
  2144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0
  2150 ;;      Params:         2       0
  2151 ;;      Locals:         3       0
  2152 ;;      Temps:          0       0
  2153 ;;      Totals:         5       0
  2154 ;;Total ram usage:        5 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    1
  2157 ;; This function calls:
  2158 ;;		_buffer_pop
  2159 ;;		_serial_send_byte
  2160 ;; This function is called by:
  2161 ;;		_main
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text17
  2166  00197A                     __ptext17:
  2167                           	opt stack 0
  2168  00197A                     _eserial_send_data:
  2169                           	opt stack 29
  2170                           
  2171                           ;extended_serial.c: 34: int8_t i = 0;
  2172                           
  2173                           ;incstack = 0
  2174  00197A  0E00               	movlw	0
  2175  00197C  6E09               	movwf	eserial_send_data@i,c
  2176                           
  2177                           ;extended_serial.c: 35: int16_t value = buffer_pop(buffer);
  2178  00197E  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  2179  001982  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  2180  001986  EC81  F00D         	call	_buffer_pop	;wreg free
  2181  00198A  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  2182  00198E  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  2183                           
  2184                           ;extended_serial.c: 36: while (value != -1) {
  2185  001992  D00F               	goto	l1962
  2186  001994                     l1956:
  2187                           
  2188                           ;extended_serial.c: 37: serial_send_byte((uint8_t)value);
  2189  001994  500A               	movf	eserial_send_data@value,w,c
  2190  001996  ECF9  F00B         	call	_serial_send_byte
  2191                           
  2192                           ;extended_serial.c: 38: value = buffer_pop(buffer);
  2193  00199A  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  2194  00199E  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  2195  0019A2  EC81  F00D         	call	_buffer_pop	;wreg free
  2196  0019A6  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  2197  0019AA  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  2198                           
  2199                           ;extended_serial.c: 39: i++;
  2200  0019AE  2A09               	incf	eserial_send_data@i,f,c
  2201  0019B0  D000               	goto	l1962
  2202  0019B2                     l1962:
  2203  0019B2  280A               	incf	eserial_send_data@value,w,c
  2204  0019B4  E1EF               	bnz	l1956
  2205  0019B6  280B               	incf	eserial_send_data@value+1,w,c
  2206  0019B8  A4D8               	btfss	status,2,c
  2207  0019BA  D7EC               	goto	l1956
  2208                           
  2209                           ;extended_serial.c: 40: }
  2210                           ;extended_serial.c: 42: return i;
  2211                           ;	Return value of _eserial_send_data is never used
  2212  0019BC  0012               	return		;funcret
  2213  0019BE                     __end_of_eserial_send_data:
  2214                           	opt stack 0
  2215                           tblptru	equ	0xFF8
  2216                           prodh	equ	0xFF4
  2217                           prodl	equ	0xFF3
  2218                           intcon2	equ	0xFF1
  2219                           intcon3	equ	0xFF0
  2220                           postinc0	equ	0xFEE
  2221                           wreg	equ	0xFE8
  2222                           plusw1	equ	0xFE3
  2223                           indf2	equ	0xFDF
  2224                           postinc2	equ	0xFDE
  2225                           postdec2	equ	0xFDD
  2226                           plusw2	equ	0xFDB
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _serial_send_byte *****************
  2232 ;; Defined at:
  2233 ;;		line 66 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  byte            1    wreg     unsigned char 
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;  byte            1    0[COMRAM] unsigned char 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;		None               void
  2240 ;; Registers used:
  2241 ;;		wreg
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0
  2247 ;;      Params:         0       0
  2248 ;;      Locals:         1       0
  2249 ;;      Temps:          0       0
  2250 ;;      Totals:         1       0
  2251 ;;Total ram usage:        1 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_main
  2257 ;;		_eserial_send_data
  2258 ;;		_serial_send_data
  2259 ;;		_serial_send_buffer
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text18
  2264  0017F2                     __ptext18:
  2265                           	opt stack 0
  2266  0017F2                     _serial_send_byte:
  2267                           	opt stack 30
  2268                           
  2269                           ;incstack = 0
  2270                           ;serial_send_byte@byte stored from wreg
  2271  0017F2  6E01               	movwf	serial_send_byte@byte,c
  2272                           
  2273                           ;serial_pic.c: 68: while (!TXIF);
  2274  0017F4  D000               	goto	l102
  2275  0017F6                     l102:
  2276  0017F6  A89E               	btfss	3998,4,c	;volatile
  2277  0017F8  D7FE               	goto	l102
  2278                           
  2279                           ;serial_pic.c: 69: TXREG = byte;
  2280  0017FA  C001  FFAD         	movff	serial_send_byte@byte,4013	;volatile
  2281  0017FE  0012               	return		;funcret
  2282  001800                     __end_of_serial_send_byte:
  2283                           	opt stack 0
  2284                           tblptru	equ	0xFF8
  2285                           prodh	equ	0xFF4
  2286                           prodl	equ	0xFF3
  2287                           intcon2	equ	0xFF1
  2288                           intcon3	equ	0xFF0
  2289                           postinc0	equ	0xFEE
  2290                           wreg	equ	0xFE8
  2291                           plusw1	equ	0xFE3
  2292                           indf2	equ	0xFDF
  2293                           postinc2	equ	0xFDE
  2294                           postdec2	equ	0xFDD
  2295                           plusw2	equ	0xFDB
  2296                           fsr2h	equ	0xFDA
  2297                           fsr2l	equ	0xFD9
  2298                           status	equ	0xFD8
  2299                           
  2300 ;; *************** function _buffer_pop *****************
  2301 ;; Defined at:
  2302 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2305 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;  byte            2    4[COMRAM] int 
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  2    0[COMRAM] int 
  2310 ;; Registers used:
  2311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMRAM   BANK0
  2317 ;;      Params:         2       0
  2318 ;;      Locals:         2       0
  2319 ;;      Temps:          2       0
  2320 ;;      Totals:         6       0
  2321 ;;Total ram usage:        6 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; This function calls:
  2324 ;;		Nothing
  2325 ;; This function is called by:
  2326 ;;		_eserial_send_data
  2327 ;;		_espi_slave_send
  2328 ;;		_espi_master_send
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           	psect	text19
  2333  001B02                     __ptext19:
  2334                           	opt stack 0
  2335  001B02                     _buffer_pop:
  2336                           	opt stack 29
  2337                           
  2338                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
  2339                           
  2340                           ;incstack = 0
  2341  001B02  EE20 F001          	lfsr	2,1
  2342  001B06  5001               	movf	buffer_pop@buffer,w,c
  2343  001B08  26D9               	addwf	fsr2l,f,c
  2344  001B0A  5002               	movf	buffer_pop@buffer+1,w,c
  2345  001B0C  22DA               	addwfc	fsr2h,f,c
  2346  001B0E  50DF               	movf	indf2,w,c
  2347  001B10  A4D8               	btfss	status,2,c
  2348  001B12  D003               	goto	l1762
  2349                           
  2350                           ;circular_buffer.c: 40: return -1;
  2351  001B14  6801               	setf	?_buffer_pop,c
  2352  001B16  6802               	setf	?_buffer_pop+1,c
  2353  001B18  0012               	return	
  2354  001B1A                     l1762:
  2355                           
  2356                           ;circular_buffer.c: 41: }
  2357                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2358  001B1A  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2359  001B1E  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2360  001B22  50DF               	movf	indf2,w,c
  2361  001B24  6E03               	movwf	??_buffer_pop& (0+255),c
  2362  001B26  5003               	movf	??_buffer_pop,w,c
  2363  001B28  0D01               	mullw	1
  2364  001B2A  0E02               	movlw	2
  2365  001B2C  26F3               	addwf	prodl,f,c
  2366  001B2E  0E00               	movlw	0
  2367  001B30  22F4               	addwfc	prodh,f,c
  2368  001B32  50F3               	movf	prodl,w,c
  2369  001B34  2401               	addwf	buffer_pop@buffer,w,c
  2370  001B36  6ED9               	movwf	fsr2l,c
  2371  001B38  50F4               	movf	prodh,w,c
  2372  001B3A  2002               	addwfc	buffer_pop@buffer+1,w,c
  2373  001B3C  6EDA               	movwf	fsr2h,c
  2374  001B3E  50DF               	movf	indf2,w,c
  2375  001B40  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  2376  001B42  5004               	movf	??_buffer_pop+1,w,c
  2377  001B44  6E05               	movwf	buffer_pop@byte,c
  2378  001B46  6A06               	clrf	buffer_pop@byte+1,c
  2379                           
  2380                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  2381  001B48  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2382  001B4C  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2383  001B50  50DF               	movf	indf2,w,c
  2384  001B52  6E03               	movwf	??_buffer_pop& (0+255),c
  2385  001B54  2803               	incf	??_buffer_pop,w,c
  2386  001B56  0B1F               	andlw	31
  2387  001B58  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2388  001B5C  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2389  001B60  6EDF               	movwf	indf2,c
  2390                           
  2391                           ;circular_buffer.c: 45: buffer->count--;
  2392  001B62  EE20 F001          	lfsr	2,1
  2393  001B66  5001               	movf	buffer_pop@buffer,w,c
  2394  001B68  26D9               	addwf	fsr2l,f,c
  2395  001B6A  5002               	movf	buffer_pop@buffer+1,w,c
  2396  001B6C  22DA               	addwfc	fsr2h,f,c
  2397  001B6E  06DF               	decf	indf2,f,c
  2398                           
  2399                           ;circular_buffer.c: 47: return byte;
  2400  001B70  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  2401  001B74  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  2402  001B78  0012               	return	
  2403  001B7A  0012               	return		;funcret
  2404  001B7C                     __end_of_buffer_pop:
  2405                           	opt stack 0
  2406  0000                     tblptru	equ	0xFF8
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           intcon2	equ	0xFF1
  2410                           intcon3	equ	0xFF0
  2411                           postinc0	equ	0xFEE
  2412                           wreg	equ	0xFE8
  2413                           plusw1	equ	0xFE3
  2414                           indf2	equ	0xFDF
  2415                           postinc2	equ	0xFDE
  2416                           postdec2	equ	0xFDD
  2417                           plusw2	equ	0xFDB
  2418                           fsr2h	equ	0xFDA
  2419                           fsr2l	equ	0xFD9
  2420                           status	equ	0xFD8
  2421                           tblptru	equ	0xFF8
  2422                           prodh	equ	0xFF4
  2423                           prodl	equ	0xFF3
  2424                           intcon2	equ	0xFF1
  2425                           intcon3	equ	0xFF0
  2426                           postinc0	equ	0xFEE
  2427                           wreg	equ	0xFE8
  2428                           plusw1	equ	0xFE3
  2429                           indf2	equ	0xFDF
  2430                           postinc2	equ	0xFDE
  2431                           postdec2	equ	0xFDD
  2432                           plusw2	equ	0xFDB
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437                           	psect	rparam
  2438  0000                     tblptru	equ	0xFF8
  2439                           prodh	equ	0xFF4
  2440                           prodl	equ	0xFF3
  2441                           intcon2	equ	0xFF1
  2442                           intcon3	equ	0xFF0
  2443                           postinc0	equ	0xFEE
  2444                           wreg	equ	0xFE8
  2445                           plusw1	equ	0xFE3
  2446                           indf2	equ	0xFDF
  2447                           postinc2	equ	0xFDE
  2448                           postdec2	equ	0xFDD
  2449                           plusw2	equ	0xFDB
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     87      88
    BANK0           160      0      68

Pointer List with Targets:

    espi_slave_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    espi_slave_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    spi_slave_peek_receive@byte	PTR int  size(2) Largest target is 2
		 -> main@value_87(COMRAM[2]), NULL(NULL[0]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    eserial_send_data@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    serial_send_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_load_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_disable_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    S126interrupt_serial$data	PTR unsigned char  size(2) Largest target is 0

    serial_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_espi_slave_send
    _spi_slave_peek_receive->_spi_slave_get_byte
    _espi_slave_send->_buffer_peek
    _espi_slave_send->_buffer_pop
    _espi_slave_send->_encode_data
    _espi_slave_receive->_buffer_push
    _espi_slave_receive->_decode_data
    _espi_setup->_setup_spi
    _eserial_setup->_setup_simple_serial
    _eserial_send_data->_buffer_pop

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                71    71      0    5639
                                             17 COMRAM    70    70      0
                  _eserial_send_data
                      _eserial_setup
                         _espi_setup
                 _espi_slave_receive
                    _espi_slave_send
                   _serial_send_byte
                       _setup_timer3
             _spi_slave_peek_receive
 ---------------------------------------------------------------------------------
 (1) _spi_slave_peek_receive                               3     1      2     196
                                              3 COMRAM     3     1      2
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _espi_slave_send                                     11     9      2    2140
                                              6 COMRAM    11     9      2
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                  _spi_send_get_byte
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     516
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     281
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_slave_receive                                   5     3      2    1995
                                              5 COMRAM     5     3      2
                        _buffer_push
                       _buffer_space
                        _decode_data
                  _spi_send_get_byte
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (2) _spi_slave_get_byte                                   3     1      2      24
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _spi_send_get_byte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     278
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     801
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _eserial_setup                                        3     1      2     308
                                              7 COMRAM     3     1      2
                _setup_simple_serial
 ---------------------------------------------------------------------------------
 (2) _setup_simple_serial                                  7     5      2     200
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _eserial_send_data                                    5     3      2     595
                                              6 COMRAM     5     3      2
                         _buffer_pop
                   _serial_send_byte
 ---------------------------------------------------------------------------------
 (1) _serial_send_byte                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     411
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eserial_send_data
     _buffer_pop
     _serial_send_byte
   _eserial_setup
     _setup_simple_serial
   _espi_setup
     _setup_spi
   _espi_slave_receive
     _buffer_push
     _buffer_space
     _decode_data
     _spi_send_get_byte
     _spi_slave_get_byte
   _espi_slave_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _spi_send_get_byte
   _serial_send_byte
   _setup_timer3
   _spi_slave_peek_receive
     _spi_slave_get_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0      44       3       42.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     57      58       1       92.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C       4        0.0%
DATA                 0      0      9C       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Aug 04 15:36:41 2015

                  _espi_slave_send 1CB2                        _SSPSTATbits 000FC7  
                               l27 1CA0             eserial_send_data@value 000A  
               _espi_slave_receive 1B7C            ?_spi_slave_peek_receive 0004  
          eserial_send_data@buffer 0007                                l102 17F6  
                              l302 1974                                l310 181A  
                              l304 1960                                l305 1970  
                              l420 18B8                                l422 18B0  
                              l360 1886                                l357 1872  
                              wreg 000FE8                       __CFG_FOSC$HS 000000  
              ?_espi_slave_receive 0006                       __CFG_LVP$OFF 000000  
                             l1732 19EC                               l1724 19CE  
                             l1734 19F6                               l1726 19D8  
                             l1750 1910                               l1910 1DE6  
                             l1920 1DF6                               l1840 18F2  
                             l1762 1B1A                               l1754 1920  
                             l1924 1B82                               l1836 18EC  
                             l1934 1BAC                               l1776 1AB4  
                             l1944 1BD6                               l1962 19B2  
                             l1882 1D2C                               l1956 1994  
                             l1948 1BFC                               l1796 1A62  
                             l1892 1D68                               l1884 1D3A  
      __size_of_spi_slave_get_byte 001E                               l1990 1C88  
                             l1982 1C56                               l1898 1D96  
                             u1380 18FA                               u1701 1C20  
                             u1711 1C32                               _RCIE 007CED  
                             _RCIF 007CF5             __size_of_eserial_setup 001C  
                             _TMR0 000FD6                               _TMR3 000FB2  
                             _TXIE 007CEC                               _TXIF 007CF4  
                             _main 1C16                               fsr2h 000FDA  
                             indf2 000FDF                               fsr2l 000FD9  
                             prodh 000FF4                               prodl 000FF3  
                             start 0002              spi_send_get_byte@byte 0001  
                   ??_buffer_count 0003                     ??_buffer_space 0003  
             ??_espi_slave_receive 0008                       ___param_bank 000010  
             setup_spi@SSPCON1_reg 0001     __end_of_spi_slave_peek_receive 1900  
                            ?_main 0001                              _T0CON 000FD5  
                            _T3CON 000FB1                              _RCREG 000FAE  
                            _RCSTA 000FAB                              _SPBRG 000FAF  
                            _TXREG 000FAD                              _TXSTA 000FAC  
             __size_of_decode_data 003C                       main@value_87 0034  
             serial_send_byte@byte 0001                              plusw1 000FE3  
                            plusw2 000FDB                              status 000FD8  
          __end_of_espi_slave_send 1E00               setup_spi@SSPSTAT_reg 0002  
                 buffer_pop@buffer 0001                    __initialization 183C  
                     __end_of_main 1CB2                      _eserial_setup 1854  
                           ??_main 0012                  _spi_send_get_byte 1812  
                    __activetblptr 000002                 ?_spi_send_get_byte 0001  
                buffer_peek@buffer 0001                    encode_data@data 0006  
     espi_slave_receive@received_1 0009       espi_slave_receive@received_2 000A  
              ??_spi_send_get_byte 0001                             _INT2IF 007F81  
                           _INTCON 000FF2                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9           __end_of_serial_send_byte 1800  
                  decode_data@data 0001                      main@pic_to_pc 0036  
             __size_of_encode_data 0046                     ?_eserial_setup 0008  
             __size_of_buffer_peek 0052               __size_of_buffer_push 0066  
        __end_of_spi_send_get_byte 1826                             clear_0 1842  
      __end_of_setup_simple_serial 1A04               __end_of_buffer_count 1812  
                           tblptru 000FF8              setup_timer3@T3CON_reg 0001  
             __end_of_buffer_space 183C                         __accesstop 0060  
          __end_of__initialization 184A                   ?_espi_slave_send 0007  
                    ___rparam_used 000001                     __pcstackCOMRAM 0001  
               buffer_count@buffer 0001           espi_slave_receive@buffer 0006  
                   buffer_pop@byte 0005                  _eserial_send_data 197A  
               ?_eserial_send_data 0007                         __pbssBANK0 0060  
              ??_eserial_send_data 0009                    ??_eserial_setup 000A  
       __size_of_spi_send_get_byte 0014                            _BAUDCON 000FB8  
        __end_of_eserial_send_data 19BE                  buffer_push@buffer 0001  
               __size_of_setup_spi 003E         __end_of_spi_slave_get_byte 188E  
                       _buffer_pop 1B02                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7             spi_slave_get_byte@byte 0003  
                   main@pic_to_pic 0012     spi_slave_peek_receive@get_byte 0006  
                          __Hparam 0000                            __Lparam 0000  
      __size_of_espi_slave_receive 009A                         _espi_setup 188E  
                       _dummy_byte 0058                            __pcinit 183C  
                        _ANSELbits 000F7E                            __ramtop 0100  
            __size_of_buffer_count 0012                            __ptext0 1C16  
                          __ptext1 18C6                            __ptext2 17EA  
                          __ptext3 1CB2                            __ptext4 1A04  
                          __ptext5 1A4A                            __ptext6 1800  
                          __ptext7 1B7C                            __ptext8 1870  
                          __ptext9 1812              __size_of_buffer_space 0016  
                    ??_decode_data 0005              espi_slave_send@buffer 0007  
            espi_slave_send@byte_1 000C              espi_slave_send@byte_2 000D  
             end_of_initialization 184A                      __Lmediumconst 0000  
                ?_serial_send_byte 0001                       _buffer_count 1800  
                __end_of_setup_spi 197A                 ??_serial_send_byte 0001  
                     _buffer_space 1826                          _RCSTAbits 000FAB  
                          postdec2 000FDD          espi_slave_send@received_1 000E  
        espi_slave_send@received_2 0010                            postinc0 000FEE  
                          postinc2 000FDE         eserial_setup@baudrate_bits 000A  
       __size_of_eserial_send_data 0044                      ?_setup_timer3 0001  
                        _TRISAbits 000F92                          _TRISBbits 000F93  
                        _TRISCbits 000F94                        ?_buffer_pop 0001  
              __end_of_decode_data 193C                      ??_encode_data 0005  
                    ??_buffer_peek 0003                      ??_buffer_push 0004  
         ??_spi_slave_peek_receive 0006                        ?_espi_setup 0001  
                  buffer_peek@byte 0005                     espi_setup@mode 0003  
                   ??_setup_timer3 0001                start_initialization 183C  
     __size_of_setup_simple_serial 0046                 buffer_space@buffer 0001  
                  buffer_push@byte 0003                __end_of_encode_data 1A4A  
              __size_of_buffer_pop 007A           __size_of_espi_slave_send 014E  
              __end_of_buffer_peek 1A9C                __end_of_buffer_push 1B02  
                      _decode_data 1900                        __pbssCOMRAM 0058  
          espi_slave_receive@value 0008                __size_of_espi_setup 0038  
               _spi_slave_get_byte 1870    __size_of_spi_slave_peek_receive 003A  
            __end_of_eserial_setup 1870                ?_spi_slave_get_byte 0001  
                encode_data@byte_1 0001                  encode_data@byte_2 0003  
 setup_simple_serial@baudrate_bits 0007               ??_spi_slave_get_byte 0003  
                         _LATAbits 000F89                           _LATCbits 000F8B  
                      _encode_data 1A04         __end_of_espi_slave_receive 1C16  
                         _PIE2bits 000FA0               __end_of_setup_timer3 17F2  
                         _PIR2bits 000FA1                        _buffer_peek 1A4A  
                      _buffer_push 1A9C                          main@F4057 0060  
                        main@F4059 0082                          _setup_spi 193C  
        __size_of_serial_send_byte 000E                  ??_espi_slave_send 0009  
           _spi_slave_peek_receive 18C6                       ??_buffer_pop 0003  
       spi_slave_peek_receive@byte 0004                  decode_data@byte_1 0003  
                decode_data@byte_2 0004                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                           __Hrparam 0000  
                         __Lrparam 0000                       ??_espi_setup 0003  
               __end_of_buffer_pop 1B7C                         ?_setup_spi 0001  
               eserial_send_data@i 0009                _setup_simple_serial 19BE  
                       _ANSELHbits 000F7F                           __ptext10 1900  
                         __ptext11 1826                           __ptext12 1A9C  
                         __ptext13 188E                           __ptext14 193C  
                         __ptext15 1854                           __ptext16 19BE  
                         __ptext17 197A                           __ptext18 17F2  
                         __ptext19 1B02               ?_setup_simple_serial 0001  
               __end_of_espi_setup 18C6                      __size_of_main 009C  
                       _INTCONbits 000FF2                       ?_decode_data 0001  
            ??_setup_simple_serial 0003              __size_of_setup_timer3 0008  
                      ??_setup_spi 0002                   _serial_send_byte 17F2  
                     _setup_timer3 17EA        buffer_push@current_position 0005  
                      _SSPCON1bits 000FC6        eserial_setup@baudrate_value 0008  
                     ?_encode_data 0001  setup_simple_serial@baudrate_value 0001  
      espi_slave_send@byte_to_send 000A                      ?_buffer_count 0001  
                     ?_buffer_peek 0001                      ?_buffer_space 0001  
          _setup_simple_serial$200 0003            _setup_simple_serial$201 0005  
                     ?_buffer_push 0001  
