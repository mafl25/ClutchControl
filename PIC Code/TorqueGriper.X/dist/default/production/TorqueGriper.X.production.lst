

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Aug 05 12:29:55 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38  0000                     _TMR0	set	4054
    39  0000                     _TMR3	set	4018
    40  0000                     _ANSELHbits	set	3967
    41  0000                     _ANSELbits	set	3966
    42  0000                     _BAUDCON	set	4024
    43  0000                     _INTCON	set	4082
    44  0000                     _INTCON2bits	set	4081
    45  0000                     _INTCON3bits	set	4080
    46  0000                     _INTCONbits	set	4082
    47  0000                     _LATAbits	set	3977
    48  0000                     _LATCbits	set	3979
    49  0000                     _PIE2bits	set	4000
    50  0000                     _PIR2bits	set	4001
    51  0000                     _RCREG	set	4014
    52  0000                     _RCSTA	set	4011
    53  0000                     _RCSTAbits	set	4011
    54  0000                     _SPBRG	set	4015
    55  0000                     _SPBRGH	set	4016
    56  0000                     _SSPBUF	set	4041
    57  0000                     _SSPCON1	set	4038
    58  0000                     _SSPCON1bits	set	4038
    59  0000                     _SSPSTAT	set	4039
    60  0000                     _SSPSTATbits	set	4039
    61  0000                     _T0CON	set	4053
    62  0000                     _T3CON	set	4017
    63  0000                     _TRISAbits	set	3986
    64  0000                     _TRISBbits	set	3987
    65  0000                     _TRISCbits	set	3988
    66  0000                     _TXREG	set	4013
    67  0000                     _TXSTA	set	4012
    68  0000                     _INT2IF	set	32641
    69  0000                     _RCIE	set	31981
    70  0000                     _RCIF	set	31989
    71  0000                     _TXIE	set	31980
    72  0000                     _TXIF	set	31988
    73                           
    74 ;;
    75 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    76 ;;
    77 ;; *************** function _main *****************
    78 ;; Defined at:
    79 ;;		line 27 in file "main.c"
    80 ;; Parameters:    Size  Location     Type
    81 ;;		None
    82 ;; Auto vars:     Size  Location     Type
    83 ;;  value           2   17[COMRAM] int 
    84 ;;  pic_to_pic     34   53[COMRAM] struct circular_buffer
    85 ;;  pic_to_pc      34   19[COMRAM] struct circular_buffer
    86 ;;  value           1    0        unsigned char 
    87 ;; Return value:  Size  Location     Type
    88 ;;                  2   25[None  ] int 
    89 ;; Registers used:
    90 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
    91 ;; Tracked objects:
    92 ;;		On entry : 0/0
    93 ;;		On exit  : 0/0
    94 ;;		Unchanged: 0/0
    95 ;; Data sizes:     COMRAM   BANK0
    96 ;;      Params:         0       0
    97 ;;      Locals:        70       0
    98 ;;      Temps:          0       0
    99 ;;      Totals:        70       0
   100 ;;Total ram usage:       70 bytes
   101 ;; Hardware stack levels required when called:    4
   102 ;; This function calls:
   103 ;;		_eserial_receive
   104 ;;		_eserial_send_data
   105 ;;		_eserial_setup
   106 ;;		_espi_setup
   107 ;;		_espi_slave_receive
   108 ;;		_espi_slave_send
   109 ;;		_setup_timer3
   110 ;;		_spi_slave_peek_receive
   111 ;; This function is called by:
   112 ;;		Startup code after reset
   113 ;; This function uses a non-reentrant model
   114 ;;
   115                           
   116                           	psect	text0
   117  001CC0                     __ptext0:
   118                           	opt stack 0
   119  001CC0                     _main:
   120                           	opt stack 27
   121                           
   122                           ;main.c: 29: struct circular_buffer pic_to_pic = {0, 0, {0}};
   123                           
   124                           ;incstack = 0
   125  001CC0  EE20  F060         	lfsr	2,main@F4057
   126  001CC4  EE10  F036         	lfsr	1,main@pic_to_pic
   127  001CC8  0E21               	movlw	33
   128  001CCA                     u1921:
   129  001CCA  CFDB FFE3          	movff	plusw2,plusw1
   130  001CCE  06E8               	decf	wreg,f,c
   131  001CD0  E2FC               	bc	u1921
   132                           
   133                           ;main.c: 30: struct circular_buffer pic_to_pc = {0, 0, {0}};
   134  001CD2  EE20  F082         	lfsr	2,main@F4059
   135  001CD6  EE10  F014         	lfsr	1,main@pic_to_pc
   136  001CDA  0E21               	movlw	33
   137  001CDC                     u1931:
   138  001CDC  CFDB FFE3          	movff	plusw2,plusw1
   139  001CE0  06E8               	decf	wreg,f,c
   140  001CE2  E2FC               	bc	u1931
   141                           
   142                           ;main.c: 32: espi_setup(0x05);
   143  001CE4  0E05               	movlw	5
   144  001CE6  EC9C  F00C         	call	_espi_setup
   145                           
   146                           ;main.c: 33: eserial_setup(0x08 | 0x04, 0x10);
   147  001CEA  0E00               	movlw	0
   148  001CEC  6E09               	movwf	eserial_setup@baudrate_value+1,c
   149  001CEE  0E10               	movlw	16
   150  001CF0  6E08               	movwf	eserial_setup@baudrate_value,c
   151  001CF2  0E0C               	movlw	12
   152  001CF4  EC68  F00C         	call	_eserial_setup
   153                           
   154                           ;main.c: 34: setup_timer3(0x80 | 0x00 | 0x01);
   155  001CF8  0E81               	movlw	129
   156  001CFA  EC0F  F00C         	call	_setup_timer3
   157  001CFE  D000               	goto	l2059
   158  001D00                     l2059:
   159                           
   160                           ;main.c: 41: eserial_receive(&pic_to_pic, &return_false, &set_timer3, &timer3_up);
   161  001D00  0E36               	movlw	low main@pic_to_pic
   162  001D02  6E07               	movwf	eserial_receive@buffer,c
   163  001D04  0E00               	movlw	high main@pic_to_pic
   164  001D06  6E08               	movwf	eserial_receive@buffer+1,c
   165  001D08  0E4E               	movlw	low _return_false
   166  001D0A  6E09               	movwf	eserial_receive@stop_function,c
   167  001D0C  0E18               	movlw	high _return_false
   168  001D0E  6E0A               	movwf	eserial_receive@stop_function+1,c
   169  001D10  0E26               	movlw	low _set_timer3
   170  001D12  6E0B               	movwf	eserial_receive@timer_start,c
   171  001D14  0E18               	movlw	high _set_timer3
   172  001D16  6E0C               	movwf	eserial_receive@timer_start+1,c
   173  001D18  0E32               	movlw	low _timer3_up
   174  001D1A  6E0D               	movwf	eserial_receive@timer_up,c
   175  001D1C  0E18               	movlw	high _timer3_up
   176  001D1E  6E0E               	movwf	eserial_receive@timer_up+1,c
   177  001D20  ECBD  F00E         	call	_eserial_receive	;wreg free
   178                           
   179                           ;main.c: 43: int16_t value;
   180                           ;main.c: 44: if (spi_slave_peek_receive(1, &value)) {
   181  001D24  0E12               	movlw	low main@value_102
   182  001D26  6E04               	movwf	spi_slave_peek_receive@byte,c
   183  001D28  0E00               	movlw	high main@value_102
   184  001D2A  6E05               	movwf	spi_slave_peek_receive@byte+1,c
   185  001D2C  0E01               	movlw	1
   186  001D2E  ECB8  F00C         	call	_spi_slave_peek_receive
   187  001D32  0900               	iorlw	0
   188  001D34  B4D8               	btfsc	status,2,c
   189  001D36  D018               	goto	l31
   190                           
   191                           ;main.c: 45: if (value == 0x20) {
   192  001D38  0E20               	movlw	32
   193  001D3A  1812               	xorwf	main@value_102,w,c
   194  001D3C  1013               	iorwf	main@value_102+1,w,c
   195  001D3E  A4D8               	btfss	status,2,c
   196  001D40  D007               	goto	l2067
   197                           
   198                           ;main.c: 46: espi_slave_send(&pic_to_pic);
   199  001D42  0E36               	movlw	low main@pic_to_pic
   200  001D44  6E07               	movwf	espi_slave_send@buffer,c
   201  001D46  0E00               	movlw	high main@pic_to_pic
   202  001D48  6E08               	movwf	espi_slave_send@buffer+1,c
   203  001D4A  EC53  F00F         	call	_espi_slave_send	;wreg free
   204                           
   205                           ;main.c: 47: } else if (value == 0x10) {
   206  001D4E  D00C               	goto	l31
   207  001D50                     l2067:
   208  001D50  0E10               	movlw	16
   209  001D52  1812               	xorwf	main@value_102,w,c
   210  001D54  1013               	iorwf	main@value_102+1,w,c
   211  001D56  A4D8               	btfss	status,2,c
   212  001D58  D007               	goto	l31
   213                           
   214                           ;main.c: 48: espi_slave_receive(&pic_to_pc);
   215  001D5A  0E14               	movlw	low main@pic_to_pc
   216  001D5C  6E06               	movwf	espi_slave_receive@buffer,c
   217  001D5E  0E00               	movlw	high main@pic_to_pc
   218  001D60  6E07               	movwf	espi_slave_receive@buffer+1,c
   219  001D62  EC13  F00E         	call	_espi_slave_receive	;wreg free
   220  001D66  D000               	goto	l31
   221  001D68                     l31:
   222                           
   223                           ;main.c: 49: }
   224                           ;main.c: 50: }
   225                           ;main.c: 52: eserial_send_data(&pic_to_pc);
   226  001D68  0E14               	movlw	low main@pic_to_pc
   227  001D6A  6E07               	movwf	eserial_send_data@buffer,c
   228  001D6C  0E00               	movlw	high main@pic_to_pc
   229  001D6E  6E08               	movwf	eserial_send_data@buffer+1,c
   230  001D70  EC12  F00D         	call	_eserial_send_data	;wreg free
   231  001D74  D7C5               	goto	l2059
   232                           
   233                           ;main.c: 53: }
   234                           ;main.c: 55: return (0);
   235                           ;	Return value of _main is never used
   236  001D76  EF00  F000         	goto	start
   237  001D7A                     __end_of_main:
   238                           	opt stack 0
   239                           wreg	equ	0xFE8
   240                           plusw1	equ	0xFE3
   241                           plusw2	equ	0xFDB
   242                           status	equ	0xFD8
   243                           
   244                           	psect	cinit
   245  00189C                     __pcinit:
   246                           	opt stack 0
   247  00189C                     start_initialization:
   248                           	opt stack 0
   249  00189C                     __initialization:
   250                           	opt stack 0
   251                           
   252                           ; Clear objects allocated to BANK0 (68 bytes)
   253  00189C  EE00  F060         	lfsr	0,__pbssBANK0
   254  0018A0  0E44               	movlw	68
   255  0018A2                     clear_0:
   256  0018A2  6AEE               	clrf	postinc0,c
   257  0018A4  06E8               	decf	wreg,f,c
   258  0018A6  E1FD               	bnz	clear_0
   259                           
   260                           ; Clear objects allocated to COMRAM (1 bytes)
   261  0018A8  6A58               	clrf	__pbssCOMRAM& (0+255),c
   262  0018AA                     end_of_initialization:
   263                           	opt stack 0
   264  0018AA                     __end_of__initialization:
   265                           	opt stack 0
   266  0018AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   267  0018AC  6EF8               	movwf	tblptru,c
   268  0018AE  0100               	movlb	0
   269  0018B0  EF60  F00E         	goto	_main	;jump to C main() function
   270                           tblptru	equ	0xFF8
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           plusw1	equ	0xFE3
   274                           plusw2	equ	0xFDB
   275                           status	equ	0xFD8
   276                           
   277                           	psect	bssCOMRAM
   278  000058                     __pbssCOMRAM:
   279                           	opt stack 0
   280  000058                     _dummy_byte:
   281                           	opt stack 0
   282  000058                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           plusw1	equ	0xFE3
   287                           plusw2	equ	0xFDB
   288                           status	equ	0xFD8
   289                           
   290                           	psect	bssBANK0
   291  000060                     __pbssBANK0:
   292                           	opt stack 0
   293  000060                     main@F4057:
   294                           	opt stack 0
   295  000060                     	ds	34
   296  000082                     main@F4059:
   297                           	opt stack 0
   298  000082                     	ds	34
   299                           tblptru	equ	0xFF8
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           plusw1	equ	0xFE3
   303                           plusw2	equ	0xFDB
   304                           status	equ	0xFD8
   305                           
   306                           	psect	cstackCOMRAM
   307  000001                     __pcstackCOMRAM:
   308                           	opt stack 0
   309  000001                     ?_buffer_pop:
   310                           	opt stack 0
   311  000001                     ?_spi_slave_get_byte:
   312                           	opt stack 0
   313  000001                     ?_buffer_peek:
   314                           	opt stack 0
   315  000001                     serial_send_byte@byte:
   316                           	opt stack 0
   317  000001                     setup_timer3@T3CON_reg:
   318                           	opt stack 0
   319  000001                     setup_spi@SSPCON1_reg:
   320                           	opt stack 0
   321  000001                     spi_send_get_byte@byte:
   322                           	opt stack 0
   323  000001                     setup_simple_serial@baudrate_value:
   324                           	opt stack 0
   325  000001                     serial_peek_receive@byte:
   326                           	opt stack 0
   327  000001                     encode_data@byte_1:
   328                           	opt stack 0
   329  000001                     decode_data@data:
   330                           	opt stack 0
   331  000001                     buffer_count@buffer:
   332                           	opt stack 0
   333  000001                     buffer_space@buffer:
   334                           	opt stack 0
   335  000001                     buffer_empty@buffer:
   336                           	opt stack 0
   337  000001                     buffer_push@buffer:
   338                           	opt stack 0
   339  000001                     buffer_pop@buffer:
   340                           	opt stack 0
   341  000001                     buffer_peek@buffer:
   342                           	opt stack 0
   343  000001                     set_timer3@value:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x0
   347  000001                     	ds	1
   348  000002                     setup_spi@SSPSTAT_reg:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x1
   352  000002                     	ds	1
   353  000003                     ??_buffer_pop:
   354  000003                     ??_buffer_peek:
   355  000003                     serial_peek_receive@get_byte:
   356                           	opt stack 0
   357  000003                     decode_data@byte_1:
   358                           	opt stack 0
   359  000003                     buffer_push@byte:
   360                           	opt stack 0
   361  000003                     spi_slave_get_byte@byte:
   362                           	opt stack 0
   363  000003                     espi_setup@mode:
   364                           	opt stack 0
   365  000003                     _setup_simple_serial$215:
   366                           	opt stack 0
   367  000003                     encode_data@byte_2:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x2
   371  000003                     	ds	1
   372  000004                     ??_buffer_push:
   373  000004                     decode_data@byte_2:
   374                           	opt stack 0
   375  000004                     spi_slave_peek_receive@byte:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x3
   379  000004                     	ds	1
   380  000005                     ??_encode_data:
   381  000005                     ??_decode_data:
   382  000005                     buffer_push@current_position:
   383                           	opt stack 0
   384  000005                     _setup_simple_serial$216:
   385                           	opt stack 0
   386  000005                     buffer_pop@byte:
   387                           	opt stack 0
   388  000005                     buffer_peek@byte:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x4
   392  000005                     	ds	1
   393  000006                     encode_data@data:
   394                           	opt stack 0
   395  000006                     spi_slave_peek_receive@get_byte:
   396                           	opt stack 0
   397  000006                     espi_slave_receive@buffer:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x5
   401  000006                     	ds	1
   402  000007                     setup_simple_serial@baudrate_bits:
   403                           	opt stack 0
   404  000007                     eserial_send_data@buffer:
   405                           	opt stack 0
   406  000007                     eserial_receive@buffer:
   407                           	opt stack 0
   408  000007                     espi_slave_send@buffer:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x6
   412  000007                     	ds	1
   413  000008                     espi_slave_receive@value:
   414                           	opt stack 0
   415  000008                     eserial_setup@baudrate_value:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x7
   419  000008                     	ds	1
   420  000009                     ??_espi_slave_send:
   421  000009                     eserial_send_data@i:
   422                           	opt stack 0
   423  000009                     espi_slave_receive@received_1:
   424                           	opt stack 0
   425  000009                     eserial_receive@stop_function:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x8
   429  000009                     	ds	1
   430  00000A                     eserial_setup@baudrate_bits:
   431                           	opt stack 0
   432  00000A                     espi_slave_receive@received_2:
   433                           	opt stack 0
   434  00000A                     eserial_send_data@value:
   435                           	opt stack 0
   436  00000A                     espi_slave_send@byte_to_send:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x9
   440  00000A                     	ds	1
   441  00000B                     eserial_receive@timer_start:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0xA
   445  00000B                     	ds	1
   446  00000C                     espi_slave_send@byte_1:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0xB
   450  00000C                     	ds	1
   451  00000D                     espi_slave_send@byte_2:
   452                           	opt stack 0
   453  00000D                     eserial_receive@timer_up:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0xC
   457  00000D                     	ds	1
   458  00000E                     espi_slave_send@received_1:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0xD
   462  00000E                     	ds	1
   463  00000F                     ??_eserial_receive:
   464                           
   465                           ; 0 bytes @ 0xE
   466  00000F                     	ds	1
   467  000010                     eserial_receive@test:
   468                           	opt stack 0
   469  000010                     espi_slave_send@received_2:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0xF
   473  000010                     	ds	1
   474  000011                     eserial_receive@value:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x10
   478  000011                     	ds	1
   479  000012                     main@value_102:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x11
   483  000012                     	ds	2
   484  000014                     main@pic_to_pc:
   485                           	opt stack 0
   486                           
   487                           ; 34 bytes @ 0x13
   488  000014                     	ds	34
   489  000036                     main@pic_to_pic:
   490                           	opt stack 0
   491                           
   492                           ; 34 bytes @ 0x35
   493  000036                     	ds	34
   494                           tblptru	equ	0xFF8
   495                           postinc0	equ	0xFEE
   496                           wreg	equ	0xFE8
   497                           plusw1	equ	0xFE3
   498                           plusw2	equ	0xFDB
   499                           status	equ	0xFD8
   500                           
   501 ;; *************** function _setup_timer3 *****************
   502 ;; Defined at:
   503 ;;		line 29 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;  T3CON_reg       1    wreg     unsigned char 
   506 ;; Auto vars:     Size  Location     Type
   507 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   508 ;; Return value:  Size  Location     Type
   509 ;;		None               void
   510 ;; Registers used:
   511 ;;		wreg
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMRAM   BANK0
   517 ;;      Params:         0       0
   518 ;;      Locals:         1       0
   519 ;;      Temps:          0       0
   520 ;;      Totals:         1       0
   521 ;;Total ram usage:        1 bytes
   522 ;; Hardware stack levels used:    1
   523 ;; This function calls:
   524 ;;		Nothing
   525 ;; This function is called by:
   526 ;;		_main
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530                           	psect	text1
   531  00181E                     __ptext1:
   532                           	opt stack 0
   533  00181E                     _setup_timer3:
   534                           	opt stack 30
   535                           
   536                           ;incstack = 0
   537                           ;setup_timer3@T3CON_reg stored from wreg
   538  00181E  6E01               	movwf	setup_timer3@T3CON_reg,c
   539                           
   540                           ;timers_pic.c: 31: T3CON = T3CON_reg;
   541  001820  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   542  001824  0012               	return		;funcret
   543  001826                     __end_of_setup_timer3:
   544                           	opt stack 0
   545                           tblptru	equ	0xFF8
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           plusw1	equ	0xFE3
   549                           plusw2	equ	0xFDB
   550                           status	equ	0xFD8
   551                           
   552 ;; *************** function _espi_slave_send *****************
   553 ;; Defined at:
   554 ;;		line 76 in file "extended_spi.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
   557 ;;		 -> main@pic_to_pic(34), 
   558 ;; Auto vars:     Size  Location     Type
   559 ;;  received_2      2   15[COMRAM] int 
   560 ;;  received_1      2   13[COMRAM] int 
   561 ;;  byte_to_send    2    9[COMRAM] unsigned int 
   562 ;;  byte_2          1   12[COMRAM] unsigned char 
   563 ;;  byte_1          1   11[COMRAM] unsigned char 
   564 ;; Return value:  Size  Location     Type
   565 ;;		None               void
   566 ;; Registers used:
   567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   568 ;; Tracked objects:
   569 ;;		On entry : 0/0
   570 ;;		On exit  : 0/0
   571 ;;		Unchanged: 0/0
   572 ;; Data sizes:     COMRAM   BANK0
   573 ;;      Params:         2       0
   574 ;;      Locals:         8       0
   575 ;;      Temps:          1       0
   576 ;;      Totals:        11       0
   577 ;;Total ram usage:       11 bytes
   578 ;; Hardware stack levels used:    1
   579 ;; Hardware stack levels required when called:    1
   580 ;; This function calls:
   581 ;;		_buffer_count
   582 ;;		_buffer_peek
   583 ;;		_buffer_pop
   584 ;;		_encode_data
   585 ;;		_spi_send_get_byte
   586 ;; This function is called by:
   587 ;;		_main
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           	psect	text2
   592  001EA6                     __ptext2:
   593                           	opt stack 0
   594  001EA6                     _espi_slave_send:
   595                           	opt stack 29
   596                           
   597                           ;extended_spi.c: 78: if (buffer_count(buffer)) {
   598                           
   599                           ;incstack = 0
   600  001EA6  C007  F001         	movff	espi_slave_send@buffer,buffer_count@buffer
   601  001EAA  C008  F002         	movff	espi_slave_send@buffer+1,buffer_count@buffer+1
   602  001EAE  EC30  F00C         	call	_buffer_count	;wreg free
   603  001EB2  0900               	iorlw	0
   604  001EB4  B4D8               	btfsc	status,2,c
   605  001EB6  D09D               	goto	l443
   606                           
   607                           ;extended_spi.c: 79: uint16_t byte_to_send = buffer_peek(buffer);
   608  001EB8  C007  F001         	movff	espi_slave_send@buffer,buffer_peek@buffer
   609  001EBC  C008  F002         	movff	espi_slave_send@buffer+1,buffer_peek@buffer+1
   610  001EC0  EC7A  F00D         	call	_buffer_peek	;wreg free
   611  001EC4  C001  F00A         	movff	?_buffer_peek,espi_slave_send@byte_to_send
   612  001EC8  C002  F00B         	movff	?_buffer_peek+1,espi_slave_send@byte_to_send+1
   613                           
   614                           ;extended_spi.c: 80: uint8_t byte_1;
   615                           ;extended_spi.c: 81: uint8_t byte_2;
   616                           ;extended_spi.c: 83: encode_data(byte_to_send, &byte_1, &byte_2);
   617  001ECC  0E0C               	movlw	low espi_slave_send@byte_1
   618  001ECE  6E01               	movwf	encode_data@byte_1,c
   619  001ED0  0E00               	movlw	high espi_slave_send@byte_1
   620  001ED2  6E02               	movwf	encode_data@byte_1+1,c
   621  001ED4  0E0D               	movlw	low espi_slave_send@byte_2
   622  001ED6  6E03               	movwf	encode_data@byte_2,c
   623  001ED8  0E00               	movlw	high espi_slave_send@byte_2
   624  001EDA  6E04               	movwf	encode_data@byte_2+1,c
   625  001EDC  500A               	movf	espi_slave_send@byte_to_send,w,c
   626  001EDE  EC57  F00D         	call	_encode_data
   627                           
   628                           ;extended_spi.c: 85: LATAbits.LATA2 = 1;
   629  001EE2  8489               	bsf	3977,2,c	;volatile
   630                           
   631                           ;extended_spi.c: 86: LATAbits.LATA2 = 0;
   632  001EE4  9489               	bcf	3977,2,c	;volatile
   633                           
   634                           ;extended_spi.c: 88: int16_t received_1 = spi_send_get_byte(byte_1);
   635  001EE6  500C               	movf	espi_slave_send@byte_1,w,c
   636  001EE8  EC39  F00C         	call	_spi_send_get_byte
   637  001EEC  6E09               	movwf	??_espi_slave_send& (0+255),c
   638  001EEE  5009               	movf	??_espi_slave_send,w,c
   639  001EF0  6E0E               	movwf	espi_slave_send@received_1,c
   640  001EF2  6A0F               	clrf	espi_slave_send@received_1+1,c
   641                           
   642                           ;extended_spi.c: 89: if (received_1 == 0x30 || received_1 == 0x10 ||
   643                           ;extended_spi.c: 90: received_1 == 0x20 || received_1 == -1)
   644  001EF4  0E30               	movlw	48
   645  001EF6  180E               	xorwf	espi_slave_send@received_1,w,c
   646  001EF8  100F               	iorwf	espi_slave_send@received_1+1,w,c
   647  001EFA  B4D8               	btfsc	status,2,c
   648  001EFC  0012               	return	
   649  001EFE  0E10               	movlw	16
   650  001F00  180E               	xorwf	espi_slave_send@received_1,w,c
   651  001F02  100F               	iorwf	espi_slave_send@received_1+1,w,c
   652  001F04  B4D8               	btfsc	status,2,c
   653  001F06  0012               	return	
   654  001F08  0E20               	movlw	32
   655  001F0A  180E               	xorwf	espi_slave_send@received_1,w,c
   656  001F0C  100F               	iorwf	espi_slave_send@received_1+1,w,c
   657  001F0E  B4D8               	btfsc	status,2,c
   658  001F10  0012               	return	
   659  001F12  280E               	incf	espi_slave_send@received_1,w,c
   660  001F14  E105               	bnz	l1961
   661  001F16  280F               	incf	espi_slave_send@received_1+1,w,c
   662  001F18  B4D8               	btfsc	status,2,c
   663  001F1A  0012               	return	
   664  001F1C  D001               	goto	l1961
   665                           
   666                           ;extended_spi.c: 91: return;
   667  001F1E  0012               	return	
   668  001F20                     l1961:
   669                           
   670                           ;extended_spi.c: 92: int16_t received_2 = spi_send_get_byte(byte_2);
   671  001F20  500D               	movf	espi_slave_send@byte_2,w,c
   672  001F22  EC39  F00C         	call	_spi_send_get_byte
   673  001F26  6E09               	movwf	??_espi_slave_send& (0+255),c
   674  001F28  5009               	movf	??_espi_slave_send,w,c
   675  001F2A  6E10               	movwf	espi_slave_send@received_2,c
   676  001F2C  6A11               	clrf	espi_slave_send@received_2+1,c
   677  001F2E                     l1963:
   678                           
   679                           ;extended_spi.c: 93: if (received_2 == 0x30 || received_2 == 0x10 ||
   680                           ;extended_spi.c: 94: received_2 == 0x20 || received_2 == -1)
   681  001F2E  0E30               	movlw	48
   682  001F30  1810               	xorwf	espi_slave_send@received_2,w,c
   683  001F32  1011               	iorwf	espi_slave_send@received_2+1,w,c
   684  001F34  B4D8               	btfsc	status,2,c
   685  001F36  0012               	return	
   686  001F38  0E10               	movlw	16
   687  001F3A  1810               	xorwf	espi_slave_send@received_2,w,c
   688  001F3C  1011               	iorwf	espi_slave_send@received_2+1,w,c
   689  001F3E  B4D8               	btfsc	status,2,c
   690  001F40  0012               	return	
   691  001F42  0E20               	movlw	32
   692  001F44  1810               	xorwf	espi_slave_send@received_2,w,c
   693  001F46  1011               	iorwf	espi_slave_send@received_2+1,w,c
   694  001F48  B4D8               	btfsc	status,2,c
   695  001F4A  0012               	return	
   696  001F4C  2810               	incf	espi_slave_send@received_2,w,c
   697  001F4E  E106               	bnz	l1971
   698  001F50  2811               	incf	espi_slave_send@received_2+1,w,c
   699  001F52  B4D8               	btfsc	status,2,c
   700  001F54  0012               	return	
   701  001F56  D002               	goto	l1971
   702                           
   703                           ;extended_spi.c: 95: return;
   704  001F58  0012               	return	
   705  001F5A  D000               	goto	l1971
   706  001F5C                     l1971:
   707                           
   708                           ;extended_spi.c: 98: buffer_pop(buffer);
   709  001F5C  C007  F001         	movff	espi_slave_send@buffer,buffer_pop@buffer
   710  001F60  C008  F002         	movff	espi_slave_send@buffer+1,buffer_pop@buffer+1
   711  001F64  ECD6  F00D         	call	_buffer_pop	;wreg free
   712                           
   713                           ;extended_spi.c: 99: byte_to_send = buffer_peek(buffer);
   714  001F68  C007  F001         	movff	espi_slave_send@buffer,buffer_peek@buffer
   715  001F6C  C008  F002         	movff	espi_slave_send@buffer+1,buffer_peek@buffer+1
   716  001F70  EC7A  F00D         	call	_buffer_peek	;wreg free
   717  001F74  C001  F00A         	movff	?_buffer_peek,espi_slave_send@byte_to_send
   718  001F78  C002  F00B         	movff	?_buffer_peek+1,espi_slave_send@byte_to_send+1
   719                           
   720                           ;extended_spi.c: 100: if (byte_to_send == -1)
   721  001F7C  280A               	incf	espi_slave_send@byte_to_send,w,c
   722  001F7E  E105               	bnz	l1977
   723  001F80  280B               	incf	espi_slave_send@byte_to_send+1,w,c
   724  001F82  B4D8               	btfsc	status,2,c
   725  001F84  D032               	goto	l1999
   726  001F86  D001               	goto	l1977
   727                           
   728                           ;extended_spi.c: 101: break;
   729  001F88  D030               	goto	l1999
   730  001F8A                     l1977:
   731                           
   732                           ;extended_spi.c: 103: encode_data(byte_to_send, &byte_1, &byte_2);
   733  001F8A  0E0C               	movlw	low espi_slave_send@byte_1
   734  001F8C  6E01               	movwf	encode_data@byte_1,c
   735  001F8E  0E00               	movlw	high espi_slave_send@byte_1
   736  001F90  6E02               	movwf	encode_data@byte_1+1,c
   737  001F92  0E0D               	movlw	low espi_slave_send@byte_2
   738  001F94  6E03               	movwf	encode_data@byte_2,c
   739  001F96  0E00               	movlw	high espi_slave_send@byte_2
   740  001F98  6E04               	movwf	encode_data@byte_2+1,c
   741  001F9A  500A               	movf	espi_slave_send@byte_to_send,w,c
   742  001F9C  EC57  F00D         	call	_encode_data
   743                           
   744                           ;extended_spi.c: 105: received_1 = spi_send_get_byte(byte_1);
   745  001FA0  500C               	movf	espi_slave_send@byte_1,w,c
   746  001FA2  EC39  F00C         	call	_spi_send_get_byte
   747  001FA6  6E09               	movwf	??_espi_slave_send& (0+255),c
   748  001FA8  5009               	movf	??_espi_slave_send,w,c
   749  001FAA  6E0E               	movwf	espi_slave_send@received_1,c
   750  001FAC  6A0F               	clrf	espi_slave_send@received_1+1,c
   751                           
   752                           ;extended_spi.c: 106: if (received_1 == 0x30 || received_1 == 0x10 ||
   753                           ;extended_spi.c: 107: received_1 == 0x20 || received_1 == -1)
   754  001FAE  0E30               	movlw	48
   755  001FB0  180E               	xorwf	espi_slave_send@received_1,w,c
   756  001FB2  100F               	iorwf	espi_slave_send@received_1+1,w,c
   757  001FB4  B4D8               	btfsc	status,2,c
   758  001FB6  0012               	return	
   759  001FB8  0E10               	movlw	16
   760  001FBA  180E               	xorwf	espi_slave_send@received_1,w,c
   761  001FBC  100F               	iorwf	espi_slave_send@received_1+1,w,c
   762  001FBE  B4D8               	btfsc	status,2,c
   763  001FC0  0012               	return	
   764  001FC2  0E20               	movlw	32
   765  001FC4  180E               	xorwf	espi_slave_send@received_1,w,c
   766  001FC6  100F               	iorwf	espi_slave_send@received_1+1,w,c
   767  001FC8  B4D8               	btfsc	status,2,c
   768  001FCA  0012               	return	
   769  001FCC  280E               	incf	espi_slave_send@received_1,w,c
   770  001FCE  E105               	bnz	l1989
   771  001FD0  280F               	incf	espi_slave_send@received_1+1,w,c
   772  001FD2  B4D8               	btfsc	status,2,c
   773  001FD4  0012               	return	
   774  001FD6  D001               	goto	l1989
   775                           
   776                           ;extended_spi.c: 108: return;
   777  001FD8  0012               	return	
   778  001FDA                     l1989:
   779                           
   780                           ;extended_spi.c: 110: received_2 = spi_send_get_byte(byte_2);
   781  001FDA  500D               	movf	espi_slave_send@byte_2,w,c
   782  001FDC  EC39  F00C         	call	_spi_send_get_byte
   783  001FE0  D7A2               	goto	L1
   784  001FE2  D7A5               	goto	l1963
   785                           
   786                           ;extended_spi.c: 111: if (received_2 == 0x30 || received_2 == 0x10 ||
   787                           ;extended_spi.c: 112: received_2 == 0x20 || received_2 == -1)
   788  001FE4  D7BB               	goto	l1971
   789                           
   790                           ;extended_spi.c: 113: return;
   791  001FE6  0012               	return	
   792  001FE8  D7B9               	goto	l1971
   793  001FEA                     l1999:
   794                           
   795                           ;extended_spi.c: 114: }
   796                           ;extended_spi.c: 116: spi_send_get_byte(0x30);
   797  001FEA  0E30               	movlw	48
   798  001FEC  EC39  F00C         	call	_spi_send_get_byte
   799                           
   800                           ;extended_spi.c: 117: } else {
   801  001FF0  0012               	return	
   802  001FF2                     l443:
   803                           
   804                           ;extended_spi.c: 118: LATAbits.LATA2 = 1;
   805  001FF2  8489               	bsf	3977,2,c	;volatile
   806                           
   807                           ;extended_spi.c: 119: LATAbits.LATA2 = 0;
   808  001FF4  9489               	bcf	3977,2,c	;volatile
   809                           
   810                           ;extended_spi.c: 121: spi_send_get_byte(0x30);
   811  001FF6  0E30               	movlw	48
   812  001FF8  EC39  F00C         	call	_spi_send_get_byte
   813  001FFC  0012               	return	
   814  001FFE  0012               	return		;funcret
   815  002000                     __end_of_espi_slave_send:
   816                           	opt stack 0
   817                           tblptru	equ	0xFF8
   818                           postinc0	equ	0xFEE
   819                           wreg	equ	0xFE8
   820                           plusw1	equ	0xFE3
   821                           plusw2	equ	0xFDB
   822                           status	equ	0xFD8
   823                           
   824 ;; *************** function _encode_data *****************
   825 ;; Defined at:
   826 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;  data            1    wreg     unsigned char 
   829 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
   830 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
   831 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
   832 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
   833 ;; Auto vars:     Size  Location     Type
   834 ;;  data            1    5[COMRAM] unsigned char 
   835 ;; Return value:  Size  Location     Type
   836 ;;		None               void
   837 ;; Registers used:
   838 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0
   844 ;;      Params:         4       0
   845 ;;      Locals:         1       0
   846 ;;      Temps:          1       0
   847 ;;      Totals:         6       0
   848 ;;Total ram usage:        6 bytes
   849 ;; Hardware stack levels used:    1
   850 ;; This function calls:
   851 ;;		Nothing
   852 ;; This function is called by:
   853 ;;		_espi_slave_send
   854 ;;		_espi_master_send
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text3
   859  001AAE                     __ptext3:
   860                           	opt stack 0
   861  001AAE                     _encode_data:
   862                           	opt stack 29
   863                           
   864                           ;incstack = 0
   865                           ;encode_data@data stored from wreg
   866  001AAE  6E06               	movwf	encode_data@data,c
   867                           
   868                           ;encoding.c: 5: *byte_1 = 0xA0;
   869  001AB0  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   870  001AB4  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   871  001AB8  0EA0               	movlw	160
   872  001ABA  6EDF               	movwf	indf2,c
   873                           
   874                           ;encoding.c: 6: *byte_2 = 0xA0;
   875  001ABC  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   876  001AC0  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   877  001AC4  0EA0               	movlw	160
   878  001AC6  6EDF               	movwf	indf2,c
   879                           
   880                           ;encoding.c: 8: *byte_1 |= data >> 4;
   881  001AC8  C006  F005         	movff	encode_data@data,??_encode_data
   882  001ACC  3A05               	swapf	??_encode_data,f,c
   883  001ACE  0E0F               	movlw	15
   884  001AD0  1605               	andwf	??_encode_data,f,c
   885  001AD2  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   886  001AD6  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   887  001ADA  5005               	movf	??_encode_data,w,c
   888  001ADC  12DF               	iorwf	indf2,f,c
   889                           
   890                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
   891  001ADE  C006  F005         	movff	encode_data@data,??_encode_data
   892  001AE2  0E0F               	movlw	15
   893  001AE4  1605               	andwf	??_encode_data,f,c
   894  001AE6  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   895  001AEA  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   896  001AEE  5005               	movf	??_encode_data,w,c
   897  001AF0  12DF               	iorwf	indf2,f,c
   898  001AF2  0012               	return		;funcret
   899  001AF4                     __end_of_encode_data:
   900                           	opt stack 0
   901                           tblptru	equ	0xFF8
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           plusw1	equ	0xFE3
   905                           indf2	equ	0xFDF
   906                           plusw2	equ	0xFDB
   907                           fsr2h	equ	0xFDA
   908                           fsr2l	equ	0xFD9
   909                           status	equ	0xFD8
   910                           
   911 ;; *************** function _buffer_peek *****************
   912 ;; Defined at:
   913 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   914 ;; Parameters:    Size  Location     Type
   915 ;;  buffer          2    0[COMRAM] PTR const struct circula
   916 ;;		 -> main@pic_to_pic(34), 
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  byte            2    4[COMRAM] int 
   919 ;; Return value:  Size  Location     Type
   920 ;;                  2    0[COMRAM] int 
   921 ;; Registers used:
   922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0
   928 ;;      Params:         2       0
   929 ;;      Locals:         2       0
   930 ;;      Temps:          2       0
   931 ;;      Totals:         6       0
   932 ;;Total ram usage:        6 bytes
   933 ;; Hardware stack levels used:    1
   934 ;; This function calls:
   935 ;;		Nothing
   936 ;; This function is called by:
   937 ;;		_espi_slave_send
   938 ;;		_espi_master_send
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           	psect	text4
   943  001AF4                     __ptext4:
   944                           	opt stack 0
   945  001AF4                     _buffer_peek:
   946                           	opt stack 29
   947                           
   948                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
   949                           
   950                           ;incstack = 0
   951  001AF4  EE20 F001          	lfsr	2,1
   952  001AF8  5001               	movf	buffer_peek@buffer,w,c
   953  001AFA  26D9               	addwf	fsr2l,f,c
   954  001AFC  5002               	movf	buffer_peek@buffer+1,w,c
   955  001AFE  22DA               	addwfc	fsr2h,f,c
   956  001B00  50DF               	movf	indf2,w,c
   957  001B02  A4D8               	btfss	status,2,c
   958  001B04  D003               	goto	l1859
   959                           
   960                           ;circular_buffer.c: 58: return -1;
   961  001B06  6801               	setf	?_buffer_peek,c
   962  001B08  6802               	setf	?_buffer_peek+1,c
   963  001B0A  0012               	return	
   964  001B0C                     l1859:
   965                           
   966                           ;circular_buffer.c: 59: }
   967                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
   968  001B0C  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
   969  001B10  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
   970  001B14  50DF               	movf	indf2,w,c
   971  001B16  6E03               	movwf	??_buffer_peek& (0+255),c
   972  001B18  5003               	movf	??_buffer_peek,w,c
   973  001B1A  0D01               	mullw	1
   974  001B1C  0E02               	movlw	2
   975  001B1E  26F3               	addwf	prodl,f,c
   976  001B20  0E00               	movlw	0
   977  001B22  22F4               	addwfc	prodh,f,c
   978  001B24  50F3               	movf	prodl,w,c
   979  001B26  2401               	addwf	buffer_peek@buffer,w,c
   980  001B28  6ED9               	movwf	fsr2l,c
   981  001B2A  50F4               	movf	prodh,w,c
   982  001B2C  2002               	addwfc	buffer_peek@buffer+1,w,c
   983  001B2E  6EDA               	movwf	fsr2h,c
   984  001B30  50DF               	movf	indf2,w,c
   985  001B32  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
   986  001B34  5004               	movf	??_buffer_peek+1,w,c
   987  001B36  6E05               	movwf	buffer_peek@byte,c
   988  001B38  6A06               	clrf	buffer_peek@byte+1,c
   989                           
   990                           ;circular_buffer.c: 63: return byte;
   991  001B3A  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
   992  001B3E  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
   993  001B42  0012               	return	
   994  001B44  0012               	return		;funcret
   995  001B46                     __end_of_buffer_peek:
   996                           	opt stack 0
   997                           tblptru	equ	0xFF8
   998                           prodh	equ	0xFF4
   999                           prodl	equ	0xFF3
  1000                           postinc0	equ	0xFEE
  1001                           wreg	equ	0xFE8
  1002                           plusw1	equ	0xFE3
  1003                           indf2	equ	0xFDF
  1004                           plusw2	equ	0xFDB
  1005                           fsr2h	equ	0xFDA
  1006                           fsr2l	equ	0xFD9
  1007                           status	equ	0xFD8
  1008                           
  1009 ;; *************** function _buffer_count *****************
  1010 ;; Defined at:
  1011 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1014 ;;		 -> main@pic_to_pic(34), 
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;		None
  1017 ;; Return value:  Size  Location     Type
  1018 ;;                  1    wreg      unsigned char 
  1019 ;; Registers used:
  1020 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/0
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMRAM   BANK0
  1026 ;;      Params:         2       0
  1027 ;;      Locals:         0       0
  1028 ;;      Temps:          0       0
  1029 ;;      Totals:         2       0
  1030 ;;Total ram usage:        2 bytes
  1031 ;; Hardware stack levels used:    1
  1032 ;; This function calls:
  1033 ;;		Nothing
  1034 ;; This function is called by:
  1035 ;;		_espi_slave_send
  1036 ;;		_espi_master_send
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040                           	psect	text5
  1041  001860                     __ptext5:
  1042                           	opt stack 0
  1043  001860                     _buffer_count:
  1044                           	opt stack 29
  1045                           
  1046                           ;circular_buffer.c: 6: return buffer->count;
  1047                           
  1048                           ;incstack = 0
  1049  001860  EE20 F001          	lfsr	2,1
  1050  001864  5001               	movf	buffer_count@buffer,w,c
  1051  001866  26D9               	addwf	fsr2l,f,c
  1052  001868  5002               	movf	buffer_count@buffer+1,w,c
  1053  00186A  22DA               	addwfc	fsr2h,f,c
  1054  00186C  50DF               	movf	indf2,w,c
  1055  00186E  0012               	return	
  1056  001870  0012               	return		;funcret
  1057  001872                     __end_of_buffer_count:
  1058                           	opt stack 0
  1059                           tblptru	equ	0xFF8
  1060                           prodh	equ	0xFF4
  1061                           prodl	equ	0xFF3
  1062                           postinc0	equ	0xFEE
  1063                           wreg	equ	0xFE8
  1064                           plusw1	equ	0xFE3
  1065                           indf2	equ	0xFDF
  1066                           plusw2	equ	0xFDB
  1067                           fsr2h	equ	0xFDA
  1068                           fsr2l	equ	0xFD9
  1069                           status	equ	0xFD8
  1070                           
  1071 ;; *************** function _espi_slave_receive *****************
  1072 ;; Defined at:
  1073 ;;		line 49 in file "extended_spi.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  buffer          2    5[COMRAM] PTR struct circular_buff
  1076 ;;		 -> main@pic_to_pc(34), 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  received_2      1    9[COMRAM] char 
  1079 ;;  received_1      1    8[COMRAM] char 
  1080 ;;  value           1    7[COMRAM] unsigned char 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;		None               void
  1083 ;; Registers used:
  1084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMRAM   BANK0
  1090 ;;      Params:         2       0
  1091 ;;      Locals:         3       0
  1092 ;;      Temps:          0       0
  1093 ;;      Totals:         5       0
  1094 ;;Total ram usage:        5 bytes
  1095 ;; Hardware stack levels used:    1
  1096 ;; Hardware stack levels required when called:    1
  1097 ;; This function calls:
  1098 ;;		_buffer_push
  1099 ;;		_buffer_space
  1100 ;;		_decode_data
  1101 ;;		_spi_send_get_byte
  1102 ;;		_spi_slave_get_byte
  1103 ;; This function is called by:
  1104 ;;		_main
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108                           	psect	text6
  1109  001C26                     __ptext6:
  1110                           	opt stack 0
  1111  001C26                     _espi_slave_receive:
  1112                           	opt stack 29
  1113                           
  1114                           ;extended_spi.c: 51: uint8_t value;
  1115                           ;extended_spi.c: 52: int8_t received_1;
  1116                           ;extended_spi.c: 53: int8_t received_2;
  1117                           ;extended_spi.c: 55: LATAbits.LATA2 = 1;
  1118                           
  1119                           ;incstack = 0
  1120  001C26  8489               	bsf	3977,2,c	;volatile
  1121                           
  1122                           ;extended_spi.c: 56: LATAbits.LATA2 = 0;
  1123  001C28  9489               	bcf	3977,2,c	;volatile
  1124                           
  1125                           ;extended_spi.c: 58: while (buffer_space(buffer)) {
  1126  001C2A  D03D               	goto	l2029
  1127  001C2C                     l2005:
  1128                           
  1129                           ;extended_spi.c: 59: received_1 = spi_slave_get_byte();
  1130  001C2C  EC76  F00C         	call	_spi_slave_get_byte	;wreg free
  1131  001C30  5001               	movf	?_spi_slave_get_byte,w,c
  1132  001C32  6E09               	movwf	espi_slave_receive@received_1,c
  1133                           
  1134                           ;extended_spi.c: 60: if (received_1 == 0x30 || received_1 == 0x10 ||
  1135                           ;extended_spi.c: 61: received_1 == 0x20 || received_1 == -1)
  1136  001C34  0E30               	movlw	48
  1137  001C36  1809               	xorwf	espi_slave_receive@received_1,w,c
  1138  001C38  B4D8               	btfsc	status,2,c
  1139  001C3A  0012               	return	
  1140  001C3C  0E10               	movlw	16
  1141  001C3E  1809               	xorwf	espi_slave_receive@received_1,w,c
  1142  001C40  B4D8               	btfsc	status,2,c
  1143  001C42  0012               	return	
  1144  001C44  0E20               	movlw	32
  1145  001C46  1809               	xorwf	espi_slave_receive@received_1,w,c
  1146  001C48  B4D8               	btfsc	status,2,c
  1147  001C4A  0012               	return	
  1148  001C4C  2809               	incf	espi_slave_receive@received_1,w,c
  1149  001C4E  B4D8               	btfsc	status,2,c
  1150  001C50  0012               	return	
  1151  001C52  D001               	goto	l2015
  1152                           
  1153                           ;extended_spi.c: 62: return;
  1154  001C54  0012               	return	
  1155  001C56                     l2015:
  1156                           
  1157                           ;extended_spi.c: 64: received_2 = spi_slave_get_byte();
  1158  001C56  EC76  F00C         	call	_spi_slave_get_byte	;wreg free
  1159  001C5A  5001               	movf	?_spi_slave_get_byte,w,c
  1160  001C5C  6E0A               	movwf	espi_slave_receive@received_2,c
  1161                           
  1162                           ;extended_spi.c: 65: if (received_2 == 0x30 || received_2 == 0x10 ||
  1163                           ;extended_spi.c: 66: received_2 == 0x20 || received_2 == -1)
  1164  001C5E  0E30               	movlw	48
  1165  001C60  180A               	xorwf	espi_slave_receive@received_2,w,c
  1166  001C62  B4D8               	btfsc	status,2,c
  1167  001C64  0012               	return	
  1168  001C66  0E10               	movlw	16
  1169  001C68  180A               	xorwf	espi_slave_receive@received_2,w,c
  1170  001C6A  B4D8               	btfsc	status,2,c
  1171  001C6C  0012               	return	
  1172  001C6E  0E20               	movlw	32
  1173  001C70  180A               	xorwf	espi_slave_receive@received_2,w,c
  1174  001C72  B4D8               	btfsc	status,2,c
  1175  001C74  0012               	return	
  1176  001C76  280A               	incf	espi_slave_receive@received_2,w,c
  1177  001C78  B4D8               	btfsc	status,2,c
  1178  001C7A  0012               	return	
  1179  001C7C  D001               	goto	l2025
  1180                           
  1181                           ;extended_spi.c: 67: return;
  1182  001C7E  0012               	return	
  1183  001C80                     l2025:
  1184                           
  1185                           ;extended_spi.c: 69: decode_data( &value, (uint8_t)received_1, (uint8_t)received_2);
  1186  001C80  0E08               	movlw	low espi_slave_receive@value
  1187  001C82  6E01               	movwf	decode_data@data,c
  1188  001C84  0E00               	movlw	high espi_slave_receive@value
  1189  001C86  6E02               	movwf	decode_data@data+1,c
  1190  001C88  C009  F003         	movff	espi_slave_receive@received_1,decode_data@byte_1
  1191  001C8C  C00A  F004         	movff	espi_slave_receive@received_2,decode_data@byte_2
  1192  001C90  ECD5  F00C         	call	_decode_data	;wreg free
  1193                           
  1194                           ;extended_spi.c: 70: buffer_push(buffer, value);
  1195  001C94  C006  F001         	movff	espi_slave_receive@buffer,buffer_push@buffer
  1196  001C98  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_push@buffer+1
  1197  001C9C  C008  F003         	movff	espi_slave_receive@value,buffer_push@byte
  1198  001CA0  ECA3  F00D         	call	_buffer_push	;wreg free
  1199  001CA4  D000               	goto	l2029
  1200  001CA6                     l2029:
  1201  001CA6  C006  F001         	movff	espi_slave_receive@buffer,buffer_space@buffer
  1202  001CAA  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_space@buffer+1
  1203  001CAE  EC43  F00C         	call	_buffer_space	;wreg free
  1204  001CB2  0900               	iorlw	0
  1205  001CB4  A4D8               	btfss	status,2,c
  1206  001CB6  D7BA               	goto	l2005
  1207                           
  1208                           ;extended_spi.c: 71: }
  1209                           ;extended_spi.c: 73: spi_send_get_byte(0x30);
  1210  001CB8  0E30               	movlw	48
  1211  001CBA  EC39  F00C         	call	_spi_send_get_byte
  1212  001CBE  0012               	return		;funcret
  1213  001CC0                     __end_of_espi_slave_receive:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           prodh	equ	0xFF4
  1217                           prodl	equ	0xFF3
  1218                           postinc0	equ	0xFEE
  1219                           wreg	equ	0xFE8
  1220                           plusw1	equ	0xFE3
  1221                           indf2	equ	0xFDF
  1222                           plusw2	equ	0xFDB
  1223                           fsr2h	equ	0xFDA
  1224                           fsr2l	equ	0xFD9
  1225                           status	equ	0xFD8
  1226                           
  1227 ;; *************** function _spi_send_get_byte *****************
  1228 ;; Defined at:
  1229 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;  byte            1    wreg     unsigned char 
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;  byte            1    0[COMRAM] unsigned char 
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      unsigned char 
  1236 ;; Registers used:
  1237 ;;		wreg, status,2
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0
  1243 ;;      Params:         0       0
  1244 ;;      Locals:         1       0
  1245 ;;      Temps:          0       0
  1246 ;;      Totals:         1       0
  1247 ;;Total ram usage:        1 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; This function calls:
  1250 ;;		Nothing
  1251 ;; This function is called by:
  1252 ;;		_espi_slave_receive
  1253 ;;		_espi_slave_send
  1254 ;;		_spi_send_data
  1255 ;;		_spi_master_get_data
  1256 ;;		_wait_pulse
  1257 ;;		_espi_master_send
  1258 ;;		_espi_master_receive
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           	psect	text7
  1263  001872                     __ptext7:
  1264                           	opt stack 0
  1265  001872                     _spi_send_get_byte:
  1266                           	opt stack 29
  1267                           
  1268                           ;incstack = 0
  1269                           ;spi_send_get_byte@byte stored from wreg
  1270  001872  6E01               	movwf	spi_send_get_byte@byte,c
  1271                           
  1272                           ;spi_pic.c: 35: SSPBUF = byte;
  1273  001874  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  1274                           
  1275                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  1276  001878  D000               	goto	l314
  1277  00187A                     l314:
  1278  00187A  A0C7               	btfss	4039,0,c	;volatile
  1279  00187C  D7FE               	goto	l314
  1280                           
  1281                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  1282  00187E  BEC6               	btfsc	4038,7,c	;volatile
  1283                           
  1284                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  1285  001880  9EC6               	bcf	4038,7,c	;volatile
  1286                           
  1287                           ;spi_pic.c: 39: return SSPBUF;
  1288  001882  50C9               	movf	4041,w,c	;volatile
  1289  001884  0012               	return		;funcret
  1290  001886                     __end_of_spi_send_get_byte:
  1291                           	opt stack 0
  1292                           tblptru	equ	0xFF8
  1293                           prodh	equ	0xFF4
  1294                           prodl	equ	0xFF3
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           plusw1	equ	0xFE3
  1298                           indf2	equ	0xFDF
  1299                           plusw2	equ	0xFDB
  1300                           fsr2h	equ	0xFDA
  1301                           fsr2l	equ	0xFD9
  1302                           status	equ	0xFD8
  1303                           
  1304 ;; *************** function _decode_data *****************
  1305 ;; Defined at:
  1306 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;  data            2    0[COMRAM] PTR unsigned char 
  1309 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  1310 ;;  byte_1          1    2[COMRAM] unsigned char 
  1311 ;;  byte_2          1    3[COMRAM] unsigned char 
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;		None
  1314 ;; Return value:  Size  Location     Type
  1315 ;;                  1    wreg      char 
  1316 ;; Registers used:
  1317 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1318 ;; Tracked objects:
  1319 ;;		On entry : 0/0
  1320 ;;		On exit  : 0/0
  1321 ;;		Unchanged: 0/0
  1322 ;; Data sizes:     COMRAM   BANK0
  1323 ;;      Params:         4       0
  1324 ;;      Locals:         0       0
  1325 ;;      Temps:          1       0
  1326 ;;      Totals:         5       0
  1327 ;;Total ram usage:        5 bytes
  1328 ;; Hardware stack levels used:    1
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_espi_slave_receive
  1333 ;;		_espi_master_receive
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           	psect	text8
  1338  0019AA                     __ptext8:
  1339                           	opt stack 0
  1340  0019AA                     _decode_data:
  1341                           	opt stack 29
  1342                           
  1343                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  1344                           
  1345                           ;incstack = 0
  1346  0019AA  5003               	movf	decode_data@byte_1,w,c
  1347  0019AC  0BF0               	andlw	240
  1348  0019AE  0AA0               	xorlw	160
  1349  0019B0  A4D8               	btfss	status,2,c
  1350  0019B2  0012               	return	
  1351  0019B4  D002               	goto	l1809
  1352                           
  1353                           ;encoding.c: 15: return -1;
  1354                           ;	Return value of _decode_data is never used
  1355  0019B6  0012               	return	
  1356  0019B8  D008               	goto	l1813
  1357  0019BA                     l1809:
  1358                           
  1359                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  1360  0019BA  5004               	movf	decode_data@byte_2,w,c
  1361  0019BC  0BF0               	andlw	240
  1362  0019BE  0AA0               	xorlw	160
  1363  0019C0  A4D8               	btfss	status,2,c
  1364  0019C2  0012               	return	
  1365  0019C4  D002               	goto	l1813
  1366                           
  1367                           ;encoding.c: 17: return -2;
  1368                           ;	Return value of _decode_data is never used
  1369  0019C6  0012               	return	
  1370  0019C8  D000               	goto	l1813
  1371  0019CA                     l1813:
  1372                           
  1373                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  1374  0019CA  C004  F005         	movff	decode_data@byte_2,??_decode_data
  1375  0019CE  0E0F               	movlw	15
  1376  0019D0  1605               	andwf	??_decode_data,f,c
  1377  0019D2  3803               	swapf	decode_data@byte_1,w,c
  1378  0019D4  0BF0               	andlw	240
  1379  0019D6  1005               	iorwf	??_decode_data,w,c
  1380  0019D8  C001  FFD9         	movff	decode_data@data,fsr2l
  1381  0019DC  C002  FFDA         	movff	decode_data@data+1,fsr2h
  1382  0019E0  6EDF               	movwf	indf2,c
  1383  0019E2  0012               	return	
  1384                           
  1385                           ;encoding.c: 21: return 0;
  1386                           ;	Return value of _decode_data is never used
  1387  0019E4  0012               	return		;funcret
  1388  0019E6                     __end_of_decode_data:
  1389                           	opt stack 0
  1390                           tblptru	equ	0xFF8
  1391                           prodh	equ	0xFF4
  1392                           prodl	equ	0xFF3
  1393                           postinc0	equ	0xFEE
  1394                           wreg	equ	0xFE8
  1395                           plusw1	equ	0xFE3
  1396                           indf2	equ	0xFDF
  1397                           plusw2	equ	0xFDB
  1398                           fsr2h	equ	0xFDA
  1399                           fsr2l	equ	0xFD9
  1400                           status	equ	0xFD8
  1401                           
  1402 ;; *************** function _espi_setup *****************
  1403 ;; Defined at:
  1404 ;;		line 27 in file "extended_spi.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  mode            1    wreg     unsigned char 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  mode            1    2[COMRAM] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;		None               void
  1411 ;; Registers used:
  1412 ;;		wreg, status,2, status,0, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0
  1418 ;;      Params:         0       0
  1419 ;;      Locals:         1       0
  1420 ;;      Temps:          0       0
  1421 ;;      Totals:         1       0
  1422 ;;Total ram usage:        1 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    1
  1425 ;; This function calls:
  1426 ;;		_setup_spi
  1427 ;; This function is called by:
  1428 ;;		_main
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text9
  1433  001938                     __ptext9:
  1434                           	opt stack 0
  1435  001938                     _espi_setup:
  1436                           	opt stack 29
  1437                           
  1438                           ;incstack = 0
  1439                           ;espi_setup@mode stored from wreg
  1440  001938  6E03               	movwf	espi_setup@mode,c
  1441                           
  1442                           ;extended_spi.c: 29: setup_spi(0, 0x20 | 0x10 | mode);
  1443  00193A  5003               	movf	espi_setup@mode,w,c
  1444  00193C  0930               	iorlw	48
  1445  00193E  6E01               	movwf	setup_spi@SSPCON1_reg,c
  1446  001940  0E00               	movlw	0
  1447  001942  ECF3  F00C         	call	_setup_spi
  1448                           
  1449                           ;extended_spi.c: 31: ANSELbits.ANS2 = 0;
  1450  001946  947E               	bcf	3966,2,c	;volatile
  1451                           
  1452                           ;extended_spi.c: 32: ANSELHbits.ANS8 = 0;
  1453  001948  907F               	bcf	3967,0,c	;volatile
  1454                           
  1455                           ;extended_spi.c: 34: if (mode == 0x04 || mode == 0x05) {
  1456  00194A  0E04               	movlw	4
  1457  00194C  1803               	xorwf	espi_setup@mode,w,c
  1458  00194E  B4D8               	btfsc	status,2,c
  1459  001950  D004               	goto	l426
  1460  001952  0E05               	movlw	5
  1461  001954  1803               	xorwf	espi_setup@mode,w,c
  1462  001956  A4D8               	btfss	status,2,c
  1463  001958  D004               	goto	l424
  1464  00195A                     l426:
  1465                           
  1466                           ;extended_spi.c: 35: TRISAbits.RA2 = 0;
  1467  00195A  9492               	bcf	3986,2,c	;volatile
  1468                           
  1469                           ;extended_spi.c: 36: LATAbits.LATA2 = 0;
  1470  00195C  9489               	bcf	3977,2,c	;volatile
  1471                           
  1472                           ;extended_spi.c: 37: TRISCbits.RC6 = 1;
  1473  00195E  8C94               	bsf	3988,6,c	;volatile
  1474                           
  1475                           ;extended_spi.c: 38: } else {
  1476  001960  0012               	return	
  1477  001962                     l424:
  1478                           
  1479                           ;extended_spi.c: 39: TRISAbits.RA2 = 1;
  1480  001962  8492               	bsf	3986,2,c	;volatile
  1481                           
  1482                           ;extended_spi.c: 40: TRISCbits.RC6 = 0;
  1483  001964  9C94               	bcf	3988,6,c	;volatile
  1484                           
  1485                           ;extended_spi.c: 41: LATCbits.LATC6 = 0;
  1486  001966  9C8B               	bcf	3979,6,c	;volatile
  1487                           
  1488                           ;extended_spi.c: 42: INTCON2bits.INTEDG2 = 1;
  1489  001968  88F1               	bsf	intcon2,4,c	;volatile
  1490                           
  1491                           ;extended_spi.c: 43: INTCON3bits.INT2E = 1;
  1492  00196A  88F0               	bsf	intcon3,4,c	;volatile
  1493  00196C  0012               	return	
  1494  00196E  0012               	return		;funcret
  1495  001970                     __end_of_espi_setup:
  1496                           	opt stack 0
  1497                           tblptru	equ	0xFF8
  1498                           prodh	equ	0xFF4
  1499                           prodl	equ	0xFF3
  1500                           intcon2	equ	0xFF1
  1501                           intcon3	equ	0xFF0
  1502                           postinc0	equ	0xFEE
  1503                           wreg	equ	0xFE8
  1504                           plusw1	equ	0xFE3
  1505                           indf2	equ	0xFDF
  1506                           plusw2	equ	0xFDB
  1507                           fsr2h	equ	0xFDA
  1508                           fsr2l	equ	0xFD9
  1509                           status	equ	0xFD8
  1510                           
  1511 ;; *************** function _setup_spi *****************
  1512 ;; Defined at:
  1513 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  SSPSTAT_reg     1    wreg     unsigned char 
  1516 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;		None               void
  1521 ;; Registers used:
  1522 ;;		wreg, status,2, status,0
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0
  1528 ;;      Params:         1       0
  1529 ;;      Locals:         1       0
  1530 ;;      Temps:          0       0
  1531 ;;      Totals:         2       0
  1532 ;;Total ram usage:        2 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		_espi_setup
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text10
  1542  0019E6                     __ptext10:
  1543                           	opt stack 0
  1544  0019E6                     _setup_spi:
  1545                           	opt stack 29
  1546                           
  1547                           ;incstack = 0
  1548                           ;setup_spi@SSPSTAT_reg stored from wreg
  1549  0019E6  6E02               	movwf	setup_spi@SSPSTAT_reg,c
  1550                           
  1551                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
  1552  0019E8  9E94               	bcf	3988,7,c	;volatile
  1553                           
  1554                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
  1555  0019EA  947F               	bcf	3967,2,c	;volatile
  1556                           
  1557                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
  1558  0019EC  8893               	bsf	3987,4,c	;volatile
  1559                           
  1560                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
  1561  0019EE  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
  1562                           
  1563                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
  1564  0019F2  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
  1565                           
  1566                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
  1567  0019F6  50C6               	movf	4038,w,c	;volatile
  1568  0019F8  0B0F               	andlw	15
  1569  0019FA  0A05               	xorlw	5
  1570  0019FC  B4D8               	btfsc	status,2,c
  1571  0019FE  D005               	goto	l308
  1572  001A00  50C6               	movf	4038,w,c	;volatile
  1573  001A02  0B0F               	andlw	15
  1574  001A04  0A04               	xorlw	4
  1575  001A06  A4D8               	btfss	status,2,c
  1576  001A08  D00A               	goto	l306
  1577  001A0A                     l308:
  1578                           
  1579                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
  1580  001A0A  8C93               	bsf	3987,6,c	;volatile
  1581                           
  1582                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
  1583  001A0C  50C6               	movf	4038,w,c	;volatile
  1584  001A0E  0B0F               	andlw	15
  1585  001A10  0A04               	xorlw	4
  1586  001A12  A4D8               	btfss	status,2,c
  1587  001A14  D002               	goto	l309
  1588                           
  1589                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
  1590  001A16  907F               	bcf	3967,0,c	;volatile
  1591                           
  1592                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
  1593  001A18  8C94               	bsf	3988,6,c	;volatile
  1594  001A1A                     l309:
  1595                           
  1596                           ;spi_pic.c: 26: }
  1597                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
  1598  001A1A  9EC7               	bcf	4039,7,c	;volatile
  1599                           
  1600                           ;spi_pic.c: 28: } else {
  1601  001A1C  0012               	return	
  1602  001A1E                     l306:
  1603                           
  1604                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
  1605  001A1E  9C93               	bcf	3987,6,c	;volatile
  1606  001A20  0012               	return	
  1607  001A22  0012               	return		;funcret
  1608  001A24                     __end_of_setup_spi:
  1609                           	opt stack 0
  1610                           tblptru	equ	0xFF8
  1611                           prodh	equ	0xFF4
  1612                           prodl	equ	0xFF3
  1613                           intcon2	equ	0xFF1
  1614                           intcon3	equ	0xFF0
  1615                           postinc0	equ	0xFEE
  1616                           wreg	equ	0xFE8
  1617                           plusw1	equ	0xFE3
  1618                           indf2	equ	0xFDF
  1619                           plusw2	equ	0xFDB
  1620                           fsr2h	equ	0xFDA
  1621                           fsr2l	equ	0xFD9
  1622                           status	equ	0xFD8
  1623                           
  1624 ;; *************** function _eserial_setup *****************
  1625 ;; Defined at:
  1626 ;;		line 16 in file "extended_serial.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  baudrate_bit    1    wreg     unsigned char 
  1629 ;;  baudrate_val    2    7[COMRAM] unsigned int 
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;  baudrate_bit    1    9[COMRAM] unsigned char 
  1632 ;; Return value:  Size  Location     Type
  1633 ;;		None               void
  1634 ;; Registers used:
  1635 ;;		wreg, status,2, cstack
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMRAM   BANK0
  1641 ;;      Params:         2       0
  1642 ;;      Locals:         1       0
  1643 ;;      Temps:          0       0
  1644 ;;      Totals:         3       0
  1645 ;;Total ram usage:        3 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; Hardware stack levels required when called:    1
  1648 ;; This function calls:
  1649 ;;		_setup_simple_serial
  1650 ;; This function is called by:
  1651 ;;		_main
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           	psect	text11
  1656  0018D0                     __ptext11:
  1657                           	opt stack 0
  1658  0018D0                     _eserial_setup:
  1659                           	opt stack 29
  1660                           
  1661                           ;incstack = 0
  1662                           ;eserial_setup@baudrate_bits stored from wreg
  1663  0018D0  6E0A               	movwf	eserial_setup@baudrate_bits,c
  1664                           
  1665                           ;extended_serial.c: 18: ANSELbits.ANS5 = 0;
  1666  0018D2  9A7E               	bcf	3966,5,c	;volatile
  1667                           
  1668                           ;extended_serial.c: 19: ANSELHbits.ANS11 = 0;
  1669  0018D4  967F               	bcf	3967,3,c	;volatile
  1670                           
  1671                           ;extended_serial.c: 21: TRISCbits.RC0 = 0;
  1672  0018D6  9094               	bcf	3988,0,c	;volatile
  1673                           
  1674                           ;extended_serial.c: 22: TRISCbits.RC1 = 1;
  1675  0018D8  8294               	bsf	3988,1,c	;volatile
  1676                           
  1677                           ;extended_serial.c: 24: setup_simple_serial(baudrate_bits, baudrate_value);
  1678  0018DA  C008  F001         	movff	eserial_setup@baudrate_value,setup_simple_serial@baudrate_value
  1679  0018DE  C009  F002         	movff	eserial_setup@baudrate_value+1,setup_simple_serial@baudrate_value+1
  1680  0018E2  500A               	movf	eserial_setup@baudrate_bits,w,c
  1681  0018E4  EC34  F00D         	call	_setup_simple_serial
  1682                           
  1683                           ;extended_serial.c: 26: LATCbits.LATC0 = 1;
  1684  0018E8  808B               	bsf	3979,0,c	;volatile
  1685  0018EA  0012               	return		;funcret
  1686  0018EC                     __end_of_eserial_setup:
  1687                           	opt stack 0
  1688                           tblptru	equ	0xFF8
  1689                           prodh	equ	0xFF4
  1690                           prodl	equ	0xFF3
  1691                           intcon2	equ	0xFF1
  1692                           intcon3	equ	0xFF0
  1693                           postinc0	equ	0xFEE
  1694                           wreg	equ	0xFE8
  1695                           plusw1	equ	0xFE3
  1696                           indf2	equ	0xFDF
  1697                           plusw2	equ	0xFDB
  1698                           fsr2h	equ	0xFDA
  1699                           fsr2l	equ	0xFD9
  1700                           status	equ	0xFD8
  1701                           
  1702 ;; *************** function _setup_simple_serial *****************
  1703 ;; Defined at:
  1704 ;;		line 18 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  baudrate_bit    1    wreg     unsigned char 
  1707 ;;  baudrate_val    2    0[COMRAM] unsigned int 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  baudrate_bit    1    6[COMRAM] unsigned char 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;		None               void
  1712 ;; Registers used:
  1713 ;;		wreg, status,2
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0
  1719 ;;      Params:         2       0
  1720 ;;      Locals:         5       0
  1721 ;;      Temps:          0       0
  1722 ;;      Totals:         7       0
  1723 ;;Total ram usage:        7 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_eserial_setup
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text12
  1733  001A68                     __ptext12:
  1734                           	opt stack 0
  1735  001A68                     _setup_simple_serial:
  1736                           	opt stack 29
  1737                           
  1738                           ;incstack = 0
  1739                           ;setup_simple_serial@baudrate_bits stored from wreg
  1740  001A68  6E07               	movwf	setup_simple_serial@baudrate_bits,c
  1741                           
  1742                           ;serial_pic.c: 20: ANSELHbits.ANS11 = 0;
  1743  001A6A  967F               	bcf	3967,3,c	;volatile
  1744                           
  1745                           ;serial_pic.c: 21: TXSTA = (baudrate_bits & 0x04) ? 0x24: 0x20;
  1746  001A6C  B407               	btfsc	setup_simple_serial@baudrate_bits,2,c
  1747  001A6E  D004               	goto	l1759
  1748  001A70  0E00               	movlw	0
  1749  001A72  6E04               	movwf	_setup_simple_serial$215+1,c
  1750  001A74  0E20               	movlw	32
  1751  001A76  D003               	goto	L2
  1752  001A78                     l1759:
  1753  001A78  0E00               	movlw	0
  1754  001A7A  6E04               	movwf	_setup_simple_serial$215+1,c
  1755  001A7C  0E24               	movlw	36
  1756  001A7E                     L2:
  1757  001A7E  6E03               	movwf	_setup_simple_serial$215,c
  1758  001A80  D000               	goto	l1761
  1759  001A82                     l1761:
  1760  001A82  C003  FFAC         	movff	_setup_simple_serial$215,4012	;volatile
  1761                           
  1762                           ;serial_pic.c: 22: RCSTA = 0x90;
  1763  001A86  0E90               	movlw	144
  1764  001A88  6EAB               	movwf	4011,c	;volatile
  1765                           
  1766                           ;serial_pic.c: 23: BAUDCON = (baudrate_bits & 0x08) ? 0x08 : 0x00;
  1767  001A8A  B607               	btfsc	setup_simple_serial@baudrate_bits,3,c
  1768  001A8C  D004               	goto	l1767
  1769  001A8E  0E00               	movlw	0
  1770  001A90  6E06               	movwf	_setup_simple_serial$216+1,c
  1771  001A92  0E00               	movlw	0
  1772  001A94  D003               	goto	L3
  1773  001A96                     l1767:
  1774  001A96  0E00               	movlw	0
  1775  001A98  6E06               	movwf	_setup_simple_serial$216+1,c
  1776  001A9A  0E08               	movlw	8
  1777  001A9C                     L3:
  1778  001A9C  6E05               	movwf	_setup_simple_serial$216,c
  1779  001A9E  D000               	goto	l1769
  1780  001AA0                     l1769:
  1781  001AA0  C005  FFB8         	movff	_setup_simple_serial$216,4024	;volatile
  1782                           
  1783                           ;serial_pic.c: 25: SPBRGH = baudrate_value >> 8;
  1784  001AA4  5002               	movf	setup_simple_serial@baudrate_value+1,w,c
  1785  001AA6  6EB0               	movwf	4016,c	;volatile
  1786                           
  1787                           ;serial_pic.c: 26: SPBRG = baudrate_value;
  1788  001AA8  C001  FFAF         	movff	setup_simple_serial@baudrate_value,4015	;volatile
  1789  001AAC  0012               	return		;funcret
  1790  001AAE                     __end_of_setup_simple_serial:
  1791                           	opt stack 0
  1792                           tblptru	equ	0xFF8
  1793                           prodh	equ	0xFF4
  1794                           prodl	equ	0xFF3
  1795                           intcon2	equ	0xFF1
  1796                           intcon3	equ	0xFF0
  1797                           postinc0	equ	0xFEE
  1798                           wreg	equ	0xFE8
  1799                           plusw1	equ	0xFE3
  1800                           indf2	equ	0xFDF
  1801                           plusw2	equ	0xFDB
  1802                           fsr2h	equ	0xFDA
  1803                           fsr2l	equ	0xFD9
  1804                           status	equ	0xFD8
  1805                           
  1806 ;; *************** function _eserial_send_data *****************
  1807 ;; Defined at:
  1808 ;;		line 29 in file "extended_serial.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  1811 ;;		 -> main@pic_to_pc(34), 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  value           2    9[COMRAM] int 
  1814 ;;  i               1    8[COMRAM] char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      char 
  1817 ;; Registers used:
  1818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0
  1824 ;;      Params:         2       0
  1825 ;;      Locals:         3       0
  1826 ;;      Temps:          0       0
  1827 ;;      Totals:         5       0
  1828 ;;Total ram usage:        5 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    1
  1831 ;; This function calls:
  1832 ;;		_buffer_pop
  1833 ;;		_serial_send_byte
  1834 ;; This function is called by:
  1835 ;;		_main
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text13
  1840  001A24                     __ptext13:
  1841                           	opt stack 0
  1842  001A24                     _eserial_send_data:
  1843                           	opt stack 29
  1844                           
  1845                           ;extended_serial.c: 34: int8_t i = 0;
  1846                           
  1847                           ;incstack = 0
  1848  001A24  0E00               	movlw	0
  1849  001A26  6E09               	movwf	eserial_send_data@i,c
  1850                           
  1851                           ;extended_serial.c: 35: int16_t value = buffer_pop(buffer);
  1852  001A28  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  1853  001A2C  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  1854  001A30  ECD6  F00D         	call	_buffer_pop	;wreg free
  1855  001A34  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  1856  001A38  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  1857                           
  1858                           ;extended_serial.c: 36: while (value != -1) {
  1859  001A3C  D00F               	goto	l2043
  1860  001A3E                     l2037:
  1861                           
  1862                           ;extended_serial.c: 37: serial_send_byte((uint8_t)value);
  1863  001A3E  500A               	movf	eserial_send_data@value,w,c
  1864  001A40  EC20  F00C         	call	_serial_send_byte
  1865                           
  1866                           ;extended_serial.c: 38: value = buffer_pop(buffer);
  1867  001A44  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  1868  001A48  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  1869  001A4C  ECD6  F00D         	call	_buffer_pop	;wreg free
  1870  001A50  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  1871  001A54  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  1872                           
  1873                           ;extended_serial.c: 39: i++;
  1874  001A58  2A09               	incf	eserial_send_data@i,f,c
  1875  001A5A  D000               	goto	l2043
  1876  001A5C                     l2043:
  1877  001A5C  280A               	incf	eserial_send_data@value,w,c
  1878  001A5E  E1EF               	bnz	l2037
  1879  001A60  280B               	incf	eserial_send_data@value+1,w,c
  1880  001A62  A4D8               	btfss	status,2,c
  1881  001A64  D7EC               	goto	l2037
  1882                           
  1883                           ;extended_serial.c: 40: }
  1884                           ;extended_serial.c: 42: return i;
  1885                           ;	Return value of _eserial_send_data is never used
  1886  001A66  0012               	return		;funcret
  1887  001A68                     __end_of_eserial_send_data:
  1888                           	opt stack 0
  1889                           tblptru	equ	0xFF8
  1890                           prodh	equ	0xFF4
  1891                           prodl	equ	0xFF3
  1892                           intcon2	equ	0xFF1
  1893                           intcon3	equ	0xFF0
  1894                           postinc0	equ	0xFEE
  1895                           wreg	equ	0xFE8
  1896                           plusw1	equ	0xFE3
  1897                           indf2	equ	0xFDF
  1898                           plusw2	equ	0xFDB
  1899                           fsr2h	equ	0xFDA
  1900                           fsr2l	equ	0xFD9
  1901                           status	equ	0xFD8
  1902                           
  1903 ;; *************** function _serial_send_byte *****************
  1904 ;; Defined at:
  1905 ;;		line 66 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  byte            1    wreg     unsigned char 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;  byte            1    0[COMRAM] unsigned char 
  1910 ;; Return value:  Size  Location     Type
  1911 ;;		None               void
  1912 ;; Registers used:
  1913 ;;		wreg
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMRAM   BANK0
  1919 ;;      Params:         0       0
  1920 ;;      Locals:         1       0
  1921 ;;      Temps:          0       0
  1922 ;;      Totals:         1       0
  1923 ;;Total ram usage:        1 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_eserial_send_data
  1929 ;;		_serial_send_data
  1930 ;;		_serial_send_buffer
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           	psect	text14
  1935  001840                     __ptext14:
  1936                           	opt stack 0
  1937  001840                     _serial_send_byte:
  1938                           	opt stack 29
  1939                           
  1940                           ;incstack = 0
  1941                           ;serial_send_byte@byte stored from wreg
  1942  001840  6E01               	movwf	serial_send_byte@byte,c
  1943                           
  1944                           ;serial_pic.c: 68: while (!TXIF);
  1945  001842  D000               	goto	l106
  1946  001844                     l106:
  1947  001844  A89E               	btfss	3998,4,c	;volatile
  1948  001846  D7FE               	goto	l106
  1949                           
  1950                           ;serial_pic.c: 69: TXREG = byte;
  1951  001848  C001  FFAD         	movff	serial_send_byte@byte,4013	;volatile
  1952  00184C  0012               	return		;funcret
  1953  00184E                     __end_of_serial_send_byte:
  1954                           	opt stack 0
  1955                           tblptru	equ	0xFF8
  1956                           prodh	equ	0xFF4
  1957                           prodl	equ	0xFF3
  1958                           intcon2	equ	0xFF1
  1959                           intcon3	equ	0xFF0
  1960                           postinc0	equ	0xFEE
  1961                           wreg	equ	0xFE8
  1962                           plusw1	equ	0xFE3
  1963                           indf2	equ	0xFDF
  1964                           plusw2	equ	0xFDB
  1965                           fsr2h	equ	0xFDA
  1966                           fsr2l	equ	0xFD9
  1967                           status	equ	0xFD8
  1968                           
  1969 ;; *************** function _buffer_pop *****************
  1970 ;; Defined at:
  1971 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  1974 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  byte            2    4[COMRAM] int 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  2    0[COMRAM] int 
  1979 ;; Registers used:
  1980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0
  1986 ;;      Params:         2       0
  1987 ;;      Locals:         2       0
  1988 ;;      Temps:          2       0
  1989 ;;      Totals:         6       0
  1990 ;;Total ram usage:        6 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_eserial_send_data
  1996 ;;		_espi_slave_send
  1997 ;;		_espi_master_send
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text15
  2002  001BAC                     __ptext15:
  2003                           	opt stack 0
  2004  001BAC                     _buffer_pop:
  2005                           	opt stack 29
  2006                           
  2007                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
  2008                           
  2009                           ;incstack = 0
  2010  001BAC  EE20 F001          	lfsr	2,1
  2011  001BB0  5001               	movf	buffer_pop@buffer,w,c
  2012  001BB2  26D9               	addwf	fsr2l,f,c
  2013  001BB4  5002               	movf	buffer_pop@buffer+1,w,c
  2014  001BB6  22DA               	addwfc	fsr2h,f,c
  2015  001BB8  50DF               	movf	indf2,w,c
  2016  001BBA  A4D8               	btfss	status,2,c
  2017  001BBC  D003               	goto	l1821
  2018                           
  2019                           ;circular_buffer.c: 40: return -1;
  2020  001BBE  6801               	setf	?_buffer_pop,c
  2021  001BC0  6802               	setf	?_buffer_pop+1,c
  2022  001BC2  0012               	return	
  2023  001BC4                     l1821:
  2024                           
  2025                           ;circular_buffer.c: 41: }
  2026                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2027  001BC4  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2028  001BC8  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2029  001BCC  50DF               	movf	indf2,w,c
  2030  001BCE  6E03               	movwf	??_buffer_pop& (0+255),c
  2031  001BD0  5003               	movf	??_buffer_pop,w,c
  2032  001BD2  0D01               	mullw	1
  2033  001BD4  0E02               	movlw	2
  2034  001BD6  26F3               	addwf	prodl,f,c
  2035  001BD8  0E00               	movlw	0
  2036  001BDA  22F4               	addwfc	prodh,f,c
  2037  001BDC  50F3               	movf	prodl,w,c
  2038  001BDE  2401               	addwf	buffer_pop@buffer,w,c
  2039  001BE0  6ED9               	movwf	fsr2l,c
  2040  001BE2  50F4               	movf	prodh,w,c
  2041  001BE4  2002               	addwfc	buffer_pop@buffer+1,w,c
  2042  001BE6  6EDA               	movwf	fsr2h,c
  2043  001BE8  50DF               	movf	indf2,w,c
  2044  001BEA  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  2045  001BEC  5004               	movf	??_buffer_pop+1,w,c
  2046  001BEE  6E05               	movwf	buffer_pop@byte,c
  2047  001BF0  6A06               	clrf	buffer_pop@byte+1,c
  2048                           
  2049                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  2050  001BF2  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2051  001BF6  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2052  001BFA  50DF               	movf	indf2,w,c
  2053  001BFC  6E03               	movwf	??_buffer_pop& (0+255),c
  2054  001BFE  2803               	incf	??_buffer_pop,w,c
  2055  001C00  0B1F               	andlw	31
  2056  001C02  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2057  001C06  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2058  001C0A  6EDF               	movwf	indf2,c
  2059                           
  2060                           ;circular_buffer.c: 45: buffer->count--;
  2061  001C0C  EE20 F001          	lfsr	2,1
  2062  001C10  5001               	movf	buffer_pop@buffer,w,c
  2063  001C12  26D9               	addwf	fsr2l,f,c
  2064  001C14  5002               	movf	buffer_pop@buffer+1,w,c
  2065  001C16  22DA               	addwfc	fsr2h,f,c
  2066  001C18  06DF               	decf	indf2,f,c
  2067                           
  2068                           ;circular_buffer.c: 47: return byte;
  2069  001C1A  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  2070  001C1E  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  2071  001C22  0012               	return	
  2072  001C24  0012               	return		;funcret
  2073  001C26                     __end_of_buffer_pop:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           prodh	equ	0xFF4
  2077                           prodl	equ	0xFF3
  2078                           intcon2	equ	0xFF1
  2079                           intcon3	equ	0xFF0
  2080                           postinc0	equ	0xFEE
  2081                           wreg	equ	0xFE8
  2082                           plusw1	equ	0xFE3
  2083                           indf2	equ	0xFDF
  2084                           plusw2	equ	0xFDB
  2085                           fsr2h	equ	0xFDA
  2086                           fsr2l	equ	0xFD9
  2087                           status	equ	0xFD8
  2088                           
  2089 ;; *************** function _eserial_receive *****************
  2090 ;; Defined at:
  2091 ;;		line 45 in file "extended_serial.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  2094 ;;		 -> main@pic_to_pic(34), 
  2095 ;;  stop_functio    2    8[COMRAM] PTR FTN()unsigned char 
  2096 ;;		 -> return_false(1), 
  2097 ;;  timer_start     2   10[COMRAM] PTR FTN(int ,)void 
  2098 ;;		 -> set_timer3(0), 
  2099 ;;  timer_up        2   12[COMRAM] PTR FTN()unsigned char 
  2100 ;;		 -> timer3_up(1), 
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;  test            1   15[COMRAM] unsigned char 
  2103 ;;  value           1   16[COMRAM] unsigned char 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;		None               void
  2106 ;; Registers used:
  2107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0
  2113 ;;      Params:         8       0
  2114 ;;      Locals:         2       0
  2115 ;;      Temps:          1       0
  2116 ;;      Totals:        11       0
  2117 ;;Total ram usage:       11 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    3
  2120 ;; This function calls:
  2121 ;;		_buffer_empty
  2122 ;;		_buffer_push
  2123 ;;		_buffer_space
  2124 ;;		_return_false
  2125 ;;		_serial_peek_receive
  2126 ;;		_set_timer3
  2127 ;;		_timer3_up
  2128 ;; This function is called by:
  2129 ;;		_main
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text16
  2134  001D7A                     __ptext16:
  2135                           	opt stack 0
  2136  001D7A                     _eserial_receive:
  2137                           	opt stack 27
  2138                           
  2139                           ;extended_serial.c: 50: if (buffer_empty(buffer)) {
  2140                           
  2141                           ;incstack = 0
  2142  001D7A  C007  F001         	movff	eserial_receive@buffer,buffer_empty@buffer
  2143  001D7E  C008  F002         	movff	eserial_receive@buffer+1,buffer_empty@buffer+1
  2144  001D82  EC5A  F00C         	call	_buffer_empty	;wreg free
  2145  001D86  0900               	iorlw	0
  2146  001D88  B4D8               	btfsc	status,2,c
  2147  001D8A  0012               	return	
  2148                           
  2149                           ;extended_serial.c: 51: uint8_t value;
  2150                           ;extended_serial.c: 52: LATCbits.LATC0 = 0;
  2151  001D8C  908B               	bcf	3979,0,c	;volatile
  2152                           
  2153                           ;extended_serial.c: 54: if (stop_function == (0)) {
  2154  001D8E  5009               	movf	eserial_receive@stop_function,w,c
  2155  001D90  100A               	iorwf	eserial_receive@stop_function+1,w,c
  2156  001D92  B4D8               	btfsc	status,2,c
  2157  001D94  D015               	goto	l1919
  2158  001D96  D01F               	goto	l1921
  2159                           
  2160                           ;extended_serial.c: 55: while (buffer_space(buffer) > 0x04) {
  2161  001D98  D013               	goto	l1919
  2162  001D9A                     l1915:
  2163                           
  2164                           ;extended_serial.c: 56: if (serial_peek_receive(1, &value)) {
  2165  001D9A  0E11               	movlw	low eserial_receive@value
  2166  001D9C  6E01               	movwf	serial_peek_receive@byte,c
  2167  001D9E  0E00               	movlw	high eserial_receive@value
  2168  001DA0  6E02               	movwf	serial_peek_receive@byte+1,c
  2169  001DA2  0E01               	movlw	1
  2170  001DA4  EC85  F00C         	call	_serial_peek_receive
  2171  001DA8  0900               	iorlw	0
  2172  001DAA  B4D8               	btfsc	status,2,c
  2173  001DAC  D009               	goto	l1919
  2174                           
  2175                           ;extended_serial.c: 57: buffer_push(buffer, value);
  2176  001DAE  C007  F001         	movff	eserial_receive@buffer,buffer_push@buffer
  2177  001DB2  C008  F002         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  2178  001DB6  C011  F003         	movff	eserial_receive@value,buffer_push@byte
  2179  001DBA  ECA3  F00D         	call	_buffer_push	;wreg free
  2180  001DBE  D000               	goto	l1919
  2181  001DC0                     l1919:
  2182  001DC0  C007  F001         	movff	eserial_receive@buffer,buffer_space@buffer
  2183  001DC4  C008  F002         	movff	eserial_receive@buffer+1,buffer_space@buffer+1
  2184  001DC8  EC43  F00C         	call	_buffer_space	;wreg free
  2185  001DCC  6E0F               	movwf	??_eserial_receive& (0+255),c
  2186  001DCE  0E05               	movlw	5
  2187  001DD0  600F               	cpfslt	??_eserial_receive,c
  2188  001DD2  D7E3               	goto	l1915
  2189                           
  2190                           ;extended_serial.c: 58: }
  2191                           ;extended_serial.c: 59: }
  2192                           ;extended_serial.c: 60: } else {
  2193  001DD4  D032               	goto	l203
  2194  001DD6                     l1921:
  2195                           
  2196                           ;extended_serial.c: 61: bool test = 0;
  2197  001DD6  0E00               	movlw	0
  2198  001DD8  D01F               	goto	u1569
  2199  001DDA                     l1923:
  2200                           
  2201                           ;extended_serial.c: 64: if (serial_peek_receive(1, &value)) {
  2202  001DDA  0E11               	movlw	low eserial_receive@value
  2203  001DDC  6E01               	movwf	serial_peek_receive@byte,c
  2204  001DDE  0E00               	movlw	high eserial_receive@value
  2205  001DE0  6E02               	movwf	serial_peek_receive@byte+1,c
  2206  001DE2  0E01               	movlw	1
  2207  001DE4  EC85  F00C         	call	_serial_peek_receive
  2208  001DE8  0900               	iorlw	0
  2209  001DEA  B4D8               	btfsc	status,2,c
  2210  001DEC  D009               	goto	l1927
  2211                           
  2212                           ;extended_serial.c: 65: buffer_push(buffer, value);
  2213  001DEE  C007  F001         	movff	eserial_receive@buffer,buffer_push@buffer
  2214  001DF2  C008  F002         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  2215  001DF6  C011  F003         	movff	eserial_receive@value,buffer_push@byte
  2216  001DFA  ECA3  F00D         	call	_buffer_push	;wreg free
  2217  001DFE  D000               	goto	l1927
  2218  001E00                     l1927:
  2219                           
  2220                           ;extended_serial.c: 66: }
  2221                           ;extended_serial.c: 67: test = (*stop_function)();
  2222  001E00  D801               	call	u1568
  2223  001E02  D00A               	goto	u1569
  2224  001E04                     u1568:
  2225  001E04  0005               	push	
  2226  001E06  6EFA               	movwf	pclath,c
  2227  001E08  5009               	movf	eserial_receive@stop_function,w,c
  2228  001E0A  6EFD               	movwf	tosl,c
  2229  001E0C  500A               	movf	eserial_receive@stop_function+1,w,c
  2230  001E0E  6EFE               	movwf	tosh,c
  2231  001E10  50F8               	movf	tblptru,w,c
  2232  001E12  6EFF               	movwf	tosu,c
  2233  001E14  50FA               	movf	pclath,w,c
  2234  001E16  0012               	return		;indir
  2235  001E18                     u1569:
  2236  001E18  6E10               	movwf	eserial_receive@test,c
  2237  001E1A  D000               	goto	l1929
  2238  001E1C                     l1929:
  2239  001E1C  C007  F001         	movff	eserial_receive@buffer,buffer_space@buffer
  2240  001E20  C008  F002         	movff	eserial_receive@buffer+1,buffer_space@buffer+1
  2241  001E24  EC43  F00C         	call	_buffer_space	;wreg free
  2242  001E28  6E0F               	movwf	??_eserial_receive& (0+255),c
  2243  001E2A  0E04               	movlw	4
  2244  001E2C  640F               	cpfsgt	??_eserial_receive,c
  2245  001E2E  D005               	goto	l203
  2246  001E30  5010               	movf	eserial_receive@test,w,c
  2247  001E32  A4D8               	btfss	status,2,c
  2248  001E34  D002               	goto	l203
  2249  001E36  D7D1               	goto	l1923
  2250  001E38  D000               	goto	l203
  2251  001E3A                     l203:
  2252                           
  2253                           ;extended_serial.c: 68: }
  2254                           ;extended_serial.c: 69: }
  2255                           ;extended_serial.c: 71: LATCbits.LATC0 = 1;
  2256  001E3A  808B               	bsf	3979,0,c	;volatile
  2257                           
  2258                           ;extended_serial.c: 72: (*timer_start)(65035);
  2259  001E3C  0EFE               	movlw	254
  2260  001E3E  6E02               	movwf	set_timer3@value+1,c
  2261  001E40  0E0B               	movlw	11
  2262  001E42  6E01               	movwf	set_timer3@value,c
  2263  001E44  D801               	call	u1598
  2264  001E46  D01D               	goto	l1939
  2265  001E48                     u1598:
  2266  001E48  0005               	push	
  2267  001E4A  6EFA               	movwf	pclath,c
  2268  001E4C  500B               	movf	eserial_receive@timer_start,w,c
  2269  001E4E  6EFD               	movwf	tosl,c
  2270  001E50  500C               	movf	eserial_receive@timer_start+1,w,c
  2271  001E52  6EFE               	movwf	tosh,c
  2272  001E54  50F8               	movf	tblptru,w,c
  2273  001E56  6EFF               	movwf	tosu,c
  2274  001E58  50FA               	movf	pclath,w,c
  2275  001E5A  0012               	return		;indir
  2276  001E5C                     l1935:
  2277                           
  2278                           ;extended_serial.c: 75: if (serial_peek_receive(1, &value)) {
  2279  001E5C  0E11               	movlw	low eserial_receive@value
  2280  001E5E  6E01               	movwf	serial_peek_receive@byte,c
  2281  001E60  0E00               	movlw	high eserial_receive@value
  2282  001E62  6E02               	movwf	serial_peek_receive@byte+1,c
  2283  001E64  0E01               	movlw	1
  2284  001E66  EC85  F00C         	call	_serial_peek_receive
  2285  001E6A  0900               	iorlw	0
  2286  001E6C  B4D8               	btfsc	status,2,c
  2287  001E6E  D009               	goto	l1939
  2288                           
  2289                           ;extended_serial.c: 76: buffer_push(buffer, value);
  2290  001E70  C007  F001         	movff	eserial_receive@buffer,buffer_push@buffer
  2291  001E74  C008  F002         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  2292  001E78  C011  F003         	movff	eserial_receive@value,buffer_push@byte
  2293  001E7C  ECA3  F00D         	call	_buffer_push	;wreg free
  2294  001E80  D000               	goto	l1939
  2295  001E82                     l1939:
  2296  001E82  D801               	call	u1618
  2297  001E84  D00A               	goto	u1619
  2298  001E86                     u1618:
  2299  001E86  0005               	push	
  2300  001E88  6EFA               	movwf	pclath,c
  2301  001E8A  500D               	movf	eserial_receive@timer_up,w,c
  2302  001E8C  6EFD               	movwf	tosl,c
  2303  001E8E  500E               	movf	eserial_receive@timer_up+1,w,c
  2304  001E90  6EFE               	movwf	tosh,c
  2305  001E92  50F8               	movf	tblptru,w,c
  2306  001E94  6EFF               	movwf	tosu,c
  2307  001E96  50FA               	movf	pclath,w,c
  2308  001E98  0012               	return		;indir
  2309  001E9A                     u1619:
  2310  001E9A  0900               	iorlw	0
  2311  001E9C  A4D8               	btfss	status,2,c
  2312  001E9E  0012               	return	
  2313  001EA0  D7DD               	goto	l1935
  2314  001EA2  0012               	return	
  2315  001EA4  0012               	return		;funcret
  2316  001EA6                     __end_of_eserial_receive:
  2317                           	opt stack 0
  2318                           tosu	equ	0xFFF
  2319                           tosh	equ	0xFFE
  2320                           tosl	equ	0xFFD
  2321                           pclath	equ	0xFFA
  2322                           tblptru	equ	0xFF8
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           intcon2	equ	0xFF1
  2326                           intcon3	equ	0xFF0
  2327                           postinc0	equ	0xFEE
  2328                           wreg	equ	0xFE8
  2329                           plusw1	equ	0xFE3
  2330                           indf2	equ	0xFDF
  2331                           plusw2	equ	0xFDB
  2332                           fsr2h	equ	0xFDA
  2333                           fsr2l	equ	0xFD9
  2334                           status	equ	0xFD8
  2335                           
  2336 ;; *************** function _timer3_up *****************
  2337 ;; Defined at:
  2338 ;;		line 48 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;		None
  2341 ;; Auto vars:     Size  Location     Type
  2342 ;;		None
  2343 ;; Return value:  Size  Location     Type
  2344 ;;                  1    wreg      unsigned char 
  2345 ;; Registers used:
  2346 ;;		wreg
  2347 ;; Tracked objects:
  2348 ;;		On entry : 0/0
  2349 ;;		On exit  : 0/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMRAM   BANK0
  2352 ;;      Params:         0       0
  2353 ;;      Locals:         0       0
  2354 ;;      Temps:          0       0
  2355 ;;      Totals:         0       0
  2356 ;;Total ram usage:        0 bytes
  2357 ;; Hardware stack levels used:    1
  2358 ;; This function calls:
  2359 ;;		Nothing
  2360 ;; This function is called by:
  2361 ;;		_main
  2362 ;;		_eserial_receive
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text17
  2367  001832                     __ptext17:
  2368                           	opt stack 0
  2369  001832                     _timer3_up:
  2370                           	opt stack 29
  2371                           
  2372                           ;timers_pic.c: 50: return (PIR2bits.TMR3IF) ? 1 : 0;
  2373                           
  2374                           ;incstack = 0
  2375  001832  A2A1               	btfss	4001,1,c	;volatile
  2376  001834  D002               	goto	u1430
  2377  001836  0E01               	movlw	1
  2378  001838  0012               	return	
  2379  00183A                     u1430:
  2380  00183A  0E00               	movlw	0
  2381  00183C  0012               	return	
  2382  00183E  0012               	return		;funcret
  2383  001840                     __end_of_timer3_up:
  2384                           	opt stack 0
  2385                           tosu	equ	0xFFF
  2386                           tosh	equ	0xFFE
  2387                           tosl	equ	0xFFD
  2388                           pclath	equ	0xFFA
  2389                           tblptru	equ	0xFF8
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           intcon2	equ	0xFF1
  2393                           intcon3	equ	0xFF0
  2394                           postinc0	equ	0xFEE
  2395                           wreg	equ	0xFE8
  2396                           plusw1	equ	0xFE3
  2397                           indf2	equ	0xFDF
  2398                           plusw2	equ	0xFDB
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _set_timer3 *****************
  2404 ;; Defined at:
  2405 ;;		line 34 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  value           2    0[COMRAM] int 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;		None
  2410 ;; Return value:  Size  Location     Type
  2411 ;;		None               void
  2412 ;; Registers used:
  2413 ;;		None
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0
  2419 ;;      Params:         2       0
  2420 ;;      Locals:         0       0
  2421 ;;      Temps:          0       0
  2422 ;;      Totals:         2       0
  2423 ;;Total ram usage:        2 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_main
  2429 ;;		_eserial_receive
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text18
  2434  001826                     __ptext18:
  2435                           	opt stack 0
  2436  001826                     _set_timer3:
  2437                           	opt stack 29
  2438                           
  2439                           ;timers_pic.c: 36: PIR2bits.TMR3IF = 0;
  2440                           
  2441                           ;incstack = 0
  2442  001826  92A1               	bcf	4001,1,c	;volatile
  2443                           
  2444                           ;timers_pic.c: 37: TMR3 = value;
  2445  001828  C001  FFB2         	movff	set_timer3@value,4018	;volatile
  2446  00182C  C002  FFB3         	movff	set_timer3@value+1,4019	;volatile
  2447  001830  0012               	return		;funcret
  2448  001832                     __end_of_set_timer3:
  2449                           	opt stack 0
  2450                           tosu	equ	0xFFF
  2451                           tosh	equ	0xFFE
  2452                           tosl	equ	0xFFD
  2453                           pclath	equ	0xFFA
  2454                           tblptru	equ	0xFF8
  2455                           prodh	equ	0xFF4
  2456                           prodl	equ	0xFF3
  2457                           intcon2	equ	0xFF1
  2458                           intcon3	equ	0xFF0
  2459                           postinc0	equ	0xFEE
  2460                           wreg	equ	0xFE8
  2461                           plusw1	equ	0xFE3
  2462                           indf2	equ	0xFDF
  2463                           plusw2	equ	0xFDB
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _serial_peek_receive *****************
  2469 ;; Defined at:
  2470 ;;		line 29 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  get_byte        1    wreg     unsigned char 
  2473 ;;  byte            2    0[COMRAM] PTR unsigned char 
  2474 ;;		 -> eserial_receive@value(1), 
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  get_byte        1    2[COMRAM] unsigned char 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      unsigned char 
  2479 ;; Registers used:
  2480 ;;		wreg, fsr2l, fsr2h, status,2
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0
  2486 ;;      Params:         2       0
  2487 ;;      Locals:         1       0
  2488 ;;      Temps:          0       0
  2489 ;;      Totals:         3       0
  2490 ;;Total ram usage:        3 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; This function calls:
  2493 ;;		Nothing
  2494 ;; This function is called by:
  2495 ;;		_eserial_receive
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text19
  2500  00190A                     __ptext19:
  2501                           	opt stack 0
  2502  00190A                     _serial_peek_receive:
  2503                           	opt stack 29
  2504                           
  2505                           ;incstack = 0
  2506                           ;serial_peek_receive@get_byte stored from wreg
  2507  00190A  6E03               	movwf	serial_peek_receive@get_byte,c
  2508                           
  2509                           ;serial_pic.c: 31: if (get_byte) {
  2510  00190C  5003               	movf	serial_peek_receive@get_byte,w,c
  2511  00190E  B4D8               	btfsc	status,2,c
  2512  001910  D00E               	goto	l1789
  2513                           
  2514                           ;serial_pic.c: 32: if (RCIF) {
  2515  001912  AA9E               	btfss	3998,5,c	;volatile
  2516  001914  D009               	goto	l1785
  2517                           
  2518                           ;serial_pic.c: 33: *byte = RCREG;
  2519  001916  C001  FFD9         	movff	serial_peek_receive@byte,fsr2l
  2520  00191A  C002  FFDA         	movff	serial_peek_receive@byte+1,fsr2h
  2521  00191E  CFAE FFDF          	movff	4014,indf2	;volatile
  2522                           
  2523                           ;serial_pic.c: 34: return 1;
  2524  001922  0E01               	movlw	1
  2525  001924  0012               	return	
  2526                           
  2527                           ;serial_pic.c: 35: } else {
  2528  001926  D003               	goto	l1789
  2529  001928                     l1785:
  2530                           
  2531                           ;serial_pic.c: 36: return 0;
  2532  001928  0E00               	movlw	0
  2533  00192A  0012               	return	
  2534  00192C  D000               	goto	l1789
  2535  00192E                     l1789:
  2536                           
  2537                           ;serial_pic.c: 37: }
  2538                           ;serial_pic.c: 38: }
  2539                           ;serial_pic.c: 40: return (RCIF) ? 1 : 0;
  2540  00192E  0E00               	movlw	0
  2541  001930  BA9E               	btfsc	3998,5,c	;volatile
  2542  001932  0E01               	movlw	1
  2543  001934  0012               	return	
  2544  001936  0012               	return		;funcret
  2545  001938                     __end_of_serial_peek_receive:
  2546                           	opt stack 0
  2547                           tosu	equ	0xFFF
  2548                           tosh	equ	0xFFE
  2549                           tosl	equ	0xFFD
  2550                           pclath	equ	0xFFA
  2551                           tblptru	equ	0xFF8
  2552                           prodh	equ	0xFF4
  2553                           prodl	equ	0xFF3
  2554                           intcon2	equ	0xFF1
  2555                           intcon3	equ	0xFF0
  2556                           postinc0	equ	0xFEE
  2557                           wreg	equ	0xFE8
  2558                           plusw1	equ	0xFE3
  2559                           indf2	equ	0xFDF
  2560                           plusw2	equ	0xFDB
  2561                           fsr2h	equ	0xFDA
  2562                           fsr2l	equ	0xFD9
  2563                           status	equ	0xFD8
  2564                           
  2565 ;; *************** function _return_false *****************
  2566 ;; Defined at:
  2567 ;;		line 22 in file "main.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;		None
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;		None
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  1    wreg      unsigned char 
  2574 ;; Registers used:
  2575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMRAM   BANK0
  2581 ;;      Params:         0       0
  2582 ;;      Locals:         0       0
  2583 ;;      Temps:          0       0
  2584 ;;      Totals:         0       0
  2585 ;;Total ram usage:        0 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; Hardware stack levels required when called:    2
  2588 ;; This function calls:
  2589 ;;		_spi_slave_peek_receive
  2590 ;; This function is called by:
  2591 ;;		_main
  2592 ;;		_eserial_receive
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text20
  2597  00184E                     __ptext20:
  2598                           	opt stack 0
  2599  00184E                     _return_false:
  2600                           	opt stack 27
  2601                           
  2602                           ;main.c: 24: return spi_slave_peek_receive(0, (0));
  2603                           
  2604                           ;incstack = 0
  2605  00184E  0E00               	movlw	0
  2606  001850  6E04               	movwf	spi_slave_peek_receive@byte,c
  2607  001852  0E00               	movlw	0
  2608  001854  6E05               	movwf	spi_slave_peek_receive@byte+1,c
  2609  001856  0E00               	movlw	0
  2610  001858  ECB8  F00C         	call	_spi_slave_peek_receive
  2611  00185C  0012               	return	
  2612  00185E  0012               	return		;funcret
  2613  001860                     __end_of_return_false:
  2614                           	opt stack 0
  2615                           tosu	equ	0xFFF
  2616                           tosh	equ	0xFFE
  2617                           tosl	equ	0xFFD
  2618                           pclath	equ	0xFFA
  2619                           tblptru	equ	0xFF8
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           intcon2	equ	0xFF1
  2623                           intcon3	equ	0xFF0
  2624                           postinc0	equ	0xFEE
  2625                           wreg	equ	0xFE8
  2626                           plusw1	equ	0xFE3
  2627                           indf2	equ	0xFDF
  2628                           plusw2	equ	0xFDB
  2629                           fsr2h	equ	0xFDA
  2630                           fsr2l	equ	0xFD9
  2631                           status	equ	0xFD8
  2632                           
  2633 ;; *************** function _spi_slave_peek_receive *****************
  2634 ;; Defined at:
  2635 ;;		line 42 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  get_byte        1    wreg     unsigned char 
  2638 ;;  byte            2    3[COMRAM] PTR int 
  2639 ;;		 -> main@value_102(2), NULL(0), 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  get_byte        1    5[COMRAM] unsigned char 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      unsigned char 
  2644 ;; Registers used:
  2645 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0
  2651 ;;      Params:         2       0
  2652 ;;      Locals:         1       0
  2653 ;;      Temps:          0       0
  2654 ;;      Totals:         3       0
  2655 ;;Total ram usage:        3 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    1
  2658 ;; This function calls:
  2659 ;;		_spi_slave_get_byte
  2660 ;; This function is called by:
  2661 ;;		_return_false
  2662 ;;		_main
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text21
  2667  001970                     __ptext21:
  2668                           	opt stack 0
  2669  001970                     _spi_slave_peek_receive:
  2670                           	opt stack 29
  2671                           
  2672                           ;incstack = 0
  2673                           ;spi_slave_peek_receive@get_byte stored from wreg
  2674  001970  6E06               	movwf	spi_slave_peek_receive@get_byte,c
  2675                           
  2676                           ;spi_pic.c: 44: if (get_byte) {
  2677  001972  5006               	movf	spi_slave_peek_receive@get_byte,w,c
  2678  001974  B4D8               	btfsc	status,2,c
  2679  001976  D012               	goto	l1745
  2680                           
  2681                           ;spi_pic.c: 45: if (SSPSTATbits.BF) {
  2682  001978  A0C7               	btfss	4039,0,c	;volatile
  2683  00197A  D00D               	goto	l1741
  2684                           
  2685                           ;spi_pic.c: 46: *byte = spi_slave_get_byte();
  2686  00197C  EC76  F00C         	call	_spi_slave_get_byte	;wreg free
  2687  001980  C004  FFD9         	movff	spi_slave_peek_receive@byte,fsr2l
  2688  001984  C005  FFDA         	movff	spi_slave_peek_receive@byte+1,fsr2h
  2689  001988  C001  FFDE         	movff	?_spi_slave_get_byte,postinc2
  2690  00198C  C002  FFDD         	movff	?_spi_slave_get_byte+1,postdec2
  2691                           
  2692                           ;spi_pic.c: 47: return 1;
  2693  001990  0E01               	movlw	1
  2694  001992  0012               	return	
  2695                           
  2696                           ;spi_pic.c: 48: } else {
  2697  001994  D003               	goto	l1745
  2698  001996                     l1741:
  2699                           
  2700                           ;spi_pic.c: 49: return 0;
  2701  001996  0E00               	movlw	0
  2702  001998  0012               	return	
  2703  00199A  D000               	goto	l1745
  2704  00199C                     l1745:
  2705                           
  2706                           ;spi_pic.c: 50: }
  2707                           ;spi_pic.c: 51: }
  2708                           ;spi_pic.c: 53: return (SSPSTATbits.BF) ? 1 : 0;
  2709  00199C  A0C7               	btfss	4039,0,c	;volatile
  2710  00199E  D002               	goto	u1300
  2711  0019A0  0E01               	movlw	1
  2712  0019A2  0012               	return	
  2713  0019A4                     u1300:
  2714  0019A4  0E00               	movlw	0
  2715  0019A6  0012               	return	
  2716  0019A8  0012               	return		;funcret
  2717  0019AA                     __end_of_spi_slave_peek_receive:
  2718                           	opt stack 0
  2719                           tosu	equ	0xFFF
  2720                           tosh	equ	0xFFE
  2721                           tosl	equ	0xFFD
  2722                           pclath	equ	0xFFA
  2723                           tblptru	equ	0xFF8
  2724                           prodh	equ	0xFF4
  2725                           prodl	equ	0xFF3
  2726                           intcon2	equ	0xFF1
  2727                           intcon3	equ	0xFF0
  2728                           postinc0	equ	0xFEE
  2729                           wreg	equ	0xFE8
  2730                           plusw1	equ	0xFE3
  2731                           indf2	equ	0xFDF
  2732                           postinc2	equ	0xFDE
  2733                           postdec2	equ	0xFDD
  2734                           plusw2	equ	0xFDB
  2735                           fsr2h	equ	0xFDA
  2736                           fsr2l	equ	0xFD9
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function _spi_slave_get_byte *****************
  2740 ;; Defined at:
  2741 ;;		line 111 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;		None
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;  byte            1    2[COMRAM] unsigned char 
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  2    0[COMRAM] int 
  2748 ;; Registers used:
  2749 ;;		None
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0
  2755 ;;      Params:         2       0
  2756 ;;      Locals:         1       0
  2757 ;;      Temps:          0       0
  2758 ;;      Totals:         3       0
  2759 ;;Total ram usage:        3 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; This function calls:
  2762 ;;		Nothing
  2763 ;; This function is called by:
  2764 ;;		_spi_slave_peek_receive
  2765 ;;		_espi_slave_receive
  2766 ;;		_spi_slave_get_data
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text22
  2771  0018EC                     __ptext22:
  2772                           	opt stack 0
  2773  0018EC                     _spi_slave_get_byte:
  2774                           	opt stack 29
  2775                           
  2776                           ;spi_pic.c: 113: while (!SSPSTATbits.BF);
  2777                           
  2778                           ;incstack = 0
  2779  0018EC  D000               	goto	l361
  2780  0018EE                     l361:
  2781  0018EE  A0C7               	btfss	4039,0,c	;volatile
  2782  0018F0  D7FE               	goto	l361
  2783                           
  2784                           ;spi_pic.c: 114: uint8_t byte = SSPBUF;
  2785  0018F2  CFC9 F003          	movff	4041,spi_slave_get_byte@byte	;volatile
  2786                           
  2787                           ;spi_pic.c: 115: SSPBUF = dummy_byte;
  2788  0018F6  C058  FFC9         	movff	_dummy_byte,4041	;volatile
  2789                           
  2790                           ;spi_pic.c: 116: if (SSPCON1bits.SSPOV) {
  2791  0018FA  ACC6               	btfss	4038,6,c	;volatile
  2792  0018FC  D002               	goto	l364
  2793                           
  2794                           ;spi_pic.c: 117: SSPCON1bits.SSPOV = 0;
  2795  0018FE  9CC6               	bcf	4038,6,c	;volatile
  2796                           
  2797                           ;spi_pic.c: 118: byte = -1;
  2798  001900  6803               	setf	spi_slave_get_byte@byte,c
  2799  001902                     l364:
  2800                           
  2801                           ;spi_pic.c: 119: }
  2802                           ;spi_pic.c: 120: return byte;
  2803  001902  C003  F001         	movff	spi_slave_get_byte@byte,?_spi_slave_get_byte
  2804  001906  6A02               	clrf	?_spi_slave_get_byte+1,c
  2805  001908  0012               	return		;funcret
  2806  00190A                     __end_of_spi_slave_get_byte:
  2807                           	opt stack 0
  2808                           tosu	equ	0xFFF
  2809                           tosh	equ	0xFFE
  2810                           tosl	equ	0xFFD
  2811                           pclath	equ	0xFFA
  2812                           tblptru	equ	0xFF8
  2813                           prodh	equ	0xFF4
  2814                           prodl	equ	0xFF3
  2815                           intcon2	equ	0xFF1
  2816                           intcon3	equ	0xFF0
  2817                           postinc0	equ	0xFEE
  2818                           wreg	equ	0xFE8
  2819                           plusw1	equ	0xFE3
  2820                           indf2	equ	0xFDF
  2821                           postinc2	equ	0xFDE
  2822                           postdec2	equ	0xFDD
  2823                           plusw2	equ	0xFDB
  2824                           fsr2h	equ	0xFDA
  2825                           fsr2l	equ	0xFD9
  2826                           status	equ	0xFD8
  2827                           
  2828 ;; *************** function _buffer_space *****************
  2829 ;; Defined at:
  2830 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2833 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;		None
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      unsigned char 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0
  2845 ;;      Params:         2       0
  2846 ;;      Locals:         0       0
  2847 ;;      Temps:          0       0
  2848 ;;      Totals:         2       0
  2849 ;;Total ram usage:        2 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; This function calls:
  2852 ;;		Nothing
  2853 ;; This function is called by:
  2854 ;;		_eserial_receive
  2855 ;;		_espi_slave_receive
  2856 ;;		_espi_master_receive
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text23
  2861  001886                     __ptext23:
  2862                           	opt stack 0
  2863  001886                     _buffer_space:
  2864                           	opt stack 29
  2865                           
  2866                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  2867                           
  2868                           ;incstack = 0
  2869  001886  EE20 F001          	lfsr	2,1
  2870  00188A  5001               	movf	buffer_space@buffer,w,c
  2871  00188C  26D9               	addwf	fsr2l,f,c
  2872  00188E  5002               	movf	buffer_space@buffer+1,w,c
  2873  001890  22DA               	addwfc	fsr2h,f,c
  2874  001892  50DF               	movf	indf2,w,c
  2875  001894  0800               	sublw	0
  2876  001896  0F20               	addlw	32
  2877  001898  0012               	return	
  2878  00189A  0012               	return		;funcret
  2879  00189C                     __end_of_buffer_space:
  2880                           	opt stack 0
  2881                           tosu	equ	0xFFF
  2882                           tosh	equ	0xFFE
  2883                           tosl	equ	0xFFD
  2884                           pclath	equ	0xFFA
  2885                           tblptru	equ	0xFF8
  2886                           prodh	equ	0xFF4
  2887                           prodl	equ	0xFF3
  2888                           intcon2	equ	0xFF1
  2889                           intcon3	equ	0xFF0
  2890                           postinc0	equ	0xFEE
  2891                           wreg	equ	0xFE8
  2892                           plusw1	equ	0xFE3
  2893                           indf2	equ	0xFDF
  2894                           postinc2	equ	0xFDE
  2895                           postdec2	equ	0xFDD
  2896                           plusw2	equ	0xFDB
  2897                           fsr2h	equ	0xFDA
  2898                           fsr2l	equ	0xFD9
  2899                           status	equ	0xFD8
  2900                           
  2901 ;; *************** function _buffer_push *****************
  2902 ;; Defined at:
  2903 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2906 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  2907 ;;  byte            1    2[COMRAM] unsigned char 
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;  current_posi    1    4[COMRAM] unsigned char 
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      unsigned char 
  2912 ;; Registers used:
  2913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0
  2919 ;;      Params:         3       0
  2920 ;;      Locals:         1       0
  2921 ;;      Temps:          1       0
  2922 ;;      Totals:         5       0
  2923 ;;Total ram usage:        5 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; This function calls:
  2926 ;;		Nothing
  2927 ;; This function is called by:
  2928 ;;		_eserial_receive
  2929 ;;		_espi_slave_receive
  2930 ;;		_espi_master_receive
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text24
  2935  001B46                     __ptext24:
  2936                           	opt stack 0
  2937  001B46                     _buffer_push:
  2938                           	opt stack 29
  2939                           
  2940                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  2941                           
  2942                           ;incstack = 0
  2943  001B46  EE20 F001          	lfsr	2,1
  2944  001B4A  5001               	movf	buffer_push@buffer,w,c
  2945  001B4C  26D9               	addwf	fsr2l,f,c
  2946  001B4E  5002               	movf	buffer_push@buffer+1,w,c
  2947  001B50  22DA               	addwfc	fsr2h,f,c
  2948  001B52  0E20               	movlw	32
  2949  001B54  18DE               	xorwf	postinc2,w,c
  2950  001B56  B4D8               	btfsc	status,2,c
  2951  001B58  0012               	return	
  2952  001B5A  D001               	goto	l1839
  2953                           
  2954                           ;circular_buffer.c: 27: return 0;
  2955                           ;	Return value of _buffer_push is never used
  2956  001B5C  0012               	return	
  2957  001B5E                     l1839:
  2958                           
  2959                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  2960                           ;circular_buffer.c: 30: & (0x20 - 1);
  2961  001B5E  EE20 F001          	lfsr	2,1
  2962  001B62  5001               	movf	buffer_push@buffer,w,c
  2963  001B64  26D9               	addwf	fsr2l,f,c
  2964  001B66  5002               	movf	buffer_push@buffer+1,w,c
  2965  001B68  22DA               	addwfc	fsr2h,f,c
  2966  001B6A  50DF               	movf	indf2,w,c
  2967  001B6C  6E04               	movwf	??_buffer_push& (0+255),c
  2968  001B6E  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  2969  001B72  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  2970  001B76  50DF               	movf	indf2,w,c
  2971  001B78  2404               	addwf	??_buffer_push,w,c
  2972  001B7A  0B1F               	andlw	31
  2973  001B7C  6E05               	movwf	buffer_push@current_position,c
  2974                           
  2975                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  2976  001B7E  5005               	movf	buffer_push@current_position,w,c
  2977  001B80  0D01               	mullw	1
  2978  001B82  0E02               	movlw	2
  2979  001B84  26F3               	addwf	prodl,f,c
  2980  001B86  0E00               	movlw	0
  2981  001B88  22F4               	addwfc	prodh,f,c
  2982  001B8A  50F3               	movf	prodl,w,c
  2983  001B8C  2401               	addwf	buffer_push@buffer,w,c
  2984  001B8E  6ED9               	movwf	fsr2l,c
  2985  001B90  50F4               	movf	prodh,w,c
  2986  001B92  2002               	addwfc	buffer_push@buffer+1,w,c
  2987  001B94  6EDA               	movwf	fsr2h,c
  2988  001B96  C003  FFDF         	movff	buffer_push@byte,indf2
  2989                           
  2990                           ;circular_buffer.c: 32: buffer->count++;
  2991  001B9A  EE20 F001          	lfsr	2,1
  2992  001B9E  5001               	movf	buffer_push@buffer,w,c
  2993  001BA0  26D9               	addwf	fsr2l,f,c
  2994  001BA2  5002               	movf	buffer_push@buffer+1,w,c
  2995  001BA4  22DA               	addwfc	fsr2h,f,c
  2996  001BA6  2ADF               	incf	indf2,f,c
  2997  001BA8  0012               	return	
  2998                           
  2999                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  3000                           ;	Return value of _buffer_push is never used
  3001  001BAA  0012               	return		;funcret
  3002  001BAC                     __end_of_buffer_push:
  3003                           	opt stack 0
  3004                           tosu	equ	0xFFF
  3005                           tosh	equ	0xFFE
  3006                           tosl	equ	0xFFD
  3007                           pclath	equ	0xFFA
  3008                           tblptru	equ	0xFF8
  3009                           prodh	equ	0xFF4
  3010                           prodl	equ	0xFF3
  3011                           intcon2	equ	0xFF1
  3012                           intcon3	equ	0xFF0
  3013                           postinc0	equ	0xFEE
  3014                           wreg	equ	0xFE8
  3015                           plusw1	equ	0xFE3
  3016                           indf2	equ	0xFDF
  3017                           postinc2	equ	0xFDE
  3018                           postdec2	equ	0xFDD
  3019                           plusw2	equ	0xFDB
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _buffer_empty *****************
  3025 ;; Defined at:
  3026 ;;		line 14 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3029 ;;		 -> main@pic_to_pic(34), 
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;		None
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      unsigned char 
  3034 ;; Registers used:
  3035 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0
  3041 ;;      Params:         2       0
  3042 ;;      Locals:         0       0
  3043 ;;      Temps:          0       0
  3044 ;;      Totals:         2       0
  3045 ;;Total ram usage:        2 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		_eserial_receive
  3051 ;;		_espi_master_receive
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text25
  3056  0018B4                     __ptext25:
  3057                           	opt stack 0
  3058  0018B4                     _buffer_empty:
  3059                           	opt stack 29
  3060                           
  3061                           ;circular_buffer.c: 16: return (buffer->count == 0) ? 1 : 0;
  3062                           
  3063                           ;incstack = 0
  3064  0018B4  EE20 F001          	lfsr	2,1
  3065  0018B8  5001               	movf	buffer_empty@buffer,w,c
  3066  0018BA  26D9               	addwf	fsr2l,f,c
  3067  0018BC  5002               	movf	buffer_empty@buffer+1,w,c
  3068  0018BE  22DA               	addwfc	fsr2h,f,c
  3069  0018C0  50DF               	movf	indf2,w,c
  3070  0018C2  A4D8               	btfss	status,2,c
  3071  0018C4  D002               	goto	u1390
  3072  0018C6  0E01               	movlw	1
  3073  0018C8  0012               	return	
  3074  0018CA                     u1390:
  3075  0018CA  0E00               	movlw	0
  3076  0018CC  0012               	return	
  3077  0018CE  0012               	return		;funcret
  3078  0018D0                     __end_of_buffer_empty:
  3079                           	opt stack 0
  3080  0000                     tosu	equ	0xFFF
  3081                           tosh	equ	0xFFE
  3082                           tosl	equ	0xFFD
  3083                           pclath	equ	0xFFA
  3084                           tblptru	equ	0xFF8
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           intcon2	equ	0xFF1
  3088                           intcon3	equ	0xFF0
  3089                           postinc0	equ	0xFEE
  3090                           wreg	equ	0xFE8
  3091                           plusw1	equ	0xFE3
  3092                           indf2	equ	0xFDF
  3093                           postinc2	equ	0xFDE
  3094                           postdec2	equ	0xFDD
  3095                           plusw2	equ	0xFDB
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           tosu	equ	0xFFF
  3100                           tosh	equ	0xFFE
  3101                           tosl	equ	0xFFD
  3102                           pclath	equ	0xFFA
  3103                           tblptru	equ	0xFF8
  3104                           prodh	equ	0xFF4
  3105                           prodl	equ	0xFF3
  3106                           intcon2	equ	0xFF1
  3107                           intcon3	equ	0xFF0
  3108                           postinc0	equ	0xFEE
  3109                           wreg	equ	0xFE8
  3110                           plusw1	equ	0xFE3
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           plusw2	equ	0xFDB
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119                           	psect	text26
  3120  000000                     __ptext26:
  3121                           	opt stack 0
  3122                           tosu	equ	0xFFF
  3123                           tosh	equ	0xFFE
  3124                           tosl	equ	0xFFD
  3125                           pclath	equ	0xFFA
  3126                           tblptru	equ	0xFF8
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon2	equ	0xFF1
  3130                           intcon3	equ	0xFF0
  3131                           postinc0	equ	0xFEE
  3132                           wreg	equ	0xFE8
  3133                           plusw1	equ	0xFE3
  3134                           indf2	equ	0xFDF
  3135                           postinc2	equ	0xFDE
  3136                           postdec2	equ	0xFDD
  3137                           plusw2	equ	0xFDB
  3138                           fsr2h	equ	0xFDA
  3139                           fsr2l	equ	0xFD9
  3140                           status	equ	0xFD8
  3141                           
  3142                           	psect	rparam
  3143  0000                     tosu	equ	0xFFF
  3144                           tosh	equ	0xFFE
  3145                           tosl	equ	0xFFD
  3146                           pclath	equ	0xFFA
  3147                           tblptru	equ	0xFF8
  3148                           prodh	equ	0xFF4
  3149                           prodl	equ	0xFF3
  3150                           intcon2	equ	0xFF1
  3151                           intcon3	equ	0xFF0
  3152                           postinc0	equ	0xFEE
  3153                           wreg	equ	0xFE8
  3154                           plusw1	equ	0xFE3
  3155                           indf2	equ	0xFDF
  3156                           postinc2	equ	0xFDE
  3157                           postdec2	equ	0xFDD
  3158                           plusw2	equ	0xFDB
  3159                           fsr2h	equ	0xFDA
  3160                           fsr2l	equ	0xFD9
  3161                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     87      88
    BANK0           160      0      68

Pointer List with Targets:

    espi_slave_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    espi_slave_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    spi_slave_peek_receive@byte	PTR int  size(2) Largest target is 2
		 -> main@value_102(COMRAM[2]), NULL(NULL[0]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_empty@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    eserial_receive@timer_up	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    eserial_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    eserial_receive@stop_function	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> return_false(), 

    eserial_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    eserial_send_data@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    serial_send_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_load_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_disable_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    S141interrupt_serial$data	PTR unsigned char  size(2) Largest target is 0

    serial_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_peek_receive@byte	PTR unsigned char  size(2) Largest target is 1
		 -> eserial_receive@value(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_eserial_receive
    _main->_espi_slave_send
    _espi_slave_send->_buffer_peek
    _espi_slave_send->_buffer_pop
    _espi_slave_send->_encode_data
    _espi_slave_receive->_buffer_push
    _espi_slave_receive->_decode_data
    _espi_setup->_setup_spi
    _eserial_setup->_setup_simple_serial
    _eserial_send_data->_buffer_pop
    _return_false->_spi_slave_peek_receive
    _spi_slave_peek_receive->_spi_slave_get_byte

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                71    71      0    7986
                                             17 COMRAM    70    70      0
                    _eserial_receive
                  _eserial_send_data
                      _eserial_setup
                         _espi_setup
                 _espi_slave_receive
                    _espi_slave_send
                       _setup_timer3
             _spi_slave_peek_receive
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _espi_slave_send                                     11     9      2    2140
                                              6 COMRAM    11     9      2
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                  _spi_send_get_byte
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     516
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     281
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_slave_receive                                   5     3      2    1995
                                              5 COMRAM     5     3      2
                        _buffer_push
                       _buffer_space
                        _decode_data
                  _spi_send_get_byte
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (2) _spi_send_get_byte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _eserial_setup                                        3     1      2     308
                                              7 COMRAM     3     1      2
                _setup_simple_serial
 ---------------------------------------------------------------------------------
 (2) _setup_simple_serial                                  7     5      2     200
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _eserial_send_data                                    5     3      2     595
                                              6 COMRAM     5     3      2
                         _buffer_pop
                   _serial_send_byte
 ---------------------------------------------------------------------------------
 (2) _serial_send_byte                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     411
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _eserial_receive                                     11     3      8    2360
                                              6 COMRAM    11     3      8
                       _buffer_empty
                        _buffer_push
                       _buffer_space
                       _return_false *
                _serial_peek_receive
                         _set_timer3 *
                          _timer3_up *
 ---------------------------------------------------------------------------------
 (2) _timer3_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _set_timer3                                           2     0      2      65
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _serial_peek_receive                                  3     1      2     236
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _return_false                                         0     0      0     196
             _spi_slave_peek_receive
 ---------------------------------------------------------------------------------
 (1) _spi_slave_peek_receive                               3     1      2     196
                                              3 COMRAM     3     1      2
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (2) _spi_slave_get_byte                                   3     1      2      24
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     278
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     801
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _buffer_empty                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eserial_receive
     _buffer_empty
     _buffer_push
     _buffer_space
     _return_false *
       _spi_slave_peek_receive
         _spi_slave_get_byte
     _serial_peek_receive *
     _set_timer3 *
     _timer3_up *
   _eserial_send_data
     _buffer_pop
     _serial_send_byte
   _eserial_setup
     _setup_simple_serial
   _espi_setup
     _setup_spi
   _espi_slave_receive
     _buffer_push
     _buffer_space
     _decode_data
     _spi_send_get_byte
     _spi_slave_get_byte
   _espi_slave_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _spi_send_get_byte
   _setup_timer3
   _spi_slave_peek_receive
     _spi_slave_get_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      44       4       42.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     57      58       1       92.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C       5        0.0%
DATA                 0      0      9C       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Aug 05 12:29:55 2015

                  _espi_slave_send 1EA6                        _SSPSTATbits 000FC7  
                               l31 1D68             eserial_send_data@value 000A  
               _espi_slave_receive 1C26            ?_spi_slave_peek_receive 0004  
          eserial_send_data@buffer 0007                                l106 1844  
                              l203 1E3A                                l306 1A1E  
                              l314 187A                                l308 1A0A  
                              l309 1A1A                                l424 1962  
                              l361 18EE                                l426 195A  
                              l443 1FF2                                l364 1902  
                              tosl 000FFD                                wreg 000FE8  
                     __CFG_FOSC$HS 000000                ?_espi_slave_receive 0006  
                     __CFG_LVP$OFF 000000                               l2005 1C2C  
                             l2015 1C56                               l2025 1C80  
                             l2043 1A5C                               l2037 1A3E  
                             l2029 1CA6                               l2067 1D50  
                             l2059 1D00                               l1741 1996  
                             l1821 1BC4                               l1813 19CA  
                             l1745 199C                               l1921 1DD6  
                             l1761 1A82                               l1809 19BA  
                             l1923 1DDA                               l1915 1D9A  
                             l1839 1B5E                               l1935 1E5C  
                             l1927 1E00                               l1919 1DC0  
                             l1767 1A96                               l1759 1A78  
                             l1785 1928                               l1929 1E1C  
                             l1769 1AA0                               l1961 1F20  
                             l1939 1E82                               l1859 1B0C  
                             l1971 1F5C                               l1963 1F2E  
                             l1789 192E        __size_of_spi_slave_get_byte 001E  
                             l1977 1F8A                               l1989 1FDA  
                             l1999 1FEA                               u1300 19A4  
                             u1430 183A                               u1390 18CA  
                             u1618 1E86                               u1619 1E9A  
                             u1568 1E04                               u1569 1E18  
                             u1921 1CCA                               u1931 1CDC  
                             u1598 1E48                               _RCIE 007CED  
                             _RCIF 007CF5             __size_of_eserial_setup 001C  
                             _TMR0 000FD6                               _TMR3 000FB2  
                             _TXIE 007CEC                               _TXIF 007CF4  
                             _main 1CC0                               fsr2h 000FDA  
                             indf2 000FDF                               fsr2l 000FD9  
                             prodh 000FF4                               prodl 000FF3  
                             start 0000              spi_send_get_byte@byte 0001  
                   ??_buffer_count 0003                     ??_buffer_empty 0003  
                   ??_buffer_space 0003               ??_espi_slave_receive 0008  
                     ___param_bank 000010               eserial_receive@value 0011  
             setup_spi@SSPCON1_reg 0001     __end_of_spi_slave_peek_receive 19AA  
                            ?_main 0001                              _T0CON 000FD5  
                            _T3CON 000FB1                              _RCREG 000FAE  
                            _RCSTA 000FAB                              _SPBRG 000FAF  
                            _TXREG 000FAD                              _TXSTA 000FAC  
             __size_of_decode_data 003C                              pclath 000FFA  
             serial_send_byte@byte 0001                              plusw1 000FE3  
                            plusw2 000FDB                              status 000FD8  
          __end_of_espi_slave_send 2000               setup_spi@SSPSTAT_reg 0002  
                 buffer_pop@buffer 0001                    __initialization 189C  
                     __end_of_main 1D7A              eserial_receive@buffer 0007  
                    _eserial_setup 18D0                             ??_main 0012  
                _spi_send_get_byte 1872                      __activetblptr 000002  
               ?_spi_send_get_byte 0001                  buffer_peek@buffer 0001  
                  encode_data@data 0006       espi_slave_receive@received_1 0009  
     espi_slave_receive@received_2 000A           __size_of_eserial_receive 012C  
              ??_spi_send_get_byte 0001                             _INT2IF 007F81  
                           _INTCON 000FF2                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9           __end_of_serial_send_byte 184E  
                  decode_data@data 0001                      main@pic_to_pc 0014  
             __size_of_encode_data 0046                     ?_eserial_setup 0008  
             __size_of_buffer_peek 0052               __size_of_buffer_push 0066  
        __end_of_spi_send_get_byte 1886                             clear_0 18A2  
                    main@value_102 0012        __end_of_setup_simple_serial 1AAE  
             __end_of_buffer_count 1872               __end_of_buffer_empty 18D0  
                  set_timer3@value 0001                             tblptru 000FF8  
            setup_timer3@T3CON_reg 0001               __end_of_buffer_space 189C  
                       __accesstop 0060            __end_of__initialization 18AA  
                 ?_espi_slave_send 0007                      ___rparam_used 000001  
     __size_of_serial_peek_receive 002E                     __pcstackCOMRAM 0001  
               buffer_count@buffer 0001           espi_slave_receive@buffer 0006  
                   buffer_pop@byte 0005       eserial_receive@stop_function 0009  
                _eserial_send_data 1A24                 ?_eserial_send_data 0007  
               buffer_empty@buffer 0001                         __pbssBANK0 0060  
              ??_eserial_send_data 0009            serial_peek_receive@byte 0001  
                ??_eserial_receive 000F                    ??_eserial_setup 000A  
       __size_of_spi_send_get_byte 0014                            _BAUDCON 000FB8  
        __end_of_eserial_send_data 1A68                  buffer_push@buffer 0001  
               __size_of_timer3_up 000E                 __size_of_setup_spi 003E  
       __end_of_spi_slave_get_byte 190A                         _buffer_pop 1BAC  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
           spi_slave_get_byte@byte 0003                     main@pic_to_pic 0036  
   spi_slave_peek_receive@get_byte 0006                            __Hparam 0000  
                          __Lparam 0000        __size_of_espi_slave_receive 009A  
                       _espi_setup 1938                         _dummy_byte 0058  
                          __pcinit 189C                          _ANSELbits 000F7E  
                          __ramtop 0100              __size_of_buffer_count 0012  
            __size_of_buffer_empty 001C                            __ptext0 1CC0  
                          __ptext1 181E                            __ptext2 1EA6  
                          __ptext3 1AAE                            __ptext4 1AF4  
                          __ptext5 1860                            __ptext6 1C26  
                          __ptext7 1872                            __ptext8 19AA  
                          __ptext9 1938              __size_of_buffer_space 0016  
                    ??_decode_data 0005              espi_slave_send@buffer 0007  
            espi_slave_send@byte_1 000C              espi_slave_send@byte_2 000D  
             end_of_initialization 18AA                      __Lmediumconst 0000  
                __end_of_timer3_up 1840                  ?_serial_send_byte 0001  
                     _buffer_count 1860                       _buffer_empty 18B4  
                __end_of_setup_spi 1A24                 ??_serial_send_byte 0001  
                     _buffer_space 1886                          _RCSTAbits 000FAB  
                       _set_timer3 1826                            postdec2 000FDD  
                    ?_return_false 0001          espi_slave_send@received_1 000E  
        espi_slave_send@received_2 0010                            postinc0 000FEE  
                          postinc2 000FDE         eserial_setup@baudrate_bits 000A  
       __size_of_eserial_send_data 0044                _serial_peek_receive 190A  
                    ?_setup_timer3 0001                          _TRISAbits 000F92  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                      ?_buffer_pop 0001                __end_of_decode_data 19E6  
                    ??_encode_data 0005               ?_serial_peek_receive 0001  
                    ??_buffer_peek 0003                      ??_buffer_push 0004  
         ??_spi_slave_peek_receive 0006                     ??_return_false 0007  
              eserial_receive@test 0010                        ?_espi_setup 0001  
                  buffer_peek@byte 0005                     espi_setup@mode 0003  
                   ??_setup_timer3 0001                start_initialization 189C  
                  _eserial_receive 1D7A       __size_of_setup_simple_serial 0046  
       eserial_receive@timer_start 000B                 buffer_space@buffer 0001  
            ??_serial_peek_receive 0003                    buffer_push@byte 0003  
          eserial_receive@timer_up 000D                __end_of_encode_data 1AF4  
                      ?_set_timer3 0001                __size_of_buffer_pop 007A  
         __size_of_espi_slave_send 015A                __end_of_buffer_peek 1B46  
              __end_of_buffer_push 1BAC                        _decode_data 19AA  
                      __pbssCOMRAM 0058            espi_slave_receive@value 0008  
              __size_of_espi_setup 0038                 _spi_slave_get_byte 18EC  
  __size_of_spi_slave_peek_receive 003A              __end_of_eserial_setup 18EC  
              ?_spi_slave_get_byte 0001        serial_peek_receive@get_byte 0003  
                encode_data@byte_1 0001                  encode_data@byte_2 0003  
          __end_of_eserial_receive 1EA6   setup_simple_serial@baudrate_bits 0007  
             __end_of_return_false 1860               ??_spi_slave_get_byte 0003  
              __size_of_set_timer3 000C                           _LATAbits 000F89  
                         _LATCbits 000F8B                        _encode_data 1AAE  
       __end_of_espi_slave_receive 1CC0                           _PIE2bits 000FA0  
             __end_of_setup_timer3 1826                           _PIR2bits 000FA1  
                      _buffer_peek 1AF4                        _buffer_push 1B46  
                        _timer3_up 1832                          main@F4057 0060  
                        main@F4059 0082                          _setup_spi 19E6  
        __size_of_serial_send_byte 000E                  ??_espi_slave_send 0009  
           _spi_slave_peek_receive 1970                       ??_buffer_pop 0003  
       spi_slave_peek_receive@byte 0004                  decode_data@byte_1 0003  
                decode_data@byte_2 0004                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                           __Hrparam 0000  
                         __Lrparam 0000                         ?_timer3_up 0001  
                     ??_espi_setup 0003                 __end_of_buffer_pop 1C26  
                       ?_setup_spi 0001                 eserial_send_data@i 0009  
              _setup_simple_serial 1A68                   ?_eserial_receive 0007  
                       _ANSELHbits 000F7F                           __ptext10 19E6  
                         __ptext11 18D0                           __ptext20 184E  
                         __ptext12 1A68                           __ptext21 1970  
                         __ptext13 1A24                           __ptext22 18EC  
                         __ptext14 1840                           __ptext23 1886  
                         __ptext15 1BAC                           __ptext24 1B46  
                         __ptext16 1D7A                           __ptext25 18B4  
                         __ptext17 1832                           __ptext26 0000  
                         __ptext18 1826                           __ptext19 190A  
             ?_setup_simple_serial 0001                 __end_of_espi_setup 1970  
                    __size_of_main 00BA                       ??_set_timer3 0003  
            __size_of_return_false 0012                         _INTCONbits 000FF2  
                     ?_decode_data 0001        __end_of_serial_peek_receive 1938  
            ??_setup_simple_serial 0003                 __end_of_set_timer3 1832  
            __size_of_setup_timer3 0008                        ??_timer3_up 0001  
                     _return_false 184E                        ??_setup_spi 0002  
                 _serial_send_byte 1840                       _setup_timer3 181E  
      buffer_push@current_position 0005                        _SSPCON1bits 000FC6  
      eserial_setup@baudrate_value 0008                       ?_encode_data 0001  
setup_simple_serial@baudrate_value 0001        espi_slave_send@byte_to_send 000A  
                    ?_buffer_count 0001                      ?_buffer_empty 0001  
                     ?_buffer_peek 0001                      ?_buffer_space 0001  
                     ?_buffer_push 0001            _setup_simple_serial$215 0003  
          _setup_simple_serial$216 0005  
