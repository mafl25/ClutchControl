

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Jul 31 21:41:58 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    32  0000                     
    33 ;; Function _set_timer3 is unused but had its address taken
    34  0000                     
    35 ;; Function _timer3_up is unused but had its address taken
    36  0000                     
    37                           	psect	idataBANK0
    38  001A34                     __pidataBANK0:
    39                           	opt stack 0
    40                           
    41                           ;initializer for main@F4048
    42  001A34  55                 	db	85
    43  001A35  55                 	db	85
    44  001A36  55                 	db	85
    45  001A37  55                 	db	85
    46  001A38  55                 	db	85
    47  001A39  00                 	db	0
    48  0000                     _TMR3	set	4018
    49  0000                     _ANSELHbits	set	3967
    50  0000                     _ANSELbits	set	3966
    51  0000                     _BAUDCON	set	4024
    52  0000                     _INTCON	set	4082
    53  0000                     _INTCON2bits	set	4081
    54  0000                     _INTCON3bits	set	4080
    55  0000                     _LATAbits	set	3977
    56  0000                     _LATCbits	set	3979
    57  0000                     _PIE2bits	set	4000
    58  0000                     _PIR2bits	set	4001
    59  0000                     _PORTCbits	set	3970
    60  0000                     _RCREG	set	4014
    61  0000                     _RCSTA	set	4011
    62  0000                     _RCSTAbits	set	4011
    63  0000                     _SPBRG	set	4015
    64  0000                     _SPBRGH	set	4016
    65  0000                     _SSPBUF	set	4041
    66  0000                     _SSPCON1	set	4038
    67  0000                     _SSPCON1bits	set	4038
    68  0000                     _SSPSTAT	set	4039
    69  0000                     _SSPSTATbits	set	4039
    70  0000                     _T3CON	set	4017
    71  0000                     _TRISAbits	set	3986
    72  0000                     _TRISBbits	set	3987
    73  0000                     _TRISCbits	set	3988
    74  0000                     _TXREG	set	4013
    75  0000                     _TXSTA	set	4012
    76  0000                     _INT2IF	set	32641
    77  0000                     _RCIE	set	31981
    78  0000                     _RCIF	set	31989
    79  0000                     _TXIE	set	31980
    80  0000                     _TXIF	set	31988
    81                           
    82                           ; #config settings
    83  0000                     
    84                           	psect	cinit
    85  001AE2                     __pcinit:
    86                           	opt stack 0
    87  001AE2                     start_initialization:
    88                           	opt stack 0
    89  001AE2                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to BANK0 (69 bytes)
    93  001AE2  EE00  F060         	lfsr	0,__pbssBANK0
    94  001AE6  0E45               	movlw	69
    95  001AE8                     clear_0:
    96  001AE8  6AEE               	clrf	postinc0,c
    97  001AEA  06E8               	decf	wreg,f,c
    98  001AEC  E1FD               	bnz	clear_0
    99                           
   100                           ; Initialize objects allocated to BANK0 (6 bytes)
   101                           ; load TBLPTR registers with __pidataBANK0
   102  001AEE  0E34               	movlw	low __pidataBANK0
   103  001AF0  6EF6               	movwf	tblptrl,c
   104  001AF2  0E1A               	movlw	high __pidataBANK0
   105  001AF4  6EF7               	movwf	tblptrh,c
   106  001AF6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   107  001AF8  6EF8               	movwf	tblptru,c
   108  001AFA  EE00  F0A5         	lfsr	0,__pdataBANK0
   109  001AFE  EE10 F006          	lfsr	1,6
   110  001B02                     copy_data0:
   111  001B02  0009               	tblrd		*+
   112  001B04  CFF5 FFEE          	movff	tablat,postinc0
   113  001B08  50E5               	movf	postdec1,w,c
   114  001B0A  50E1               	movf	fsr1l,w,c
   115  001B0C  E1FA               	bnz	copy_data0
   116  001B0E                     end_of_initialization:
   117                           	opt stack 0
   118  001B0E                     __end_of__initialization:
   119                           	opt stack 0
   120  001B0E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   121  001B10  6EF8               	movwf	tblptru,c
   122  001B12  0100               	movlb	0
   123  001B14  EF77  F00F         	goto	_main	;jump to C main() function
   124                           tblptru	equ	0xFF8
   125                           tblptrh	equ	0xFF7
   126                           tblptrl	equ	0xFF6
   127                           tablat	equ	0xFF5
   128                           postinc0	equ	0xFEE
   129                           wreg	equ	0xFE8
   130                           postdec1	equ	0xFE5
   131                           fsr1l	equ	0xFE1
   132                           
   133                           	psect	bssBANK0
   134  000060                     __pbssBANK0:
   135                           	opt stack 0
   136  000060                     main@F4043:
   137                           	opt stack 0
   138  000060                     	ds	34
   139  000082                     main@F4045:
   140                           	opt stack 0
   141  000082                     	ds	34
   142  0000A4                     _dummy_byte:
   143                           	opt stack 0
   144  0000A4                     	ds	1
   145                           tblptru	equ	0xFF8
   146                           tblptrh	equ	0xFF7
   147                           tblptrl	equ	0xFF6
   148                           tablat	equ	0xFF5
   149                           postinc0	equ	0xFEE
   150                           wreg	equ	0xFE8
   151                           postdec1	equ	0xFE5
   152                           fsr1l	equ	0xFE1
   153                           
   154                           	psect	dataBANK0
   155  0000A5                     __pdataBANK0:
   156                           	opt stack 0
   157  0000A5                     main@F4048:
   158                           	opt stack 0
   159  0000A5                     	ds	6
   160                           tblptru	equ	0xFF8
   161                           tblptrh	equ	0xFF7
   162                           tblptrl	equ	0xFF6
   163                           tablat	equ	0xFF5
   164                           postinc0	equ	0xFEE
   165                           wreg	equ	0xFE8
   166                           postdec1	equ	0xFE5
   167                           fsr1l	equ	0xFE1
   168                           
   169                           	psect	cstackCOMRAM
   170  000001                     __pcstackCOMRAM:
   171                           	opt stack 0
   172  000001                     ?_buffer_pop:
   173                           	opt stack 0
   174  000001                     ?_spi_slave_get_byte:
   175                           	opt stack 0
   176  000001                     serial_send_byte@byte:
   177                           	opt stack 0
   178  000001                     setup_timer3@T3CON_reg:
   179                           	opt stack 0
   180  000001                     setup_spi@SSPCON1_reg:
   181                           	opt stack 0
   182  000001                     spi_send_get_byte@byte:
   183                           	opt stack 0
   184  000001                     setup_simple_serial@baudrate_value:
   185                           	opt stack 0
   186  000001                     encode_data@byte_1:
   187                           	opt stack 0
   188  000001                     decode_data@data:
   189                           	opt stack 0
   190  000001                     buffer_count@buffer:
   191                           	opt stack 0
   192  000001                     buffer_space@buffer:
   193                           	opt stack 0
   194  000001                     buffer_empty@buffer:
   195                           	opt stack 0
   196  000001                     buffer_push@buffer:
   197                           	opt stack 0
   198  000001                     buffer_pop@buffer:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x0
   202  000001                     	ds	1
   203  000002                     setup_spi@SSPSTAT_reg:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x1
   207  000002                     	ds	1
   208  000003                     ??_buffer_pop:
   209  000003                     decode_data@byte_1:
   210                           	opt stack 0
   211  000003                     buffer_push@byte:
   212                           	opt stack 0
   213  000003                     spi_slave_get_byte@byte:
   214                           	opt stack 0
   215  000003                     espi_setup@mode:
   216                           	opt stack 0
   217  000003                     _setup_simple_serial$226:
   218                           	opt stack 0
   219  000003                     encode_data@byte_2:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x2
   223  000003                     	ds	1
   224  000004                     ??_buffer_push:
   225  000004                     decode_data@byte_2:
   226                           	opt stack 0
   227  000004                     spi_slave_peek_receive@byte:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x3
   231  000004                     	ds	1
   232  000005                     ??_encode_data:
   233  000005                     ??_decode_data:
   234  000005                     buffer_push@current_position:
   235                           	opt stack 0
   236  000005                     _setup_simple_serial$227:
   237                           	opt stack 0
   238  000005                     buffer_pop@byte:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x4
   242  000005                     	ds	1
   243  000006                     encode_data@data:
   244                           	opt stack 0
   245  000006                     spi_slave_peek_receive@get_byte:
   246                           	opt stack 0
   247  000006                     espi_slave_receive@buffer:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x5
   251  000006                     	ds	1
   252  000007                     setup_simple_serial@baudrate_bits:
   253                           	opt stack 0
   254  000007                     eserial_send_data@buffer:
   255                           	opt stack 0
   256  000007                     espi_slave_send@buffer:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x6
   260  000007                     	ds	1
   261  000008                     eserial_setup@baudrate_value:
   262                           	opt stack 0
   263  000008                     espi_slave_receive@timer_start:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x7
   267  000008                     	ds	1
   268  000009                     ??_espi_slave_send:
   269  000009                     eserial_send_data@i:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x8
   273  000009                     	ds	1
   274  00000A                     eserial_setup@baudrate_bits:
   275                           	opt stack 0
   276  00000A                     eserial_send_data@value:
   277                           	opt stack 0
   278  00000A                     espi_slave_receive@timer_up:
   279                           	opt stack 0
   280  00000A                     espi_slave_send@received_1:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x9
   284  00000A                     	ds	2
   285  00000C                     ??_espi_slave_receive:
   286  00000C                     espi_slave_send@received_2:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0xB
   290  00000C                     	ds	1
   291  00000D                     espi_slave_receive@value:
   292                           	opt stack 0
   293                           
   294                           ; 1 bytes @ 0xC
   295  00000D                     	ds	1
   296  00000E                     espi_slave_receive@received_1:
   297                           	opt stack 0
   298  00000E                     espi_slave_send@byte_to_send:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0xD
   302  00000E                     	ds	1
   303  00000F                     espi_slave_receive@received_2:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0xE
   307  00000F                     	ds	1
   308  000010                     espi_slave_send@byte_1:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0xF
   312  000010                     	ds	1
   313  000011                     espi_slave_send@byte_2:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x10
   317  000011                     	ds	1
   318  000012                     main@wat:
   319                           	opt stack 0
   320                           
   321                           ; 6 bytes @ 0x11
   322  000012                     	ds	6
   323  000018                     main@i:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x17
   327  000018                     	ds	2
   328  00001A                     main@value_113:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x19
   332  00001A                     	ds	2
   333  00001C                     main@pic_to_pic:
   334                           	opt stack 0
   335                           
   336                           ; 34 bytes @ 0x1B
   337  00001C                     	ds	34
   338  00003E                     main@pic_to_pc:
   339                           	opt stack 0
   340                           
   341                           ; 34 bytes @ 0x3D
   342  00003E                     	ds	34
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           postinc0	equ	0xFEE
   348                           wreg	equ	0xFE8
   349                           postdec1	equ	0xFE5
   350                           fsr1l	equ	0xFE1
   351                           
   352 ;;
   353 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   354 ;;
   355 ;; *************** function _main *****************
   356 ;; Defined at:
   357 ;;		line 27 in file "main.c"
   358 ;; Parameters:    Size  Location     Type
   359 ;;		None
   360 ;; Auto vars:     Size  Location     Type
   361 ;;  value           2   25[COMRAM] int 
   362 ;;  i               2   23[COMRAM] int 
   363 ;;  pic_to_pc      34   61[COMRAM] struct circular_buffer
   364 ;;  pic_to_pic     34   27[COMRAM] struct circular_buffer
   365 ;;  wat             6   17[COMRAM] unsigned char [6]
   366 ;;  value           1    0        unsigned char 
   367 ;; Return value:  Size  Location     Type
   368 ;;                  2   29[None  ] int 
   369 ;; Registers used:
   370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMRAM   BANK0
   376 ;;      Params:         0       0
   377 ;;      Locals:        78       0
   378 ;;      Temps:          0       0
   379 ;;      Totals:        78       0
   380 ;;Total ram usage:       78 bytes
   381 ;; Hardware stack levels required when called:    2
   382 ;; This function calls:
   383 ;;		_buffer_empty
   384 ;;		_buffer_push
   385 ;;		_eserial_send_data
   386 ;;		_eserial_setup
   387 ;;		_espi_setup
   388 ;;		_espi_slave_receive
   389 ;;		_espi_slave_send
   390 ;;		_serial_send_byte
   391 ;;		_setup_timer3
   392 ;;		_spi_slave_peek_receive
   393 ;; This function is called by:
   394 ;;		Startup code after reset
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           	psect	text0
   399  001EEE                     __ptext0:
   400                           	opt stack 0
   401  001EEE                     _main:
   402                           	opt stack 29
   403                           
   404                           ;main.c: 29: struct circular_buffer pic_to_pic = {0, 0, {0}};
   405                           
   406                           ;incstack = 0
   407  001EEE  EE20  F060         	lfsr	2,main@F4043
   408  001EF2  EE10  F01C         	lfsr	1,main@pic_to_pic
   409  001EF6  0E21               	movlw	33
   410  001EF8                     u1231:
   411  001EF8  CFDB FFE3          	movff	plusw2,plusw1
   412  001EFC  06E8               	decf	wreg,f,c
   413  001EFE  E2FC               	bc	u1231
   414                           
   415                           ;main.c: 30: struct circular_buffer pic_to_pc = {0, 0, {0}};
   416  001F00  EE20  F082         	lfsr	2,main@F4045
   417  001F04  EE10  F03E         	lfsr	1,main@pic_to_pc
   418  001F08  0E21               	movlw	33
   419  001F0A                     u1241:
   420  001F0A  CFDB FFE3          	movff	plusw2,plusw1
   421  001F0E  06E8               	decf	wreg,f,c
   422  001F10  E2FC               	bc	u1241
   423                           
   424                           ;main.c: 32: espi_setup(0x05);
   425  001F12  0E05               	movlw	5
   426  001F14  EC8C  F00D         	call	_espi_setup
   427                           
   428                           ;main.c: 33: eserial_setup(0x08 | 0x04, 0x2A);
   429  001F18  0E00               	movlw	0
   430  001F1A  6E09               	movwf	eserial_setup@baudrate_value+1,c
   431  001F1C  0E2A               	movlw	42
   432  001F1E  6E08               	movwf	eserial_setup@baudrate_value,c
   433  001F20  0E0C               	movlw	12
   434  001F22  EC54  F00D         	call	_eserial_setup
   435                           
   436                           ;main.c: 34: setup_timer3(0x80 | 0x00 | 0x01);
   437  001F26  0E81               	movlw	129
   438  001F28  EC1D  F00D         	call	_setup_timer3
   439                           
   440                           ;main.c: 36: uint8_t value;
   441                           ;main.c: 37: char wat[] = "UUUUU";
   442  001F2C  EE20  F0A5         	lfsr	2,main@F4048
   443  001F30  EE10  F012         	lfsr	1,main@wat
   444  001F34  0E05               	movlw	5
   445  001F36                     u1251:
   446  001F36  CFDB FFE3          	movff	plusw2,plusw1
   447  001F3A  06E8               	decf	wreg,f,c
   448  001F3C  E2FC               	bc	u1251
   449  001F3E  D000               	goto	l1781
   450  001F40                     l1781:
   451                           
   452                           ;main.c: 41: int i;
   453                           ;main.c: 43: if (buffer_empty(&pic_to_pc))
   454  001F40  0E3E               	movlw	low main@pic_to_pc
   455  001F42  6E01               	movwf	buffer_empty@buffer,c
   456  001F44  0E00               	movlw	high main@pic_to_pc
   457  001F46  6E02               	movwf	buffer_empty@buffer+1,c
   458  001F48  EC46  F00D         	call	_buffer_empty	;wreg free
   459  001F4C  0900               	iorlw	0
   460  001F4E  B4D8               	btfsc	status,2,c
   461  001F50  D021               	goto	l1791
   462                           
   463                           ;main.c: 44: for (i = 0; wat[i] != 0; i++)
   464  001F52  0E00               	movlw	0
   465  001F54  6E19               	movwf	main@i+1,c
   466  001F56  0E00               	movlw	0
   467  001F58  6E18               	movwf	main@i,c
   468  001F5A  D011               	goto	l1789
   469  001F5C                     l1785:
   470                           
   471                           ;main.c: 45: buffer_push(&pic_to_pc, wat[i]);
   472  001F5C  0E3E               	movlw	low main@pic_to_pc
   473  001F5E  6E01               	movwf	buffer_push@buffer,c
   474  001F60  0E00               	movlw	high main@pic_to_pc
   475  001F62  6E02               	movwf	buffer_push@buffer+1,c
   476  001F64  0E12               	movlw	low main@wat
   477  001F66  2418               	addwf	main@i,w,c
   478  001F68  6ED9               	movwf	fsr2l,c
   479  001F6A  0E00               	movlw	high main@wat
   480  001F6C  2019               	addwfc	main@i+1,w,c
   481  001F6E  6EDA               	movwf	fsr2h,c
   482  001F70  50DF               	movf	indf2,w,c
   483  001F72  6E03               	movwf	buffer_push@byte,c
   484  001F74  EC6A  F00E         	call	_buffer_push	;wreg free
   485  001F78  4A18               	infsnz	main@i,f,c
   486  001F7A  2A19               	incf	main@i+1,f,c
   487  001F7C  D000               	goto	l1789
   488  001F7E                     l1789:
   489  001F7E  0E12               	movlw	low main@wat
   490  001F80  2418               	addwf	main@i,w,c
   491  001F82  6ED9               	movwf	fsr2l,c
   492  001F84  0E00               	movlw	high main@wat
   493  001F86  2019               	addwfc	main@i+1,w,c
   494  001F88  6EDA               	movwf	fsr2h,c
   495  001F8A  50DF               	movf	indf2,w,c
   496  001F8C  B4D8               	btfsc	status,2,c
   497  001F8E  D002               	goto	l1791
   498  001F90  D7E5               	goto	l1785
   499  001F92  D000               	goto	l1791
   500  001F94                     l1791:
   501                           
   502                           ;main.c: 47: int16_t value;
   503                           ;main.c: 48: if (spi_slave_peek_receive(1, &value)) {
   504  001F94  0E1A               	movlw	low main@value_113
   505  001F96  6E04               	movwf	spi_slave_peek_receive@byte,c
   506  001F98  0E00               	movlw	high main@value_113
   507  001F9A  6E05               	movwf	spi_slave_peek_receive@byte+1,c
   508  001F9C  0E01               	movlw	1
   509  001F9E  ECA8  F00D         	call	_spi_slave_peek_receive
   510  001FA2  0900               	iorlw	0
   511  001FA4  B4D8               	btfsc	status,2,c
   512  001FA6  D023               	goto	l41
   513                           
   514                           ;main.c: 49: serial_send_byte(value);
   515  001FA8  501A               	movf	main@value_113,w,c
   516  001FAA  EC21  F00D         	call	_serial_send_byte
   517                           
   518                           ;main.c: 50: if (value == 0x20)
   519  001FAE  0E20               	movlw	32
   520  001FB0  181A               	xorwf	main@value_113,w,c
   521  001FB2  101B               	iorwf	main@value_113+1,w,c
   522  001FB4  A4D8               	btfss	status,2,c
   523  001FB6  D007               	goto	l1799
   524                           
   525                           ;main.c: 51: espi_slave_send(&pic_to_pc);
   526  001FB8  0E3E               	movlw	low main@pic_to_pc
   527  001FBA  6E07               	movwf	espi_slave_send@buffer,c
   528  001FBC  0E00               	movlw	high main@pic_to_pc
   529  001FBE  6E08               	movwf	espi_slave_send@buffer+1,c
   530  001FC0  EC10  F00F         	call	_espi_slave_send	;wreg free
   531  001FC4  D014               	goto	l41
   532  001FC6                     l1799:
   533                           
   534                           ;main.c: 52: else if (value == 0x10)
   535  001FC6  0E10               	movlw	16
   536  001FC8  181A               	xorwf	main@value_113,w,c
   537  001FCA  101B               	iorwf	main@value_113+1,w,c
   538  001FCC  A4D8               	btfss	status,2,c
   539  001FCE  D00F               	goto	l41
   540                           
   541                           ;main.c: 53: espi_slave_receive(&pic_to_pic, &set_timer3, &timer3_up);
   542  001FD0  0E1C               	movlw	low main@pic_to_pic
   543  001FD2  6E06               	movwf	espi_slave_receive@buffer,c
   544  001FD4  0E00               	movlw	high main@pic_to_pic
   545  001FD6  6E07               	movwf	espi_slave_receive@buffer+1,c
   546  001FD8  0E00               	movlw	0
   547  001FDA  6E08               	movwf	espi_slave_receive@timer_start,c
   548  001FDC  0E00               	movlw	0
   549  001FDE  6E09               	movwf	espi_slave_receive@timer_start+1,c
   550  001FE0  0E00               	movlw	0
   551  001FE2  6E0A               	movwf	espi_slave_receive@timer_up,c
   552  001FE4  0E00               	movlw	0
   553  001FE6  6E0B               	movwf	espi_slave_receive@timer_up+1,c
   554  001FE8  ECCE  F00E         	call	_espi_slave_receive	;wreg free
   555  001FEC  D000               	goto	l41
   556  001FEE                     l41:
   557                           
   558                           ;main.c: 54: }
   559                           ;main.c: 55: eserial_send_data(&pic_to_pic);
   560  001FEE  0E1C               	movlw	low main@pic_to_pic
   561  001FF0  6E07               	movwf	eserial_send_data@buffer,c
   562  001FF2  0E00               	movlw	high main@pic_to_pic
   563  001FF4  6E08               	movwf	eserial_send_data@buffer+1,c
   564  001FF6  EC02  F00E         	call	_eserial_send_data	;wreg free
   565  001FFA  D7A2               	goto	l1781
   566                           
   567                           ;main.c: 60: }
   568                           ;main.c: 62: return (0);
   569                           ;	Return value of _main is never used
   570  001FFC  EF00  F000         	goto	start
   571  002000                     __end_of_main:
   572                           	opt stack 0
   573                           tblptru	equ	0xFF8
   574                           tblptrh	equ	0xFF7
   575                           tblptrl	equ	0xFF6
   576                           tablat	equ	0xFF5
   577                           postinc0	equ	0xFEE
   578                           wreg	equ	0xFE8
   579                           postdec1	equ	0xFE5
   580                           plusw1	equ	0xFE3
   581                           fsr1l	equ	0xFE1
   582                           indf2	equ	0xFDF
   583                           plusw2	equ	0xFDB
   584                           fsr2h	equ	0xFDA
   585                           fsr2l	equ	0xFD9
   586                           status	equ	0xFD8
   587                           
   588 ;; *************** function _spi_slave_peek_receive *****************
   589 ;; Defined at:
   590 ;;		line 42 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;  get_byte        1    wreg     unsigned char 
   593 ;;  byte            2    3[COMRAM] PTR int 
   594 ;;		 -> main@value_113(2), 
   595 ;; Auto vars:     Size  Location     Type
   596 ;;  get_byte        1    5[COMRAM] unsigned char 
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      unsigned char 
   599 ;; Registers used:
   600 ;;		wreg, fsr2l, fsr2h, status,2, cstack
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMRAM   BANK0
   606 ;;      Params:         2       0
   607 ;;      Locals:         1       0
   608 ;;      Temps:          0       0
   609 ;;      Totals:         3       0
   610 ;;Total ram usage:        3 bytes
   611 ;; Hardware stack levels used:    1
   612 ;; Hardware stack levels required when called:    1
   613 ;; This function calls:
   614 ;;		_spi_slave_get_byte
   615 ;; This function is called by:
   616 ;;		_main
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           	psect	text1
   621  001B50                     __ptext1:
   622                           	opt stack 0
   623  001B50                     _spi_slave_peek_receive:
   624                           	opt stack 29
   625                           
   626                           ;incstack = 0
   627                           ;spi_slave_peek_receive@get_byte stored from wreg
   628  001B50  6E06               	movwf	spi_slave_peek_receive@get_byte,c
   629                           
   630                           ;spi_pic.c: 44: if (get_byte) {
   631  001B52  5006               	movf	spi_slave_peek_receive@get_byte,w,c
   632  001B54  B4D8               	btfsc	status,2,c
   633  001B56  D012               	goto	l1691
   634                           
   635                           ;spi_pic.c: 45: if (SSPSTATbits.BF) {
   636  001B58  A0C7               	btfss	4039,0,c	;volatile
   637  001B5A  D00D               	goto	l1687
   638                           
   639                           ;spi_pic.c: 46: *byte = spi_slave_get_byte();
   640  001B5C  EC62  F00D         	call	_spi_slave_get_byte	;wreg free
   641  001B60  C004  FFD9         	movff	spi_slave_peek_receive@byte,fsr2l
   642  001B64  C005  FFDA         	movff	spi_slave_peek_receive@byte+1,fsr2h
   643  001B68  C001  FFDE         	movff	?_spi_slave_get_byte,postinc2
   644  001B6C  C002  FFDD         	movff	?_spi_slave_get_byte+1,postdec2
   645                           
   646                           ;spi_pic.c: 47: return 1;
   647  001B70  0E01               	movlw	1
   648  001B72  0012               	return	
   649                           
   650                           ;spi_pic.c: 48: } else {
   651  001B74  D003               	goto	l1691
   652  001B76                     l1687:
   653                           
   654                           ;spi_pic.c: 49: return 0;
   655  001B76  0E00               	movlw	0
   656  001B78  0012               	return	
   657  001B7A  D000               	goto	l1691
   658  001B7C                     l1691:
   659                           
   660                           ;spi_pic.c: 50: }
   661                           ;spi_pic.c: 51: }
   662                           ;spi_pic.c: 53: return (SSPSTATbits.BF) ? 1 : 0;
   663  001B7C  A0C7               	btfss	4039,0,c	;volatile
   664  001B7E  D002               	goto	u1110
   665  001B80  0E01               	movlw	1
   666  001B82  0012               	return	
   667  001B84                     u1110:
   668  001B84  0E00               	movlw	0
   669  001B86  0012               	return	
   670  001B88  0012               	return		;funcret
   671  001B8A                     __end_of_spi_slave_peek_receive:
   672                           	opt stack 0
   673                           tblptru	equ	0xFF8
   674                           tblptrh	equ	0xFF7
   675                           tblptrl	equ	0xFF6
   676                           tablat	equ	0xFF5
   677                           postinc0	equ	0xFEE
   678                           wreg	equ	0xFE8
   679                           postdec1	equ	0xFE5
   680                           plusw1	equ	0xFE3
   681                           fsr1l	equ	0xFE1
   682                           indf2	equ	0xFDF
   683                           postinc2	equ	0xFDE
   684                           postdec2	equ	0xFDD
   685                           plusw2	equ	0xFDB
   686                           fsr2h	equ	0xFDA
   687                           fsr2l	equ	0xFD9
   688                           status	equ	0xFD8
   689                           
   690 ;; *************** function _setup_timer3 *****************
   691 ;; Defined at:
   692 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;  T3CON_reg       1    wreg     unsigned char 
   695 ;; Auto vars:     Size  Location     Type
   696 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   697 ;; Return value:  Size  Location     Type
   698 ;;		None               void
   699 ;; Registers used:
   700 ;;		wreg
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMRAM   BANK0
   706 ;;      Params:         0       0
   707 ;;      Locals:         1       0
   708 ;;      Temps:          0       0
   709 ;;      Totals:         1       0
   710 ;;Total ram usage:        1 bytes
   711 ;; Hardware stack levels used:    1
   712 ;; This function calls:
   713 ;;		Nothing
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           	psect	text2
   720  001A3A                     __ptext2:
   721                           	opt stack 0
   722  001A3A                     _setup_timer3:
   723                           	opt stack 30
   724                           
   725                           ;incstack = 0
   726                           ;setup_timer3@T3CON_reg stored from wreg
   727  001A3A  6E01               	movwf	setup_timer3@T3CON_reg,c
   728                           
   729                           ;timers_pic.c: 5: T3CON = T3CON_reg;
   730  001A3C  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   731  001A40  0012               	return		;funcret
   732  001A42                     __end_of_setup_timer3:
   733                           	opt stack 0
   734                           tblptru	equ	0xFF8
   735                           tblptrh	equ	0xFF7
   736                           tblptrl	equ	0xFF6
   737                           tablat	equ	0xFF5
   738                           postinc0	equ	0xFEE
   739                           wreg	equ	0xFE8
   740                           postdec1	equ	0xFE5
   741                           plusw1	equ	0xFE3
   742                           fsr1l	equ	0xFE1
   743                           indf2	equ	0xFDF
   744                           postinc2	equ	0xFDE
   745                           postdec2	equ	0xFDD
   746                           plusw2	equ	0xFDB
   747                           fsr2h	equ	0xFDA
   748                           fsr2l	equ	0xFD9
   749                           status	equ	0xFD8
   750                           
   751 ;; *************** function _espi_slave_send *****************
   752 ;; Defined at:
   753 ;;		line 79 in file "extended_spi.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
   756 ;;		 -> main@pic_to_pc(34), 
   757 ;; Auto vars:     Size  Location     Type
   758 ;;  byte_to_send    2   13[COMRAM] unsigned int 
   759 ;;  received_2      2   11[COMRAM] int 
   760 ;;  received_1      2    9[COMRAM] int 
   761 ;;  byte_2          1   16[COMRAM] unsigned char 
   762 ;;  byte_1          1   15[COMRAM] unsigned char 
   763 ;; Return value:  Size  Location     Type
   764 ;;		None               void
   765 ;; Registers used:
   766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0
   772 ;;      Params:         2       0
   773 ;;      Locals:         8       0
   774 ;;      Temps:          1       0
   775 ;;      Totals:        11       0
   776 ;;Total ram usage:       11 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:    1
   779 ;; This function calls:
   780 ;;		_buffer_count
   781 ;;		_buffer_pop
   782 ;;		_encode_data
   783 ;;		_spi_send_get_byte
   784 ;; This function is called by:
   785 ;;		_main
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789                           	psect	text3
   790  001E20                     __ptext3:
   791                           	opt stack 0
   792  001E20                     _espi_slave_send:
   793                           	opt stack 29
   794                           
   795                           ;extended_spi.c: 81: if (buffer_count(buffer)) {
   796                           
   797                           ;incstack = 0
   798  001E20  C007  F001         	movff	espi_slave_send@buffer,buffer_count@buffer
   799  001E24  C008  F002         	movff	espi_slave_send@buffer+1,buffer_count@buffer+1
   800  001E28  EC28  F00D         	call	_buffer_count	;wreg free
   801  001E2C  0900               	iorlw	0
   802  001E2E  B4D8               	btfsc	status,2,c
   803  001E30  0012               	return	
   804                           
   805                           ;extended_spi.c: 82: uint16_t byte_to_send = buffer_pop(buffer);
   806  001E32  C007  F001         	movff	espi_slave_send@buffer,buffer_pop@buffer
   807  001E36  C008  F002         	movff	espi_slave_send@buffer+1,buffer_pop@buffer+1
   808  001E3A  EC91  F00E         	call	_buffer_pop	;wreg free
   809  001E3E  C001  F00E         	movff	?_buffer_pop,espi_slave_send@byte_to_send
   810  001E42  C002  F00F         	movff	?_buffer_pop+1,espi_slave_send@byte_to_send+1
   811                           
   812                           ;extended_spi.c: 83: uint8_t byte_1;
   813                           ;extended_spi.c: 84: uint8_t byte_2;
   814                           ;extended_spi.c: 86: encode_data(byte_to_send, &byte_1, &byte_2);
   815  001E46  0E10               	movlw	low espi_slave_send@byte_1
   816  001E48  6E01               	movwf	encode_data@byte_1,c
   817  001E4A  0E00               	movlw	high espi_slave_send@byte_1
   818  001E4C  6E02               	movwf	encode_data@byte_1+1,c
   819  001E4E  0E11               	movlw	low espi_slave_send@byte_2
   820  001E50  6E03               	movwf	encode_data@byte_2,c
   821  001E52  0E00               	movlw	high espi_slave_send@byte_2
   822  001E54  6E04               	movwf	encode_data@byte_2+1,c
   823  001E56  500E               	movf	espi_slave_send@byte_to_send,w,c
   824  001E58  EC47  F00E         	call	_encode_data
   825                           
   826                           ;extended_spi.c: 88: LATAbits.LATA2 = 1;
   827  001E5C  8489               	bsf	3977,2,c	;volatile
   828                           
   829                           ;extended_spi.c: 89: LATAbits.LATA2 = 0;
   830  001E5E  9489               	bcf	3977,2,c	;volatile
   831                           
   832                           ;extended_spi.c: 91: int16_t received_1 = spi_send_get_byte(byte_1);
   833  001E60  5010               	movf	espi_slave_send@byte_1,w,c
   834  001E62  EC31  F00D         	call	_spi_send_get_byte
   835  001E66  6E09               	movwf	??_espi_slave_send& (0+255),c
   836  001E68  5009               	movf	??_espi_slave_send,w,c
   837  001E6A  6E0A               	movwf	espi_slave_send@received_1,c
   838  001E6C  6A0B               	clrf	espi_slave_send@received_1+1,c
   839                           
   840                           ;extended_spi.c: 92: int16_t received_2 = spi_send_get_byte(byte_2);
   841  001E6E  5011               	movf	espi_slave_send@byte_2,w,c
   842  001E70  EC31  F00D         	call	_spi_send_get_byte
   843  001E74  D026               	goto	L1
   844  001E76                     l1709:
   845                           
   846                           ;extended_spi.c: 94: byte_to_send = buffer_pop(buffer);
   847  001E76  C007  F001         	movff	espi_slave_send@buffer,buffer_pop@buffer
   848  001E7A  C008  F002         	movff	espi_slave_send@buffer+1,buffer_pop@buffer+1
   849  001E7E  EC91  F00E         	call	_buffer_pop	;wreg free
   850  001E82  C001  F00E         	movff	?_buffer_pop,espi_slave_send@byte_to_send
   851  001E86  C002  F00F         	movff	?_buffer_pop+1,espi_slave_send@byte_to_send+1
   852                           
   853                           ;extended_spi.c: 95: if (byte_to_send == -1)
   854  001E8A  280E               	incf	espi_slave_send@byte_to_send,w,c
   855  001E8C  E105               	bnz	l1715
   856  001E8E  280F               	incf	espi_slave_send@byte_to_send+1,w,c
   857  001E90  B4D8               	btfsc	status,2,c
   858  001E92  D028               	goto	l1725
   859  001E94  D001               	goto	l1715
   860                           
   861                           ;extended_spi.c: 96: break;
   862  001E96  D026               	goto	l1725
   863  001E98                     l1715:
   864                           
   865                           ;extended_spi.c: 97: encode_data(byte_to_send, &byte_1, &byte_2);
   866  001E98  0E10               	movlw	low espi_slave_send@byte_1
   867  001E9A  6E01               	movwf	encode_data@byte_1,c
   868  001E9C  0E00               	movlw	high espi_slave_send@byte_1
   869  001E9E  6E02               	movwf	encode_data@byte_1+1,c
   870  001EA0  0E11               	movlw	low espi_slave_send@byte_2
   871  001EA2  6E03               	movwf	encode_data@byte_2,c
   872  001EA4  0E00               	movlw	high espi_slave_send@byte_2
   873  001EA6  6E04               	movwf	encode_data@byte_2+1,c
   874  001EA8  500E               	movf	espi_slave_send@byte_to_send,w,c
   875  001EAA  EC47  F00E         	call	_encode_data
   876                           
   877                           ;extended_spi.c: 98: received_1 = spi_send_get_byte(byte_1);
   878  001EAE  5010               	movf	espi_slave_send@byte_1,w,c
   879  001EB0  EC31  F00D         	call	_spi_send_get_byte
   880  001EB4  6E09               	movwf	??_espi_slave_send& (0+255),c
   881  001EB6  5009               	movf	??_espi_slave_send,w,c
   882  001EB8  6E0A               	movwf	espi_slave_send@received_1,c
   883  001EBA  6A0B               	clrf	espi_slave_send@received_1+1,c
   884                           
   885                           ;extended_spi.c: 99: received_2 = spi_send_get_byte(byte_2);
   886  001EBC  5011               	movf	espi_slave_send@byte_2,w,c
   887  001EBE  EC31  F00D         	call	_spi_send_get_byte
   888  001EC2                     L1:
   889  001EC2  6E09               	movwf	??_espi_slave_send& (0+255),c
   890  001EC4  5009               	movf	??_espi_slave_send,w,c
   891  001EC6  6E0C               	movwf	espi_slave_send@received_2,c
   892  001EC8  6A0D               	clrf	espi_slave_send@received_2+1,c
   893  001ECA  D000               	goto	l1721
   894  001ECC                     l1721:
   895  001ECC  0E30               	movlw	48
   896  001ECE  180A               	xorwf	espi_slave_send@received_1,w,c
   897  001ED0  100B               	iorwf	espi_slave_send@received_1+1,w,c
   898  001ED2  B4D8               	btfsc	status,2,c
   899  001ED4  D007               	goto	l1725
   900  001ED6  0E30               	movlw	48
   901  001ED8  180C               	xorwf	espi_slave_send@received_2,w,c
   902  001EDA  100D               	iorwf	espi_slave_send@received_2+1,w,c
   903  001EDC  B4D8               	btfsc	status,2,c
   904  001EDE  D002               	goto	l1725
   905  001EE0  D7CA               	goto	l1709
   906  001EE2  D000               	goto	l1725
   907  001EE4                     l1725:
   908                           
   909                           ;extended_spi.c: 100: }
   910                           ;extended_spi.c: 102: spi_send_get_byte(0x30);
   911  001EE4  0E30               	movlw	48
   912  001EE6  EC31  F00D         	call	_spi_send_get_byte
   913  001EEA  0012               	return	
   914  001EEC  0012               	return		;funcret
   915  001EEE                     __end_of_espi_slave_send:
   916                           	opt stack 0
   917                           tblptru	equ	0xFF8
   918                           tblptrh	equ	0xFF7
   919                           tblptrl	equ	0xFF6
   920                           tablat	equ	0xFF5
   921                           postinc0	equ	0xFEE
   922                           wreg	equ	0xFE8
   923                           postdec1	equ	0xFE5
   924                           plusw1	equ	0xFE3
   925                           fsr1l	equ	0xFE1
   926                           indf2	equ	0xFDF
   927                           postinc2	equ	0xFDE
   928                           postdec2	equ	0xFDD
   929                           plusw2	equ	0xFDB
   930                           fsr2h	equ	0xFDA
   931                           fsr2l	equ	0xFD9
   932                           status	equ	0xFD8
   933                           
   934 ;; *************** function _encode_data *****************
   935 ;; Defined at:
   936 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;  data            1    wreg     unsigned char 
   939 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
   940 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
   941 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
   942 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
   943 ;; Auto vars:     Size  Location     Type
   944 ;;  data            1    5[COMRAM] unsigned char 
   945 ;; Return value:  Size  Location     Type
   946 ;;		None               void
   947 ;; Registers used:
   948 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0
   954 ;;      Params:         4       0
   955 ;;      Locals:         1       0
   956 ;;      Temps:          1       0
   957 ;;      Totals:         6       0
   958 ;;Total ram usage:        6 bytes
   959 ;; Hardware stack levels used:    1
   960 ;; This function calls:
   961 ;;		Nothing
   962 ;; This function is called by:
   963 ;;		_espi_slave_send
   964 ;;		_espi_master_send
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           	psect	text4
   969  001C8E                     __ptext4:
   970                           	opt stack 0
   971  001C8E                     _encode_data:
   972                           	opt stack 29
   973                           
   974                           ;incstack = 0
   975                           ;encode_data@data stored from wreg
   976  001C8E  6E06               	movwf	encode_data@data,c
   977                           
   978                           ;encoding.c: 5: *byte_1 = 0xA0;
   979  001C90  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   980  001C94  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   981  001C98  0EA0               	movlw	160
   982  001C9A  6EDF               	movwf	indf2,c
   983                           
   984                           ;encoding.c: 6: *byte_2 = 0xA0;
   985  001C9C  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   986  001CA0  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   987  001CA4  0EA0               	movlw	160
   988  001CA6  6EDF               	movwf	indf2,c
   989                           
   990                           ;encoding.c: 8: *byte_1 |= data >> 4;
   991  001CA8  C006  F005         	movff	encode_data@data,??_encode_data
   992  001CAC  3A05               	swapf	??_encode_data,f,c
   993  001CAE  0E0F               	movlw	15
   994  001CB0  1605               	andwf	??_encode_data,f,c
   995  001CB2  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   996  001CB6  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   997  001CBA  5005               	movf	??_encode_data,w,c
   998  001CBC  12DF               	iorwf	indf2,f,c
   999                           
  1000                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
  1001  001CBE  C006  F005         	movff	encode_data@data,??_encode_data
  1002  001CC2  0E0F               	movlw	15
  1003  001CC4  1605               	andwf	??_encode_data,f,c
  1004  001CC6  C003  FFD9         	movff	encode_data@byte_2,fsr2l
  1005  001CCA  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
  1006  001CCE  5005               	movf	??_encode_data,w,c
  1007  001CD0  12DF               	iorwf	indf2,f,c
  1008  001CD2  0012               	return		;funcret
  1009  001CD4                     __end_of_encode_data:
  1010                           	opt stack 0
  1011                           tblptru	equ	0xFF8
  1012                           tblptrh	equ	0xFF7
  1013                           tblptrl	equ	0xFF6
  1014                           tablat	equ	0xFF5
  1015                           postinc0	equ	0xFEE
  1016                           wreg	equ	0xFE8
  1017                           postdec1	equ	0xFE5
  1018                           plusw1	equ	0xFE3
  1019                           fsr1l	equ	0xFE1
  1020                           indf2	equ	0xFDF
  1021                           postinc2	equ	0xFDE
  1022                           postdec2	equ	0xFDD
  1023                           plusw2	equ	0xFDB
  1024                           fsr2h	equ	0xFDA
  1025                           fsr2l	equ	0xFD9
  1026                           status	equ	0xFD8
  1027                           
  1028 ;; *************** function _buffer_count *****************
  1029 ;; Defined at:
  1030 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1033 ;;		 -> main@pic_to_pc(34), 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      unsigned char 
  1038 ;; Registers used:
  1039 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0
  1045 ;;      Params:         2       0
  1046 ;;      Locals:         0       0
  1047 ;;      Temps:          0       0
  1048 ;;      Totals:         2       0
  1049 ;;Total ram usage:        2 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; This function calls:
  1052 ;;		Nothing
  1053 ;; This function is called by:
  1054 ;;		_espi_slave_send
  1055 ;;		_espi_master_send
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           	psect	text5
  1060  001A50                     __ptext5:
  1061                           	opt stack 0
  1062  001A50                     _buffer_count:
  1063                           	opt stack 29
  1064                           
  1065                           ;circular_buffer.c: 6: return buffer->count;
  1066                           
  1067                           ;incstack = 0
  1068  001A50  EE20 F001          	lfsr	2,1
  1069  001A54  5001               	movf	buffer_count@buffer,w,c
  1070  001A56  26D9               	addwf	fsr2l,f,c
  1071  001A58  5002               	movf	buffer_count@buffer+1,w,c
  1072  001A5A  22DA               	addwfc	fsr2h,f,c
  1073  001A5C  50DF               	movf	indf2,w,c
  1074  001A5E  0012               	return	
  1075  001A60  0012               	return		;funcret
  1076  001A62                     __end_of_buffer_count:
  1077                           	opt stack 0
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           tblptrl	equ	0xFF6
  1081                           tablat	equ	0xFF5
  1082                           postinc0	equ	0xFEE
  1083                           wreg	equ	0xFE8
  1084                           postdec1	equ	0xFE5
  1085                           plusw1	equ	0xFE3
  1086                           fsr1l	equ	0xFE1
  1087                           indf2	equ	0xFDF
  1088                           postinc2	equ	0xFDE
  1089                           postdec2	equ	0xFDD
  1090                           plusw2	equ	0xFDB
  1091                           fsr2h	equ	0xFDA
  1092                           fsr2l	equ	0xFD9
  1093                           status	equ	0xFD8
  1094                           
  1095 ;; *************** function _espi_slave_receive *****************
  1096 ;; Defined at:
  1097 ;;		line 51 in file "extended_spi.c"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;  buffer          2    5[COMRAM] PTR struct circular_buff
  1100 ;;		 -> main@pic_to_pic(34), 
  1101 ;;  timer_start     2    7[COMRAM] PTR FTN(int ,)void 
  1102 ;;		 -> set_timer3(0), 
  1103 ;;  timer_up        2    9[COMRAM] PTR FTN()unsigned char 
  1104 ;;		 -> timer3_up(1), 
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;  received_2      1   14[COMRAM] char 
  1107 ;;  received_1      1   13[COMRAM] char 
  1108 ;;  value           1   12[COMRAM] unsigned char 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;		None               void
  1111 ;; Registers used:
  1112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0
  1118 ;;      Params:         6       0
  1119 ;;      Locals:         3       0
  1120 ;;      Temps:          1       0
  1121 ;;      Totals:        10       0
  1122 ;;Total ram usage:       10 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    1
  1125 ;; This function calls:
  1126 ;;		_buffer_push
  1127 ;;		_buffer_space
  1128 ;;		_decode_data
  1129 ;;		_spi_send_get_byte
  1130 ;;		_spi_slave_get_byte
  1131 ;; This function is called by:
  1132 ;;		_main
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text6
  1137  001D9C                     __ptext6:
  1138                           	opt stack 0
  1139  001D9C                     _espi_slave_receive:
  1140                           	opt stack 29
  1141                           
  1142                           ;extended_spi.c: 55: uint8_t value;
  1143                           ;extended_spi.c: 56: int8_t received_1;
  1144                           ;extended_spi.c: 57: int8_t received_2;
  1145                           ;extended_spi.c: 59: LATAbits.LATA2 = 1;
  1146                           
  1147                           ;incstack = 0
  1148  001D9C  8489               	bsf	3977,2,c	;volatile
  1149                           
  1150                           ;extended_spi.c: 60: LATAbits.LATA2 = 0;
  1151  001D9E  9489               	bcf	3977,2,c	;volatile
  1152                           
  1153                           ;extended_spi.c: 62: while (buffer_space(buffer) > 5) {
  1154  001DA0  D027               	goto	l1745
  1155  001DA2                     l1729:
  1156                           
  1157                           ;extended_spi.c: 63: received_1 = spi_slave_get_byte();
  1158  001DA2  EC62  F00D         	call	_spi_slave_get_byte	;wreg free
  1159  001DA6  5001               	movf	?_spi_slave_get_byte,w,c
  1160  001DA8  6E0E               	movwf	espi_slave_receive@received_1,c
  1161                           
  1162                           ;extended_spi.c: 64: if (received_1 == 0x30)
  1163  001DAA  0E30               	movlw	48
  1164  001DAC  180E               	xorwf	espi_slave_receive@received_1,w,c
  1165  001DAE  B4D8               	btfsc	status,2,c
  1166  001DB0  D02A               	goto	l1747
  1167  001DB2  D001               	goto	l1735
  1168                           
  1169                           ;extended_spi.c: 65: break;
  1170  001DB4  D028               	goto	l1747
  1171  001DB6                     l1735:
  1172                           
  1173                           ;extended_spi.c: 67: received_2 = spi_slave_get_byte();
  1174  001DB6  EC62  F00D         	call	_spi_slave_get_byte	;wreg free
  1175  001DBA  5001               	movf	?_spi_slave_get_byte,w,c
  1176  001DBC  6E0F               	movwf	espi_slave_receive@received_2,c
  1177                           
  1178                           ;extended_spi.c: 68: if (received_2 == 0x30)
  1179  001DBE  0E30               	movlw	48
  1180  001DC0  180F               	xorwf	espi_slave_receive@received_2,w,c
  1181  001DC2  B4D8               	btfsc	status,2,c
  1182  001DC4  D020               	goto	l1747
  1183  001DC6  D001               	goto	l1741
  1184                           
  1185                           ;extended_spi.c: 69: break;
  1186  001DC8  D01E               	goto	l1747
  1187  001DCA                     l1741:
  1188                           
  1189                           ;extended_spi.c: 71: decode_data( &value, (uint8_t)received_1, (uint8_t)received_2);
  1190  001DCA  0E0D               	movlw	low espi_slave_receive@value
  1191  001DCC  6E01               	movwf	decode_data@data,c
  1192  001DCE  0E00               	movlw	high espi_slave_receive@value
  1193  001DD0  6E02               	movwf	decode_data@data+1,c
  1194  001DD2  C00E  F003         	movff	espi_slave_receive@received_1,decode_data@byte_1
  1195  001DD6  C00F  F004         	movff	espi_slave_receive@received_2,decode_data@byte_2
  1196  001DDA  ECC5  F00D         	call	_decode_data	;wreg free
  1197                           
  1198                           ;extended_spi.c: 72: buffer_push(buffer, value);
  1199  001DDE  C006  F001         	movff	espi_slave_receive@buffer,buffer_push@buffer
  1200  001DE2  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_push@buffer+1
  1201  001DE6  C00D  F003         	movff	espi_slave_receive@value,buffer_push@byte
  1202  001DEA  EC6A  F00E         	call	_buffer_push	;wreg free
  1203  001DEE  D000               	goto	l1745
  1204  001DF0                     l1745:
  1205  001DF0  C006  F001         	movff	espi_slave_receive@buffer,buffer_space@buffer
  1206  001DF4  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_space@buffer+1
  1207  001DF8  EC3B  F00D         	call	_buffer_space	;wreg free
  1208  001DFC  6E0C               	movwf	??_espi_slave_receive& (0+255),c
  1209  001DFE  0E06               	movlw	6
  1210  001E00  600C               	cpfslt	??_espi_slave_receive,c
  1211  001E02  D7CF               	goto	l1729
  1212  001E04  D000               	goto	l1747
  1213  001E06                     l1747:
  1214                           
  1215                           ;extended_spi.c: 73: }
  1216                           ;extended_spi.c: 75: if (received_1 != 0x30 && received_2 != 0x30)
  1217  001E06  0E30               	movlw	48
  1218  001E08  180E               	xorwf	espi_slave_receive@received_1,w,c
  1219  001E0A  B4D8               	btfsc	status,2,c
  1220  001E0C  0012               	return	
  1221  001E0E  0E30               	movlw	48
  1222  001E10  180F               	xorwf	espi_slave_receive@received_2,w,c
  1223  001E12  B4D8               	btfsc	status,2,c
  1224  001E14  0012               	return	
  1225                           
  1226                           ;extended_spi.c: 76: spi_send_get_byte(0x30);
  1227  001E16  0E30               	movlw	48
  1228  001E18  EC31  F00D         	call	_spi_send_get_byte
  1229  001E1C  0012               	return	
  1230  001E1E  0012               	return		;funcret
  1231  001E20                     __end_of_espi_slave_receive:
  1232                           	opt stack 0
  1233                           tblptru	equ	0xFF8
  1234                           tblptrh	equ	0xFF7
  1235                           tblptrl	equ	0xFF6
  1236                           tablat	equ	0xFF5
  1237                           postinc0	equ	0xFEE
  1238                           wreg	equ	0xFE8
  1239                           postdec1	equ	0xFE5
  1240                           plusw1	equ	0xFE3
  1241                           fsr1l	equ	0xFE1
  1242                           indf2	equ	0xFDF
  1243                           postinc2	equ	0xFDE
  1244                           postdec2	equ	0xFDD
  1245                           plusw2	equ	0xFDB
  1246                           fsr2h	equ	0xFDA
  1247                           fsr2l	equ	0xFD9
  1248                           status	equ	0xFD8
  1249                           
  1250 ;; *************** function _spi_slave_get_byte *****************
  1251 ;; Defined at:
  1252 ;;		line 111 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1253 ;; Parameters:    Size  Location     Type
  1254 ;;		None
  1255 ;; Auto vars:     Size  Location     Type
  1256 ;;  byte            1    2[COMRAM] unsigned char 
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  2    0[COMRAM] int 
  1259 ;; Registers used:
  1260 ;;		None
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMRAM   BANK0
  1266 ;;      Params:         2       0
  1267 ;;      Locals:         1       0
  1268 ;;      Temps:          0       0
  1269 ;;      Totals:         3       0
  1270 ;;Total ram usage:        3 bytes
  1271 ;; Hardware stack levels used:    1
  1272 ;; This function calls:
  1273 ;;		Nothing
  1274 ;; This function is called by:
  1275 ;;		_spi_slave_peek_receive
  1276 ;;		_espi_slave_receive
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           	psect	text7
  1281  001AC4                     __ptext7:
  1282                           	opt stack 0
  1283  001AC4                     _spi_slave_get_byte:
  1284                           	opt stack 29
  1285                           
  1286                           ;spi_pic.c: 113: while (!SSPSTATbits.BF);
  1287                           
  1288                           ;incstack = 0
  1289  001AC4  D000               	goto	l309
  1290  001AC6                     l309:
  1291  001AC6  A0C7               	btfss	4039,0,c	;volatile
  1292  001AC8  D7FE               	goto	l309
  1293                           
  1294                           ;spi_pic.c: 114: uint8_t byte = SSPBUF;
  1295  001ACA  CFC9 F003          	movff	4041,spi_slave_get_byte@byte	;volatile
  1296                           
  1297                           ;spi_pic.c: 115: SSPBUF = dummy_byte;
  1298  001ACE  C0A4  FFC9         	movff	_dummy_byte,4041	;volatile
  1299                           
  1300                           ;spi_pic.c: 116: if (SSPCON1bits.SSPOV) {
  1301  001AD2  ACC6               	btfss	4038,6,c	;volatile
  1302  001AD4  D002               	goto	l312
  1303                           
  1304                           ;spi_pic.c: 117: SSPCON1bits.SSPOV = 0;
  1305  001AD6  9CC6               	bcf	4038,6,c	;volatile
  1306                           
  1307                           ;spi_pic.c: 118: byte = -1;
  1308  001AD8  6803               	setf	spi_slave_get_byte@byte,c
  1309  001ADA                     l312:
  1310                           
  1311                           ;spi_pic.c: 119: }
  1312                           ;spi_pic.c: 120: return byte;
  1313  001ADA  C003  F001         	movff	spi_slave_get_byte@byte,?_spi_slave_get_byte
  1314  001ADE  6A02               	clrf	?_spi_slave_get_byte+1,c
  1315  001AE0  0012               	return		;funcret
  1316  001AE2                     __end_of_spi_slave_get_byte:
  1317                           	opt stack 0
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           postdec1	equ	0xFE5
  1325                           plusw1	equ	0xFE3
  1326                           fsr1l	equ	0xFE1
  1327                           indf2	equ	0xFDF
  1328                           postinc2	equ	0xFDE
  1329                           postdec2	equ	0xFDD
  1330                           plusw2	equ	0xFDB
  1331                           fsr2h	equ	0xFDA
  1332                           fsr2l	equ	0xFD9
  1333                           status	equ	0xFD8
  1334                           
  1335 ;; *************** function _spi_send_get_byte *****************
  1336 ;; Defined at:
  1337 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  byte            1    wreg     unsigned char 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  byte            1    0[COMRAM] unsigned char 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      unsigned char 
  1344 ;; Registers used:
  1345 ;;		wreg, status,2
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0
  1351 ;;      Params:         0       0
  1352 ;;      Locals:         1       0
  1353 ;;      Temps:          0       0
  1354 ;;      Totals:         1       0
  1355 ;;Total ram usage:        1 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; This function calls:
  1358 ;;		Nothing
  1359 ;; This function is called by:
  1360 ;;		_espi_slave_receive
  1361 ;;		_espi_slave_send
  1362 ;;		_wait_pulse
  1363 ;;		_espi_master_send
  1364 ;;		_espi_master_receive
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text8
  1369  001A62                     __ptext8:
  1370                           	opt stack 0
  1371  001A62                     _spi_send_get_byte:
  1372                           	opt stack 29
  1373                           
  1374                           ;incstack = 0
  1375                           ;spi_send_get_byte@byte stored from wreg
  1376  001A62  6E01               	movwf	spi_send_get_byte@byte,c
  1377                           
  1378                           ;spi_pic.c: 35: SSPBUF = byte;
  1379  001A64  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  1380                           
  1381                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  1382  001A68  D000               	goto	l296
  1383  001A6A                     l296:
  1384  001A6A  A0C7               	btfss	4039,0,c	;volatile
  1385  001A6C  D7FE               	goto	l296
  1386                           
  1387                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  1388  001A6E  BEC6               	btfsc	4038,7,c	;volatile
  1389                           
  1390                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  1391  001A70  9EC6               	bcf	4038,7,c	;volatile
  1392                           
  1393                           ;spi_pic.c: 39: return SSPBUF;
  1394  001A72  50C9               	movf	4041,w,c	;volatile
  1395  001A74  0012               	return		;funcret
  1396  001A76                     __end_of_spi_send_get_byte:
  1397                           	opt stack 0
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           postdec1	equ	0xFE5
  1405                           plusw1	equ	0xFE3
  1406                           fsr1l	equ	0xFE1
  1407                           indf2	equ	0xFDF
  1408                           postinc2	equ	0xFDE
  1409                           postdec2	equ	0xFDD
  1410                           plusw2	equ	0xFDB
  1411                           fsr2h	equ	0xFDA
  1412                           fsr2l	equ	0xFD9
  1413                           status	equ	0xFD8
  1414                           
  1415 ;; *************** function _decode_data *****************
  1416 ;; Defined at:
  1417 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;  data            2    0[COMRAM] PTR unsigned char 
  1420 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  1421 ;;  byte_1          1    2[COMRAM] unsigned char 
  1422 ;;  byte_2          1    3[COMRAM] unsigned char 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      char 
  1427 ;; Registers used:
  1428 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0
  1434 ;;      Params:         4       0
  1435 ;;      Locals:         0       0
  1436 ;;      Temps:          1       0
  1437 ;;      Totals:         5       0
  1438 ;;Total ram usage:        5 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; This function calls:
  1441 ;;		Nothing
  1442 ;; This function is called by:
  1443 ;;		_espi_slave_receive
  1444 ;;		_espi_master_receive
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text9
  1449  001B8A                     __ptext9:
  1450                           	opt stack 0
  1451  001B8A                     _decode_data:
  1452                           	opt stack 29
  1453                           
  1454                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  1455                           
  1456                           ;incstack = 0
  1457  001B8A  5003               	movf	decode_data@byte_1,w,c
  1458  001B8C  0BF0               	andlw	240
  1459  001B8E  0AA0               	xorlw	160
  1460  001B90  A4D8               	btfss	status,2,c
  1461  001B92  0012               	return	
  1462  001B94  D002               	goto	l1601
  1463                           
  1464                           ;encoding.c: 15: return -1;
  1465                           ;	Return value of _decode_data is never used
  1466  001B96  0012               	return	
  1467  001B98  D008               	goto	l1605
  1468  001B9A                     l1601:
  1469                           
  1470                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  1471  001B9A  5004               	movf	decode_data@byte_2,w,c
  1472  001B9C  0BF0               	andlw	240
  1473  001B9E  0AA0               	xorlw	160
  1474  001BA0  A4D8               	btfss	status,2,c
  1475  001BA2  0012               	return	
  1476  001BA4  D002               	goto	l1605
  1477                           
  1478                           ;encoding.c: 17: return -2;
  1479                           ;	Return value of _decode_data is never used
  1480  001BA6  0012               	return	
  1481  001BA8  D000               	goto	l1605
  1482  001BAA                     l1605:
  1483                           
  1484                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  1485  001BAA  C004  F005         	movff	decode_data@byte_2,??_decode_data
  1486  001BAE  0E0F               	movlw	15
  1487  001BB0  1605               	andwf	??_decode_data,f,c
  1488  001BB2  3803               	swapf	decode_data@byte_1,w,c
  1489  001BB4  0BF0               	andlw	240
  1490  001BB6  1005               	iorwf	??_decode_data,w,c
  1491  001BB8  C001  FFD9         	movff	decode_data@data,fsr2l
  1492  001BBC  C002  FFDA         	movff	decode_data@data+1,fsr2h
  1493  001BC0  6EDF               	movwf	indf2,c
  1494  001BC2  0012               	return	
  1495                           
  1496                           ;encoding.c: 21: return 0;
  1497                           ;	Return value of _decode_data is never used
  1498  001BC4  0012               	return		;funcret
  1499  001BC6                     __end_of_decode_data:
  1500                           	opt stack 0
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           plusw1	equ	0xFE3
  1509                           fsr1l	equ	0xFE1
  1510                           indf2	equ	0xFDF
  1511                           postinc2	equ	0xFDE
  1512                           postdec2	equ	0xFDD
  1513                           plusw2	equ	0xFDB
  1514                           fsr2h	equ	0xFDA
  1515                           fsr2l	equ	0xFD9
  1516                           status	equ	0xFD8
  1517                           
  1518 ;; *************** function _buffer_space *****************
  1519 ;; Defined at:
  1520 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1523 ;;		 -> main@pic_to_pic(34), 
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;		None
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      unsigned char 
  1528 ;; Registers used:
  1529 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0
  1535 ;;      Params:         2       0
  1536 ;;      Locals:         0       0
  1537 ;;      Temps:          0       0
  1538 ;;      Totals:         2       0
  1539 ;;Total ram usage:        2 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; This function calls:
  1542 ;;		Nothing
  1543 ;; This function is called by:
  1544 ;;		_espi_slave_receive
  1545 ;;		_eserial_receive
  1546 ;;		_espi_master_receive
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           	psect	text10
  1551  001A76                     __ptext10:
  1552                           	opt stack 0
  1553  001A76                     _buffer_space:
  1554                           	opt stack 29
  1555                           
  1556                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  1557                           
  1558                           ;incstack = 0
  1559  001A76  EE20 F001          	lfsr	2,1
  1560  001A7A  5001               	movf	buffer_space@buffer,w,c
  1561  001A7C  26D9               	addwf	fsr2l,f,c
  1562  001A7E  5002               	movf	buffer_space@buffer+1,w,c
  1563  001A80  22DA               	addwfc	fsr2h,f,c
  1564  001A82  50DF               	movf	indf2,w,c
  1565  001A84  0800               	sublw	0
  1566  001A86  0F20               	addlw	32
  1567  001A88  0012               	return	
  1568  001A8A  0012               	return		;funcret
  1569  001A8C                     __end_of_buffer_space:
  1570                           	opt stack 0
  1571                           tblptru	equ	0xFF8
  1572                           tblptrh	equ	0xFF7
  1573                           tblptrl	equ	0xFF6
  1574                           tablat	equ	0xFF5
  1575                           postinc0	equ	0xFEE
  1576                           wreg	equ	0xFE8
  1577                           postdec1	equ	0xFE5
  1578                           plusw1	equ	0xFE3
  1579                           fsr1l	equ	0xFE1
  1580                           indf2	equ	0xFDF
  1581                           postinc2	equ	0xFDE
  1582                           postdec2	equ	0xFDD
  1583                           plusw2	equ	0xFDB
  1584                           fsr2h	equ	0xFDA
  1585                           fsr2l	equ	0xFD9
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _buffer_push *****************
  1589 ;; Defined at:
  1590 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  1593 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  1594 ;;  byte            1    2[COMRAM] unsigned char 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  current_posi    1    4[COMRAM] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      unsigned char 
  1599 ;; Registers used:
  1600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0
  1606 ;;      Params:         3       0
  1607 ;;      Locals:         1       0
  1608 ;;      Temps:          1       0
  1609 ;;      Totals:         5       0
  1610 ;;Total ram usage:        5 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; This function calls:
  1613 ;;		Nothing
  1614 ;; This function is called by:
  1615 ;;		_main
  1616 ;;		_espi_slave_receive
  1617 ;;		_eserial_receive
  1618 ;;		_espi_master_receive
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text11
  1623  001CD4                     __ptext11:
  1624                           	opt stack 0
  1625  001CD4                     _buffer_push:
  1626                           	opt stack 29
  1627                           
  1628                           ;circular_buffer.c: 26: uint8_t current_position = (buffer->position + buffer->count)
  1629                           ;circular_buffer.c: 27: & (0x20 - 1);
  1630                           
  1631                           ;incstack = 0
  1632  001CD4  EE20 F001          	lfsr	2,1
  1633  001CD8  5001               	movf	buffer_push@buffer,w,c
  1634  001CDA  26D9               	addwf	fsr2l,f,c
  1635  001CDC  5002               	movf	buffer_push@buffer+1,w,c
  1636  001CDE  22DA               	addwfc	fsr2h,f,c
  1637  001CE0  50DF               	movf	indf2,w,c
  1638  001CE2  6E04               	movwf	??_buffer_push& (0+255),c
  1639  001CE4  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  1640  001CE8  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  1641  001CEC  50DF               	movf	indf2,w,c
  1642  001CEE  2404               	addwf	??_buffer_push,w,c
  1643  001CF0  0B1F               	andlw	31
  1644  001CF2  6E05               	movwf	buffer_push@current_position,c
  1645                           
  1646                           ;circular_buffer.c: 28: buffer->data[current_position] = byte;
  1647  001CF4  5005               	movf	buffer_push@current_position,w,c
  1648  001CF6  0D01               	mullw	1
  1649  001CF8  0E02               	movlw	2
  1650  001CFA  26F3               	addwf	prodl,f,c
  1651  001CFC  0E00               	movlw	0
  1652  001CFE  22F4               	addwfc	prodh,f,c
  1653  001D00  50F3               	movf	prodl,w,c
  1654  001D02  2401               	addwf	buffer_push@buffer,w,c
  1655  001D04  6ED9               	movwf	fsr2l,c
  1656  001D06  50F4               	movf	prodh,w,c
  1657  001D08  2002               	addwfc	buffer_push@buffer+1,w,c
  1658  001D0A  6EDA               	movwf	fsr2h,c
  1659  001D0C  C003  FFDF         	movff	buffer_push@byte,indf2
  1660                           
  1661                           ;circular_buffer.c: 29: buffer->count++;
  1662  001D10  EE20 F001          	lfsr	2,1
  1663  001D14  5001               	movf	buffer_push@buffer,w,c
  1664  001D16  26D9               	addwf	fsr2l,f,c
  1665  001D18  5002               	movf	buffer_push@buffer+1,w,c
  1666  001D1A  22DA               	addwfc	fsr2h,f,c
  1667  001D1C  2ADF               	incf	indf2,f,c
  1668                           
  1669                           ;circular_buffer.c: 33: else
  1670                           ;circular_buffer.c: 34: return 1;
  1671                           ;	Return value of _buffer_push is never used
  1672                           
  1673                           ;circular_buffer.c: 32: return 0;
  1674                           ;	Return value of _buffer_push is never used
  1675  001D1E  0012               	return	
  1676  001D20  0012               	return		;funcret
  1677  001D22                     __end_of_buffer_push:
  1678                           	opt stack 0
  1679                           tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           prodh	equ	0xFF4
  1684                           prodl	equ	0xFF3
  1685                           postinc0	equ	0xFEE
  1686                           wreg	equ	0xFE8
  1687                           postdec1	equ	0xFE5
  1688                           plusw1	equ	0xFE3
  1689                           fsr1l	equ	0xFE1
  1690                           indf2	equ	0xFDF
  1691                           postinc2	equ	0xFDE
  1692                           postdec2	equ	0xFDD
  1693                           plusw2	equ	0xFDB
  1694                           fsr2h	equ	0xFDA
  1695                           fsr2l	equ	0xFD9
  1696                           status	equ	0xFD8
  1697                           
  1698 ;; *************** function _espi_setup *****************
  1699 ;; Defined at:
  1700 ;;		line 24 in file "extended_spi.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  mode            1    wreg     unsigned char 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  mode            1    2[COMRAM] unsigned char 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;		None               void
  1707 ;; Registers used:
  1708 ;;		wreg, status,2, status,0, cstack
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0
  1714 ;;      Params:         0       0
  1715 ;;      Locals:         1       0
  1716 ;;      Temps:          0       0
  1717 ;;      Totals:         1       0
  1718 ;;Total ram usage:        1 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    1
  1721 ;; This function calls:
  1722 ;;		_setup_spi
  1723 ;; This function is called by:
  1724 ;;		_main
  1725 ;; This function uses a non-reentrant model
  1726 ;;
  1727                           
  1728                           	psect	text12
  1729  001B18                     __ptext12:
  1730                           	opt stack 0
  1731  001B18                     _espi_setup:
  1732                           	opt stack 29
  1733                           
  1734                           ;incstack = 0
  1735                           ;espi_setup@mode stored from wreg
  1736  001B18  6E03               	movwf	espi_setup@mode,c
  1737                           
  1738                           ;extended_spi.c: 26: setup_spi(0, 0x20 | 0x10 | mode);
  1739  001B1A  5003               	movf	espi_setup@mode,w,c
  1740  001B1C  0930               	iorlw	48
  1741  001B1E  6E01               	movwf	setup_spi@SSPCON1_reg,c
  1742  001B20  0E00               	movlw	0
  1743  001B22  ECE3  F00D         	call	_setup_spi
  1744                           
  1745                           ;extended_spi.c: 28: ANSELbits.ANS2 = 0;
  1746  001B26  947E               	bcf	3966,2,c	;volatile
  1747                           
  1748                           ;extended_spi.c: 29: ANSELHbits.ANS8 = 0;
  1749  001B28  907F               	bcf	3967,0,c	;volatile
  1750                           
  1751                           ;extended_spi.c: 31: if (mode == 0x04 || mode == 0x05) {
  1752  001B2A  0E04               	movlw	4
  1753  001B2C  1803               	xorwf	espi_setup@mode,w,c
  1754  001B2E  B4D8               	btfsc	status,2,c
  1755  001B30  D004               	goto	l363
  1756  001B32  0E05               	movlw	5
  1757  001B34  1803               	xorwf	espi_setup@mode,w,c
  1758  001B36  A4D8               	btfss	status,2,c
  1759  001B38  D004               	goto	l361
  1760  001B3A                     l363:
  1761                           
  1762                           ;extended_spi.c: 32: TRISAbits.RA2 = 0;
  1763  001B3A  9492               	bcf	3986,2,c	;volatile
  1764                           
  1765                           ;extended_spi.c: 33: LATAbits.LATA2 = 0;
  1766  001B3C  9489               	bcf	3977,2,c	;volatile
  1767                           
  1768                           ;extended_spi.c: 34: TRISCbits.RC6 = 1;
  1769  001B3E  8C94               	bsf	3988,6,c	;volatile
  1770                           
  1771                           ;extended_spi.c: 35: } else {
  1772  001B40  0012               	return	
  1773  001B42                     l361:
  1774                           
  1775                           ;extended_spi.c: 36: TRISAbits.RA2 = 1;
  1776  001B42  8492               	bsf	3986,2,c	;volatile
  1777                           
  1778                           ;extended_spi.c: 37: TRISCbits.RC6 = 0;
  1779  001B44  9C94               	bcf	3988,6,c	;volatile
  1780                           
  1781                           ;extended_spi.c: 38: LATCbits.LATC6 = 0;
  1782  001B46  9C8B               	bcf	3979,6,c	;volatile
  1783                           
  1784                           ;extended_spi.c: 39: INTCON2bits.INTEDG2 = 1;
  1785  001B48  88F1               	bsf	intcon2,4,c	;volatile
  1786                           
  1787                           ;extended_spi.c: 40: INTCON3bits.INT2E = 1;
  1788  001B4A  88F0               	bsf	intcon3,4,c	;volatile
  1789  001B4C  0012               	return	
  1790  001B4E  0012               	return		;funcret
  1791  001B50                     __end_of_espi_setup:
  1792                           	opt stack 0
  1793                           tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           prodh	equ	0xFF4
  1798                           prodl	equ	0xFF3
  1799                           intcon2	equ	0xFF1
  1800                           intcon3	equ	0xFF0
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           plusw1	equ	0xFE3
  1805                           fsr1l	equ	0xFE1
  1806                           indf2	equ	0xFDF
  1807                           postinc2	equ	0xFDE
  1808                           postdec2	equ	0xFDD
  1809                           plusw2	equ	0xFDB
  1810                           fsr2h	equ	0xFDA
  1811                           fsr2l	equ	0xFD9
  1812                           status	equ	0xFD8
  1813                           
  1814 ;; *************** function _setup_spi *****************
  1815 ;; Defined at:
  1816 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;  SSPSTAT_reg     1    wreg     unsigned char 
  1819 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
  1822 ;; Return value:  Size  Location     Type
  1823 ;;		None               void
  1824 ;; Registers used:
  1825 ;;		wreg, status,2, status,0
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0
  1831 ;;      Params:         1       0
  1832 ;;      Locals:         1       0
  1833 ;;      Temps:          0       0
  1834 ;;      Totals:         2       0
  1835 ;;Total ram usage:        2 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		_espi_setup
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           	psect	text13
  1845  001BC6                     __ptext13:
  1846                           	opt stack 0
  1847  001BC6                     _setup_spi:
  1848                           	opt stack 29
  1849                           
  1850                           ;incstack = 0
  1851                           ;setup_spi@SSPSTAT_reg stored from wreg
  1852  001BC6  6E02               	movwf	setup_spi@SSPSTAT_reg,c
  1853                           
  1854                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
  1855  001BC8  9E94               	bcf	3988,7,c	;volatile
  1856                           
  1857                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
  1858  001BCA  947F               	bcf	3967,2,c	;volatile
  1859                           
  1860                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
  1861  001BCC  8893               	bsf	3987,4,c	;volatile
  1862                           
  1863                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
  1864  001BCE  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
  1865                           
  1866                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
  1867  001BD2  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
  1868                           
  1869                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
  1870  001BD6  50C6               	movf	4038,w,c	;volatile
  1871  001BD8  0B0F               	andlw	15
  1872  001BDA  0A05               	xorlw	5
  1873  001BDC  B4D8               	btfsc	status,2,c
  1874  001BDE  D005               	goto	l290
  1875  001BE0  50C6               	movf	4038,w,c	;volatile
  1876  001BE2  0B0F               	andlw	15
  1877  001BE4  0A04               	xorlw	4
  1878  001BE6  A4D8               	btfss	status,2,c
  1879  001BE8  D00A               	goto	l288
  1880  001BEA                     l290:
  1881                           
  1882                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
  1883  001BEA  8C93               	bsf	3987,6,c	;volatile
  1884                           
  1885                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
  1886  001BEC  50C6               	movf	4038,w,c	;volatile
  1887  001BEE  0B0F               	andlw	15
  1888  001BF0  0A04               	xorlw	4
  1889  001BF2  A4D8               	btfss	status,2,c
  1890  001BF4  D002               	goto	l291
  1891                           
  1892                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
  1893  001BF6  907F               	bcf	3967,0,c	;volatile
  1894                           
  1895                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
  1896  001BF8  8C94               	bsf	3988,6,c	;volatile
  1897  001BFA                     l291:
  1898                           
  1899                           ;spi_pic.c: 26: }
  1900                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
  1901  001BFA  9EC7               	bcf	4039,7,c	;volatile
  1902                           
  1903                           ;spi_pic.c: 28: } else {
  1904  001BFC  0012               	return	
  1905  001BFE                     l288:
  1906                           
  1907                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
  1908  001BFE  9C93               	bcf	3987,6,c	;volatile
  1909  001C00  0012               	return	
  1910  001C02  0012               	return		;funcret
  1911  001C04                     __end_of_setup_spi:
  1912                           	opt stack 0
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           prodh	equ	0xFF4
  1918                           prodl	equ	0xFF3
  1919                           intcon2	equ	0xFF1
  1920                           intcon3	equ	0xFF0
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           postdec1	equ	0xFE5
  1924                           plusw1	equ	0xFE3
  1925                           fsr1l	equ	0xFE1
  1926                           indf2	equ	0xFDF
  1927                           postinc2	equ	0xFDE
  1928                           postdec2	equ	0xFDD
  1929                           plusw2	equ	0xFDB
  1930                           fsr2h	equ	0xFDA
  1931                           fsr2l	equ	0xFD9
  1932                           status	equ	0xFD8
  1933                           
  1934 ;; *************** function _eserial_setup *****************
  1935 ;; Defined at:
  1936 ;;		line 21 in file "extended_serial.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;  baudrate_bit    1    wreg     unsigned char 
  1939 ;;  baudrate_val    2    7[COMRAM] unsigned int 
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  baudrate_bit    1    9[COMRAM] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;		None               void
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0
  1951 ;;      Params:         2       0
  1952 ;;      Locals:         1       0
  1953 ;;      Temps:          0       0
  1954 ;;      Totals:         3       0
  1955 ;;Total ram usage:        3 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    1
  1958 ;; This function calls:
  1959 ;;		_setup_simple_serial
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text14
  1966  001AA8                     __ptext14:
  1967                           	opt stack 0
  1968  001AA8                     _eserial_setup:
  1969                           	opt stack 29
  1970                           
  1971                           ;incstack = 0
  1972                           ;eserial_setup@baudrate_bits stored from wreg
  1973  001AA8  6E0A               	movwf	eserial_setup@baudrate_bits,c
  1974                           
  1975                           ;extended_serial.c: 23: ANSELbits.ANS5 = 0;
  1976  001AAA  9A7E               	bcf	3966,5,c	;volatile
  1977                           
  1978                           ;extended_serial.c: 24: ANSELHbits.ANS11 = 0;
  1979  001AAC  967F               	bcf	3967,3,c	;volatile
  1980                           
  1981                           ;extended_serial.c: 26: TRISCbits.RC0 = 0;
  1982  001AAE  9094               	bcf	3988,0,c	;volatile
  1983                           
  1984                           ;extended_serial.c: 27: TRISCbits.RC1 = 1;
  1985  001AB0  8294               	bsf	3988,1,c	;volatile
  1986                           
  1987                           ;extended_serial.c: 29: setup_simple_serial(baudrate_bits, baudrate_value);
  1988  001AB2  C008  F001         	movff	eserial_setup@baudrate_value,setup_simple_serial@baudrate_value
  1989  001AB6  C009  F002         	movff	eserial_setup@baudrate_value+1,setup_simple_serial@baudrate_value+1
  1990  001ABA  500A               	movf	eserial_setup@baudrate_bits,w,c
  1991  001ABC  EC24  F00E         	call	_setup_simple_serial
  1992                           
  1993                           ;extended_serial.c: 31: LATCbits.LATC0 = 1;
  1994  001AC0  808B               	bsf	3979,0,c	;volatile
  1995  001AC2  0012               	return		;funcret
  1996  001AC4                     __end_of_eserial_setup:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           tblptrh	equ	0xFF7
  2000                           tblptrl	equ	0xFF6
  2001                           tablat	equ	0xFF5
  2002                           prodh	equ	0xFF4
  2003                           prodl	equ	0xFF3
  2004                           intcon2	equ	0xFF1
  2005                           intcon3	equ	0xFF0
  2006                           postinc0	equ	0xFEE
  2007                           wreg	equ	0xFE8
  2008                           postdec1	equ	0xFE5
  2009                           plusw1	equ	0xFE3
  2010                           fsr1l	equ	0xFE1
  2011                           indf2	equ	0xFDF
  2012                           postinc2	equ	0xFDE
  2013                           postdec2	equ	0xFDD
  2014                           plusw2	equ	0xFDB
  2015                           fsr2h	equ	0xFDA
  2016                           fsr2l	equ	0xFD9
  2017                           status	equ	0xFD8
  2018                           
  2019 ;; *************** function _setup_simple_serial *****************
  2020 ;; Defined at:
  2021 ;;		line 18 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;  baudrate_bit    1    wreg     unsigned char 
  2024 ;;  baudrate_val    2    0[COMRAM] unsigned int 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  baudrate_bit    1    6[COMRAM] unsigned char 
  2027 ;; Return value:  Size  Location     Type
  2028 ;;		None               void
  2029 ;; Registers used:
  2030 ;;		wreg, status,2
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0
  2036 ;;      Params:         2       0
  2037 ;;      Locals:         5       0
  2038 ;;      Temps:          0       0
  2039 ;;      Totals:         7       0
  2040 ;;Total ram usage:        7 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_eserial_setup
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text15
  2050  001C48                     __ptext15:
  2051                           	opt stack 0
  2052  001C48                     _setup_simple_serial:
  2053                           	opt stack 29
  2054                           
  2055                           ;incstack = 0
  2056                           ;setup_simple_serial@baudrate_bits stored from wreg
  2057  001C48  6E07               	movwf	setup_simple_serial@baudrate_bits,c
  2058                           
  2059                           ;serial_pic.c: 20: ANSELHbits.ANS11 = 0;
  2060  001C4A  967F               	bcf	3967,3,c	;volatile
  2061                           
  2062                           ;serial_pic.c: 21: TXSTA = (baudrate_bits & 0x04) ? 0x24: 0x20;
  2063  001C4C  B407               	btfsc	setup_simple_serial@baudrate_bits,2,c
  2064  001C4E  D004               	goto	l1575
  2065  001C50  0E00               	movlw	0
  2066  001C52  6E04               	movwf	_setup_simple_serial$226+1,c
  2067  001C54  0E20               	movlw	32
  2068  001C56  D003               	goto	L2
  2069  001C58                     l1575:
  2070  001C58  0E00               	movlw	0
  2071  001C5A  6E04               	movwf	_setup_simple_serial$226+1,c
  2072  001C5C  0E24               	movlw	36
  2073  001C5E                     L2:
  2074  001C5E  6E03               	movwf	_setup_simple_serial$226,c
  2075  001C60  D000               	goto	l1577
  2076  001C62                     l1577:
  2077  001C62  C003  FFAC         	movff	_setup_simple_serial$226,4012	;volatile
  2078                           
  2079                           ;serial_pic.c: 22: RCSTA = 0x90;
  2080  001C66  0E90               	movlw	144
  2081  001C68  6EAB               	movwf	4011,c	;volatile
  2082                           
  2083                           ;serial_pic.c: 23: BAUDCON = (baudrate_bits & 0x08) ? 0x08 : 0x00;
  2084  001C6A  B607               	btfsc	setup_simple_serial@baudrate_bits,3,c
  2085  001C6C  D004               	goto	l1583
  2086  001C6E  0E00               	movlw	0
  2087  001C70  6E06               	movwf	_setup_simple_serial$227+1,c
  2088  001C72  0E00               	movlw	0
  2089  001C74  D003               	goto	L3
  2090  001C76                     l1583:
  2091  001C76  0E00               	movlw	0
  2092  001C78  6E06               	movwf	_setup_simple_serial$227+1,c
  2093  001C7A  0E08               	movlw	8
  2094  001C7C                     L3:
  2095  001C7C  6E05               	movwf	_setup_simple_serial$227,c
  2096  001C7E  D000               	goto	l1585
  2097  001C80                     l1585:
  2098  001C80  C005  FFB8         	movff	_setup_simple_serial$227,4024	;volatile
  2099                           
  2100                           ;serial_pic.c: 25: SPBRGH = baudrate_value >> 8;
  2101  001C84  5002               	movf	setup_simple_serial@baudrate_value+1,w,c
  2102  001C86  6EB0               	movwf	4016,c	;volatile
  2103                           
  2104                           ;serial_pic.c: 26: SPBRG = baudrate_value;
  2105  001C88  C001  FFAF         	movff	setup_simple_serial@baudrate_value,4015	;volatile
  2106  001C8C  0012               	return		;funcret
  2107  001C8E                     __end_of_setup_simple_serial:
  2108                           	opt stack 0
  2109                           tblptru	equ	0xFF8
  2110                           tblptrh	equ	0xFF7
  2111                           tblptrl	equ	0xFF6
  2112                           tablat	equ	0xFF5
  2113                           prodh	equ	0xFF4
  2114                           prodl	equ	0xFF3
  2115                           intcon2	equ	0xFF1
  2116                           intcon3	equ	0xFF0
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           postdec1	equ	0xFE5
  2120                           plusw1	equ	0xFE3
  2121                           fsr1l	equ	0xFE1
  2122                           indf2	equ	0xFDF
  2123                           postinc2	equ	0xFDE
  2124                           postdec2	equ	0xFDD
  2125                           plusw2	equ	0xFDB
  2126                           fsr2h	equ	0xFDA
  2127                           fsr2l	equ	0xFD9
  2128                           status	equ	0xFD8
  2129                           
  2130 ;; *************** function _eserial_send_data *****************
  2131 ;; Defined at:
  2132 ;;		line 35 in file "extended_serial.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  2135 ;;		 -> main@pic_to_pic(34), 
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;  value           2    9[COMRAM] int 
  2138 ;;  i               1    8[COMRAM] char 
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      char 
  2141 ;; Registers used:
  2142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0
  2148 ;;      Params:         2       0
  2149 ;;      Locals:         3       0
  2150 ;;      Temps:          0       0
  2151 ;;      Totals:         5       0
  2152 ;;Total ram usage:        5 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    1
  2155 ;; This function calls:
  2156 ;;		_buffer_pop
  2157 ;;		_serial_send_byte
  2158 ;; This function is called by:
  2159 ;;		_main
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text16
  2164  001C04                     __ptext16:
  2165                           	opt stack 0
  2166  001C04                     _eserial_send_data:
  2167                           	opt stack 29
  2168                           
  2169                           ;extended_serial.c: 40: int8_t i = 0;
  2170                           
  2171                           ;incstack = 0
  2172  001C04  0E00               	movlw	0
  2173  001C06  6E09               	movwf	eserial_send_data@i,c
  2174                           
  2175                           ;extended_serial.c: 41: int16_t value = buffer_pop(buffer);
  2176  001C08  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  2177  001C0C  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  2178  001C10  EC91  F00E         	call	_buffer_pop	;wreg free
  2179  001C14  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  2180  001C18  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  2181                           
  2182                           ;extended_serial.c: 42: while (value != -1) {
  2183  001C1C  D00F               	goto	l1763
  2184  001C1E                     l1757:
  2185                           
  2186                           ;extended_serial.c: 43: serial_send_byte((uint8_t)value);
  2187  001C1E  500A               	movf	eserial_send_data@value,w,c
  2188  001C20  EC21  F00D         	call	_serial_send_byte
  2189                           
  2190                           ;extended_serial.c: 44: value = buffer_pop(buffer);
  2191  001C24  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  2192  001C28  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  2193  001C2C  EC91  F00E         	call	_buffer_pop	;wreg free
  2194  001C30  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  2195  001C34  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  2196                           
  2197                           ;extended_serial.c: 45: i++;
  2198  001C38  2A09               	incf	eserial_send_data@i,f,c
  2199  001C3A  D000               	goto	l1763
  2200  001C3C                     l1763:
  2201  001C3C  280A               	incf	eserial_send_data@value,w,c
  2202  001C3E  E1EF               	bnz	l1757
  2203  001C40  280B               	incf	eserial_send_data@value+1,w,c
  2204  001C42  A4D8               	btfss	status,2,c
  2205  001C44  D7EC               	goto	l1757
  2206                           
  2207                           ;extended_serial.c: 46: }
  2208                           ;extended_serial.c: 48: return i;
  2209                           ;	Return value of _eserial_send_data is never used
  2210  001C46  0012               	return		;funcret
  2211  001C48                     __end_of_eserial_send_data:
  2212                           	opt stack 0
  2213                           tblptru	equ	0xFF8
  2214                           tblptrh	equ	0xFF7
  2215                           tblptrl	equ	0xFF6
  2216                           tablat	equ	0xFF5
  2217                           prodh	equ	0xFF4
  2218                           prodl	equ	0xFF3
  2219                           intcon2	equ	0xFF1
  2220                           intcon3	equ	0xFF0
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           postdec1	equ	0xFE5
  2224                           plusw1	equ	0xFE3
  2225                           fsr1l	equ	0xFE1
  2226                           indf2	equ	0xFDF
  2227                           postinc2	equ	0xFDE
  2228                           postdec2	equ	0xFDD
  2229                           plusw2	equ	0xFDB
  2230                           fsr2h	equ	0xFDA
  2231                           fsr2l	equ	0xFD9
  2232                           status	equ	0xFD8
  2233                           
  2234 ;; *************** function _serial_send_byte *****************
  2235 ;; Defined at:
  2236 ;;		line 66 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  byte            1    wreg     unsigned char 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  byte            1    0[COMRAM] unsigned char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;		None               void
  2243 ;; Registers used:
  2244 ;;		wreg
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0
  2250 ;;      Params:         0       0
  2251 ;;      Locals:         1       0
  2252 ;;      Temps:          0       0
  2253 ;;      Totals:         1       0
  2254 ;;Total ram usage:        1 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		_main
  2260 ;;		_eserial_send_data
  2261 ;;		_serial_send_data
  2262 ;;		_serial_send_buffer
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           	psect	text17
  2267  001A42                     __ptext17:
  2268                           	opt stack 0
  2269  001A42                     _serial_send_byte:
  2270                           	opt stack 30
  2271                           
  2272                           ;incstack = 0
  2273                           ;serial_send_byte@byte stored from wreg
  2274  001A42  6E01               	movwf	serial_send_byte@byte,c
  2275                           
  2276                           ;serial_pic.c: 68: while (!TXIF);
  2277  001A44  D000               	goto	l116
  2278  001A46                     l116:
  2279  001A46  A89E               	btfss	3998,4,c	;volatile
  2280  001A48  D7FE               	goto	l116
  2281                           
  2282                           ;serial_pic.c: 69: TXREG = byte;
  2283  001A4A  C001  FFAD         	movff	serial_send_byte@byte,4013	;volatile
  2284  001A4E  0012               	return		;funcret
  2285  001A50                     __end_of_serial_send_byte:
  2286                           	opt stack 0
  2287                           tblptru	equ	0xFF8
  2288                           tblptrh	equ	0xFF7
  2289                           tblptrl	equ	0xFF6
  2290                           tablat	equ	0xFF5
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           intcon2	equ	0xFF1
  2294                           intcon3	equ	0xFF0
  2295                           postinc0	equ	0xFEE
  2296                           wreg	equ	0xFE8
  2297                           postdec1	equ	0xFE5
  2298                           plusw1	equ	0xFE3
  2299                           fsr1l	equ	0xFE1
  2300                           indf2	equ	0xFDF
  2301                           postinc2	equ	0xFDE
  2302                           postdec2	equ	0xFDD
  2303                           plusw2	equ	0xFDB
  2304                           fsr2h	equ	0xFDA
  2305                           fsr2l	equ	0xFD9
  2306                           status	equ	0xFD8
  2307                           
  2308 ;; *************** function _buffer_pop *****************
  2309 ;; Defined at:
  2310 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2313 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;  byte            2    4[COMRAM] int 
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  2    0[COMRAM] int 
  2318 ;; Registers used:
  2319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0
  2325 ;;      Params:         2       0
  2326 ;;      Locals:         2       0
  2327 ;;      Temps:          2       0
  2328 ;;      Totals:         6       0
  2329 ;;Total ram usage:        6 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; This function calls:
  2332 ;;		Nothing
  2333 ;; This function is called by:
  2334 ;;		_eserial_send_data
  2335 ;;		_espi_slave_send
  2336 ;;		_espi_master_send
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text18
  2341  001D22                     __ptext18:
  2342                           	opt stack 0
  2343  001D22                     _buffer_pop:
  2344                           	opt stack 29
  2345                           
  2346                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
  2347                           
  2348                           ;incstack = 0
  2349  001D22  EE20 F001          	lfsr	2,1
  2350  001D26  5001               	movf	buffer_pop@buffer,w,c
  2351  001D28  26D9               	addwf	fsr2l,f,c
  2352  001D2A  5002               	movf	buffer_pop@buffer+1,w,c
  2353  001D2C  22DA               	addwfc	fsr2h,f,c
  2354  001D2E  50DF               	movf	indf2,w,c
  2355  001D30  A4D8               	btfss	status,2,c
  2356  001D32  D003               	goto	l1613
  2357                           
  2358                           ;circular_buffer.c: 40: return -1;
  2359  001D34  6801               	setf	?_buffer_pop,c
  2360  001D36  6802               	setf	?_buffer_pop+1,c
  2361  001D38  0012               	return	
  2362  001D3A                     l1613:
  2363                           
  2364                           ;circular_buffer.c: 41: }
  2365                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2366  001D3A  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2367  001D3E  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2368  001D42  50DF               	movf	indf2,w,c
  2369  001D44  6E03               	movwf	??_buffer_pop& (0+255),c
  2370  001D46  5003               	movf	??_buffer_pop,w,c
  2371  001D48  0D01               	mullw	1
  2372  001D4A  0E02               	movlw	2
  2373  001D4C  26F3               	addwf	prodl,f,c
  2374  001D4E  0E00               	movlw	0
  2375  001D50  22F4               	addwfc	prodh,f,c
  2376  001D52  50F3               	movf	prodl,w,c
  2377  001D54  2401               	addwf	buffer_pop@buffer,w,c
  2378  001D56  6ED9               	movwf	fsr2l,c
  2379  001D58  50F4               	movf	prodh,w,c
  2380  001D5A  2002               	addwfc	buffer_pop@buffer+1,w,c
  2381  001D5C  6EDA               	movwf	fsr2h,c
  2382  001D5E  50DF               	movf	indf2,w,c
  2383  001D60  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  2384  001D62  5004               	movf	??_buffer_pop+1,w,c
  2385  001D64  6E05               	movwf	buffer_pop@byte,c
  2386  001D66  6A06               	clrf	buffer_pop@byte+1,c
  2387                           
  2388                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  2389  001D68  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2390  001D6C  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2391  001D70  50DF               	movf	indf2,w,c
  2392  001D72  6E03               	movwf	??_buffer_pop& (0+255),c
  2393  001D74  2803               	incf	??_buffer_pop,w,c
  2394  001D76  0B1F               	andlw	31
  2395  001D78  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2396  001D7C  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2397  001D80  6EDF               	movwf	indf2,c
  2398                           
  2399                           ;circular_buffer.c: 45: buffer->count--;
  2400  001D82  EE20 F001          	lfsr	2,1
  2401  001D86  5001               	movf	buffer_pop@buffer,w,c
  2402  001D88  26D9               	addwf	fsr2l,f,c
  2403  001D8A  5002               	movf	buffer_pop@buffer+1,w,c
  2404  001D8C  22DA               	addwfc	fsr2h,f,c
  2405  001D8E  06DF               	decf	indf2,f,c
  2406                           
  2407                           ;circular_buffer.c: 47: return byte;
  2408  001D90  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  2409  001D94  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  2410  001D98  0012               	return	
  2411  001D9A  0012               	return		;funcret
  2412  001D9C                     __end_of_buffer_pop:
  2413                           	opt stack 0
  2414                           tblptru	equ	0xFF8
  2415                           tblptrh	equ	0xFF7
  2416                           tblptrl	equ	0xFF6
  2417                           tablat	equ	0xFF5
  2418                           prodh	equ	0xFF4
  2419                           prodl	equ	0xFF3
  2420                           intcon2	equ	0xFF1
  2421                           intcon3	equ	0xFF0
  2422                           postinc0	equ	0xFEE
  2423                           wreg	equ	0xFE8
  2424                           postdec1	equ	0xFE5
  2425                           plusw1	equ	0xFE3
  2426                           fsr1l	equ	0xFE1
  2427                           indf2	equ	0xFDF
  2428                           postinc2	equ	0xFDE
  2429                           postdec2	equ	0xFDD
  2430                           plusw2	equ	0xFDB
  2431                           fsr2h	equ	0xFDA
  2432                           fsr2l	equ	0xFD9
  2433                           status	equ	0xFD8
  2434                           
  2435 ;; *************** function _buffer_empty *****************
  2436 ;; Defined at:
  2437 ;;		line 14 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2440 ;;		 -> main@pic_to_pc(34), 
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;		None
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      unsigned char 
  2445 ;; Registers used:
  2446 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0
  2452 ;;      Params:         2       0
  2453 ;;      Locals:         0       0
  2454 ;;      Temps:          0       0
  2455 ;;      Totals:         2       0
  2456 ;;Total ram usage:        2 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; This function calls:
  2459 ;;		Nothing
  2460 ;; This function is called by:
  2461 ;;		_main
  2462 ;;		_espi_master_receive
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text19
  2467  001A8C                     __ptext19:
  2468                           	opt stack 0
  2469  001A8C                     _buffer_empty:
  2470                           	opt stack 30
  2471                           
  2472                           ;circular_buffer.c: 16: return (buffer->count == 0) ? 1 : 0;
  2473                           
  2474                           ;incstack = 0
  2475  001A8C  EE20 F001          	lfsr	2,1
  2476  001A90  5001               	movf	buffer_empty@buffer,w,c
  2477  001A92  26D9               	addwf	fsr2l,f,c
  2478  001A94  5002               	movf	buffer_empty@buffer+1,w,c
  2479  001A96  22DA               	addwfc	fsr2h,f,c
  2480  001A98  50DF               	movf	indf2,w,c
  2481  001A9A  A4D8               	btfss	status,2,c
  2482  001A9C  D002               	goto	u1070
  2483  001A9E  0E01               	movlw	1
  2484  001AA0  0012               	return	
  2485  001AA2                     u1070:
  2486  001AA2  0E00               	movlw	0
  2487  001AA4  0012               	return	
  2488  001AA6  0012               	return		;funcret
  2489  001AA8                     __end_of_buffer_empty:
  2490                           	opt stack 0
  2491  0000                     tblptru	equ	0xFF8
  2492                           tblptrh	equ	0xFF7
  2493                           tblptrl	equ	0xFF6
  2494                           tablat	equ	0xFF5
  2495                           prodh	equ	0xFF4
  2496                           prodl	equ	0xFF3
  2497                           intcon2	equ	0xFF1
  2498                           intcon3	equ	0xFF0
  2499                           postinc0	equ	0xFEE
  2500                           wreg	equ	0xFE8
  2501                           postdec1	equ	0xFE5
  2502                           plusw1	equ	0xFE3
  2503                           fsr1l	equ	0xFE1
  2504                           indf2	equ	0xFDF
  2505                           postinc2	equ	0xFDE
  2506                           postdec2	equ	0xFDD
  2507                           plusw2	equ	0xFDB
  2508                           fsr2h	equ	0xFDA
  2509                           fsr2l	equ	0xFD9
  2510                           status	equ	0xFD8
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           prodh	equ	0xFF4
  2516                           prodl	equ	0xFF3
  2517                           intcon2	equ	0xFF1
  2518                           intcon3	equ	0xFF0
  2519                           postinc0	equ	0xFEE
  2520                           wreg	equ	0xFE8
  2521                           postdec1	equ	0xFE5
  2522                           plusw1	equ	0xFE3
  2523                           fsr1l	equ	0xFE1
  2524                           indf2	equ	0xFDF
  2525                           postinc2	equ	0xFDE
  2526                           postdec2	equ	0xFDD
  2527                           plusw2	equ	0xFDB
  2528                           fsr2h	equ	0xFDA
  2529                           fsr2l	equ	0xFD9
  2530                           status	equ	0xFD8
  2531                           
  2532                           	psect	rparam
  2533  0000                     tblptru	equ	0xFF8
  2534                           tblptrh	equ	0xFF7
  2535                           tblptrl	equ	0xFF6
  2536                           tablat	equ	0xFF5
  2537                           prodh	equ	0xFF4
  2538                           prodl	equ	0xFF3
  2539                           intcon2	equ	0xFF1
  2540                           intcon3	equ	0xFF0
  2541                           postinc0	equ	0xFEE
  2542                           wreg	equ	0xFE8
  2543                           postdec1	equ	0xFE5
  2544                           plusw1	equ	0xFE3
  2545                           fsr1l	equ	0xFE1
  2546                           indf2	equ	0xFDF
  2547                           postinc2	equ	0xFDE
  2548                           postdec2	equ	0xFDD
  2549                           plusw2	equ	0xFDB
  2550                           fsr2h	equ	0xFDA
  2551                           fsr2l	equ	0xFD9
  2552                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160      0      75

Pointer List with Targets:

    espi_slave_receive@timer_up	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_slave_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_slave_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    espi_slave_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    spi_slave_peek_receive@byte	PTR int  size(2) Largest target is 2
		 -> main@value_113(COMRAM[2]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_empty@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    eserial_send_data@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    serial_send_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_load_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_disable_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    S152interrupt_serial$data	PTR unsigned char  size(2) Largest target is 0

    serial_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_espi_slave_send
    _spi_slave_peek_receive->_spi_slave_get_byte
    _espi_slave_send->_buffer_pop
    _espi_slave_send->_encode_data
    _espi_slave_receive->_buffer_push
    _espi_slave_receive->_decode_data
    _espi_setup->_setup_spi
    _eserial_setup->_setup_simple_serial
    _eserial_send_data->_buffer_pop

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                79    79      0    6725
                                             17 COMRAM    78    78      0
                       _buffer_empty
                        _buffer_push
                  _eserial_send_data
                      _eserial_setup
                         _espi_setup
                 _espi_slave_receive
                    _espi_slave_send
                   _serial_send_byte
                       _setup_timer3
             _spi_slave_peek_receive
 ---------------------------------------------------------------------------------
 (1) _spi_slave_peek_receive                               3     1      2     132
                                              3 COMRAM     3     1      2
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _espi_slave_send                                     11     9      2    1785
                                              6 COMRAM    11     9      2
                       _buffer_count
                         _buffer_pop
                        _encode_data
                  _spi_send_get_byte
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     644
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_slave_receive                                  10     4      6    2157
                                              5 COMRAM    10     4      6
                        _buffer_push
                       _buffer_space
                        _decode_data
                  _spi_send_get_byte
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (2) _spi_slave_get_byte                                   3     1      2      24
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _spi_send_get_byte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     278
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     923
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _eserial_setup                                        3     1      2     308
                                              7 COMRAM     3     1      2
                _setup_simple_serial
 ---------------------------------------------------------------------------------
 (2) _setup_simple_serial                                  7     5      2     200
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _eserial_send_data                                    5     3      2     723
                                              6 COMRAM     5     3      2
                         _buffer_pop
                   _serial_send_byte
 ---------------------------------------------------------------------------------
 (1) _serial_send_byte                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     539
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _buffer_empty                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buffer_empty
   _buffer_push
   _eserial_send_data
     _buffer_pop
     _serial_send_byte
   _eserial_setup
     _setup_simple_serial
   _espi_setup
     _setup_spi
   _espi_slave_receive
     _buffer_push
     _buffer_space
     _decode_data
     _spi_send_get_byte
     _spi_slave_get_byte
   _espi_slave_send
     _buffer_count
     _buffer_pop
     _encode_data
     _spi_send_get_byte
   _serial_send_byte
   _setup_timer3
   _spi_slave_peek_receive
     _spi_slave_get_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      4B       4       46.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA       5        0.0%
DATA                 0      0      AA       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Jul 31 21:41:58 2015

                  _espi_slave_send 1E20                        _SSPSTATbits 000FC7  
                               l41 1FEE             eserial_send_data@value 000A  
               _espi_slave_receive 1D9C            ?_spi_slave_peek_receive 0004  
          eserial_send_data@buffer 0007                                l116 1A46  
                              l312 1ADA                                l309 1AC6  
                              l361 1B42                                l290 1BEA  
                              l291 1BFA                                l363 1B3A  
                              l288 1BFE                                l296 1A6A  
                              wreg 000FE8                       __CFG_FOSC$HS 000000  
              ?_espi_slave_receive 0006                       __CFG_LVP$OFF 000000  
                             l1601 1B9A                               l1613 1D3A  
                             l1605 1BAA                               l1721 1ECC  
                             l1715 1E98                               l1741 1DCA  
                             l1725 1EE4                               l1709 1E76  
                             l1583 1C76                               l1575 1C58  
                             l1735 1DB6                               l1585 1C80  
                             l1577 1C62                               l1729 1DA2  
                             l1745 1DF0                               l1763 1C3C  
                             l1747 1E06                               l1691 1B7C  
                             l1757 1C1E                               l1781 1F40  
                             l1687 1B76                               l1791 1F94  
                             l1785 1F5C                               l1789 1F7E  
      __size_of_spi_slave_get_byte 001E                               l1799 1FC6  
                             u1110 1B84                               u1070 1AA2  
                             u1231 1EF8                               u1241 1F0A  
                             u1251 1F36                               _RCIE 007CED  
                             _RCIF 007CF5             __size_of_eserial_setup 001C  
                             _TMR3 000FB2                               _TXIE 007CEC  
                             _TXIF 007CF4                               _main 1EEE  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             prodh 000FF4                               prodl 000FF3  
                             start 0000              spi_send_get_byte@byte 0001  
                   ??_buffer_count 0003                     ??_buffer_empty 0003  
                   ??_buffer_space 0003               ??_espi_slave_receive 000C  
                     ___param_bank 000010               setup_spi@SSPCON1_reg 0001  
   __end_of_spi_slave_peek_receive 1B8A                              ?_main 0001  
                            _T3CON 000FB1                              _RCREG 000FAE  
                            _RCSTA 000FAB                              _SPBRG 000FAF  
                            _TXREG 000FAD                              _TXSTA 000FAC  
             __size_of_decode_data 003C                              main@i 0018  
                            tablat 000FF5               serial_send_byte@byte 0001  
                            plusw1 000FE3                              plusw2 000FDB  
                            status 000FD8            __end_of_espi_slave_send 1EEE  
             setup_spi@SSPSTAT_reg 0002                   buffer_pop@buffer 0001  
                  __initialization 1AE2                       __end_of_main 2000  
                    _eserial_setup 1AA8                             ??_main 0012  
                _spi_send_get_byte 1A62                      __activetblptr 000002  
               ?_spi_send_get_byte 0001                    encode_data@data 0006  
     espi_slave_receive@received_1 000E       espi_slave_receive@received_2 000F  
              ??_spi_send_get_byte 0001                             _INT2IF 007F81  
                           _INTCON 000FF2                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9           __end_of_serial_send_byte 1A50  
                  decode_data@data 0001                      main@pic_to_pc 003E  
             __size_of_encode_data 0046                     ?_eserial_setup 0008  
             __size_of_buffer_push 004E          __end_of_spi_send_get_byte 1A76  
                           clear_0 1AE8                      main@value_113 001A  
      __end_of_setup_simple_serial 1C8E               __end_of_buffer_count 1A62  
             __end_of_buffer_empty 1AA8                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
            setup_timer3@T3CON_reg 0001               __end_of_buffer_space 1A8C  
                       __accesstop 0060            __end_of__initialization 1B0E  
                 ?_espi_slave_send 0007                      ___rparam_used 000001  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1A34  
               buffer_count@buffer 0001           espi_slave_receive@buffer 0006  
                   buffer_pop@byte 0005                  _eserial_send_data 1C04  
               ?_eserial_send_data 0007                 buffer_empty@buffer 0001  
                       __pbssBANK0 0060                ??_eserial_send_data 0009  
                  ??_eserial_setup 000A         __size_of_spi_send_get_byte 0014  
                          _BAUDCON 000FB8          __end_of_eserial_send_data 1C48  
                buffer_push@buffer 0001                 __size_of_setup_spi 003E  
       __end_of_spi_slave_get_byte 1AE2                         _buffer_pop 1D22  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
           spi_slave_get_byte@byte 0003                     main@pic_to_pic 001C  
   spi_slave_peek_receive@get_byte 0006                            __Hparam 0000  
                          __Lparam 0000        __size_of_espi_slave_receive 0084  
                       _espi_setup 1B18                         _dummy_byte 00A4  
                          __pcinit 1AE2                          _ANSELbits 000F7E  
                          __ramtop 0100              __size_of_buffer_count 0012  
            __size_of_buffer_empty 001C                            __ptext0 1EEE  
                          __ptext1 1B50                            __ptext2 1A3A  
                          __ptext3 1E20                            __ptext4 1C8E  
                          __ptext5 1A50                            __ptext6 1D9C  
                          __ptext7 1AC4                            __ptext8 1A62  
                          __ptext9 1B8A              __size_of_buffer_space 0016  
                    ??_decode_data 0005              espi_slave_send@buffer 0007  
            espi_slave_send@byte_1 0010              espi_slave_send@byte_2 0011  
                          main@wat 0012               end_of_initialization 1B0E  
                    __Lmediumconst 0000                  ?_serial_send_byte 0001  
    espi_slave_receive@timer_start 0008                       _buffer_count 1A50  
                     _buffer_empty 1A8C                  __end_of_setup_spi 1C04  
               ??_serial_send_byte 0001                       _buffer_space 1A76  
                        _RCSTAbits 000FAB                         _set_timer3 000000  
                          postdec1 000FE5                            postdec2 000FDD  
        espi_slave_send@received_1 000A          espi_slave_send@received_2 000C  
                          postinc0 000FEE                            postinc2 000FDE  
       eserial_setup@baudrate_bits 000A         __size_of_eserial_send_data 0044  
                        _PORTCbits 000F82                      ?_setup_timer3 0001  
                        _TRISAbits 000F92                          _TRISBbits 000F93  
                        _TRISCbits 000F94                        ?_buffer_pop 0001  
              __end_of_decode_data 1BC6                      ??_encode_data 0005  
                    ??_buffer_push 0004           ??_spi_slave_peek_receive 0006  
                      ?_espi_setup 0001                     espi_setup@mode 0003  
                   ??_setup_timer3 0001                start_initialization 1AE2  
     __size_of_setup_simple_serial 0046                 buffer_space@buffer 0001  
                  buffer_push@byte 0003                __end_of_encode_data 1CD4  
              __size_of_buffer_pop 007A           __size_of_espi_slave_send 00CE  
                      __pdataBANK0 00A5                __end_of_buffer_push 1D22  
                      _decode_data 1B8A            espi_slave_receive@value 000D  
              __size_of_espi_setup 0038                 _spi_slave_get_byte 1AC4  
  __size_of_spi_slave_peek_receive 003A              __end_of_eserial_setup 1AC4  
              ?_spi_slave_get_byte 0001                  encode_data@byte_1 0001  
                encode_data@byte_2 0003   setup_simple_serial@baudrate_bits 0007  
             ??_spi_slave_get_byte 0003                           _LATAbits 000F89  
                         _LATCbits 000F8B                        _encode_data 1C8E  
       __end_of_espi_slave_receive 1E20                           _PIE2bits 000FA0  
             __end_of_setup_timer3 1A42                           _PIR2bits 000FA1  
                      _buffer_push 1CD4                          _timer3_up 000000  
                        main@F4043 0060                          main@F4045 0082  
                        main@F4048 00A5                          _setup_spi 1BC6  
        __size_of_serial_send_byte 000E                  ??_espi_slave_send 0009  
           _spi_slave_peek_receive 1B50                       ??_buffer_pop 0003  
       spi_slave_peek_receive@byte 0004                  decode_data@byte_1 0003  
                decode_data@byte_2 0004                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                          copy_data0 1B02  
                         __Hrparam 0000                           __Lrparam 0000  
                     ??_espi_setup 0003                 __end_of_buffer_pop 1D9C  
                       ?_setup_spi 0001                 eserial_send_data@i 0009  
              _setup_simple_serial 1C48                         _ANSELHbits 000F7F  
                         __ptext10 1A76                           __ptext11 1CD4  
                         __ptext12 1B18                           __ptext13 1BC6  
                         __ptext14 1AA8                           __ptext15 1C48  
                         __ptext16 1C04                           __ptext17 1A42  
                         __ptext18 1D22                           __ptext19 1A8C  
             ?_setup_simple_serial 0001                 __end_of_espi_setup 1B50  
                    __size_of_main 0112                       ?_decode_data 0001  
            ??_setup_simple_serial 0003         espi_slave_receive@timer_up 000A  
            __size_of_setup_timer3 0008                        ??_setup_spi 0002  
                 _serial_send_byte 1A42                       _setup_timer3 1A3A  
      buffer_push@current_position 0005                        _SSPCON1bits 000FC6  
      eserial_setup@baudrate_value 0008                       ?_encode_data 0001  
setup_simple_serial@baudrate_value 0001        espi_slave_send@byte_to_send 000E  
                    ?_buffer_count 0001                      ?_buffer_empty 0001  
                    ?_buffer_space 0001                       ?_buffer_push 0001  
          _setup_simple_serial$226 0003            _setup_simple_serial$227 0005  
