

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Aug 03 17:08:50 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38  0000                     _TMR3	set	4018
    39  0000                     _ANSELHbits	set	3967
    40  0000                     _ANSELbits	set	3966
    41  0000                     _BAUDCON	set	4024
    42  0000                     _INTCON	set	4082
    43  0000                     _INTCON2bits	set	4081
    44  0000                     _INTCON3bits	set	4080
    45  0000                     _LATAbits	set	3977
    46  0000                     _LATCbits	set	3979
    47  0000                     _PIE2bits	set	4000
    48  0000                     _PIR2bits	set	4001
    49  0000                     _PORTCbits	set	3970
    50  0000                     _RCREG	set	4014
    51  0000                     _RCSTA	set	4011
    52  0000                     _RCSTAbits	set	4011
    53  0000                     _SPBRG	set	4015
    54  0000                     _SPBRGH	set	4016
    55  0000                     _SSPBUF	set	4041
    56  0000                     _SSPCON1	set	4038
    57  0000                     _SSPCON1bits	set	4038
    58  0000                     _SSPSTAT	set	4039
    59  0000                     _SSPSTATbits	set	4039
    60  0000                     _T3CON	set	4017
    61  0000                     _TRISAbits	set	3986
    62  0000                     _TRISBbits	set	3987
    63  0000                     _TRISCbits	set	3988
    64  0000                     _TXREG	set	4013
    65  0000                     _TXSTA	set	4012
    66  0000                     _INT2IF	set	32641
    67  0000                     _RCIE	set	31981
    68  0000                     _RCIF	set	31989
    69  0000                     _TXIE	set	31980
    70  0000                     _TXIF	set	31988
    71                           
    72 ;;
    73 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    74 ;;
    75 ;; *************** function _main *****************
    76 ;; Defined at:
    77 ;;		line 27 in file "main.c"
    78 ;; Parameters:    Size  Location     Type
    79 ;;		None
    80 ;; Auto vars:     Size  Location     Type
    81 ;;  value           2   17[COMRAM] int 
    82 ;;  pic_to_pic     34   53[COMRAM] struct circular_buffer
    83 ;;  pic_to_pc      34   19[COMRAM] struct circular_buffer
    84 ;;  value           1    0        unsigned char 
    85 ;; Return value:  Size  Location     Type
    86 ;;                  2   25[None  ] int 
    87 ;; Registers used:
    88 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
    89 ;; Tracked objects:
    90 ;;		On entry : 0/0
    91 ;;		On exit  : 0/0
    92 ;;		Unchanged: 0/0
    93 ;; Data sizes:     COMRAM   BANK0
    94 ;;      Params:         0       0
    95 ;;      Locals:        70       0
    96 ;;      Temps:          0       0
    97 ;;      Totals:        70       0
    98 ;;Total ram usage:       70 bytes
    99 ;; Hardware stack levels required when called:    4
   100 ;; This function calls:
   101 ;;		_eserial_receive
   102 ;;		_eserial_send_data
   103 ;;		_eserial_setup
   104 ;;		_espi_setup
   105 ;;		_espi_slave_receive
   106 ;;		_espi_slave_send
   107 ;;		_setup_timer3
   108 ;;		_spi_slave_peek_receive
   109 ;; This function is called by:
   110 ;;		Startup code after reset
   111 ;; This function uses a non-reentrant model
   112 ;;
   113                           
   114                           	psect	text0
   115  001CCC                     __ptext0:
   116                           	opt stack 0
   117  001CCC                     _main:
   118                           	opt stack 27
   119                           
   120                           ;main.c: 29: struct circular_buffer pic_to_pic = {0, 0, {0}};
   121                           
   122                           ;incstack = 0
   123  001CCC  EE20  F060         	lfsr	2,main@F4041
   124  001CD0  EE10  F036         	lfsr	1,main@pic_to_pic
   125  001CD4  0E21               	movlw	33
   126  001CD6                     u1771:
   127  001CD6  CFDB FFE3          	movff	plusw2,plusw1
   128  001CDA  06E8               	decf	wreg,f,c
   129  001CDC  E2FC               	bc	u1771
   130                           
   131                           ;main.c: 30: struct circular_buffer pic_to_pc = {0, 0, {0}};
   132  001CDE  EE20  F082         	lfsr	2,main@F4043
   133  001CE2  EE10  F014         	lfsr	1,main@pic_to_pc
   134  001CE6  0E21               	movlw	33
   135  001CE8                     u1781:
   136  001CE8  CFDB FFE3          	movff	plusw2,plusw1
   137  001CEC  06E8               	decf	wreg,f,c
   138  001CEE  E2FC               	bc	u1781
   139                           
   140                           ;main.c: 32: espi_setup(0x05);
   141  001CF0  0E05               	movlw	5
   142  001CF2  ECA2  F00C         	call	_espi_setup
   143                           
   144                           ;main.c: 33: eserial_setup(0x08 | 0x04, 0x10);
   145  001CF6  0E00               	movlw	0
   146  001CF8  6E09               	movwf	eserial_setup@baudrate_value+1,c
   147  001CFA  0E10               	movlw	16
   148  001CFC  6E08               	movwf	eserial_setup@baudrate_value,c
   149  001CFE  0E0C               	movlw	12
   150  001D00  EC6E  F00C         	call	_eserial_setup
   151                           
   152                           ;main.c: 34: setup_timer3(0x80 | 0x00 | 0x01);
   153  001D04  0E81               	movlw	129
   154  001D06  EC15  F00C         	call	_setup_timer3
   155  001D0A  D000               	goto	l1909
   156  001D0C                     l1909:
   157                           
   158                           ;main.c: 41: eserial_receive(&pic_to_pic, &return_false, &set_timer3, &timer3_up);
   159  001D0C  0E36               	movlw	low main@pic_to_pic
   160  001D0E  6E07               	movwf	eserial_receive@buffer,c
   161  001D10  0E00               	movlw	high main@pic_to_pic
   162  001D12  6E08               	movwf	eserial_receive@buffer+1,c
   163  001D14  0E5A               	movlw	low _return_false
   164  001D16  6E09               	movwf	eserial_receive@stop_function,c
   165  001D18  0E18               	movlw	high _return_false
   166  001D1A  6E0A               	movwf	eserial_receive@stop_function+1,c
   167  001D1C  0E32               	movlw	low _set_timer3
   168  001D1E  6E0B               	movwf	eserial_receive@timer_start,c
   169  001D20  0E18               	movlw	high _set_timer3
   170  001D22  6E0C               	movwf	eserial_receive@timer_start+1,c
   171  001D24  0E3E               	movlw	low _timer3_up
   172  001D26  6E0D               	movwf	eserial_receive@timer_up,c
   173  001D28  0E18               	movlw	high _timer3_up
   174  001D2A  6E0E               	movwf	eserial_receive@timer_up+1,c
   175  001D2C  ECC3  F00E         	call	_eserial_receive	;wreg free
   176                           
   177                           ;main.c: 43: int16_t value;
   178                           ;main.c: 44: if (spi_slave_peek_receive(1, &value)) {
   179  001D30  0E12               	movlw	low main@value_102
   180  001D32  6E04               	movwf	spi_slave_peek_receive@byte,c
   181  001D34  0E00               	movlw	high main@value_102
   182  001D36  6E05               	movwf	spi_slave_peek_receive@byte+1,c
   183  001D38  0E01               	movlw	1
   184  001D3A  ECBE  F00C         	call	_spi_slave_peek_receive
   185  001D3E  0900               	iorlw	0
   186  001D40  B4D8               	btfsc	status,2,c
   187  001D42  D018               	goto	l31
   188                           
   189                           ;main.c: 45: if (value == 0x20) {
   190  001D44  0E20               	movlw	32
   191  001D46  1812               	xorwf	main@value_102,w,c
   192  001D48  1013               	iorwf	main@value_102+1,w,c
   193  001D4A  A4D8               	btfss	status,2,c
   194  001D4C  D007               	goto	l1917
   195                           
   196                           ;main.c: 46: espi_slave_send(&pic_to_pic);
   197  001D4E  0E36               	movlw	low main@pic_to_pic
   198  001D50  6E07               	movwf	espi_slave_send@buffer,c
   199  001D52  0E00               	movlw	high main@pic_to_pic
   200  001D54  6E08               	movwf	espi_slave_send@buffer+1,c
   201  001D56  EC59  F00F         	call	_espi_slave_send	;wreg free
   202                           
   203                           ;main.c: 47: } else if (value == 0x10) {
   204  001D5A  D00C               	goto	l31
   205  001D5C                     l1917:
   206  001D5C  0E10               	movlw	16
   207  001D5E  1812               	xorwf	main@value_102,w,c
   208  001D60  1013               	iorwf	main@value_102+1,w,c
   209  001D62  A4D8               	btfss	status,2,c
   210  001D64  D007               	goto	l31
   211                           
   212                           ;main.c: 48: espi_slave_receive(&pic_to_pc);
   213  001D66  0E14               	movlw	low main@pic_to_pc
   214  001D68  6E06               	movwf	espi_slave_receive@buffer,c
   215  001D6A  0E00               	movlw	high main@pic_to_pc
   216  001D6C  6E07               	movwf	espi_slave_receive@buffer+1,c
   217  001D6E  EC19  F00E         	call	_espi_slave_receive	;wreg free
   218  001D72  D000               	goto	l31
   219  001D74                     l31:
   220                           
   221                           ;main.c: 49: }
   222                           ;main.c: 50: }
   223                           ;main.c: 52: eserial_send_data(&pic_to_pc);
   224  001D74  0E14               	movlw	low main@pic_to_pc
   225  001D76  6E07               	movwf	eserial_send_data@buffer,c
   226  001D78  0E00               	movlw	high main@pic_to_pc
   227  001D7A  6E08               	movwf	eserial_send_data@buffer+1,c
   228  001D7C  EC18  F00D         	call	_eserial_send_data	;wreg free
   229  001D80  D7C5               	goto	l1909
   230                           
   231                           ;main.c: 53: }
   232                           ;main.c: 55: return (0);
   233                           ;	Return value of _main is never used
   234  001D82  EF00  F000         	goto	start
   235  001D86                     __end_of_main:
   236                           	opt stack 0
   237                           wreg	equ	0xFE8
   238                           plusw1	equ	0xFE3
   239                           plusw2	equ	0xFDB
   240                           status	equ	0xFD8
   241                           
   242                           	psect	cinit
   243  0018A8                     __pcinit:
   244                           	opt stack 0
   245  0018A8                     start_initialization:
   246                           	opt stack 0
   247  0018A8                     __initialization:
   248                           	opt stack 0
   249                           
   250                           ; Clear objects allocated to BANK0 (68 bytes)
   251  0018A8  EE00  F060         	lfsr	0,__pbssBANK0
   252  0018AC  0E44               	movlw	68
   253  0018AE                     clear_0:
   254  0018AE  6AEE               	clrf	postinc0,c
   255  0018B0  06E8               	decf	wreg,f,c
   256  0018B2  E1FD               	bnz	clear_0
   257                           
   258                           ; Clear objects allocated to COMRAM (1 bytes)
   259  0018B4  6A58               	clrf	__pbssCOMRAM& (0+255),c
   260  0018B6                     end_of_initialization:
   261                           	opt stack 0
   262  0018B6                     __end_of__initialization:
   263                           	opt stack 0
   264  0018B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   265  0018B8  6EF8               	movwf	tblptru,c
   266  0018BA  0100               	movlb	0
   267  0018BC  EF66  F00E         	goto	_main	;jump to C main() function
   268                           tblptru	equ	0xFF8
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           plusw1	equ	0xFE3
   272                           plusw2	equ	0xFDB
   273                           status	equ	0xFD8
   274                           
   275                           	psect	bssCOMRAM
   276  000058                     __pbssCOMRAM:
   277                           	opt stack 0
   278  000058                     _dummy_byte:
   279                           	opt stack 0
   280  000058                     	ds	1
   281                           tblptru	equ	0xFF8
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           plusw1	equ	0xFE3
   285                           plusw2	equ	0xFDB
   286                           status	equ	0xFD8
   287                           
   288                           	psect	bssBANK0
   289  000060                     __pbssBANK0:
   290                           	opt stack 0
   291  000060                     main@F4041:
   292                           	opt stack 0
   293  000060                     	ds	34
   294  000082                     main@F4043:
   295                           	opt stack 0
   296  000082                     	ds	34
   297                           tblptru	equ	0xFF8
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           plusw1	equ	0xFE3
   301                           plusw2	equ	0xFDB
   302                           status	equ	0xFD8
   303                           
   304                           	psect	cstackCOMRAM
   305  000001                     __pcstackCOMRAM:
   306                           	opt stack 0
   307  000001                     ?_buffer_pop:
   308                           	opt stack 0
   309  000001                     ?_spi_slave_get_byte:
   310                           	opt stack 0
   311  000001                     ?_buffer_peek:
   312                           	opt stack 0
   313  000001                     serial_send_byte@byte:
   314                           	opt stack 0
   315  000001                     setup_timer3@T3CON_reg:
   316                           	opt stack 0
   317  000001                     setup_spi@SSPCON1_reg:
   318                           	opt stack 0
   319  000001                     spi_send_get_byte@byte:
   320                           	opt stack 0
   321  000001                     setup_simple_serial@baudrate_value:
   322                           	opt stack 0
   323  000001                     serial_peek_receive@byte:
   324                           	opt stack 0
   325  000001                     encode_data@byte_1:
   326                           	opt stack 0
   327  000001                     decode_data@data:
   328                           	opt stack 0
   329  000001                     buffer_count@buffer:
   330                           	opt stack 0
   331  000001                     buffer_space@buffer:
   332                           	opt stack 0
   333  000001                     buffer_empty@buffer:
   334                           	opt stack 0
   335  000001                     buffer_push@buffer:
   336                           	opt stack 0
   337  000001                     buffer_pop@buffer:
   338                           	opt stack 0
   339  000001                     buffer_peek@buffer:
   340                           	opt stack 0
   341  000001                     set_timer3@value:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x0
   345  000001                     	ds	1
   346  000002                     setup_spi@SSPSTAT_reg:
   347                           	opt stack 0
   348                           
   349                           ; 1 bytes @ 0x1
   350  000002                     	ds	1
   351  000003                     ??_buffer_pop:
   352  000003                     ??_buffer_peek:
   353  000003                     serial_peek_receive@get_byte:
   354                           	opt stack 0
   355  000003                     decode_data@byte_1:
   356                           	opt stack 0
   357  000003                     buffer_push@byte:
   358                           	opt stack 0
   359  000003                     spi_slave_get_byte@byte:
   360                           	opt stack 0
   361  000003                     espi_setup@mode:
   362                           	opt stack 0
   363  000003                     _setup_simple_serial$215:
   364                           	opt stack 0
   365  000003                     encode_data@byte_2:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x2
   369  000003                     	ds	1
   370  000004                     ??_buffer_push:
   371  000004                     decode_data@byte_2:
   372                           	opt stack 0
   373  000004                     spi_slave_peek_receive@byte:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x3
   377  000004                     	ds	1
   378  000005                     ??_encode_data:
   379  000005                     ??_decode_data:
   380  000005                     buffer_push@current_position:
   381                           	opt stack 0
   382  000005                     _setup_simple_serial$216:
   383                           	opt stack 0
   384  000005                     buffer_pop@byte:
   385                           	opt stack 0
   386  000005                     buffer_peek@byte:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x4
   390  000005                     	ds	1
   391  000006                     encode_data@data:
   392                           	opt stack 0
   393  000006                     spi_slave_peek_receive@get_byte:
   394                           	opt stack 0
   395  000006                     espi_slave_receive@buffer:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x5
   399  000006                     	ds	1
   400  000007                     setup_simple_serial@baudrate_bits:
   401                           	opt stack 0
   402  000007                     eserial_send_data@buffer:
   403                           	opt stack 0
   404  000007                     eserial_receive@buffer:
   405                           	opt stack 0
   406  000007                     espi_slave_send@buffer:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x6
   410  000007                     	ds	1
   411  000008                     espi_slave_receive@value:
   412                           	opt stack 0
   413  000008                     eserial_setup@baudrate_value:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x7
   417  000008                     	ds	1
   418  000009                     ??_espi_slave_send:
   419  000009                     eserial_send_data@i:
   420                           	opt stack 0
   421  000009                     espi_slave_receive@received_1:
   422                           	opt stack 0
   423  000009                     eserial_receive@stop_function:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x8
   427  000009                     	ds	1
   428  00000A                     eserial_setup@baudrate_bits:
   429                           	opt stack 0
   430  00000A                     espi_slave_receive@received_2:
   431                           	opt stack 0
   432  00000A                     eserial_send_data@value:
   433                           	opt stack 0
   434  00000A                     espi_slave_send@byte_to_send:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x9
   438  00000A                     	ds	1
   439  00000B                     eserial_receive@timer_start:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0xA
   443  00000B                     	ds	1
   444  00000C                     espi_slave_send@byte_1:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0xB
   448  00000C                     	ds	1
   449  00000D                     espi_slave_send@byte_2:
   450                           	opt stack 0
   451  00000D                     eserial_receive@timer_up:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0xC
   455  00000D                     	ds	1
   456  00000E                     espi_slave_send@received_1:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0xD
   460  00000E                     	ds	1
   461  00000F                     ??_eserial_receive:
   462                           
   463                           ; 0 bytes @ 0xE
   464  00000F                     	ds	1
   465  000010                     eserial_receive@test:
   466                           	opt stack 0
   467  000010                     espi_slave_send@received_2:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0xF
   471  000010                     	ds	1
   472  000011                     eserial_receive@value:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x10
   476  000011                     	ds	1
   477  000012                     main@value_102:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x11
   481  000012                     	ds	2
   482  000014                     main@pic_to_pc:
   483                           	opt stack 0
   484                           
   485                           ; 34 bytes @ 0x13
   486  000014                     	ds	34
   487  000036                     main@pic_to_pic:
   488                           	opt stack 0
   489                           
   490                           ; 34 bytes @ 0x35
   491  000036                     	ds	34
   492                           tblptru	equ	0xFF8
   493                           postinc0	equ	0xFEE
   494                           wreg	equ	0xFE8
   495                           plusw1	equ	0xFE3
   496                           plusw2	equ	0xFDB
   497                           status	equ	0xFD8
   498                           
   499 ;; *************** function _setup_timer3 *****************
   500 ;; Defined at:
   501 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;  T3CON_reg       1    wreg     unsigned char 
   504 ;; Auto vars:     Size  Location     Type
   505 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   506 ;; Return value:  Size  Location     Type
   507 ;;		None               void
   508 ;; Registers used:
   509 ;;		wreg
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMRAM   BANK0
   515 ;;      Params:         0       0
   516 ;;      Locals:         1       0
   517 ;;      Temps:          0       0
   518 ;;      Totals:         1       0
   519 ;;Total ram usage:        1 bytes
   520 ;; Hardware stack levels used:    1
   521 ;; This function calls:
   522 ;;		Nothing
   523 ;; This function is called by:
   524 ;;		_main
   525 ;; This function uses a non-reentrant model
   526 ;;
   527                           
   528                           	psect	text1
   529  00182A                     __ptext1:
   530                           	opt stack 0
   531  00182A                     _setup_timer3:
   532                           	opt stack 30
   533                           
   534                           ;incstack = 0
   535                           ;setup_timer3@T3CON_reg stored from wreg
   536  00182A  6E01               	movwf	setup_timer3@T3CON_reg,c
   537                           
   538                           ;timers_pic.c: 5: T3CON = T3CON_reg;
   539  00182C  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   540  001830  0012               	return		;funcret
   541  001832                     __end_of_setup_timer3:
   542                           	opt stack 0
   543                           tblptru	equ	0xFF8
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           plusw1	equ	0xFE3
   547                           plusw2	equ	0xFDB
   548                           status	equ	0xFD8
   549                           
   550 ;; *************** function _espi_slave_send *****************
   551 ;; Defined at:
   552 ;;		line 78 in file "extended_spi.c"
   553 ;; Parameters:    Size  Location     Type
   554 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
   555 ;;		 -> main@pic_to_pic(34), 
   556 ;; Auto vars:     Size  Location     Type
   557 ;;  received_2      2   15[COMRAM] int 
   558 ;;  received_1      2   13[COMRAM] int 
   559 ;;  byte_to_send    2    9[COMRAM] unsigned int 
   560 ;;  byte_2          1   12[COMRAM] unsigned char 
   561 ;;  byte_1          1   11[COMRAM] unsigned char 
   562 ;; Return value:  Size  Location     Type
   563 ;;		None               void
   564 ;; Registers used:
   565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMRAM   BANK0
   571 ;;      Params:         2       0
   572 ;;      Locals:         8       0
   573 ;;      Temps:          1       0
   574 ;;      Totals:        11       0
   575 ;;Total ram usage:       11 bytes
   576 ;; Hardware stack levels used:    1
   577 ;; Hardware stack levels required when called:    1
   578 ;; This function calls:
   579 ;;		_buffer_count
   580 ;;		_buffer_peek
   581 ;;		_buffer_pop
   582 ;;		_encode_data
   583 ;;		_spi_send_get_byte
   584 ;; This function is called by:
   585 ;;		_main
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589                           	psect	text2
   590  001EB2                     __ptext2:
   591                           	opt stack 0
   592  001EB2                     _espi_slave_send:
   593                           	opt stack 29
   594                           
   595                           ;extended_spi.c: 80: if (buffer_count(buffer)) {
   596                           
   597                           ;incstack = 0
   598  001EB2  C007  F001         	movff	espi_slave_send@buffer,buffer_count@buffer
   599  001EB6  C008  F002         	movff	espi_slave_send@buffer+1,buffer_count@buffer+1
   600  001EBA  EC36  F00C         	call	_buffer_count	;wreg free
   601  001EBE  0900               	iorlw	0
   602  001EC0  B4D8               	btfsc	status,2,c
   603  001EC2  0012               	return	
   604                           
   605                           ;extended_spi.c: 81: uint16_t byte_to_send = buffer_peek(buffer);
   606  001EC4  C007  F001         	movff	espi_slave_send@buffer,buffer_peek@buffer
   607  001EC8  C008  F002         	movff	espi_slave_send@buffer+1,buffer_peek@buffer+1
   608  001ECC  EC80  F00D         	call	_buffer_peek	;wreg free
   609  001ED0  C001  F00A         	movff	?_buffer_peek,espi_slave_send@byte_to_send
   610  001ED4  C002  F00B         	movff	?_buffer_peek+1,espi_slave_send@byte_to_send+1
   611                           
   612                           ;extended_spi.c: 82: uint8_t byte_1;
   613                           ;extended_spi.c: 83: uint8_t byte_2;
   614                           ;extended_spi.c: 85: encode_data(byte_to_send, &byte_1, &byte_2);
   615  001ED8  0E0C               	movlw	low espi_slave_send@byte_1
   616  001EDA  6E01               	movwf	encode_data@byte_1,c
   617  001EDC  0E00               	movlw	high espi_slave_send@byte_1
   618  001EDE  6E02               	movwf	encode_data@byte_1+1,c
   619  001EE0  0E0D               	movlw	low espi_slave_send@byte_2
   620  001EE2  6E03               	movwf	encode_data@byte_2,c
   621  001EE4  0E00               	movlw	high espi_slave_send@byte_2
   622  001EE6  6E04               	movwf	encode_data@byte_2+1,c
   623  001EE8  500A               	movf	espi_slave_send@byte_to_send,w,c
   624  001EEA  EC5D  F00D         	call	_encode_data
   625                           
   626                           ;extended_spi.c: 87: LATAbits.LATA2 = 1;
   627  001EEE  8489               	bsf	3977,2,c	;volatile
   628                           
   629                           ;extended_spi.c: 88: LATAbits.LATA2 = 0;
   630  001EF0  9489               	bcf	3977,2,c	;volatile
   631                           
   632                           ;extended_spi.c: 90: int16_t received_1 = spi_send_get_byte(byte_1);
   633  001EF2  500C               	movf	espi_slave_send@byte_1,w,c
   634  001EF4  EC3F  F00C         	call	_spi_send_get_byte
   635  001EF8  6E09               	movwf	??_espi_slave_send& (0+255),c
   636  001EFA  5009               	movf	??_espi_slave_send,w,c
   637  001EFC  6E0E               	movwf	espi_slave_send@received_1,c
   638  001EFE  6A0F               	clrf	espi_slave_send@received_1+1,c
   639                           
   640                           ;extended_spi.c: 91: if (received_1 == 0x30 || received_1 == 0x10 ||
   641                           ;extended_spi.c: 92: received_1 == 0x20 || received_1 == -1)
   642  001F00  0E30               	movlw	48
   643  001F02  180E               	xorwf	espi_slave_send@received_1,w,c
   644  001F04  100F               	iorwf	espi_slave_send@received_1+1,w,c
   645  001F06  B4D8               	btfsc	status,2,c
   646  001F08  0012               	return	
   647  001F0A  0E10               	movlw	16
   648  001F0C  180E               	xorwf	espi_slave_send@received_1,w,c
   649  001F0E  100F               	iorwf	espi_slave_send@received_1+1,w,c
   650  001F10  B4D8               	btfsc	status,2,c
   651  001F12  0012               	return	
   652  001F14  0E20               	movlw	32
   653  001F16  180E               	xorwf	espi_slave_send@received_1,w,c
   654  001F18  100F               	iorwf	espi_slave_send@received_1+1,w,c
   655  001F1A  B4D8               	btfsc	status,2,c
   656  001F1C  0012               	return	
   657  001F1E  280E               	incf	espi_slave_send@received_1,w,c
   658  001F20  E105               	bnz	l1813
   659  001F22  280F               	incf	espi_slave_send@received_1+1,w,c
   660  001F24  B4D8               	btfsc	status,2,c
   661  001F26  0012               	return	
   662  001F28  D001               	goto	l1813
   663                           
   664                           ;extended_spi.c: 93: return;
   665  001F2A  0012               	return	
   666  001F2C                     l1813:
   667                           
   668                           ;extended_spi.c: 94: int16_t received_2 = spi_send_get_byte(byte_2);
   669  001F2C  500D               	movf	espi_slave_send@byte_2,w,c
   670  001F2E  EC3F  F00C         	call	_spi_send_get_byte
   671  001F32  6E09               	movwf	??_espi_slave_send& (0+255),c
   672  001F34  5009               	movf	??_espi_slave_send,w,c
   673  001F36  6E10               	movwf	espi_slave_send@received_2,c
   674  001F38  6A11               	clrf	espi_slave_send@received_2+1,c
   675  001F3A                     l1815:
   676                           
   677                           ;extended_spi.c: 95: if (received_2 == 0x30 || received_2 == 0x10 ||
   678                           ;extended_spi.c: 96: received_2 == 0x20 || received_2 == -1)
   679  001F3A  0E30               	movlw	48
   680  001F3C  1810               	xorwf	espi_slave_send@received_2,w,c
   681  001F3E  1011               	iorwf	espi_slave_send@received_2+1,w,c
   682  001F40  B4D8               	btfsc	status,2,c
   683  001F42  0012               	return	
   684  001F44  0E10               	movlw	16
   685  001F46  1810               	xorwf	espi_slave_send@received_2,w,c
   686  001F48  1011               	iorwf	espi_slave_send@received_2+1,w,c
   687  001F4A  B4D8               	btfsc	status,2,c
   688  001F4C  0012               	return	
   689  001F4E  0E20               	movlw	32
   690  001F50  1810               	xorwf	espi_slave_send@received_2,w,c
   691  001F52  1011               	iorwf	espi_slave_send@received_2+1,w,c
   692  001F54  B4D8               	btfsc	status,2,c
   693  001F56  0012               	return	
   694  001F58  2810               	incf	espi_slave_send@received_2,w,c
   695  001F5A  E106               	bnz	l1823
   696  001F5C  2811               	incf	espi_slave_send@received_2+1,w,c
   697  001F5E  B4D8               	btfsc	status,2,c
   698  001F60  0012               	return	
   699  001F62  D002               	goto	l1823
   700                           
   701                           ;extended_spi.c: 97: return;
   702  001F64  0012               	return	
   703  001F66  D000               	goto	l1823
   704  001F68                     l1823:
   705                           
   706                           ;extended_spi.c: 100: buffer_pop(buffer);
   707  001F68  C007  F001         	movff	espi_slave_send@buffer,buffer_pop@buffer
   708  001F6C  C008  F002         	movff	espi_slave_send@buffer+1,buffer_pop@buffer+1
   709  001F70  ECDC  F00D         	call	_buffer_pop	;wreg free
   710                           
   711                           ;extended_spi.c: 101: byte_to_send = buffer_peek(buffer);
   712  001F74  C007  F001         	movff	espi_slave_send@buffer,buffer_peek@buffer
   713  001F78  C008  F002         	movff	espi_slave_send@buffer+1,buffer_peek@buffer+1
   714  001F7C  EC80  F00D         	call	_buffer_peek	;wreg free
   715  001F80  C001  F00A         	movff	?_buffer_peek,espi_slave_send@byte_to_send
   716  001F84  C002  F00B         	movff	?_buffer_peek+1,espi_slave_send@byte_to_send+1
   717                           
   718                           ;extended_spi.c: 102: if (byte_to_send == -1)
   719  001F88  280A               	incf	espi_slave_send@byte_to_send,w,c
   720  001F8A  E105               	bnz	l1829
   721  001F8C  280B               	incf	espi_slave_send@byte_to_send+1,w,c
   722  001F8E  B4D8               	btfsc	status,2,c
   723  001F90  D032               	goto	l1851
   724  001F92  D001               	goto	l1829
   725                           
   726                           ;extended_spi.c: 103: break;
   727  001F94  D030               	goto	l1851
   728  001F96                     l1829:
   729                           
   730                           ;extended_spi.c: 105: encode_data(byte_to_send, &byte_1, &byte_2);
   731  001F96  0E0C               	movlw	low espi_slave_send@byte_1
   732  001F98  6E01               	movwf	encode_data@byte_1,c
   733  001F9A  0E00               	movlw	high espi_slave_send@byte_1
   734  001F9C  6E02               	movwf	encode_data@byte_1+1,c
   735  001F9E  0E0D               	movlw	low espi_slave_send@byte_2
   736  001FA0  6E03               	movwf	encode_data@byte_2,c
   737  001FA2  0E00               	movlw	high espi_slave_send@byte_2
   738  001FA4  6E04               	movwf	encode_data@byte_2+1,c
   739  001FA6  500A               	movf	espi_slave_send@byte_to_send,w,c
   740  001FA8  EC5D  F00D         	call	_encode_data
   741                           
   742                           ;extended_spi.c: 107: received_1 = spi_send_get_byte(byte_1);
   743  001FAC  500C               	movf	espi_slave_send@byte_1,w,c
   744  001FAE  EC3F  F00C         	call	_spi_send_get_byte
   745  001FB2  6E09               	movwf	??_espi_slave_send& (0+255),c
   746  001FB4  5009               	movf	??_espi_slave_send,w,c
   747  001FB6  6E0E               	movwf	espi_slave_send@received_1,c
   748  001FB8  6A0F               	clrf	espi_slave_send@received_1+1,c
   749                           
   750                           ;extended_spi.c: 108: if (received_1 == 0x30 || received_1 == 0x10 ||
   751                           ;extended_spi.c: 109: received_1 == 0x20 || received_1 == -1)
   752  001FBA  0E30               	movlw	48
   753  001FBC  180E               	xorwf	espi_slave_send@received_1,w,c
   754  001FBE  100F               	iorwf	espi_slave_send@received_1+1,w,c
   755  001FC0  B4D8               	btfsc	status,2,c
   756  001FC2  0012               	return	
   757  001FC4  0E10               	movlw	16
   758  001FC6  180E               	xorwf	espi_slave_send@received_1,w,c
   759  001FC8  100F               	iorwf	espi_slave_send@received_1+1,w,c
   760  001FCA  B4D8               	btfsc	status,2,c
   761  001FCC  0012               	return	
   762  001FCE  0E20               	movlw	32
   763  001FD0  180E               	xorwf	espi_slave_send@received_1,w,c
   764  001FD2  100F               	iorwf	espi_slave_send@received_1+1,w,c
   765  001FD4  B4D8               	btfsc	status,2,c
   766  001FD6  0012               	return	
   767  001FD8  280E               	incf	espi_slave_send@received_1,w,c
   768  001FDA  E105               	bnz	l1841
   769  001FDC  280F               	incf	espi_slave_send@received_1+1,w,c
   770  001FDE  B4D8               	btfsc	status,2,c
   771  001FE0  0012               	return	
   772  001FE2  D001               	goto	l1841
   773                           
   774                           ;extended_spi.c: 110: return;
   775  001FE4  0012               	return	
   776  001FE6                     l1841:
   777                           
   778                           ;extended_spi.c: 112: received_2 = spi_send_get_byte(byte_2);
   779  001FE6  500D               	movf	espi_slave_send@byte_2,w,c
   780  001FE8  EC3F  F00C         	call	_spi_send_get_byte
   781  001FEC  D7A2               	goto	L1
   782  001FEE  D7A5               	goto	l1815
   783                           
   784                           ;extended_spi.c: 113: if (received_2 == 0x30 || received_2 == 0x10 ||
   785                           ;extended_spi.c: 114: received_2 == 0x20 || received_2 == -1)
   786  001FF0  D7BB               	goto	l1823
   787                           
   788                           ;extended_spi.c: 115: return;
   789  001FF2  0012               	return	
   790  001FF4  D7B9               	goto	l1823
   791  001FF6                     l1851:
   792                           
   793                           ;extended_spi.c: 116: }
   794                           ;extended_spi.c: 118: spi_send_get_byte(0x30);
   795  001FF6  0E30               	movlw	48
   796  001FF8  EC3F  F00C         	call	_spi_send_get_byte
   797  001FFC  0012               	return	
   798  001FFE  0012               	return		;funcret
   799  002000                     __end_of_espi_slave_send:
   800                           	opt stack 0
   801                           tblptru	equ	0xFF8
   802                           postinc0	equ	0xFEE
   803                           wreg	equ	0xFE8
   804                           plusw1	equ	0xFE3
   805                           plusw2	equ	0xFDB
   806                           status	equ	0xFD8
   807                           
   808 ;; *************** function _encode_data *****************
   809 ;; Defined at:
   810 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  data            1    wreg     unsigned char 
   813 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
   814 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
   815 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
   816 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  data            1    5[COMRAM] unsigned char 
   819 ;; Return value:  Size  Location     Type
   820 ;;		None               void
   821 ;; Registers used:
   822 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0
   828 ;;      Params:         4       0
   829 ;;      Locals:         1       0
   830 ;;      Temps:          1       0
   831 ;;      Totals:         6       0
   832 ;;Total ram usage:        6 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; This function calls:
   835 ;;		Nothing
   836 ;; This function is called by:
   837 ;;		_espi_slave_send
   838 ;;		_espi_master_send
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text3
   843  001ABA                     __ptext3:
   844                           	opt stack 0
   845  001ABA                     _encode_data:
   846                           	opt stack 29
   847                           
   848                           ;incstack = 0
   849                           ;encode_data@data stored from wreg
   850  001ABA  6E06               	movwf	encode_data@data,c
   851                           
   852                           ;encoding.c: 5: *byte_1 = 0xA0;
   853  001ABC  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   854  001AC0  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   855  001AC4  0EA0               	movlw	160
   856  001AC6  6EDF               	movwf	indf2,c
   857                           
   858                           ;encoding.c: 6: *byte_2 = 0xA0;
   859  001AC8  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   860  001ACC  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   861  001AD0  0EA0               	movlw	160
   862  001AD2  6EDF               	movwf	indf2,c
   863                           
   864                           ;encoding.c: 8: *byte_1 |= data >> 4;
   865  001AD4  C006  F005         	movff	encode_data@data,??_encode_data
   866  001AD8  3A05               	swapf	??_encode_data,f,c
   867  001ADA  0E0F               	movlw	15
   868  001ADC  1605               	andwf	??_encode_data,f,c
   869  001ADE  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   870  001AE2  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   871  001AE6  5005               	movf	??_encode_data,w,c
   872  001AE8  12DF               	iorwf	indf2,f,c
   873                           
   874                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
   875  001AEA  C006  F005         	movff	encode_data@data,??_encode_data
   876  001AEE  0E0F               	movlw	15
   877  001AF0  1605               	andwf	??_encode_data,f,c
   878  001AF2  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   879  001AF6  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   880  001AFA  5005               	movf	??_encode_data,w,c
   881  001AFC  12DF               	iorwf	indf2,f,c
   882  001AFE  0012               	return		;funcret
   883  001B00                     __end_of_encode_data:
   884                           	opt stack 0
   885                           tblptru	equ	0xFF8
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           plusw1	equ	0xFE3
   889                           indf2	equ	0xFDF
   890                           plusw2	equ	0xFDB
   891                           fsr2h	equ	0xFDA
   892                           fsr2l	equ	0xFD9
   893                           status	equ	0xFD8
   894                           
   895 ;; *************** function _buffer_peek *****************
   896 ;; Defined at:
   897 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  buffer          2    0[COMRAM] PTR const struct circula
   900 ;;		 -> main@pic_to_pic(34), 
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  byte            2    4[COMRAM] int 
   903 ;; Return value:  Size  Location     Type
   904 ;;                  2    0[COMRAM] unsigned int 
   905 ;; Registers used:
   906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   907 ;; Tracked objects:
   908 ;;		On entry : 0/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMRAM   BANK0
   912 ;;      Params:         2       0
   913 ;;      Locals:         2       0
   914 ;;      Temps:          2       0
   915 ;;      Totals:         6       0
   916 ;;Total ram usage:        6 bytes
   917 ;; Hardware stack levels used:    1
   918 ;; This function calls:
   919 ;;		Nothing
   920 ;; This function is called by:
   921 ;;		_espi_slave_send
   922 ;;		_espi_master_send
   923 ;; This function uses a non-reentrant model
   924 ;;
   925                           
   926                           	psect	text4
   927  001B00                     __ptext4:
   928                           	opt stack 0
   929  001B00                     _buffer_peek:
   930                           	opt stack 29
   931                           
   932                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
   933                           
   934                           ;incstack = 0
   935  001B00  EE20 F001          	lfsr	2,1
   936  001B04  5001               	movf	buffer_peek@buffer,w,c
   937  001B06  26D9               	addwf	fsr2l,f,c
   938  001B08  5002               	movf	buffer_peek@buffer+1,w,c
   939  001B0A  22DA               	addwfc	fsr2h,f,c
   940  001B0C  50DF               	movf	indf2,w,c
   941  001B0E  A4D8               	btfss	status,2,c
   942  001B10  D003               	goto	l1711
   943                           
   944                           ;circular_buffer.c: 58: return -1;
   945  001B12  6801               	setf	?_buffer_peek,c
   946  001B14  6802               	setf	?_buffer_peek+1,c
   947  001B16  0012               	return	
   948  001B18                     l1711:
   949                           
   950                           ;circular_buffer.c: 59: }
   951                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
   952  001B18  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
   953  001B1C  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
   954  001B20  50DF               	movf	indf2,w,c
   955  001B22  6E03               	movwf	??_buffer_peek& (0+255),c
   956  001B24  5003               	movf	??_buffer_peek,w,c
   957  001B26  0D01               	mullw	1
   958  001B28  0E02               	movlw	2
   959  001B2A  26F3               	addwf	prodl,f,c
   960  001B2C  0E00               	movlw	0
   961  001B2E  22F4               	addwfc	prodh,f,c
   962  001B30  50F3               	movf	prodl,w,c
   963  001B32  2401               	addwf	buffer_peek@buffer,w,c
   964  001B34  6ED9               	movwf	fsr2l,c
   965  001B36  50F4               	movf	prodh,w,c
   966  001B38  2002               	addwfc	buffer_peek@buffer+1,w,c
   967  001B3A  6EDA               	movwf	fsr2h,c
   968  001B3C  50DF               	movf	indf2,w,c
   969  001B3E  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
   970  001B40  5004               	movf	??_buffer_peek+1,w,c
   971  001B42  6E05               	movwf	buffer_peek@byte,c
   972  001B44  6A06               	clrf	buffer_peek@byte+1,c
   973                           
   974                           ;circular_buffer.c: 63: return byte;
   975  001B46  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
   976  001B4A  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
   977  001B4E  0012               	return	
   978  001B50  0012               	return		;funcret
   979  001B52                     __end_of_buffer_peek:
   980                           	opt stack 0
   981                           tblptru	equ	0xFF8
   982                           prodh	equ	0xFF4
   983                           prodl	equ	0xFF3
   984                           postinc0	equ	0xFEE
   985                           wreg	equ	0xFE8
   986                           plusw1	equ	0xFE3
   987                           indf2	equ	0xFDF
   988                           plusw2	equ	0xFDB
   989                           fsr2h	equ	0xFDA
   990                           fsr2l	equ	0xFD9
   991                           status	equ	0xFD8
   992                           
   993 ;; *************** function _buffer_count *****************
   994 ;; Defined at:
   995 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  buffer          2    0[COMRAM] PTR const struct circula
   998 ;;		 -> main@pic_to_pic(34), 
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      unsigned char 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0
  1010 ;;      Params:         2       0
  1011 ;;      Locals:         0       0
  1012 ;;      Temps:          0       0
  1013 ;;      Totals:         2       0
  1014 ;;Total ram usage:        2 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_espi_slave_send
  1020 ;;		_espi_master_send
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           	psect	text5
  1025  00186C                     __ptext5:
  1026                           	opt stack 0
  1027  00186C                     _buffer_count:
  1028                           	opt stack 29
  1029                           
  1030                           ;circular_buffer.c: 6: return buffer->count;
  1031                           
  1032                           ;incstack = 0
  1033  00186C  EE20 F001          	lfsr	2,1
  1034  001870  5001               	movf	buffer_count@buffer,w,c
  1035  001872  26D9               	addwf	fsr2l,f,c
  1036  001874  5002               	movf	buffer_count@buffer+1,w,c
  1037  001876  22DA               	addwfc	fsr2h,f,c
  1038  001878  50DF               	movf	indf2,w,c
  1039  00187A  0012               	return	
  1040  00187C  0012               	return		;funcret
  1041  00187E                     __end_of_buffer_count:
  1042                           	opt stack 0
  1043                           tblptru	equ	0xFF8
  1044                           prodh	equ	0xFF4
  1045                           prodl	equ	0xFF3
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           plusw1	equ	0xFE3
  1049                           indf2	equ	0xFDF
  1050                           plusw2	equ	0xFDB
  1051                           fsr2h	equ	0xFDA
  1052                           fsr2l	equ	0xFD9
  1053                           status	equ	0xFD8
  1054                           
  1055 ;; *************** function _espi_slave_receive *****************
  1056 ;; Defined at:
  1057 ;;		line 51 in file "extended_spi.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  buffer          2    5[COMRAM] PTR struct circular_buff
  1060 ;;		 -> main@pic_to_pc(34), 
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;  received_2      1    9[COMRAM] char 
  1063 ;;  received_1      1    8[COMRAM] char 
  1064 ;;  value           1    7[COMRAM] unsigned char 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;		None               void
  1067 ;; Registers used:
  1068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0
  1074 ;;      Params:         2       0
  1075 ;;      Locals:         3       0
  1076 ;;      Temps:          0       0
  1077 ;;      Totals:         5       0
  1078 ;;Total ram usage:        5 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; Hardware stack levels required when called:    1
  1081 ;; This function calls:
  1082 ;;		_buffer_push
  1083 ;;		_buffer_space
  1084 ;;		_decode_data
  1085 ;;		_spi_send_get_byte
  1086 ;;		_spi_slave_get_byte
  1087 ;; This function is called by:
  1088 ;;		_main
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text6
  1093  001C32                     __ptext6:
  1094                           	opt stack 0
  1095  001C32                     _espi_slave_receive:
  1096                           	opt stack 29
  1097                           
  1098                           ;extended_spi.c: 53: uint8_t value;
  1099                           ;extended_spi.c: 54: int8_t received_1;
  1100                           ;extended_spi.c: 55: int8_t received_2;
  1101                           ;extended_spi.c: 57: LATAbits.LATA2 = 1;
  1102                           
  1103                           ;incstack = 0
  1104  001C32  8489               	bsf	3977,2,c	;volatile
  1105                           
  1106                           ;extended_spi.c: 58: LATAbits.LATA2 = 0;
  1107  001C34  9489               	bcf	3977,2,c	;volatile
  1108                           
  1109                           ;extended_spi.c: 60: while (buffer_space(buffer)) {
  1110  001C36  D03D               	goto	l1879
  1111  001C38                     l1855:
  1112                           
  1113                           ;extended_spi.c: 61: received_1 = spi_slave_get_byte();
  1114  001C38  EC7C  F00C         	call	_spi_slave_get_byte	;wreg free
  1115  001C3C  5001               	movf	?_spi_slave_get_byte,w,c
  1116  001C3E  6E09               	movwf	espi_slave_receive@received_1,c
  1117                           
  1118                           ;extended_spi.c: 62: if (received_1 == 0x30 || received_1 == 0x10 ||
  1119                           ;extended_spi.c: 63: received_1 == 0x20 || received_1 == -1)
  1120  001C40  0E30               	movlw	48
  1121  001C42  1809               	xorwf	espi_slave_receive@received_1,w,c
  1122  001C44  B4D8               	btfsc	status,2,c
  1123  001C46  0012               	return	
  1124  001C48  0E10               	movlw	16
  1125  001C4A  1809               	xorwf	espi_slave_receive@received_1,w,c
  1126  001C4C  B4D8               	btfsc	status,2,c
  1127  001C4E  0012               	return	
  1128  001C50  0E20               	movlw	32
  1129  001C52  1809               	xorwf	espi_slave_receive@received_1,w,c
  1130  001C54  B4D8               	btfsc	status,2,c
  1131  001C56  0012               	return	
  1132  001C58  2809               	incf	espi_slave_receive@received_1,w,c
  1133  001C5A  B4D8               	btfsc	status,2,c
  1134  001C5C  0012               	return	
  1135  001C5E  D001               	goto	l1865
  1136                           
  1137                           ;extended_spi.c: 64: return;
  1138  001C60  0012               	return	
  1139  001C62                     l1865:
  1140                           
  1141                           ;extended_spi.c: 66: received_2 = spi_slave_get_byte();
  1142  001C62  EC7C  F00C         	call	_spi_slave_get_byte	;wreg free
  1143  001C66  5001               	movf	?_spi_slave_get_byte,w,c
  1144  001C68  6E0A               	movwf	espi_slave_receive@received_2,c
  1145                           
  1146                           ;extended_spi.c: 67: if (received_2 == 0x30 || received_2 == 0x10 ||
  1147                           ;extended_spi.c: 68: received_2 == 0x20 || received_2 == -1)
  1148  001C6A  0E30               	movlw	48
  1149  001C6C  180A               	xorwf	espi_slave_receive@received_2,w,c
  1150  001C6E  B4D8               	btfsc	status,2,c
  1151  001C70  0012               	return	
  1152  001C72  0E10               	movlw	16
  1153  001C74  180A               	xorwf	espi_slave_receive@received_2,w,c
  1154  001C76  B4D8               	btfsc	status,2,c
  1155  001C78  0012               	return	
  1156  001C7A  0E20               	movlw	32
  1157  001C7C  180A               	xorwf	espi_slave_receive@received_2,w,c
  1158  001C7E  B4D8               	btfsc	status,2,c
  1159  001C80  0012               	return	
  1160  001C82  280A               	incf	espi_slave_receive@received_2,w,c
  1161  001C84  B4D8               	btfsc	status,2,c
  1162  001C86  0012               	return	
  1163  001C88  D001               	goto	l1875
  1164                           
  1165                           ;extended_spi.c: 69: return;
  1166  001C8A  0012               	return	
  1167  001C8C                     l1875:
  1168                           
  1169                           ;extended_spi.c: 71: decode_data( &value, (uint8_t)received_1, (uint8_t)received_2);
  1170  001C8C  0E08               	movlw	low espi_slave_receive@value
  1171  001C8E  6E01               	movwf	decode_data@data,c
  1172  001C90  0E00               	movlw	high espi_slave_receive@value
  1173  001C92  6E02               	movwf	decode_data@data+1,c
  1174  001C94  C009  F003         	movff	espi_slave_receive@received_1,decode_data@byte_1
  1175  001C98  C00A  F004         	movff	espi_slave_receive@received_2,decode_data@byte_2
  1176  001C9C  ECDB  F00C         	call	_decode_data	;wreg free
  1177                           
  1178                           ;extended_spi.c: 72: buffer_push(buffer, value);
  1179  001CA0  C006  F001         	movff	espi_slave_receive@buffer,buffer_push@buffer
  1180  001CA4  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_push@buffer+1
  1181  001CA8  C008  F003         	movff	espi_slave_receive@value,buffer_push@byte
  1182  001CAC  ECA9  F00D         	call	_buffer_push	;wreg free
  1183  001CB0  D000               	goto	l1879
  1184  001CB2                     l1879:
  1185  001CB2  C006  F001         	movff	espi_slave_receive@buffer,buffer_space@buffer
  1186  001CB6  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_space@buffer+1
  1187  001CBA  EC49  F00C         	call	_buffer_space	;wreg free
  1188  001CBE  0900               	iorlw	0
  1189  001CC0  A4D8               	btfss	status,2,c
  1190  001CC2  D7BA               	goto	l1855
  1191                           
  1192                           ;extended_spi.c: 73: }
  1193                           ;extended_spi.c: 75: spi_send_get_byte(0x30);
  1194  001CC4  0E30               	movlw	48
  1195  001CC6  EC3F  F00C         	call	_spi_send_get_byte
  1196  001CCA  0012               	return		;funcret
  1197  001CCC                     __end_of_espi_slave_receive:
  1198                           	opt stack 0
  1199                           tblptru	equ	0xFF8
  1200                           prodh	equ	0xFF4
  1201                           prodl	equ	0xFF3
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           plusw1	equ	0xFE3
  1205                           indf2	equ	0xFDF
  1206                           plusw2	equ	0xFDB
  1207                           fsr2h	equ	0xFDA
  1208                           fsr2l	equ	0xFD9
  1209                           status	equ	0xFD8
  1210                           
  1211 ;; *************** function _spi_send_get_byte *****************
  1212 ;; Defined at:
  1213 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;  byte            1    wreg     unsigned char 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  byte            1    0[COMRAM] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      unsigned char 
  1220 ;; Registers used:
  1221 ;;		wreg, status,2
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0
  1227 ;;      Params:         0       0
  1228 ;;      Locals:         1       0
  1229 ;;      Temps:          0       0
  1230 ;;      Totals:         1       0
  1231 ;;Total ram usage:        1 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; This function calls:
  1234 ;;		Nothing
  1235 ;; This function is called by:
  1236 ;;		_espi_slave_receive
  1237 ;;		_espi_slave_send
  1238 ;;		_wait_pulse
  1239 ;;		_espi_master_send
  1240 ;;		_espi_master_receive
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           	psect	text7
  1245  00187E                     __ptext7:
  1246                           	opt stack 0
  1247  00187E                     _spi_send_get_byte:
  1248                           	opt stack 29
  1249                           
  1250                           ;incstack = 0
  1251                           ;spi_send_get_byte@byte stored from wreg
  1252  00187E  6E01               	movwf	spi_send_get_byte@byte,c
  1253                           
  1254                           ;spi_pic.c: 35: SSPBUF = byte;
  1255  001880  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  1256                           
  1257                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  1258  001884  D000               	goto	l295
  1259  001886                     l295:
  1260  001886  A0C7               	btfss	4039,0,c	;volatile
  1261  001888  D7FE               	goto	l295
  1262                           
  1263                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  1264  00188A  BEC6               	btfsc	4038,7,c	;volatile
  1265                           
  1266                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  1267  00188C  9EC6               	bcf	4038,7,c	;volatile
  1268                           
  1269                           ;spi_pic.c: 39: return SSPBUF;
  1270  00188E  50C9               	movf	4041,w,c	;volatile
  1271  001890  0012               	return		;funcret
  1272  001892                     __end_of_spi_send_get_byte:
  1273                           	opt stack 0
  1274                           tblptru	equ	0xFF8
  1275                           prodh	equ	0xFF4
  1276                           prodl	equ	0xFF3
  1277                           postinc0	equ	0xFEE
  1278                           wreg	equ	0xFE8
  1279                           plusw1	equ	0xFE3
  1280                           indf2	equ	0xFDF
  1281                           plusw2	equ	0xFDB
  1282                           fsr2h	equ	0xFDA
  1283                           fsr2l	equ	0xFD9
  1284                           status	equ	0xFD8
  1285                           
  1286 ;; *************** function _decode_data *****************
  1287 ;; Defined at:
  1288 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  data            2    0[COMRAM] PTR unsigned char 
  1291 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  1292 ;;  byte_1          1    2[COMRAM] unsigned char 
  1293 ;;  byte_2          1    3[COMRAM] unsigned char 
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      char 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0
  1305 ;;      Params:         4       0
  1306 ;;      Locals:         0       0
  1307 ;;      Temps:          1       0
  1308 ;;      Totals:         5       0
  1309 ;;Total ram usage:        5 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; This function calls:
  1312 ;;		Nothing
  1313 ;; This function is called by:
  1314 ;;		_espi_slave_receive
  1315 ;;		_espi_master_receive
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text8
  1320  0019B6                     __ptext8:
  1321                           	opt stack 0
  1322  0019B6                     _decode_data:
  1323                           	opt stack 29
  1324                           
  1325                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  1326                           
  1327                           ;incstack = 0
  1328  0019B6  5003               	movf	decode_data@byte_1,w,c
  1329  0019B8  0BF0               	andlw	240
  1330  0019BA  0AA0               	xorlw	160
  1331  0019BC  A4D8               	btfss	status,2,c
  1332  0019BE  0012               	return	
  1333  0019C0  D002               	goto	l1661
  1334                           
  1335                           ;encoding.c: 15: return -1;
  1336                           ;	Return value of _decode_data is never used
  1337  0019C2  0012               	return	
  1338  0019C4  D008               	goto	l1665
  1339  0019C6                     l1661:
  1340                           
  1341                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  1342  0019C6  5004               	movf	decode_data@byte_2,w,c
  1343  0019C8  0BF0               	andlw	240
  1344  0019CA  0AA0               	xorlw	160
  1345  0019CC  A4D8               	btfss	status,2,c
  1346  0019CE  0012               	return	
  1347  0019D0  D002               	goto	l1665
  1348                           
  1349                           ;encoding.c: 17: return -2;
  1350                           ;	Return value of _decode_data is never used
  1351  0019D2  0012               	return	
  1352  0019D4  D000               	goto	l1665
  1353  0019D6                     l1665:
  1354                           
  1355                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  1356  0019D6  C004  F005         	movff	decode_data@byte_2,??_decode_data
  1357  0019DA  0E0F               	movlw	15
  1358  0019DC  1605               	andwf	??_decode_data,f,c
  1359  0019DE  3803               	swapf	decode_data@byte_1,w,c
  1360  0019E0  0BF0               	andlw	240
  1361  0019E2  1005               	iorwf	??_decode_data,w,c
  1362  0019E4  C001  FFD9         	movff	decode_data@data,fsr2l
  1363  0019E8  C002  FFDA         	movff	decode_data@data+1,fsr2h
  1364  0019EC  6EDF               	movwf	indf2,c
  1365  0019EE  0012               	return	
  1366                           
  1367                           ;encoding.c: 21: return 0;
  1368                           ;	Return value of _decode_data is never used
  1369  0019F0  0012               	return		;funcret
  1370  0019F2                     __end_of_decode_data:
  1371                           	opt stack 0
  1372                           tblptru	equ	0xFF8
  1373                           prodh	equ	0xFF4
  1374                           prodl	equ	0xFF3
  1375                           postinc0	equ	0xFEE
  1376                           wreg	equ	0xFE8
  1377                           plusw1	equ	0xFE3
  1378                           indf2	equ	0xFDF
  1379                           plusw2	equ	0xFDB
  1380                           fsr2h	equ	0xFDA
  1381                           fsr2l	equ	0xFD9
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function _espi_setup *****************
  1385 ;; Defined at:
  1386 ;;		line 24 in file "extended_spi.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  mode            1    wreg     unsigned char 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  mode            1    2[COMRAM] unsigned char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;		None               void
  1393 ;; Registers used:
  1394 ;;		wreg, status,2, status,0, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0
  1400 ;;      Params:         0       0
  1401 ;;      Locals:         1       0
  1402 ;;      Temps:          0       0
  1403 ;;      Totals:         1       0
  1404 ;;Total ram usage:        1 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    1
  1407 ;; This function calls:
  1408 ;;		_setup_spi
  1409 ;; This function is called by:
  1410 ;;		_main
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text9
  1415  001944                     __ptext9:
  1416                           	opt stack 0
  1417  001944                     _espi_setup:
  1418                           	opt stack 29
  1419                           
  1420                           ;incstack = 0
  1421                           ;espi_setup@mode stored from wreg
  1422  001944  6E03               	movwf	espi_setup@mode,c
  1423                           
  1424                           ;extended_spi.c: 26: setup_spi(0, 0x20 | 0x10 | mode);
  1425  001946  5003               	movf	espi_setup@mode,w,c
  1426  001948  0930               	iorlw	48
  1427  00194A  6E01               	movwf	setup_spi@SSPCON1_reg,c
  1428  00194C  0E00               	movlw	0
  1429  00194E  ECF9  F00C         	call	_setup_spi
  1430                           
  1431                           ;extended_spi.c: 28: ANSELbits.ANS2 = 0;
  1432  001952  947E               	bcf	3966,2,c	;volatile
  1433                           
  1434                           ;extended_spi.c: 29: ANSELHbits.ANS8 = 0;
  1435  001954  907F               	bcf	3967,0,c	;volatile
  1436                           
  1437                           ;extended_spi.c: 31: if (mode == 0x04 || mode == 0x05) {
  1438  001956  0E04               	movlw	4
  1439  001958  1803               	xorwf	espi_setup@mode,w,c
  1440  00195A  B4D8               	btfsc	status,2,c
  1441  00195C  D004               	goto	l364
  1442  00195E  0E05               	movlw	5
  1443  001960  1803               	xorwf	espi_setup@mode,w,c
  1444  001962  A4D8               	btfss	status,2,c
  1445  001964  D004               	goto	l362
  1446  001966                     l364:
  1447                           
  1448                           ;extended_spi.c: 32: TRISAbits.RA2 = 0;
  1449  001966  9492               	bcf	3986,2,c	;volatile
  1450                           
  1451                           ;extended_spi.c: 33: LATAbits.LATA2 = 0;
  1452  001968  9489               	bcf	3977,2,c	;volatile
  1453                           
  1454                           ;extended_spi.c: 34: TRISCbits.RC6 = 1;
  1455  00196A  8C94               	bsf	3988,6,c	;volatile
  1456                           
  1457                           ;extended_spi.c: 35: } else {
  1458  00196C  0012               	return	
  1459  00196E                     l362:
  1460                           
  1461                           ;extended_spi.c: 36: TRISAbits.RA2 = 1;
  1462  00196E  8492               	bsf	3986,2,c	;volatile
  1463                           
  1464                           ;extended_spi.c: 37: TRISCbits.RC6 = 0;
  1465  001970  9C94               	bcf	3988,6,c	;volatile
  1466                           
  1467                           ;extended_spi.c: 38: LATCbits.LATC6 = 0;
  1468  001972  9C8B               	bcf	3979,6,c	;volatile
  1469                           
  1470                           ;extended_spi.c: 39: INTCON2bits.INTEDG2 = 1;
  1471  001974  88F1               	bsf	intcon2,4,c	;volatile
  1472                           
  1473                           ;extended_spi.c: 40: INTCON3bits.INT2E = 1;
  1474  001976  88F0               	bsf	intcon3,4,c	;volatile
  1475  001978  0012               	return	
  1476  00197A  0012               	return		;funcret
  1477  00197C                     __end_of_espi_setup:
  1478                           	opt stack 0
  1479                           tblptru	equ	0xFF8
  1480                           prodh	equ	0xFF4
  1481                           prodl	equ	0xFF3
  1482                           intcon2	equ	0xFF1
  1483                           intcon3	equ	0xFF0
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           plusw1	equ	0xFE3
  1487                           indf2	equ	0xFDF
  1488                           plusw2	equ	0xFDB
  1489                           fsr2h	equ	0xFDA
  1490                           fsr2l	equ	0xFD9
  1491                           status	equ	0xFD8
  1492                           
  1493 ;; *************** function _setup_spi *****************
  1494 ;; Defined at:
  1495 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;  SSPSTAT_reg     1    wreg     unsigned char 
  1498 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
  1501 ;; Return value:  Size  Location     Type
  1502 ;;		None               void
  1503 ;; Registers used:
  1504 ;;		wreg, status,2, status,0
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0
  1510 ;;      Params:         1       0
  1511 ;;      Locals:         1       0
  1512 ;;      Temps:          0       0
  1513 ;;      Totals:         2       0
  1514 ;;Total ram usage:        2 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_espi_setup
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text10
  1524  0019F2                     __ptext10:
  1525                           	opt stack 0
  1526  0019F2                     _setup_spi:
  1527                           	opt stack 29
  1528                           
  1529                           ;incstack = 0
  1530                           ;setup_spi@SSPSTAT_reg stored from wreg
  1531  0019F2  6E02               	movwf	setup_spi@SSPSTAT_reg,c
  1532                           
  1533                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
  1534  0019F4  9E94               	bcf	3988,7,c	;volatile
  1535                           
  1536                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
  1537  0019F6  947F               	bcf	3967,2,c	;volatile
  1538                           
  1539                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
  1540  0019F8  8893               	bsf	3987,4,c	;volatile
  1541                           
  1542                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
  1543  0019FA  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
  1544                           
  1545                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
  1546  0019FE  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
  1547                           
  1548                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
  1549  001A02  50C6               	movf	4038,w,c	;volatile
  1550  001A04  0B0F               	andlw	15
  1551  001A06  0A05               	xorlw	5
  1552  001A08  B4D8               	btfsc	status,2,c
  1553  001A0A  D005               	goto	l289
  1554  001A0C  50C6               	movf	4038,w,c	;volatile
  1555  001A0E  0B0F               	andlw	15
  1556  001A10  0A04               	xorlw	4
  1557  001A12  A4D8               	btfss	status,2,c
  1558  001A14  D00A               	goto	l287
  1559  001A16                     l289:
  1560                           
  1561                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
  1562  001A16  8C93               	bsf	3987,6,c	;volatile
  1563                           
  1564                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
  1565  001A18  50C6               	movf	4038,w,c	;volatile
  1566  001A1A  0B0F               	andlw	15
  1567  001A1C  0A04               	xorlw	4
  1568  001A1E  A4D8               	btfss	status,2,c
  1569  001A20  D002               	goto	l290
  1570                           
  1571                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
  1572  001A22  907F               	bcf	3967,0,c	;volatile
  1573                           
  1574                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
  1575  001A24  8C94               	bsf	3988,6,c	;volatile
  1576  001A26                     l290:
  1577                           
  1578                           ;spi_pic.c: 26: }
  1579                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
  1580  001A26  9EC7               	bcf	4039,7,c	;volatile
  1581                           
  1582                           ;spi_pic.c: 28: } else {
  1583  001A28  0012               	return	
  1584  001A2A                     l287:
  1585                           
  1586                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
  1587  001A2A  9C93               	bcf	3987,6,c	;volatile
  1588  001A2C  0012               	return	
  1589  001A2E  0012               	return		;funcret
  1590  001A30                     __end_of_setup_spi:
  1591                           	opt stack 0
  1592                           tblptru	equ	0xFF8
  1593                           prodh	equ	0xFF4
  1594                           prodl	equ	0xFF3
  1595                           intcon2	equ	0xFF1
  1596                           intcon3	equ	0xFF0
  1597                           postinc0	equ	0xFEE
  1598                           wreg	equ	0xFE8
  1599                           plusw1	equ	0xFE3
  1600                           indf2	equ	0xFDF
  1601                           plusw2	equ	0xFDB
  1602                           fsr2h	equ	0xFDA
  1603                           fsr2l	equ	0xFD9
  1604                           status	equ	0xFD8
  1605                           
  1606 ;; *************** function _eserial_setup *****************
  1607 ;; Defined at:
  1608 ;;		line 17 in file "extended_serial.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;  baudrate_bit    1    wreg     unsigned char 
  1611 ;;  baudrate_val    2    7[COMRAM] unsigned int 
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  baudrate_bit    1    9[COMRAM] unsigned char 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;		None               void
  1616 ;; Registers used:
  1617 ;;		wreg, status,2, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0
  1623 ;;      Params:         2       0
  1624 ;;      Locals:         1       0
  1625 ;;      Temps:          0       0
  1626 ;;      Totals:         3       0
  1627 ;;Total ram usage:        3 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    1
  1630 ;; This function calls:
  1631 ;;		_setup_simple_serial
  1632 ;; This function is called by:
  1633 ;;		_main
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           	psect	text11
  1638  0018DC                     __ptext11:
  1639                           	opt stack 0
  1640  0018DC                     _eserial_setup:
  1641                           	opt stack 29
  1642                           
  1643                           ;incstack = 0
  1644                           ;eserial_setup@baudrate_bits stored from wreg
  1645  0018DC  6E0A               	movwf	eserial_setup@baudrate_bits,c
  1646                           
  1647                           ;extended_serial.c: 19: ANSELbits.ANS5 = 0;
  1648  0018DE  9A7E               	bcf	3966,5,c	;volatile
  1649                           
  1650                           ;extended_serial.c: 20: ANSELHbits.ANS11 = 0;
  1651  0018E0  967F               	bcf	3967,3,c	;volatile
  1652                           
  1653                           ;extended_serial.c: 22: TRISCbits.RC0 = 0;
  1654  0018E2  9094               	bcf	3988,0,c	;volatile
  1655                           
  1656                           ;extended_serial.c: 23: TRISCbits.RC1 = 1;
  1657  0018E4  8294               	bsf	3988,1,c	;volatile
  1658                           
  1659                           ;extended_serial.c: 25: setup_simple_serial(baudrate_bits, baudrate_value);
  1660  0018E6  C008  F001         	movff	eserial_setup@baudrate_value,setup_simple_serial@baudrate_value
  1661  0018EA  C009  F002         	movff	eserial_setup@baudrate_value+1,setup_simple_serial@baudrate_value+1
  1662  0018EE  500A               	movf	eserial_setup@baudrate_bits,w,c
  1663  0018F0  EC3A  F00D         	call	_setup_simple_serial
  1664                           
  1665                           ;extended_serial.c: 27: LATCbits.LATC0 = 1;
  1666  0018F4  808B               	bsf	3979,0,c	;volatile
  1667  0018F6  0012               	return		;funcret
  1668  0018F8                     __end_of_eserial_setup:
  1669                           	opt stack 0
  1670                           tblptru	equ	0xFF8
  1671                           prodh	equ	0xFF4
  1672                           prodl	equ	0xFF3
  1673                           intcon2	equ	0xFF1
  1674                           intcon3	equ	0xFF0
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           plusw1	equ	0xFE3
  1678                           indf2	equ	0xFDF
  1679                           plusw2	equ	0xFDB
  1680                           fsr2h	equ	0xFDA
  1681                           fsr2l	equ	0xFD9
  1682                           status	equ	0xFD8
  1683                           
  1684 ;; *************** function _setup_simple_serial *****************
  1685 ;; Defined at:
  1686 ;;		line 18 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;  baudrate_bit    1    wreg     unsigned char 
  1689 ;;  baudrate_val    2    0[COMRAM] unsigned int 
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;  baudrate_bit    1    6[COMRAM] unsigned char 
  1692 ;; Return value:  Size  Location     Type
  1693 ;;		None               void
  1694 ;; Registers used:
  1695 ;;		wreg, status,2
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0
  1701 ;;      Params:         2       0
  1702 ;;      Locals:         5       0
  1703 ;;      Temps:          0       0
  1704 ;;      Totals:         7       0
  1705 ;;Total ram usage:        7 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; This function calls:
  1708 ;;		Nothing
  1709 ;; This function is called by:
  1710 ;;		_eserial_setup
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           	psect	text12
  1715  001A74                     __ptext12:
  1716                           	opt stack 0
  1717  001A74                     _setup_simple_serial:
  1718                           	opt stack 29
  1719                           
  1720                           ;incstack = 0
  1721                           ;setup_simple_serial@baudrate_bits stored from wreg
  1722  001A74  6E07               	movwf	setup_simple_serial@baudrate_bits,c
  1723                           
  1724                           ;serial_pic.c: 20: ANSELHbits.ANS11 = 0;
  1725  001A76  967F               	bcf	3967,3,c	;volatile
  1726                           
  1727                           ;serial_pic.c: 21: TXSTA = (baudrate_bits & 0x04) ? 0x24: 0x20;
  1728  001A78  B407               	btfsc	setup_simple_serial@baudrate_bits,2,c
  1729  001A7A  D004               	goto	l1611
  1730  001A7C  0E00               	movlw	0
  1731  001A7E  6E04               	movwf	_setup_simple_serial$215+1,c
  1732  001A80  0E20               	movlw	32
  1733  001A82  D003               	goto	L2
  1734  001A84                     l1611:
  1735  001A84  0E00               	movlw	0
  1736  001A86  6E04               	movwf	_setup_simple_serial$215+1,c
  1737  001A88  0E24               	movlw	36
  1738  001A8A                     L2:
  1739  001A8A  6E03               	movwf	_setup_simple_serial$215,c
  1740  001A8C  D000               	goto	l1613
  1741  001A8E                     l1613:
  1742  001A8E  C003  FFAC         	movff	_setup_simple_serial$215,4012	;volatile
  1743                           
  1744                           ;serial_pic.c: 22: RCSTA = 0x90;
  1745  001A92  0E90               	movlw	144
  1746  001A94  6EAB               	movwf	4011,c	;volatile
  1747                           
  1748                           ;serial_pic.c: 23: BAUDCON = (baudrate_bits & 0x08) ? 0x08 : 0x00;
  1749  001A96  B607               	btfsc	setup_simple_serial@baudrate_bits,3,c
  1750  001A98  D004               	goto	l1619
  1751  001A9A  0E00               	movlw	0
  1752  001A9C  6E06               	movwf	_setup_simple_serial$216+1,c
  1753  001A9E  0E00               	movlw	0
  1754  001AA0  D003               	goto	L3
  1755  001AA2                     l1619:
  1756  001AA2  0E00               	movlw	0
  1757  001AA4  6E06               	movwf	_setup_simple_serial$216+1,c
  1758  001AA6  0E08               	movlw	8
  1759  001AA8                     L3:
  1760  001AA8  6E05               	movwf	_setup_simple_serial$216,c
  1761  001AAA  D000               	goto	l1621
  1762  001AAC                     l1621:
  1763  001AAC  C005  FFB8         	movff	_setup_simple_serial$216,4024	;volatile
  1764                           
  1765                           ;serial_pic.c: 25: SPBRGH = baudrate_value >> 8;
  1766  001AB0  5002               	movf	setup_simple_serial@baudrate_value+1,w,c
  1767  001AB2  6EB0               	movwf	4016,c	;volatile
  1768                           
  1769                           ;serial_pic.c: 26: SPBRG = baudrate_value;
  1770  001AB4  C001  FFAF         	movff	setup_simple_serial@baudrate_value,4015	;volatile
  1771  001AB8  0012               	return		;funcret
  1772  001ABA                     __end_of_setup_simple_serial:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           prodh	equ	0xFF4
  1776                           prodl	equ	0xFF3
  1777                           intcon2	equ	0xFF1
  1778                           intcon3	equ	0xFF0
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           plusw1	equ	0xFE3
  1782                           indf2	equ	0xFDF
  1783                           plusw2	equ	0xFDB
  1784                           fsr2h	equ	0xFDA
  1785                           fsr2l	equ	0xFD9
  1786                           status	equ	0xFD8
  1787                           
  1788 ;; *************** function _eserial_send_data *****************
  1789 ;; Defined at:
  1790 ;;		line 31 in file "extended_serial.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  1793 ;;		 -> main@pic_to_pc(34), 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  value           2    9[COMRAM] int 
  1796 ;;  i               1    8[COMRAM] char 
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      char 
  1799 ;; Registers used:
  1800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0
  1806 ;;      Params:         2       0
  1807 ;;      Locals:         3       0
  1808 ;;      Temps:          0       0
  1809 ;;      Totals:         5       0
  1810 ;;Total ram usage:        5 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    1
  1813 ;; This function calls:
  1814 ;;		_buffer_pop
  1815 ;;		_serial_send_byte
  1816 ;; This function is called by:
  1817 ;;		_main
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text13
  1822  001A30                     __ptext13:
  1823                           	opt stack 0
  1824  001A30                     _eserial_send_data:
  1825                           	opt stack 29
  1826                           
  1827                           ;extended_serial.c: 36: int8_t i = 0;
  1828                           
  1829                           ;incstack = 0
  1830  001A30  0E00               	movlw	0
  1831  001A32  6E09               	movwf	eserial_send_data@i,c
  1832                           
  1833                           ;extended_serial.c: 37: int16_t value = buffer_pop(buffer);
  1834  001A34  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  1835  001A38  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  1836  001A3C  ECDC  F00D         	call	_buffer_pop	;wreg free
  1837  001A40  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  1838  001A44  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  1839                           
  1840                           ;extended_serial.c: 38: while (value != -1) {
  1841  001A48  D00F               	goto	l1893
  1842  001A4A                     l1887:
  1843                           
  1844                           ;extended_serial.c: 39: serial_send_byte((uint8_t)value);
  1845  001A4A  500A               	movf	eserial_send_data@value,w,c
  1846  001A4C  EC26  F00C         	call	_serial_send_byte
  1847                           
  1848                           ;extended_serial.c: 40: value = buffer_pop(buffer);
  1849  001A50  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  1850  001A54  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  1851  001A58  ECDC  F00D         	call	_buffer_pop	;wreg free
  1852  001A5C  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  1853  001A60  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  1854                           
  1855                           ;extended_serial.c: 41: i++;
  1856  001A64  2A09               	incf	eserial_send_data@i,f,c
  1857  001A66  D000               	goto	l1893
  1858  001A68                     l1893:
  1859  001A68  280A               	incf	eserial_send_data@value,w,c
  1860  001A6A  E1EF               	bnz	l1887
  1861  001A6C  280B               	incf	eserial_send_data@value+1,w,c
  1862  001A6E  A4D8               	btfss	status,2,c
  1863  001A70  D7EC               	goto	l1887
  1864                           
  1865                           ;extended_serial.c: 42: }
  1866                           ;extended_serial.c: 44: return i;
  1867                           ;	Return value of _eserial_send_data is never used
  1868  001A72  0012               	return		;funcret
  1869  001A74                     __end_of_eserial_send_data:
  1870                           	opt stack 0
  1871                           tblptru	equ	0xFF8
  1872                           prodh	equ	0xFF4
  1873                           prodl	equ	0xFF3
  1874                           intcon2	equ	0xFF1
  1875                           intcon3	equ	0xFF0
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           plusw1	equ	0xFE3
  1879                           indf2	equ	0xFDF
  1880                           plusw2	equ	0xFDB
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function _serial_send_byte *****************
  1886 ;; Defined at:
  1887 ;;		line 66 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  byte            1    wreg     unsigned char 
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  byte            1    0[COMRAM] unsigned char 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;		None               void
  1894 ;; Registers used:
  1895 ;;		wreg
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0
  1901 ;;      Params:         0       0
  1902 ;;      Locals:         1       0
  1903 ;;      Temps:          0       0
  1904 ;;      Totals:         1       0
  1905 ;;Total ram usage:        1 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		_eserial_send_data
  1911 ;;		_serial_send_data
  1912 ;;		_serial_send_buffer
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text14
  1917  00184C                     __ptext14:
  1918                           	opt stack 0
  1919  00184C                     _serial_send_byte:
  1920                           	opt stack 29
  1921                           
  1922                           ;incstack = 0
  1923                           ;serial_send_byte@byte stored from wreg
  1924  00184C  6E01               	movwf	serial_send_byte@byte,c
  1925                           
  1926                           ;serial_pic.c: 68: while (!TXIF);
  1927  00184E  D000               	goto	l106
  1928  001850                     l106:
  1929  001850  A89E               	btfss	3998,4,c	;volatile
  1930  001852  D7FE               	goto	l106
  1931                           
  1932                           ;serial_pic.c: 69: TXREG = byte;
  1933  001854  C001  FFAD         	movff	serial_send_byte@byte,4013	;volatile
  1934  001858  0012               	return		;funcret
  1935  00185A                     __end_of_serial_send_byte:
  1936                           	opt stack 0
  1937                           tblptru	equ	0xFF8
  1938                           prodh	equ	0xFF4
  1939                           prodl	equ	0xFF3
  1940                           intcon2	equ	0xFF1
  1941                           intcon3	equ	0xFF0
  1942                           postinc0	equ	0xFEE
  1943                           wreg	equ	0xFE8
  1944                           plusw1	equ	0xFE3
  1945                           indf2	equ	0xFDF
  1946                           plusw2	equ	0xFDB
  1947                           fsr2h	equ	0xFDA
  1948                           fsr2l	equ	0xFD9
  1949                           status	equ	0xFD8
  1950                           
  1951 ;; *************** function _buffer_pop *****************
  1952 ;; Defined at:
  1953 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  1956 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  byte            2    4[COMRAM] int 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  2    0[COMRAM] int 
  1961 ;; Registers used:
  1962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0
  1968 ;;      Params:         2       0
  1969 ;;      Locals:         2       0
  1970 ;;      Temps:          2       0
  1971 ;;      Totals:         6       0
  1972 ;;Total ram usage:        6 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_eserial_send_data
  1978 ;;		_espi_slave_send
  1979 ;;		_espi_master_send
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text15
  1984  001BB8                     __ptext15:
  1985                           	opt stack 0
  1986  001BB8                     _buffer_pop:
  1987                           	opt stack 29
  1988                           
  1989                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
  1990                           
  1991                           ;incstack = 0
  1992  001BB8  EE20 F001          	lfsr	2,1
  1993  001BBC  5001               	movf	buffer_pop@buffer,w,c
  1994  001BBE  26D9               	addwf	fsr2l,f,c
  1995  001BC0  5002               	movf	buffer_pop@buffer+1,w,c
  1996  001BC2  22DA               	addwfc	fsr2h,f,c
  1997  001BC4  50DF               	movf	indf2,w,c
  1998  001BC6  A4D8               	btfss	status,2,c
  1999  001BC8  D003               	goto	l1673
  2000                           
  2001                           ;circular_buffer.c: 40: return -1;
  2002  001BCA  6801               	setf	?_buffer_pop,c
  2003  001BCC  6802               	setf	?_buffer_pop+1,c
  2004  001BCE  0012               	return	
  2005  001BD0                     l1673:
  2006                           
  2007                           ;circular_buffer.c: 41: }
  2008                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2009  001BD0  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2010  001BD4  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2011  001BD8  50DF               	movf	indf2,w,c
  2012  001BDA  6E03               	movwf	??_buffer_pop& (0+255),c
  2013  001BDC  5003               	movf	??_buffer_pop,w,c
  2014  001BDE  0D01               	mullw	1
  2015  001BE0  0E02               	movlw	2
  2016  001BE2  26F3               	addwf	prodl,f,c
  2017  001BE4  0E00               	movlw	0
  2018  001BE6  22F4               	addwfc	prodh,f,c
  2019  001BE8  50F3               	movf	prodl,w,c
  2020  001BEA  2401               	addwf	buffer_pop@buffer,w,c
  2021  001BEC  6ED9               	movwf	fsr2l,c
  2022  001BEE  50F4               	movf	prodh,w,c
  2023  001BF0  2002               	addwfc	buffer_pop@buffer+1,w,c
  2024  001BF2  6EDA               	movwf	fsr2h,c
  2025  001BF4  50DF               	movf	indf2,w,c
  2026  001BF6  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  2027  001BF8  5004               	movf	??_buffer_pop+1,w,c
  2028  001BFA  6E05               	movwf	buffer_pop@byte,c
  2029  001BFC  6A06               	clrf	buffer_pop@byte+1,c
  2030                           
  2031                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  2032  001BFE  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2033  001C02  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2034  001C06  50DF               	movf	indf2,w,c
  2035  001C08  6E03               	movwf	??_buffer_pop& (0+255),c
  2036  001C0A  2803               	incf	??_buffer_pop,w,c
  2037  001C0C  0B1F               	andlw	31
  2038  001C0E  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2039  001C12  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2040  001C16  6EDF               	movwf	indf2,c
  2041                           
  2042                           ;circular_buffer.c: 45: buffer->count--;
  2043  001C18  EE20 F001          	lfsr	2,1
  2044  001C1C  5001               	movf	buffer_pop@buffer,w,c
  2045  001C1E  26D9               	addwf	fsr2l,f,c
  2046  001C20  5002               	movf	buffer_pop@buffer+1,w,c
  2047  001C22  22DA               	addwfc	fsr2h,f,c
  2048  001C24  06DF               	decf	indf2,f,c
  2049                           
  2050                           ;circular_buffer.c: 47: return byte;
  2051  001C26  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  2052  001C2A  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  2053  001C2E  0012               	return	
  2054  001C30  0012               	return		;funcret
  2055  001C32                     __end_of_buffer_pop:
  2056                           	opt stack 0
  2057                           tblptru	equ	0xFF8
  2058                           prodh	equ	0xFF4
  2059                           prodl	equ	0xFF3
  2060                           intcon2	equ	0xFF1
  2061                           intcon3	equ	0xFF0
  2062                           postinc0	equ	0xFEE
  2063                           wreg	equ	0xFE8
  2064                           plusw1	equ	0xFE3
  2065                           indf2	equ	0xFDF
  2066                           plusw2	equ	0xFDB
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _eserial_receive *****************
  2072 ;; Defined at:
  2073 ;;		line 47 in file "extended_serial.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  2076 ;;		 -> main@pic_to_pic(34), 
  2077 ;;  stop_functio    2    8[COMRAM] PTR FTN()unsigned char 
  2078 ;;		 -> return_false(1), 
  2079 ;;  timer_start     2   10[COMRAM] PTR FTN(int ,)void 
  2080 ;;		 -> set_timer3(0), 
  2081 ;;  timer_up        2   12[COMRAM] PTR FTN()unsigned char 
  2082 ;;		 -> timer3_up(1), 
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;  test            1   15[COMRAM] unsigned char 
  2085 ;;  value           1   16[COMRAM] unsigned char 
  2086 ;; Return value:  Size  Location     Type
  2087 ;;		None               void
  2088 ;; Registers used:
  2089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMRAM   BANK0
  2095 ;;      Params:         8       0
  2096 ;;      Locals:         2       0
  2097 ;;      Temps:          1       0
  2098 ;;      Totals:        11       0
  2099 ;;Total ram usage:       11 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; Hardware stack levels required when called:    3
  2102 ;; This function calls:
  2103 ;;		_buffer_empty
  2104 ;;		_buffer_push
  2105 ;;		_buffer_space
  2106 ;;		_return_false
  2107 ;;		_serial_peek_receive
  2108 ;;		_set_timer3
  2109 ;;		_timer3_up
  2110 ;; This function is called by:
  2111 ;;		_main
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text16
  2116  001D86                     __ptext16:
  2117                           	opt stack 0
  2118  001D86                     _eserial_receive:
  2119                           	opt stack 27
  2120                           
  2121                           ;extended_serial.c: 52: if (buffer_empty(buffer)) {
  2122                           
  2123                           ;incstack = 0
  2124  001D86  C007  F001         	movff	eserial_receive@buffer,buffer_empty@buffer
  2125  001D8A  C008  F002         	movff	eserial_receive@buffer+1,buffer_empty@buffer+1
  2126  001D8E  EC60  F00C         	call	_buffer_empty	;wreg free
  2127  001D92  0900               	iorlw	0
  2128  001D94  B4D8               	btfsc	status,2,c
  2129  001D96  0012               	return	
  2130                           
  2131                           ;extended_serial.c: 53: uint8_t value;
  2132                           ;extended_serial.c: 54: LATCbits.LATC0 = 0;
  2133  001D98  908B               	bcf	3979,0,c	;volatile
  2134                           
  2135                           ;extended_serial.c: 56: if (stop_function == (0)) {
  2136  001D9A  5009               	movf	eserial_receive@stop_function,w,c
  2137  001D9C  100A               	iorwf	eserial_receive@stop_function+1,w,c
  2138  001D9E  B4D8               	btfsc	status,2,c
  2139  001DA0  D015               	goto	l1771
  2140  001DA2  D01F               	goto	l1773
  2141                           
  2142                           ;extended_serial.c: 57: while (buffer_space(buffer) > 0x04) {
  2143  001DA4  D013               	goto	l1771
  2144  001DA6                     l1767:
  2145                           
  2146                           ;extended_serial.c: 58: if (serial_peek_receive(1, &value)) {
  2147  001DA6  0E11               	movlw	low eserial_receive@value
  2148  001DA8  6E01               	movwf	serial_peek_receive@byte,c
  2149  001DAA  0E00               	movlw	high eserial_receive@value
  2150  001DAC  6E02               	movwf	serial_peek_receive@byte+1,c
  2151  001DAE  0E01               	movlw	1
  2152  001DB0  EC8B  F00C         	call	_serial_peek_receive
  2153  001DB4  0900               	iorlw	0
  2154  001DB6  B4D8               	btfsc	status,2,c
  2155  001DB8  D009               	goto	l1771
  2156                           
  2157                           ;extended_serial.c: 59: buffer_push(buffer, value);
  2158  001DBA  C007  F001         	movff	eserial_receive@buffer,buffer_push@buffer
  2159  001DBE  C008  F002         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  2160  001DC2  C011  F003         	movff	eserial_receive@value,buffer_push@byte
  2161  001DC6  ECA9  F00D         	call	_buffer_push	;wreg free
  2162  001DCA  D000               	goto	l1771
  2163  001DCC                     l1771:
  2164  001DCC  C007  F001         	movff	eserial_receive@buffer,buffer_space@buffer
  2165  001DD0  C008  F002         	movff	eserial_receive@buffer+1,buffer_space@buffer+1
  2166  001DD4  EC49  F00C         	call	_buffer_space	;wreg free
  2167  001DD8  6E0F               	movwf	??_eserial_receive& (0+255),c
  2168  001DDA  0E05               	movlw	5
  2169  001DDC  600F               	cpfslt	??_eserial_receive,c
  2170  001DDE  D7E3               	goto	l1767
  2171                           
  2172                           ;extended_serial.c: 60: }
  2173                           ;extended_serial.c: 61: }
  2174                           ;extended_serial.c: 62: } else {
  2175  001DE0  D032               	goto	l203
  2176  001DE2                     l1773:
  2177                           
  2178                           ;extended_serial.c: 63: bool test = 0;
  2179  001DE2  0E00               	movlw	0
  2180  001DE4  D01F               	goto	u1419
  2181  001DE6                     l1775:
  2182                           
  2183                           ;extended_serial.c: 66: if (serial_peek_receive(1, &value)) {
  2184  001DE6  0E11               	movlw	low eserial_receive@value
  2185  001DE8  6E01               	movwf	serial_peek_receive@byte,c
  2186  001DEA  0E00               	movlw	high eserial_receive@value
  2187  001DEC  6E02               	movwf	serial_peek_receive@byte+1,c
  2188  001DEE  0E01               	movlw	1
  2189  001DF0  EC8B  F00C         	call	_serial_peek_receive
  2190  001DF4  0900               	iorlw	0
  2191  001DF6  B4D8               	btfsc	status,2,c
  2192  001DF8  D009               	goto	l1779
  2193                           
  2194                           ;extended_serial.c: 67: buffer_push(buffer, value);
  2195  001DFA  C007  F001         	movff	eserial_receive@buffer,buffer_push@buffer
  2196  001DFE  C008  F002         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  2197  001E02  C011  F003         	movff	eserial_receive@value,buffer_push@byte
  2198  001E06  ECA9  F00D         	call	_buffer_push	;wreg free
  2199  001E0A  D000               	goto	l1779
  2200  001E0C                     l1779:
  2201                           
  2202                           ;extended_serial.c: 68: }
  2203                           ;extended_serial.c: 69: test = (*stop_function)();
  2204  001E0C  D801               	call	u1418
  2205  001E0E  D00A               	goto	u1419
  2206  001E10                     u1418:
  2207  001E10  0005               	push	
  2208  001E12  6EFA               	movwf	pclath,c
  2209  001E14  5009               	movf	eserial_receive@stop_function,w,c
  2210  001E16  6EFD               	movwf	tosl,c
  2211  001E18  500A               	movf	eserial_receive@stop_function+1,w,c
  2212  001E1A  6EFE               	movwf	tosh,c
  2213  001E1C  50F8               	movf	tblptru,w,c
  2214  001E1E  6EFF               	movwf	tosu,c
  2215  001E20  50FA               	movf	pclath,w,c
  2216  001E22  0012               	return		;indir
  2217  001E24                     u1419:
  2218  001E24  6E10               	movwf	eserial_receive@test,c
  2219  001E26  D000               	goto	l1781
  2220  001E28                     l1781:
  2221  001E28  C007  F001         	movff	eserial_receive@buffer,buffer_space@buffer
  2222  001E2C  C008  F002         	movff	eserial_receive@buffer+1,buffer_space@buffer+1
  2223  001E30  EC49  F00C         	call	_buffer_space	;wreg free
  2224  001E34  6E0F               	movwf	??_eserial_receive& (0+255),c
  2225  001E36  0E04               	movlw	4
  2226  001E38  640F               	cpfsgt	??_eserial_receive,c
  2227  001E3A  D005               	goto	l203
  2228  001E3C  5010               	movf	eserial_receive@test,w,c
  2229  001E3E  A4D8               	btfss	status,2,c
  2230  001E40  D002               	goto	l203
  2231  001E42  D7D1               	goto	l1775
  2232  001E44  D000               	goto	l203
  2233  001E46                     l203:
  2234                           
  2235                           ;extended_serial.c: 70: }
  2236                           ;extended_serial.c: 71: }
  2237                           ;extended_serial.c: 73: LATCbits.LATC0 = 1;
  2238  001E46  808B               	bsf	3979,0,c	;volatile
  2239                           
  2240                           ;extended_serial.c: 74: (*timer_start)(65035);
  2241  001E48  0EFE               	movlw	254
  2242  001E4A  6E02               	movwf	set_timer3@value+1,c
  2243  001E4C  0E0B               	movlw	11
  2244  001E4E  6E01               	movwf	set_timer3@value,c
  2245  001E50  D801               	call	u1448
  2246  001E52  D01D               	goto	l1791
  2247  001E54                     u1448:
  2248  001E54  0005               	push	
  2249  001E56  6EFA               	movwf	pclath,c
  2250  001E58  500B               	movf	eserial_receive@timer_start,w,c
  2251  001E5A  6EFD               	movwf	tosl,c
  2252  001E5C  500C               	movf	eserial_receive@timer_start+1,w,c
  2253  001E5E  6EFE               	movwf	tosh,c
  2254  001E60  50F8               	movf	tblptru,w,c
  2255  001E62  6EFF               	movwf	tosu,c
  2256  001E64  50FA               	movf	pclath,w,c
  2257  001E66  0012               	return		;indir
  2258  001E68                     l1787:
  2259                           
  2260                           ;extended_serial.c: 77: if (serial_peek_receive(1, &value)) {
  2261  001E68  0E11               	movlw	low eserial_receive@value
  2262  001E6A  6E01               	movwf	serial_peek_receive@byte,c
  2263  001E6C  0E00               	movlw	high eserial_receive@value
  2264  001E6E  6E02               	movwf	serial_peek_receive@byte+1,c
  2265  001E70  0E01               	movlw	1
  2266  001E72  EC8B  F00C         	call	_serial_peek_receive
  2267  001E76  0900               	iorlw	0
  2268  001E78  B4D8               	btfsc	status,2,c
  2269  001E7A  D009               	goto	l1791
  2270                           
  2271                           ;extended_serial.c: 78: buffer_push(buffer, value);
  2272  001E7C  C007  F001         	movff	eserial_receive@buffer,buffer_push@buffer
  2273  001E80  C008  F002         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  2274  001E84  C011  F003         	movff	eserial_receive@value,buffer_push@byte
  2275  001E88  ECA9  F00D         	call	_buffer_push	;wreg free
  2276  001E8C  D000               	goto	l1791
  2277  001E8E                     l1791:
  2278  001E8E  D801               	call	u1468
  2279  001E90  D00A               	goto	u1469
  2280  001E92                     u1468:
  2281  001E92  0005               	push	
  2282  001E94  6EFA               	movwf	pclath,c
  2283  001E96  500D               	movf	eserial_receive@timer_up,w,c
  2284  001E98  6EFD               	movwf	tosl,c
  2285  001E9A  500E               	movf	eserial_receive@timer_up+1,w,c
  2286  001E9C  6EFE               	movwf	tosh,c
  2287  001E9E  50F8               	movf	tblptru,w,c
  2288  001EA0  6EFF               	movwf	tosu,c
  2289  001EA2  50FA               	movf	pclath,w,c
  2290  001EA4  0012               	return		;indir
  2291  001EA6                     u1469:
  2292  001EA6  0900               	iorlw	0
  2293  001EA8  A4D8               	btfss	status,2,c
  2294  001EAA  0012               	return	
  2295  001EAC  D7DD               	goto	l1787
  2296  001EAE  0012               	return	
  2297  001EB0  0012               	return		;funcret
  2298  001EB2                     __end_of_eserial_receive:
  2299                           	opt stack 0
  2300                           tosu	equ	0xFFF
  2301                           tosh	equ	0xFFE
  2302                           tosl	equ	0xFFD
  2303                           pclath	equ	0xFFA
  2304                           tblptru	equ	0xFF8
  2305                           prodh	equ	0xFF4
  2306                           prodl	equ	0xFF3
  2307                           intcon2	equ	0xFF1
  2308                           intcon3	equ	0xFF0
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           plusw1	equ	0xFE3
  2312                           indf2	equ	0xFDF
  2313                           plusw2	equ	0xFDB
  2314                           fsr2h	equ	0xFDA
  2315                           fsr2l	equ	0xFD9
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _timer3_up *****************
  2319 ;; Defined at:
  2320 ;;		line 22 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;		None
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;		None
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      unsigned char 
  2327 ;; Registers used:
  2328 ;;		wreg
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0
  2334 ;;      Params:         0       0
  2335 ;;      Locals:         0       0
  2336 ;;      Temps:          0       0
  2337 ;;      Totals:         0       0
  2338 ;;Total ram usage:        0 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_main
  2344 ;;		_eserial_receive
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text17
  2349  00183E                     __ptext17:
  2350                           	opt stack 0
  2351  00183E                     _timer3_up:
  2352                           	opt stack 29
  2353                           
  2354                           ;timers_pic.c: 24: return (PIR2bits.TMR3IF) ? 1 : 0;
  2355                           
  2356                           ;incstack = 0
  2357  00183E  A2A1               	btfss	4001,1,c	;volatile
  2358  001840  D002               	goto	u1280
  2359  001842  0E01               	movlw	1
  2360  001844  0012               	return	
  2361  001846                     u1280:
  2362  001846  0E00               	movlw	0
  2363  001848  0012               	return	
  2364  00184A  0012               	return		;funcret
  2365  00184C                     __end_of_timer3_up:
  2366                           	opt stack 0
  2367                           tosu	equ	0xFFF
  2368                           tosh	equ	0xFFE
  2369                           tosl	equ	0xFFD
  2370                           pclath	equ	0xFFA
  2371                           tblptru	equ	0xFF8
  2372                           prodh	equ	0xFF4
  2373                           prodl	equ	0xFF3
  2374                           intcon2	equ	0xFF1
  2375                           intcon3	equ	0xFF0
  2376                           postinc0	equ	0xFEE
  2377                           wreg	equ	0xFE8
  2378                           plusw1	equ	0xFE3
  2379                           indf2	equ	0xFDF
  2380                           plusw2	equ	0xFDB
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _set_timer3 *****************
  2386 ;; Defined at:
  2387 ;;		line 8 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  value           2    0[COMRAM] int 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;		None               void
  2394 ;; Registers used:
  2395 ;;		None
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0
  2401 ;;      Params:         2       0
  2402 ;;      Locals:         0       0
  2403 ;;      Temps:          0       0
  2404 ;;      Totals:         2       0
  2405 ;;Total ram usage:        2 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; This function calls:
  2408 ;;		Nothing
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;;		_eserial_receive
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text18
  2416  001832                     __ptext18:
  2417                           	opt stack 0
  2418  001832                     _set_timer3:
  2419                           	opt stack 29
  2420                           
  2421                           ;timers_pic.c: 10: PIR2bits.TMR3IF = 0;
  2422                           
  2423                           ;incstack = 0
  2424  001832  92A1               	bcf	4001,1,c	;volatile
  2425                           
  2426                           ;timers_pic.c: 11: TMR3 = value;
  2427  001834  C001  FFB2         	movff	set_timer3@value,4018	;volatile
  2428  001838  C002  FFB3         	movff	set_timer3@value+1,4019	;volatile
  2429  00183C  0012               	return		;funcret
  2430  00183E                     __end_of_set_timer3:
  2431                           	opt stack 0
  2432                           tosu	equ	0xFFF
  2433                           tosh	equ	0xFFE
  2434                           tosl	equ	0xFFD
  2435                           pclath	equ	0xFFA
  2436                           tblptru	equ	0xFF8
  2437                           prodh	equ	0xFF4
  2438                           prodl	equ	0xFF3
  2439                           intcon2	equ	0xFF1
  2440                           intcon3	equ	0xFF0
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           plusw1	equ	0xFE3
  2444                           indf2	equ	0xFDF
  2445                           plusw2	equ	0xFDB
  2446                           fsr2h	equ	0xFDA
  2447                           fsr2l	equ	0xFD9
  2448                           status	equ	0xFD8
  2449                           
  2450 ;; *************** function _serial_peek_receive *****************
  2451 ;; Defined at:
  2452 ;;		line 29 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  get_byte        1    wreg     unsigned char 
  2455 ;;  byte            2    0[COMRAM] PTR unsigned char 
  2456 ;;		 -> eserial_receive@value(1), 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  get_byte        1    2[COMRAM] unsigned char 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  1    wreg      unsigned char 
  2461 ;; Registers used:
  2462 ;;		wreg, fsr2l, fsr2h, status,2
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0
  2468 ;;      Params:         2       0
  2469 ;;      Locals:         1       0
  2470 ;;      Temps:          0       0
  2471 ;;      Totals:         3       0
  2472 ;;Total ram usage:        3 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		_eserial_receive
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text19
  2482  001916                     __ptext19:
  2483                           	opt stack 0
  2484  001916                     _serial_peek_receive:
  2485                           	opt stack 29
  2486                           
  2487                           ;incstack = 0
  2488                           ;serial_peek_receive@get_byte stored from wreg
  2489  001916  6E03               	movwf	serial_peek_receive@get_byte,c
  2490                           
  2491                           ;serial_pic.c: 31: if (get_byte) {
  2492  001918  5003               	movf	serial_peek_receive@get_byte,w,c
  2493  00191A  B4D8               	btfsc	status,2,c
  2494  00191C  D00E               	goto	l1641
  2495                           
  2496                           ;serial_pic.c: 32: if (RCIF) {
  2497  00191E  AA9E               	btfss	3998,5,c	;volatile
  2498  001920  D009               	goto	l1637
  2499                           
  2500                           ;serial_pic.c: 33: *byte = RCREG;
  2501  001922  C001  FFD9         	movff	serial_peek_receive@byte,fsr2l
  2502  001926  C002  FFDA         	movff	serial_peek_receive@byte+1,fsr2h
  2503  00192A  CFAE FFDF          	movff	4014,indf2	;volatile
  2504                           
  2505                           ;serial_pic.c: 34: return 1;
  2506  00192E  0E01               	movlw	1
  2507  001930  0012               	return	
  2508                           
  2509                           ;serial_pic.c: 35: } else {
  2510  001932  D003               	goto	l1641
  2511  001934                     l1637:
  2512                           
  2513                           ;serial_pic.c: 36: return 0;
  2514  001934  0E00               	movlw	0
  2515  001936  0012               	return	
  2516  001938  D000               	goto	l1641
  2517  00193A                     l1641:
  2518                           
  2519                           ;serial_pic.c: 37: }
  2520                           ;serial_pic.c: 38: }
  2521                           ;serial_pic.c: 40: return (RCIF) ? 1 : 0;
  2522  00193A  0E00               	movlw	0
  2523  00193C  BA9E               	btfsc	3998,5,c	;volatile
  2524  00193E  0E01               	movlw	1
  2525  001940  0012               	return	
  2526  001942  0012               	return		;funcret
  2527  001944                     __end_of_serial_peek_receive:
  2528                           	opt stack 0
  2529                           tosu	equ	0xFFF
  2530                           tosh	equ	0xFFE
  2531                           tosl	equ	0xFFD
  2532                           pclath	equ	0xFFA
  2533                           tblptru	equ	0xFF8
  2534                           prodh	equ	0xFF4
  2535                           prodl	equ	0xFF3
  2536                           intcon2	equ	0xFF1
  2537                           intcon3	equ	0xFF0
  2538                           postinc0	equ	0xFEE
  2539                           wreg	equ	0xFE8
  2540                           plusw1	equ	0xFE3
  2541                           indf2	equ	0xFDF
  2542                           plusw2	equ	0xFDB
  2543                           fsr2h	equ	0xFDA
  2544                           fsr2l	equ	0xFD9
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _return_false *****************
  2548 ;; Defined at:
  2549 ;;		line 22 in file "main.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      unsigned char 
  2556 ;; Registers used:
  2557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0
  2563 ;;      Params:         0       0
  2564 ;;      Locals:         0       0
  2565 ;;      Temps:          0       0
  2566 ;;      Totals:         0       0
  2567 ;;Total ram usage:        0 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    2
  2570 ;; This function calls:
  2571 ;;		_spi_slave_peek_receive
  2572 ;; This function is called by:
  2573 ;;		_main
  2574 ;;		_eserial_receive
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text20
  2579  00185A                     __ptext20:
  2580                           	opt stack 0
  2581  00185A                     _return_false:
  2582                           	opt stack 27
  2583                           
  2584                           ;main.c: 24: return spi_slave_peek_receive(0, (0));
  2585                           
  2586                           ;incstack = 0
  2587  00185A  0E00               	movlw	0
  2588  00185C  6E04               	movwf	spi_slave_peek_receive@byte,c
  2589  00185E  0E00               	movlw	0
  2590  001860  6E05               	movwf	spi_slave_peek_receive@byte+1,c
  2591  001862  0E00               	movlw	0
  2592  001864  ECBE  F00C         	call	_spi_slave_peek_receive
  2593  001868  0012               	return	
  2594  00186A  0012               	return		;funcret
  2595  00186C                     __end_of_return_false:
  2596                           	opt stack 0
  2597                           tosu	equ	0xFFF
  2598                           tosh	equ	0xFFE
  2599                           tosl	equ	0xFFD
  2600                           pclath	equ	0xFFA
  2601                           tblptru	equ	0xFF8
  2602                           prodh	equ	0xFF4
  2603                           prodl	equ	0xFF3
  2604                           intcon2	equ	0xFF1
  2605                           intcon3	equ	0xFF0
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           plusw1	equ	0xFE3
  2609                           indf2	equ	0xFDF
  2610                           plusw2	equ	0xFDB
  2611                           fsr2h	equ	0xFDA
  2612                           fsr2l	equ	0xFD9
  2613                           status	equ	0xFD8
  2614                           
  2615 ;; *************** function _spi_slave_peek_receive *****************
  2616 ;; Defined at:
  2617 ;;		line 42 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  get_byte        1    wreg     unsigned char 
  2620 ;;  byte            2    3[COMRAM] PTR int 
  2621 ;;		 -> main@value_102(2), NULL(0), 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  get_byte        1    5[COMRAM] unsigned char 
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      unsigned char 
  2626 ;; Registers used:
  2627 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMRAM   BANK0
  2633 ;;      Params:         2       0
  2634 ;;      Locals:         1       0
  2635 ;;      Temps:          0       0
  2636 ;;      Totals:         3       0
  2637 ;;Total ram usage:        3 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    1
  2640 ;; This function calls:
  2641 ;;		_spi_slave_get_byte
  2642 ;; This function is called by:
  2643 ;;		_return_false
  2644 ;;		_main
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           	psect	text21
  2649  00197C                     __ptext21:
  2650                           	opt stack 0
  2651  00197C                     _spi_slave_peek_receive:
  2652                           	opt stack 29
  2653                           
  2654                           ;incstack = 0
  2655                           ;spi_slave_peek_receive@get_byte stored from wreg
  2656  00197C  6E06               	movwf	spi_slave_peek_receive@get_byte,c
  2657                           
  2658                           ;spi_pic.c: 44: if (get_byte) {
  2659  00197E  5006               	movf	spi_slave_peek_receive@get_byte,w,c
  2660  001980  B4D8               	btfsc	status,2,c
  2661  001982  D012               	goto	l1597
  2662                           
  2663                           ;spi_pic.c: 45: if (SSPSTATbits.BF) {
  2664  001984  A0C7               	btfss	4039,0,c	;volatile
  2665  001986  D00D               	goto	l1593
  2666                           
  2667                           ;spi_pic.c: 46: *byte = spi_slave_get_byte();
  2668  001988  EC7C  F00C         	call	_spi_slave_get_byte	;wreg free
  2669  00198C  C004  FFD9         	movff	spi_slave_peek_receive@byte,fsr2l
  2670  001990  C005  FFDA         	movff	spi_slave_peek_receive@byte+1,fsr2h
  2671  001994  C001  FFDE         	movff	?_spi_slave_get_byte,postinc2
  2672  001998  C002  FFDD         	movff	?_spi_slave_get_byte+1,postdec2
  2673                           
  2674                           ;spi_pic.c: 47: return 1;
  2675  00199C  0E01               	movlw	1
  2676  00199E  0012               	return	
  2677                           
  2678                           ;spi_pic.c: 48: } else {
  2679  0019A0  D003               	goto	l1597
  2680  0019A2                     l1593:
  2681                           
  2682                           ;spi_pic.c: 49: return 0;
  2683  0019A2  0E00               	movlw	0
  2684  0019A4  0012               	return	
  2685  0019A6  D000               	goto	l1597
  2686  0019A8                     l1597:
  2687                           
  2688                           ;spi_pic.c: 50: }
  2689                           ;spi_pic.c: 51: }
  2690                           ;spi_pic.c: 53: return (SSPSTATbits.BF) ? 1 : 0;
  2691  0019A8  A0C7               	btfss	4039,0,c	;volatile
  2692  0019AA  D002               	goto	u1150
  2693  0019AC  0E01               	movlw	1
  2694  0019AE  0012               	return	
  2695  0019B0                     u1150:
  2696  0019B0  0E00               	movlw	0
  2697  0019B2  0012               	return	
  2698  0019B4  0012               	return		;funcret
  2699  0019B6                     __end_of_spi_slave_peek_receive:
  2700                           	opt stack 0
  2701                           tosu	equ	0xFFF
  2702                           tosh	equ	0xFFE
  2703                           tosl	equ	0xFFD
  2704                           pclath	equ	0xFFA
  2705                           tblptru	equ	0xFF8
  2706                           prodh	equ	0xFF4
  2707                           prodl	equ	0xFF3
  2708                           intcon2	equ	0xFF1
  2709                           intcon3	equ	0xFF0
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           plusw1	equ	0xFE3
  2713                           indf2	equ	0xFDF
  2714                           postinc2	equ	0xFDE
  2715                           postdec2	equ	0xFDD
  2716                           plusw2	equ	0xFDB
  2717                           fsr2h	equ	0xFDA
  2718                           fsr2l	equ	0xFD9
  2719                           status	equ	0xFD8
  2720                           
  2721 ;; *************** function _spi_slave_get_byte *****************
  2722 ;; Defined at:
  2723 ;;		line 111 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;  byte            1    2[COMRAM] unsigned char 
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  2    0[COMRAM] int 
  2730 ;; Registers used:
  2731 ;;		None
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0
  2737 ;;      Params:         2       0
  2738 ;;      Locals:         1       0
  2739 ;;      Temps:          0       0
  2740 ;;      Totals:         3       0
  2741 ;;Total ram usage:        3 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; This function calls:
  2744 ;;		Nothing
  2745 ;; This function is called by:
  2746 ;;		_spi_slave_peek_receive
  2747 ;;		_espi_slave_receive
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text22
  2752  0018F8                     __ptext22:
  2753                           	opt stack 0
  2754  0018F8                     _spi_slave_get_byte:
  2755                           	opt stack 29
  2756                           
  2757                           ;spi_pic.c: 113: while (!SSPSTATbits.BF);
  2758                           
  2759                           ;incstack = 0
  2760  0018F8  D000               	goto	l308
  2761  0018FA                     l308:
  2762  0018FA  A0C7               	btfss	4039,0,c	;volatile
  2763  0018FC  D7FE               	goto	l308
  2764                           
  2765                           ;spi_pic.c: 114: uint8_t byte = SSPBUF;
  2766  0018FE  CFC9 F003          	movff	4041,spi_slave_get_byte@byte	;volatile
  2767                           
  2768                           ;spi_pic.c: 115: SSPBUF = dummy_byte;
  2769  001902  C058  FFC9         	movff	_dummy_byte,4041	;volatile
  2770                           
  2771                           ;spi_pic.c: 116: if (SSPCON1bits.SSPOV) {
  2772  001906  ACC6               	btfss	4038,6,c	;volatile
  2773  001908  D002               	goto	l311
  2774                           
  2775                           ;spi_pic.c: 117: SSPCON1bits.SSPOV = 0;
  2776  00190A  9CC6               	bcf	4038,6,c	;volatile
  2777                           
  2778                           ;spi_pic.c: 118: byte = -1;
  2779  00190C  6803               	setf	spi_slave_get_byte@byte,c
  2780  00190E                     l311:
  2781                           
  2782                           ;spi_pic.c: 119: }
  2783                           ;spi_pic.c: 120: return byte;
  2784  00190E  C003  F001         	movff	spi_slave_get_byte@byte,?_spi_slave_get_byte
  2785  001912  6A02               	clrf	?_spi_slave_get_byte+1,c
  2786  001914  0012               	return		;funcret
  2787  001916                     __end_of_spi_slave_get_byte:
  2788                           	opt stack 0
  2789                           tosu	equ	0xFFF
  2790                           tosh	equ	0xFFE
  2791                           tosl	equ	0xFFD
  2792                           pclath	equ	0xFFA
  2793                           tblptru	equ	0xFF8
  2794                           prodh	equ	0xFF4
  2795                           prodl	equ	0xFF3
  2796                           intcon2	equ	0xFF1
  2797                           intcon3	equ	0xFF0
  2798                           postinc0	equ	0xFEE
  2799                           wreg	equ	0xFE8
  2800                           plusw1	equ	0xFE3
  2801                           indf2	equ	0xFDF
  2802                           postinc2	equ	0xFDE
  2803                           postdec2	equ	0xFDD
  2804                           plusw2	equ	0xFDB
  2805                           fsr2h	equ	0xFDA
  2806                           fsr2l	equ	0xFD9
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function _buffer_space *****************
  2810 ;; Defined at:
  2811 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2814 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;		None
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      unsigned char 
  2819 ;; Registers used:
  2820 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0
  2826 ;;      Params:         2       0
  2827 ;;      Locals:         0       0
  2828 ;;      Temps:          0       0
  2829 ;;      Totals:         2       0
  2830 ;;Total ram usage:        2 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_eserial_receive
  2836 ;;		_espi_slave_receive
  2837 ;;		_espi_master_receive
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text23
  2842  001892                     __ptext23:
  2843                           	opt stack 0
  2844  001892                     _buffer_space:
  2845                           	opt stack 29
  2846                           
  2847                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  2848                           
  2849                           ;incstack = 0
  2850  001892  EE20 F001          	lfsr	2,1
  2851  001896  5001               	movf	buffer_space@buffer,w,c
  2852  001898  26D9               	addwf	fsr2l,f,c
  2853  00189A  5002               	movf	buffer_space@buffer+1,w,c
  2854  00189C  22DA               	addwfc	fsr2h,f,c
  2855  00189E  50DF               	movf	indf2,w,c
  2856  0018A0  0800               	sublw	0
  2857  0018A2  0F20               	addlw	32
  2858  0018A4  0012               	return	
  2859  0018A6  0012               	return		;funcret
  2860  0018A8                     __end_of_buffer_space:
  2861                           	opt stack 0
  2862                           tosu	equ	0xFFF
  2863                           tosh	equ	0xFFE
  2864                           tosl	equ	0xFFD
  2865                           pclath	equ	0xFFA
  2866                           tblptru	equ	0xFF8
  2867                           prodh	equ	0xFF4
  2868                           prodl	equ	0xFF3
  2869                           intcon2	equ	0xFF1
  2870                           intcon3	equ	0xFF0
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           plusw1	equ	0xFE3
  2874                           indf2	equ	0xFDF
  2875                           postinc2	equ	0xFDE
  2876                           postdec2	equ	0xFDD
  2877                           plusw2	equ	0xFDB
  2878                           fsr2h	equ	0xFDA
  2879                           fsr2l	equ	0xFD9
  2880                           status	equ	0xFD8
  2881                           
  2882 ;; *************** function _buffer_push *****************
  2883 ;; Defined at:
  2884 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2887 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  2888 ;;  byte            1    2[COMRAM] unsigned char 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  current_posi    1    4[COMRAM] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      unsigned char 
  2893 ;; Registers used:
  2894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0
  2900 ;;      Params:         3       0
  2901 ;;      Locals:         1       0
  2902 ;;      Temps:          1       0
  2903 ;;      Totals:         5       0
  2904 ;;Total ram usage:        5 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_eserial_receive
  2910 ;;		_espi_slave_receive
  2911 ;;		_espi_master_receive
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text24
  2916  001B52                     __ptext24:
  2917                           	opt stack 0
  2918  001B52                     _buffer_push:
  2919                           	opt stack 29
  2920                           
  2921                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  2922                           
  2923                           ;incstack = 0
  2924  001B52  EE20 F001          	lfsr	2,1
  2925  001B56  5001               	movf	buffer_push@buffer,w,c
  2926  001B58  26D9               	addwf	fsr2l,f,c
  2927  001B5A  5002               	movf	buffer_push@buffer+1,w,c
  2928  001B5C  22DA               	addwfc	fsr2h,f,c
  2929  001B5E  0E20               	movlw	32
  2930  001B60  18DE               	xorwf	postinc2,w,c
  2931  001B62  B4D8               	btfsc	status,2,c
  2932  001B64  0012               	return	
  2933  001B66  D001               	goto	l1691
  2934                           
  2935                           ;circular_buffer.c: 27: return 0;
  2936                           ;	Return value of _buffer_push is never used
  2937  001B68  0012               	return	
  2938  001B6A                     l1691:
  2939                           
  2940                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  2941                           ;circular_buffer.c: 30: & (0x20 - 1);
  2942  001B6A  EE20 F001          	lfsr	2,1
  2943  001B6E  5001               	movf	buffer_push@buffer,w,c
  2944  001B70  26D9               	addwf	fsr2l,f,c
  2945  001B72  5002               	movf	buffer_push@buffer+1,w,c
  2946  001B74  22DA               	addwfc	fsr2h,f,c
  2947  001B76  50DF               	movf	indf2,w,c
  2948  001B78  6E04               	movwf	??_buffer_push& (0+255),c
  2949  001B7A  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  2950  001B7E  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  2951  001B82  50DF               	movf	indf2,w,c
  2952  001B84  2404               	addwf	??_buffer_push,w,c
  2953  001B86  0B1F               	andlw	31
  2954  001B88  6E05               	movwf	buffer_push@current_position,c
  2955                           
  2956                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  2957  001B8A  5005               	movf	buffer_push@current_position,w,c
  2958  001B8C  0D01               	mullw	1
  2959  001B8E  0E02               	movlw	2
  2960  001B90  26F3               	addwf	prodl,f,c
  2961  001B92  0E00               	movlw	0
  2962  001B94  22F4               	addwfc	prodh,f,c
  2963  001B96  50F3               	movf	prodl,w,c
  2964  001B98  2401               	addwf	buffer_push@buffer,w,c
  2965  001B9A  6ED9               	movwf	fsr2l,c
  2966  001B9C  50F4               	movf	prodh,w,c
  2967  001B9E  2002               	addwfc	buffer_push@buffer+1,w,c
  2968  001BA0  6EDA               	movwf	fsr2h,c
  2969  001BA2  C003  FFDF         	movff	buffer_push@byte,indf2
  2970                           
  2971                           ;circular_buffer.c: 32: buffer->count++;
  2972  001BA6  EE20 F001          	lfsr	2,1
  2973  001BAA  5001               	movf	buffer_push@buffer,w,c
  2974  001BAC  26D9               	addwf	fsr2l,f,c
  2975  001BAE  5002               	movf	buffer_push@buffer+1,w,c
  2976  001BB0  22DA               	addwfc	fsr2h,f,c
  2977  001BB2  2ADF               	incf	indf2,f,c
  2978  001BB4  0012               	return	
  2979                           
  2980                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  2981                           ;	Return value of _buffer_push is never used
  2982  001BB6  0012               	return		;funcret
  2983  001BB8                     __end_of_buffer_push:
  2984                           	opt stack 0
  2985                           tosu	equ	0xFFF
  2986                           tosh	equ	0xFFE
  2987                           tosl	equ	0xFFD
  2988                           pclath	equ	0xFFA
  2989                           tblptru	equ	0xFF8
  2990                           prodh	equ	0xFF4
  2991                           prodl	equ	0xFF3
  2992                           intcon2	equ	0xFF1
  2993                           intcon3	equ	0xFF0
  2994                           postinc0	equ	0xFEE
  2995                           wreg	equ	0xFE8
  2996                           plusw1	equ	0xFE3
  2997                           indf2	equ	0xFDF
  2998                           postinc2	equ	0xFDE
  2999                           postdec2	equ	0xFDD
  3000                           plusw2	equ	0xFDB
  3001                           fsr2h	equ	0xFDA
  3002                           fsr2l	equ	0xFD9
  3003                           status	equ	0xFD8
  3004                           
  3005 ;; *************** function _buffer_empty *****************
  3006 ;; Defined at:
  3007 ;;		line 14 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3008 ;; Parameters:    Size  Location     Type
  3009 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3010 ;;		 -> main@pic_to_pic(34), 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;		None
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      unsigned char 
  3015 ;; Registers used:
  3016 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0
  3022 ;;      Params:         2       0
  3023 ;;      Locals:         0       0
  3024 ;;      Temps:          0       0
  3025 ;;      Totals:         2       0
  3026 ;;Total ram usage:        2 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; This function calls:
  3029 ;;		Nothing
  3030 ;; This function is called by:
  3031 ;;		_eserial_receive
  3032 ;;		_espi_master_receive
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text25
  3037  0018C0                     __ptext25:
  3038                           	opt stack 0
  3039  0018C0                     _buffer_empty:
  3040                           	opt stack 29
  3041                           
  3042                           ;circular_buffer.c: 16: return (buffer->count == 0) ? 1 : 0;
  3043                           
  3044                           ;incstack = 0
  3045  0018C0  EE20 F001          	lfsr	2,1
  3046  0018C4  5001               	movf	buffer_empty@buffer,w,c
  3047  0018C6  26D9               	addwf	fsr2l,f,c
  3048  0018C8  5002               	movf	buffer_empty@buffer+1,w,c
  3049  0018CA  22DA               	addwfc	fsr2h,f,c
  3050  0018CC  50DF               	movf	indf2,w,c
  3051  0018CE  A4D8               	btfss	status,2,c
  3052  0018D0  D002               	goto	u1240
  3053  0018D2  0E01               	movlw	1
  3054  0018D4  0012               	return	
  3055  0018D6                     u1240:
  3056  0018D6  0E00               	movlw	0
  3057  0018D8  0012               	return	
  3058  0018DA  0012               	return		;funcret
  3059  0018DC                     __end_of_buffer_empty:
  3060                           	opt stack 0
  3061  0000                     tosu	equ	0xFFF
  3062                           tosh	equ	0xFFE
  3063                           tosl	equ	0xFFD
  3064                           pclath	equ	0xFFA
  3065                           tblptru	equ	0xFF8
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon2	equ	0xFF1
  3069                           intcon3	equ	0xFF0
  3070                           postinc0	equ	0xFEE
  3071                           wreg	equ	0xFE8
  3072                           plusw1	equ	0xFE3
  3073                           indf2	equ	0xFDF
  3074                           postinc2	equ	0xFDE
  3075                           postdec2	equ	0xFDD
  3076                           plusw2	equ	0xFDB
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           tosu	equ	0xFFF
  3081                           tosh	equ	0xFFE
  3082                           tosl	equ	0xFFD
  3083                           pclath	equ	0xFFA
  3084                           tblptru	equ	0xFF8
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           intcon2	equ	0xFF1
  3088                           intcon3	equ	0xFF0
  3089                           postinc0	equ	0xFEE
  3090                           wreg	equ	0xFE8
  3091                           plusw1	equ	0xFE3
  3092                           indf2	equ	0xFDF
  3093                           postinc2	equ	0xFDE
  3094                           postdec2	equ	0xFDD
  3095                           plusw2	equ	0xFDB
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100                           	psect	text26
  3101  000000                     __ptext26:
  3102                           	opt stack 0
  3103                           tosu	equ	0xFFF
  3104                           tosh	equ	0xFFE
  3105                           tosl	equ	0xFFD
  3106                           pclath	equ	0xFFA
  3107                           tblptru	equ	0xFF8
  3108                           prodh	equ	0xFF4
  3109                           prodl	equ	0xFF3
  3110                           intcon2	equ	0xFF1
  3111                           intcon3	equ	0xFF0
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           plusw1	equ	0xFE3
  3115                           indf2	equ	0xFDF
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           plusw2	equ	0xFDB
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123                           	psect	rparam
  3124  0000                     tosu	equ	0xFFF
  3125                           tosh	equ	0xFFE
  3126                           tosl	equ	0xFFD
  3127                           pclath	equ	0xFFA
  3128                           tblptru	equ	0xFF8
  3129                           prodh	equ	0xFF4
  3130                           prodl	equ	0xFF3
  3131                           intcon2	equ	0xFF1
  3132                           intcon3	equ	0xFF0
  3133                           postinc0	equ	0xFEE
  3134                           wreg	equ	0xFE8
  3135                           plusw1	equ	0xFE3
  3136                           indf2	equ	0xFDF
  3137                           postinc2	equ	0xFDE
  3138                           postdec2	equ	0xFDD
  3139                           plusw2	equ	0xFDB
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     87      88
    BANK0           160      0      68

Pointer List with Targets:

    espi_slave_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    espi_slave_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    spi_slave_peek_receive@byte	PTR int  size(2) Largest target is 2
		 -> main@value_102(COMRAM[2]), NULL(NULL[0]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_empty@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    eserial_receive@timer_up	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    eserial_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    eserial_receive@stop_function	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> return_false(), 

    eserial_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    eserial_send_data@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    serial_send_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_load_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_disable_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    S141interrupt_serial$data	PTR unsigned char  size(2) Largest target is 0

    serial_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_peek_receive@byte	PTR unsigned char  size(2) Largest target is 1
		 -> eserial_receive@value(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_eserial_receive
    _main->_espi_slave_send
    _espi_slave_send->_buffer_peek
    _espi_slave_send->_buffer_pop
    _espi_slave_send->_encode_data
    _espi_slave_receive->_buffer_push
    _espi_slave_receive->_decode_data
    _espi_setup->_setup_spi
    _eserial_setup->_setup_simple_serial
    _eserial_send_data->_buffer_pop
    _return_false->_spi_slave_peek_receive
    _spi_slave_peek_receive->_spi_slave_get_byte

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                71    71      0    7986
                                             17 COMRAM    70    70      0
                    _eserial_receive
                  _eserial_send_data
                      _eserial_setup
                         _espi_setup
                 _espi_slave_receive
                    _espi_slave_send
                       _setup_timer3
             _spi_slave_peek_receive
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _espi_slave_send                                     11     9      2    2140
                                              6 COMRAM    11     9      2
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                  _spi_send_get_byte
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     516
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     281
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_slave_receive                                   5     3      2    1995
                                              5 COMRAM     5     3      2
                        _buffer_push
                       _buffer_space
                        _decode_data
                  _spi_send_get_byte
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (2) _spi_send_get_byte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _eserial_setup                                        3     1      2     308
                                              7 COMRAM     3     1      2
                _setup_simple_serial
 ---------------------------------------------------------------------------------
 (2) _setup_simple_serial                                  7     5      2     200
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _eserial_send_data                                    5     3      2     595
                                              6 COMRAM     5     3      2
                         _buffer_pop
                   _serial_send_byte
 ---------------------------------------------------------------------------------
 (2) _serial_send_byte                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     411
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _eserial_receive                                     11     3      8    2360
                                              6 COMRAM    11     3      8
                       _buffer_empty
                        _buffer_push
                       _buffer_space
                       _return_false *
                _serial_peek_receive
                         _set_timer3 *
                          _timer3_up *
 ---------------------------------------------------------------------------------
 (2) _timer3_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _set_timer3                                           2     0      2      65
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _serial_peek_receive                                  3     1      2     236
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _return_false                                         0     0      0     196
             _spi_slave_peek_receive
 ---------------------------------------------------------------------------------
 (1) _spi_slave_peek_receive                               3     1      2     196
                                              3 COMRAM     3     1      2
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (2) _spi_slave_get_byte                                   3     1      2      24
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     278
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     801
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _buffer_empty                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eserial_receive
     _buffer_empty
     _buffer_push
     _buffer_space
     _return_false *
       _spi_slave_peek_receive
         _spi_slave_get_byte
     _serial_peek_receive *
     _set_timer3 *
     _timer3_up *
   _eserial_send_data
     _buffer_pop
     _serial_send_byte
   _eserial_setup
     _setup_simple_serial
   _espi_setup
     _setup_spi
   _espi_slave_receive
     _buffer_push
     _buffer_space
     _decode_data
     _spi_send_get_byte
     _spi_slave_get_byte
   _espi_slave_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _spi_send_get_byte
   _setup_timer3
   _spi_slave_peek_receive
     _spi_slave_get_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      44       4       42.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     57      58       1       92.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C       5        0.0%
DATA                 0      0      9C       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Aug 03 17:08:50 2015

                  _espi_slave_send 1EB2                        _SSPSTATbits 000FC7  
                               l31 1D74             eserial_send_data@value 000A  
               _espi_slave_receive 1C32            ?_spi_slave_peek_receive 0004  
          eserial_send_data@buffer 0007                                l106 1850  
                              l203 1E46                                l311 190E  
                              l308 18FA                                l290 1A26  
                              l362 196E                                l364 1966  
                              l287 1A2A                                l295 1886  
                              l289 1A16                                tosl 000FFD  
                              wreg 000FE8                       __CFG_FOSC$HS 000000  
              ?_espi_slave_receive 0006                       __CFG_LVP$OFF 000000  
                             l1611 1A84                               l1621 1AAC  
                             l1613 1A8E                               l1711 1B18  
                             l1641 193A                               l1619 1AA2  
                             l1637 1934                               l1661 19C6  
                             l1813 1F2C                               l1823 1F68  
                             l1815 1F3A                               l1593 19A2  
                             l1673 1BD0                               l1665 19D6  
                             l1841 1FE6                               l1691 1B6A  
                             l1771 1DCC                               l1851 1FF6  
                             l1597 19A8                               l1781 1E28  
                             l1773 1DE2                               l1829 1F96  
                             l1917 1D5C                               l1909 1D0C  
                             l1791 1E8E                               l1775 1DE6  
                             l1767 1DA6                               l1855 1C38  
                             l1865 1C62                               l1787 1E68  
                             l1779 1E0C                               l1875 1C8C  
                             l1893 1A68        __size_of_spi_slave_get_byte 001E  
                             l1887 1A4A                               l1879 1CB2  
                             u1150 19B0                               u1240 18D6  
                             u1280 1846                               u1418 1E10  
                             u1419 1E24                               u1448 1E54  
                             u1468 1E92                               u1469 1EA6  
                             u1771 1CD6                               u1781 1CE8  
                             _RCIE 007CED                               _RCIF 007CF5  
           __size_of_eserial_setup 001C                               _TMR3 000FB2  
                             _TXIE 007CEC                               _TXIF 007CF4  
                             _main 1CCC                               fsr2h 000FDA  
                             indf2 000FDF                               fsr2l 000FD9  
                             prodh 000FF4                               prodl 000FF3  
                             start 0000              spi_send_get_byte@byte 0001  
                   ??_buffer_count 0003                     ??_buffer_empty 0003  
                   ??_buffer_space 0003               ??_espi_slave_receive 0008  
                     ___param_bank 000010               eserial_receive@value 0011  
             setup_spi@SSPCON1_reg 0001     __end_of_spi_slave_peek_receive 19B6  
                            ?_main 0001                              _T3CON 000FB1  
                            _RCREG 000FAE                              _RCSTA 000FAB  
                            _SPBRG 000FAF                              _TXREG 000FAD  
                            _TXSTA 000FAC               __size_of_decode_data 003C  
                            pclath 000FFA               serial_send_byte@byte 0001  
                            plusw1 000FE3                              plusw2 000FDB  
                            status 000FD8            __end_of_espi_slave_send 2000  
             setup_spi@SSPSTAT_reg 0002                   buffer_pop@buffer 0001  
                  __initialization 18A8                       __end_of_main 1D86  
            eserial_receive@buffer 0007                      _eserial_setup 18DC  
                           ??_main 0012                  _spi_send_get_byte 187E  
                    __activetblptr 000002                 ?_spi_send_get_byte 0001  
                buffer_peek@buffer 0001                    encode_data@data 0006  
     espi_slave_receive@received_1 0009       espi_slave_receive@received_2 000A  
         __size_of_eserial_receive 012C                ??_spi_send_get_byte 0001  
                           _INT2IF 007F81                             _INTCON 000FF2  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
         __end_of_serial_send_byte 185A                    decode_data@data 0001  
                    main@pic_to_pc 0014               __size_of_encode_data 0046  
                   ?_eserial_setup 0008               __size_of_buffer_peek 0052  
             __size_of_buffer_push 0066          __end_of_spi_send_get_byte 1892  
                           clear_0 18AE                      main@value_102 0012  
      __end_of_setup_simple_serial 1ABA               __end_of_buffer_count 187E  
             __end_of_buffer_empty 18DC                    set_timer3@value 0001  
                           tblptru 000FF8              setup_timer3@T3CON_reg 0001  
             __end_of_buffer_space 18A8                         __accesstop 0060  
          __end_of__initialization 18B6                   ?_espi_slave_send 0007  
                    ___rparam_used 000001       __size_of_serial_peek_receive 002E  
                   __pcstackCOMRAM 0001                 buffer_count@buffer 0001  
         espi_slave_receive@buffer 0006                     buffer_pop@byte 0005  
     eserial_receive@stop_function 0009                  _eserial_send_data 1A30  
               ?_eserial_send_data 0007                 buffer_empty@buffer 0001  
                       __pbssBANK0 0060                ??_eserial_send_data 0009  
          serial_peek_receive@byte 0001                  ??_eserial_receive 000F  
                  ??_eserial_setup 000A         __size_of_spi_send_get_byte 0014  
                          _BAUDCON 000FB8          __end_of_eserial_send_data 1A74  
                buffer_push@buffer 0001                 __size_of_timer3_up 000E  
               __size_of_setup_spi 003E         __end_of_spi_slave_get_byte 1916  
                       _buffer_pop 1BB8                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7             spi_slave_get_byte@byte 0003  
                   main@pic_to_pic 0036     spi_slave_peek_receive@get_byte 0006  
                          __Hparam 0000                            __Lparam 0000  
      __size_of_espi_slave_receive 009A                         _espi_setup 1944  
                       _dummy_byte 0058                            __pcinit 18A8  
                        _ANSELbits 000F7E                            __ramtop 0100  
            __size_of_buffer_count 0012              __size_of_buffer_empty 001C  
                          __ptext0 1CCC                            __ptext1 182A  
                          __ptext2 1EB2                            __ptext3 1ABA  
                          __ptext4 1B00                            __ptext5 186C  
                          __ptext6 1C32                            __ptext7 187E  
                          __ptext8 19B6                            __ptext9 1944  
            __size_of_buffer_space 0016                      ??_decode_data 0005  
            espi_slave_send@buffer 0007              espi_slave_send@byte_1 000C  
            espi_slave_send@byte_2 000D               end_of_initialization 18B6  
                    __Lmediumconst 0000                  __end_of_timer3_up 184C  
                ?_serial_send_byte 0001                       _buffer_count 186C  
                     _buffer_empty 18C0                  __end_of_setup_spi 1A30  
               ??_serial_send_byte 0001                       _buffer_space 1892  
                        _RCSTAbits 000FAB                         _set_timer3 1832  
                          postdec2 000FDD                      ?_return_false 0001  
        espi_slave_send@received_1 000E          espi_slave_send@received_2 0010  
                          postinc0 000FEE                            postinc2 000FDE  
       eserial_setup@baudrate_bits 000A         __size_of_eserial_send_data 0044  
                        _PORTCbits 000F82                _serial_peek_receive 1916  
                    ?_setup_timer3 0001                          _TRISAbits 000F92  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                      ?_buffer_pop 0001                __end_of_decode_data 19F2  
                    ??_encode_data 0005               ?_serial_peek_receive 0001  
                    ??_buffer_peek 0003                      ??_buffer_push 0004  
         ??_spi_slave_peek_receive 0006                     ??_return_false 0007  
              eserial_receive@test 0010                        ?_espi_setup 0001  
                  buffer_peek@byte 0005                     espi_setup@mode 0003  
                   ??_setup_timer3 0001                start_initialization 18A8  
                  _eserial_receive 1D86       __size_of_setup_simple_serial 0046  
       eserial_receive@timer_start 000B                 buffer_space@buffer 0001  
            ??_serial_peek_receive 0003                    buffer_push@byte 0003  
          eserial_receive@timer_up 000D                __end_of_encode_data 1B00  
                      ?_set_timer3 0001                __size_of_buffer_pop 007A  
         __size_of_espi_slave_send 014E                __end_of_buffer_peek 1B52  
              __end_of_buffer_push 1BB8                        _decode_data 19B6  
                      __pbssCOMRAM 0058            espi_slave_receive@value 0008  
              __size_of_espi_setup 0038                 _spi_slave_get_byte 18F8  
  __size_of_spi_slave_peek_receive 003A              __end_of_eserial_setup 18F8  
              ?_spi_slave_get_byte 0001        serial_peek_receive@get_byte 0003  
                encode_data@byte_1 0001                  encode_data@byte_2 0003  
          __end_of_eserial_receive 1EB2   setup_simple_serial@baudrate_bits 0007  
             __end_of_return_false 186C               ??_spi_slave_get_byte 0003  
              __size_of_set_timer3 000C                           _LATAbits 000F89  
                         _LATCbits 000F8B                        _encode_data 1ABA  
       __end_of_espi_slave_receive 1CCC                           _PIE2bits 000FA0  
             __end_of_setup_timer3 1832                           _PIR2bits 000FA1  
                      _buffer_peek 1B00                        _buffer_push 1B52  
                        _timer3_up 183E                          main@F4041 0060  
                        main@F4043 0082                          _setup_spi 19F2  
        __size_of_serial_send_byte 000E                  ??_espi_slave_send 0009  
           _spi_slave_peek_receive 197C                       ??_buffer_pop 0003  
       spi_slave_peek_receive@byte 0004                  decode_data@byte_1 0003  
                decode_data@byte_2 0004                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                           __Hrparam 0000  
                         __Lrparam 0000                         ?_timer3_up 0001  
                     ??_espi_setup 0003                 __end_of_buffer_pop 1C32  
                       ?_setup_spi 0001                 eserial_send_data@i 0009  
              _setup_simple_serial 1A74                   ?_eserial_receive 0007  
                       _ANSELHbits 000F7F                           __ptext10 19F2  
                         __ptext11 18DC                           __ptext20 185A  
                         __ptext12 1A74                           __ptext21 197C  
                         __ptext13 1A30                           __ptext22 18F8  
                         __ptext14 184C                           __ptext23 1892  
                         __ptext15 1BB8                           __ptext24 1B52  
                         __ptext16 1D86                           __ptext25 18C0  
                         __ptext17 183E                           __ptext26 0000  
                         __ptext18 1832                           __ptext19 1916  
             ?_setup_simple_serial 0001                 __end_of_espi_setup 197C  
                    __size_of_main 00BA                       ??_set_timer3 0003  
            __size_of_return_false 0012                       ?_decode_data 0001  
      __end_of_serial_peek_receive 1944              ??_setup_simple_serial 0003  
               __end_of_set_timer3 183E              __size_of_setup_timer3 0008  
                      ??_timer3_up 0001                       _return_false 185A  
                      ??_setup_spi 0002                   _serial_send_byte 184C  
                     _setup_timer3 182A        buffer_push@current_position 0005  
                      _SSPCON1bits 000FC6        eserial_setup@baudrate_value 0008  
                     ?_encode_data 0001  setup_simple_serial@baudrate_value 0001  
      espi_slave_send@byte_to_send 000A                      ?_buffer_count 0001  
                    ?_buffer_empty 0001                       ?_buffer_peek 0001  
                    ?_buffer_space 0001                       ?_buffer_push 0001  
          _setup_simple_serial$215 0003            _setup_simple_serial$216 0005  
