

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Aug 25 12:43:59 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38  0000                     _TMR0	set	4054
    39  0000                     _TMR1	set	4046
    40  0000                     _TMR3	set	4018
    41  0000                     _ANSELHbits	set	3967
    42  0000                     _ANSELbits	set	3966
    43  0000                     _BAUDCON	set	4024
    44  0000                     _INTCON	set	4082
    45  0000                     _INTCON2bits	set	4081
    46  0000                     _INTCON3bits	set	4080
    47  0000                     _INTCONbits	set	4082
    48  0000                     _LATAbits	set	3977
    49  0000                     _LATCbits	set	3979
    50  0000                     _PIE1bits	set	3997
    51  0000                     _PIE2bits	set	4000
    52  0000                     _PIR1bits	set	3998
    53  0000                     _PIR2bits	set	4001
    54  0000                     _RCREG	set	4014
    55  0000                     _RCSTA	set	4011
    56  0000                     _RCSTAbits	set	4011
    57  0000                     _SPBRG	set	4015
    58  0000                     _SPBRGH	set	4016
    59  0000                     _SSPBUF	set	4041
    60  0000                     _SSPCON1	set	4038
    61  0000                     _SSPCON1bits	set	4038
    62  0000                     _SSPSTAT	set	4039
    63  0000                     _SSPSTATbits	set	4039
    64  0000                     _T0CON	set	4053
    65  0000                     _T1CON	set	4045
    66  0000                     _T3CON	set	4017
    67  0000                     _TRISAbits	set	3986
    68  0000                     _TRISBbits	set	3987
    69  0000                     _TRISCbits	set	3988
    70  0000                     _TXREG	set	4013
    71  0000                     _TXSTA	set	4012
    72  0000                     _INT2IF	set	32641
    73  0000                     _RCIE	set	31981
    74  0000                     _RCIF	set	31989
    75  0000                     _TXIE	set	31980
    76  0000                     _TXIF	set	31988
    77                           
    78 ;;
    79 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    80 ;;
    81 ;; *************** function _main *****************
    82 ;; Defined at:
    83 ;;		line 28 in file "main.c"
    84 ;; Parameters:    Size  Location     Type
    85 ;;		None
    86 ;; Auto vars:     Size  Location     Type
    87 ;;  value           2   19[COMRAM] int 
    88 ;;  pic_to_pic     34   55[COMRAM] struct circular_buffer
    89 ;;  pic_to_pc      34   21[COMRAM] struct circular_buffer
    90 ;;  i               2   17[COMRAM] int 
    91 ;;  value           1    0        unsigned char 
    92 ;; Return value:  Size  Location     Type
    93 ;;                  2   27[None  ] int 
    94 ;; Registers used:
    95 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
    96 ;; Tracked objects:
    97 ;;		On entry : 0/0
    98 ;;		On exit  : 0/0
    99 ;;		Unchanged: 0/0
   100 ;; Data sizes:     COMRAM   BANK0
   101 ;;      Params:         0       0
   102 ;;      Locals:        72       0
   103 ;;      Temps:          0       0
   104 ;;      Totals:        72       0
   105 ;;Total ram usage:       72 bytes
   106 ;; Hardware stack levels required when called:    4
   107 ;; This function calls:
   108 ;;		_eserial_receive
   109 ;;		_eserial_send_data
   110 ;;		_eserial_setup
   111 ;;		_espi_setup
   112 ;;		_espi_slave_receive
   113 ;;		_espi_slave_send
   114 ;;		_setup_timer3
   115 ;;		_spi_slave_peek_receive
   116 ;; This function is called by:
   117 ;;		Startup code after reset
   118 ;; This function uses a non-reentrant model
   119 ;;
   120                           
   121                           	psect	text0
   122  001C96                     __ptext0:
   123                           	opt stack 0
   124  001C96                     _main:
   125                           	opt stack 27
   126                           
   127                           ;main.c: 30: struct circular_buffer pic_to_pic = {0, 0, {0}};
   128                           
   129                           ;incstack = 0
   130  001C96  EE20  F060         	lfsr	2,main@F4065
   131  001C9A  EE10  F038         	lfsr	1,main@pic_to_pic
   132  001C9E  0E21               	movlw	33
   133  001CA0                     u1981:
   134  001CA0  CFDB FFE3          	movff	plusw2,plusw1
   135  001CA4  06E8               	decf	wreg,f,c
   136  001CA6  E2FC               	bc	u1981
   137                           
   138                           ;main.c: 31: struct circular_buffer pic_to_pc = {0, 0, {0}};
   139  001CA8  EE20  F082         	lfsr	2,main@F4067
   140  001CAC  EE10  F016         	lfsr	1,main@pic_to_pc
   141  001CB0  0E21               	movlw	33
   142  001CB2                     u1991:
   143  001CB2  CFDB FFE3          	movff	plusw2,plusw1
   144  001CB6  06E8               	decf	wreg,f,c
   145  001CB8  E2FC               	bc	u1991
   146                           
   147                           ;main.c: 33: espi_setup(0x05);
   148  001CBA  0E05               	movlw	5
   149  001CBC  EC87  F00C         	call	_espi_setup
   150                           
   151                           ;main.c: 34: eserial_setup(0x08 | 0x04, 0x10);
   152  001CC0  0E00               	movlw	0
   153  001CC2  6E09               	movwf	eserial_setup@baudrate_value+1,c
   154  001CC4  0E10               	movlw	16
   155  001CC6  6E08               	movwf	eserial_setup@baudrate_value,c
   156  001CC8  0E0C               	movlw	12
   157  001CCA  EC53  F00C         	call	_eserial_setup
   158                           
   159                           ;main.c: 35: setup_timer3(0x80 | 0x00 | 0x01);
   160  001CCE  0E81               	movlw	129
   161  001CD0  ECFA  F00B         	call	_setup_timer3
   162                           
   163                           ;main.c: 37: uint8_t value;
   164                           ;main.c: 38: int i = 0;
   165  001CD4  0E00               	movlw	0
   166  001CD6  6E13               	movwf	main@i+1,c
   167  001CD8  0E00               	movlw	0
   168  001CDA  6E12               	movwf	main@i,c
   169  001CDC  D000               	goto	l2112
   170  001CDE                     l2112:
   171                           
   172                           ;main.c: 42: eserial_receive(&pic_to_pic, &return_false, &set_timer3, &timer3_up);
   173  001CDE  0E38               	movlw	low main@pic_to_pic
   174  001CE0  6E07               	movwf	eserial_receive@buffer,c
   175  001CE2  0E00               	movlw	high main@pic_to_pic
   176  001CE4  6E08               	movwf	eserial_receive@buffer+1,c
   177  001CE6  0E24               	movlw	low _return_false
   178  001CE8  6E09               	movwf	eserial_receive@stop_function,c
   179  001CEA  0E18               	movlw	high _return_false
   180  001CEC  6E0A               	movwf	eserial_receive@stop_function+1,c
   181  001CEE  0EFC               	movlw	low _set_timer3
   182  001CF0  6E0B               	movwf	eserial_receive@timer_start,c
   183  001CF2  0E17               	movlw	high _set_timer3
   184  001CF4  6E0C               	movwf	eserial_receive@timer_start+1,c
   185  001CF6  0E08               	movlw	low _timer3_up
   186  001CF8  6E0D               	movwf	eserial_receive@timer_up,c
   187  001CFA  0E18               	movlw	high _timer3_up
   188  001CFC  6E0E               	movwf	eserial_receive@timer_up+1,c
   189  001CFE  ECBD  F00E         	call	_eserial_receive	;wreg free
   190                           
   191                           ;main.c: 44: int16_t value;
   192                           ;main.c: 45: if (spi_slave_peek_receive(1, &value)) {
   193  001D02  0E14               	movlw	low main@value_129
   194  001D04  6E04               	movwf	spi_slave_peek_receive@byte,c
   195  001D06  0E00               	movlw	high main@value_129
   196  001D08  6E05               	movwf	spi_slave_peek_receive@byte+1,c
   197  001D0A  0E01               	movlw	1
   198  001D0C  ECA3  F00C         	call	_spi_slave_peek_receive
   199  001D10  0900               	iorlw	0
   200  001D12  B4D8               	btfsc	status,2,c
   201  001D14  D029               	goto	l2132
   202                           
   203                           ;main.c: 47: if (value == 0x20) {
   204  001D16  0E20               	movlw	32
   205  001D18  1814               	xorwf	main@value_129,w,c
   206  001D1A  1015               	iorwf	main@value_129+1,w,c
   207  001D1C  A4D8               	btfss	status,2,c
   208  001D1E  D007               	goto	l2120
   209                           
   210                           ;main.c: 48: espi_slave_send(&pic_to_pic);
   211  001D20  0E38               	movlw	low main@pic_to_pic
   212  001D22  6E07               	movwf	espi_slave_send@buffer,c
   213  001D24  0E00               	movlw	high main@pic_to_pic
   214  001D26  6E08               	movwf	espi_slave_send@buffer+1,c
   215  001D28  EC53  F00F         	call	_espi_slave_send	;wreg free
   216                           
   217                           ;main.c: 49: } else if (value == 0x10) {
   218  001D2C  D01D               	goto	l2132
   219  001D2E                     l2120:
   220  001D2E  0E10               	movlw	16
   221  001D30  1814               	xorwf	main@value_129,w,c
   222  001D32  1015               	iorwf	main@value_129+1,w,c
   223  001D34  A4D8               	btfss	status,2,c
   224  001D36  D007               	goto	l2124
   225                           
   226                           ;main.c: 50: espi_slave_receive(&pic_to_pc);
   227  001D38  0E16               	movlw	low main@pic_to_pc
   228  001D3A  6E06               	movwf	espi_slave_receive@buffer,c
   229  001D3C  0E00               	movlw	high main@pic_to_pc
   230  001D3E  6E07               	movwf	espi_slave_receive@buffer+1,c
   231  001D40  ECFE  F00D         	call	_espi_slave_receive	;wreg free
   232                           
   233                           ;main.c: 51: } else {
   234  001D44  D011               	goto	l2132
   235  001D46                     l2124:
   236                           
   237                           ;main.c: 52: i++;
   238  001D46  4A12               	infsnz	main@i,f,c
   239  001D48  2A13               	incf	main@i+1,f,c
   240                           
   241                           ;main.c: 54: if (i > 3) {
   242  001D4A  BE13               	btfsc	main@i+1,7,c
   243  001D4C  D00D               	goto	l2132
   244  001D4E  5013               	movf	main@i+1,w,c
   245  001D50  E104               	bnz	u2030
   246  001D52  0E04               	movlw	4
   247  001D54  5C12               	subwf	main@i,w,c
   248  001D56  A0D8               	btfss	status,0,c
   249  001D58  D007               	goto	l2132
   250  001D5A                     u2030:
   251                           
   252                           ;main.c: 55: SSPCON1bits.SSPEN = 0;
   253  001D5A  9AC6               	bcf	4038,5,c	;volatile
   254                           
   255                           ;main.c: 56: SSPCON1bits.SSPEN = 1;
   256  001D5C  8AC6               	bsf	4038,5,c	;volatile
   257                           
   258                           ;main.c: 57: i = 0;
   259  001D5E  0E00               	movlw	0
   260  001D60  6E13               	movwf	main@i+1,c
   261  001D62  0E00               	movlw	0
   262  001D64  6E12               	movwf	main@i,c
   263  001D66  D000               	goto	l2132
   264  001D68                     l2132:
   265                           
   266                           ;main.c: 58: }
   267                           ;main.c: 59: }
   268                           ;main.c: 60: }
   269                           ;main.c: 62: eserial_send_data(&pic_to_pc);
   270  001D68  0E16               	movlw	low main@pic_to_pc
   271  001D6A  6E07               	movwf	eserial_send_data@buffer,c
   272  001D6C  0E00               	movlw	high main@pic_to_pc
   273  001D6E  6E08               	movwf	eserial_send_data@buffer+1,c
   274  001D70  ECFD  F00C         	call	_eserial_send_data	;wreg free
   275  001D74  D7B4               	goto	l2112
   276                           
   277                           ;main.c: 63: }
   278                           ;main.c: 65: return (0);
   279                           ;	Return value of _main is never used
   280  001D76  EF00  F000         	goto	start
   281  001D7A                     __end_of_main:
   282                           	opt stack 0
   283                           wreg	equ	0xFE8
   284                           plusw1	equ	0xFE3
   285                           plusw2	equ	0xFDB
   286                           status	equ	0xFD8
   287                           
   288                           	psect	cinit
   289  001872                     __pcinit:
   290                           	opt stack 0
   291  001872                     start_initialization:
   292                           	opt stack 0
   293  001872                     __initialization:
   294                           	opt stack 0
   295                           
   296                           ; Clear objects allocated to BANK0 (68 bytes)
   297  001872  EE00  F060         	lfsr	0,__pbssBANK0
   298  001876  0E44               	movlw	68
   299  001878                     clear_0:
   300  001878  6AEE               	clrf	postinc0,c
   301  00187A  06E8               	decf	wreg,f,c
   302  00187C  E1FD               	bnz	clear_0
   303                           
   304                           ; Clear objects allocated to COMRAM (1 bytes)
   305  00187E  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   306  001880                     end_of_initialization:
   307                           	opt stack 0
   308  001880                     __end_of__initialization:
   309                           	opt stack 0
   310  001880  0E00               	movlw	low (__Lmediumconst shr (0+16))
   311  001882  6EF8               	movwf	tblptru,c
   312  001884  0100               	movlb	0
   313  001886  EF4B  F00E         	goto	_main	;jump to C main() function
   314                           tblptru	equ	0xFF8
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           plusw1	equ	0xFE3
   318                           plusw2	equ	0xFDB
   319                           status	equ	0xFD8
   320                           
   321                           	psect	bssCOMRAM
   322  00005A                     __pbssCOMRAM:
   323                           	opt stack 0
   324  00005A                     _dummy_byte:
   325                           	opt stack 0
   326  00005A                     	ds	1
   327                           tblptru	equ	0xFF8
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           plusw1	equ	0xFE3
   331                           plusw2	equ	0xFDB
   332                           status	equ	0xFD8
   333                           
   334                           	psect	bssBANK0
   335  000060                     __pbssBANK0:
   336                           	opt stack 0
   337  000060                     main@F4065:
   338                           	opt stack 0
   339  000060                     	ds	34
   340  000082                     main@F4067:
   341                           	opt stack 0
   342  000082                     	ds	34
   343                           tblptru	equ	0xFF8
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           plusw1	equ	0xFE3
   347                           plusw2	equ	0xFDB
   348                           status	equ	0xFD8
   349                           
   350                           	psect	cstackCOMRAM
   351  000001                     __pcstackCOMRAM:
   352                           	opt stack 0
   353  000001                     ?_buffer_pop:
   354                           	opt stack 0
   355  000001                     ?_spi_slave_get_byte:
   356                           	opt stack 0
   357  000001                     ?_buffer_peek:
   358                           	opt stack 0
   359  000001                     serial_send_byte@byte:
   360                           	opt stack 0
   361  000001                     setup_timer3@T3CON_reg:
   362                           	opt stack 0
   363  000001                     setup_spi@SSPCON1_reg:
   364                           	opt stack 0
   365  000001                     spi_send_get_byte@byte:
   366                           	opt stack 0
   367  000001                     setup_simple_serial@baudrate_value:
   368                           	opt stack 0
   369  000001                     serial_peek_receive@byte:
   370                           	opt stack 0
   371  000001                     encode_data@byte_1:
   372                           	opt stack 0
   373  000001                     decode_data@data:
   374                           	opt stack 0
   375  000001                     buffer_count@buffer:
   376                           	opt stack 0
   377  000001                     buffer_space@buffer:
   378                           	opt stack 0
   379  000001                     buffer_empty@buffer:
   380                           	opt stack 0
   381  000001                     buffer_push@buffer:
   382                           	opt stack 0
   383  000001                     buffer_pop@buffer:
   384                           	opt stack 0
   385  000001                     buffer_peek@buffer:
   386                           	opt stack 0
   387  000001                     set_timer3@value:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x0
   391  000001                     	ds	1
   392  000002                     setup_spi@SSPSTAT_reg:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x1
   396  000002                     	ds	1
   397  000003                     ??_buffer_pop:
   398  000003                     ??_buffer_peek:
   399  000003                     serial_peek_receive@get_byte:
   400                           	opt stack 0
   401  000003                     decode_data@byte_1:
   402                           	opt stack 0
   403  000003                     buffer_push@byte:
   404                           	opt stack 0
   405  000003                     spi_slave_get_byte@byte:
   406                           	opt stack 0
   407  000003                     espi_setup@mode:
   408                           	opt stack 0
   409  000003                     _setup_simple_serial$247:
   410                           	opt stack 0
   411  000003                     encode_data@byte_2:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x2
   415  000003                     	ds	1
   416  000004                     ??_buffer_push:
   417  000004                     decode_data@byte_2:
   418                           	opt stack 0
   419  000004                     spi_slave_peek_receive@byte:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x3
   423  000004                     	ds	1
   424  000005                     ??_encode_data:
   425  000005                     ??_decode_data:
   426  000005                     buffer_push@current_position:
   427                           	opt stack 0
   428  000005                     _setup_simple_serial$248:
   429                           	opt stack 0
   430  000005                     buffer_pop@byte:
   431                           	opt stack 0
   432  000005                     buffer_peek@byte:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x4
   436  000005                     	ds	1
   437  000006                     encode_data@data:
   438                           	opt stack 0
   439  000006                     spi_slave_peek_receive@get_byte:
   440                           	opt stack 0
   441  000006                     espi_slave_receive@buffer:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x5
   445  000006                     	ds	1
   446  000007                     setup_simple_serial@baudrate_bits:
   447                           	opt stack 0
   448  000007                     eserial_send_data@buffer:
   449                           	opt stack 0
   450  000007                     eserial_receive@buffer:
   451                           	opt stack 0
   452  000007                     espi_slave_send@buffer:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x6
   456  000007                     	ds	1
   457  000008                     espi_slave_receive@value:
   458                           	opt stack 0
   459  000008                     eserial_setup@baudrate_value:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x7
   463  000008                     	ds	1
   464  000009                     ??_espi_slave_send:
   465  000009                     eserial_send_data@i:
   466                           	opt stack 0
   467  000009                     espi_slave_receive@received_1:
   468                           	opt stack 0
   469  000009                     eserial_receive@stop_function:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x8
   473  000009                     	ds	1
   474  00000A                     eserial_setup@baudrate_bits:
   475                           	opt stack 0
   476  00000A                     espi_slave_receive@received_2:
   477                           	opt stack 0
   478  00000A                     eserial_send_data@value:
   479                           	opt stack 0
   480  00000A                     espi_slave_send@byte_to_send:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x9
   484  00000A                     	ds	1
   485  00000B                     eserial_receive@timer_start:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0xA
   489  00000B                     	ds	1
   490  00000C                     espi_slave_send@byte_1:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0xB
   494  00000C                     	ds	1
   495  00000D                     espi_slave_send@byte_2:
   496                           	opt stack 0
   497  00000D                     eserial_receive@timer_up:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0xC
   501  00000D                     	ds	1
   502  00000E                     espi_slave_send@received_1:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0xD
   506  00000E                     	ds	1
   507  00000F                     ??_eserial_receive:
   508                           
   509                           ; 0 bytes @ 0xE
   510  00000F                     	ds	1
   511  000010                     eserial_receive@test:
   512                           	opt stack 0
   513  000010                     espi_slave_send@received_2:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0xF
   517  000010                     	ds	1
   518  000011                     eserial_receive@value:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x10
   522  000011                     	ds	1
   523  000012                     main@i:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x11
   527  000012                     	ds	2
   528  000014                     main@value_129:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x13
   532  000014                     	ds	2
   533  000016                     main@pic_to_pc:
   534                           	opt stack 0
   535                           
   536                           ; 34 bytes @ 0x15
   537  000016                     	ds	34
   538  000038                     main@pic_to_pic:
   539                           	opt stack 0
   540                           
   541                           ; 34 bytes @ 0x37
   542  000038                     	ds	34
   543                           tblptru	equ	0xFF8
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           plusw1	equ	0xFE3
   547                           plusw2	equ	0xFDB
   548                           status	equ	0xFD8
   549                           
   550 ;; *************** function _setup_timer3 *****************
   551 ;; Defined at:
   552 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   553 ;; Parameters:    Size  Location     Type
   554 ;;  T3CON_reg       1    wreg     unsigned char 
   555 ;; Auto vars:     Size  Location     Type
   556 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   557 ;; Return value:  Size  Location     Type
   558 ;;		None               void
   559 ;; Registers used:
   560 ;;		wreg
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMRAM   BANK0
   566 ;;      Params:         0       0
   567 ;;      Locals:         1       0
   568 ;;      Temps:          0       0
   569 ;;      Totals:         1       0
   570 ;;Total ram usage:        1 bytes
   571 ;; Hardware stack levels used:    1
   572 ;; This function calls:
   573 ;;		Nothing
   574 ;; This function is called by:
   575 ;;		_main
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579                           	psect	text1
   580  0017F4                     __ptext1:
   581                           	opt stack 0
   582  0017F4                     _setup_timer3:
   583                           	opt stack 30
   584                           
   585                           ;incstack = 0
   586                           ;setup_timer3@T3CON_reg stored from wreg
   587  0017F4  6E01               	movwf	setup_timer3@T3CON_reg,c
   588                           
   589                           ;timers_pic.c: 57: T3CON = T3CON_reg;
   590  0017F6  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   591  0017FA  0012               	return		;funcret
   592  0017FC                     __end_of_setup_timer3:
   593                           	opt stack 0
   594                           tblptru	equ	0xFF8
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           plusw1	equ	0xFE3
   598                           plusw2	equ	0xFDB
   599                           status	equ	0xFD8
   600                           
   601 ;; *************** function _espi_slave_send *****************
   602 ;; Defined at:
   603 ;;		line 76 in file "extended_spi.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
   606 ;;		 -> main@pic_to_pic(34), 
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  received_2      2   15[COMRAM] int 
   609 ;;  received_1      2   13[COMRAM] int 
   610 ;;  byte_to_send    2    9[COMRAM] unsigned int 
   611 ;;  byte_2          1   12[COMRAM] unsigned char 
   612 ;;  byte_1          1   11[COMRAM] unsigned char 
   613 ;; Return value:  Size  Location     Type
   614 ;;		None               void
   615 ;; Registers used:
   616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0
   622 ;;      Params:         2       0
   623 ;;      Locals:         8       0
   624 ;;      Temps:          1       0
   625 ;;      Totals:        11       0
   626 ;;Total ram usage:       11 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    1
   629 ;; This function calls:
   630 ;;		_buffer_count
   631 ;;		_buffer_peek
   632 ;;		_buffer_pop
   633 ;;		_encode_data
   634 ;;		_spi_send_get_byte
   635 ;; This function is called by:
   636 ;;		_main
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           	psect	text2
   641  001EA6                     __ptext2:
   642                           	opt stack 0
   643  001EA6                     _espi_slave_send:
   644                           	opt stack 29
   645                           
   646                           ;extended_spi.c: 78: if (buffer_count(buffer)) {
   647                           
   648                           ;incstack = 0
   649  001EA6  C007  F001         	movff	espi_slave_send@buffer,buffer_count@buffer
   650  001EAA  C008  F002         	movff	espi_slave_send@buffer+1,buffer_count@buffer+1
   651  001EAE  EC1B  F00C         	call	_buffer_count	;wreg free
   652  001EB2  0900               	iorlw	0
   653  001EB4  B4D8               	btfsc	status,2,c
   654  001EB6  D09D               	goto	l468
   655                           
   656                           ;extended_spi.c: 79: uint16_t byte_to_send = buffer_peek(buffer);
   657  001EB8  C007  F001         	movff	espi_slave_send@buffer,buffer_peek@buffer
   658  001EBC  C008  F002         	movff	espi_slave_send@buffer+1,buffer_peek@buffer+1
   659  001EC0  EC65  F00D         	call	_buffer_peek	;wreg free
   660  001EC4  C001  F00A         	movff	?_buffer_peek,espi_slave_send@byte_to_send
   661  001EC8  C002  F00B         	movff	?_buffer_peek+1,espi_slave_send@byte_to_send+1
   662                           
   663                           ;extended_spi.c: 80: uint8_t byte_1;
   664                           ;extended_spi.c: 81: uint8_t byte_2;
   665                           ;extended_spi.c: 83: encode_data(byte_to_send, &byte_1, &byte_2);
   666  001ECC  0E0C               	movlw	low espi_slave_send@byte_1
   667  001ECE  6E01               	movwf	encode_data@byte_1,c
   668  001ED0  0E00               	movlw	high espi_slave_send@byte_1
   669  001ED2  6E02               	movwf	encode_data@byte_1+1,c
   670  001ED4  0E0D               	movlw	low espi_slave_send@byte_2
   671  001ED6  6E03               	movwf	encode_data@byte_2,c
   672  001ED8  0E00               	movlw	high espi_slave_send@byte_2
   673  001EDA  6E04               	movwf	encode_data@byte_2+1,c
   674  001EDC  500A               	movf	espi_slave_send@byte_to_send,w,c
   675  001EDE  EC42  F00D         	call	_encode_data
   676                           
   677                           ;extended_spi.c: 85: LATAbits.LATA2 = 1;
   678  001EE2  8489               	bsf	3977,2,c	;volatile
   679                           
   680                           ;extended_spi.c: 86: LATAbits.LATA2 = 0;
   681  001EE4  9489               	bcf	3977,2,c	;volatile
   682                           
   683                           ;extended_spi.c: 88: int16_t received_1 = spi_send_get_byte(byte_1);
   684  001EE6  500C               	movf	espi_slave_send@byte_1,w,c
   685  001EE8  EC24  F00C         	call	_spi_send_get_byte
   686  001EEC  6E09               	movwf	??_espi_slave_send& (0+255),c
   687  001EEE  5009               	movf	??_espi_slave_send,w,c
   688  001EF0  6E0E               	movwf	espi_slave_send@received_1,c
   689  001EF2  6A0F               	clrf	espi_slave_send@received_1+1,c
   690                           
   691                           ;extended_spi.c: 89: if (received_1 == 0x30 || received_1 == 0x10 ||
   692                           ;extended_spi.c: 90: received_1 == 0x20 || received_1 == -1)
   693  001EF4  0E30               	movlw	48
   694  001EF6  180E               	xorwf	espi_slave_send@received_1,w,c
   695  001EF8  100F               	iorwf	espi_slave_send@received_1+1,w,c
   696  001EFA  B4D8               	btfsc	status,2,c
   697  001EFC  0012               	return	
   698  001EFE  0E10               	movlw	16
   699  001F00  180E               	xorwf	espi_slave_send@received_1,w,c
   700  001F02  100F               	iorwf	espi_slave_send@received_1+1,w,c
   701  001F04  B4D8               	btfsc	status,2,c
   702  001F06  0012               	return	
   703  001F08  0E20               	movlw	32
   704  001F0A  180E               	xorwf	espi_slave_send@received_1,w,c
   705  001F0C  100F               	iorwf	espi_slave_send@received_1+1,w,c
   706  001F0E  B4D8               	btfsc	status,2,c
   707  001F10  0012               	return	
   708  001F12  280E               	incf	espi_slave_send@received_1,w,c
   709  001F14  E105               	bnz	l2012
   710  001F16  280F               	incf	espi_slave_send@received_1+1,w,c
   711  001F18  B4D8               	btfsc	status,2,c
   712  001F1A  0012               	return	
   713  001F1C  D001               	goto	l2012
   714                           
   715                           ;extended_spi.c: 91: return;
   716  001F1E  0012               	return	
   717  001F20                     l2012:
   718                           
   719                           ;extended_spi.c: 92: int16_t received_2 = spi_send_get_byte(byte_2);
   720  001F20  500D               	movf	espi_slave_send@byte_2,w,c
   721  001F22  EC24  F00C         	call	_spi_send_get_byte
   722  001F26  6E09               	movwf	??_espi_slave_send& (0+255),c
   723  001F28  5009               	movf	??_espi_slave_send,w,c
   724  001F2A  6E10               	movwf	espi_slave_send@received_2,c
   725  001F2C  6A11               	clrf	espi_slave_send@received_2+1,c
   726  001F2E                     l2014:
   727                           
   728                           ;extended_spi.c: 93: if (received_2 == 0x30 || received_2 == 0x10 ||
   729                           ;extended_spi.c: 94: received_2 == 0x20 || received_2 == -1)
   730  001F2E  0E30               	movlw	48
   731  001F30  1810               	xorwf	espi_slave_send@received_2,w,c
   732  001F32  1011               	iorwf	espi_slave_send@received_2+1,w,c
   733  001F34  B4D8               	btfsc	status,2,c
   734  001F36  0012               	return	
   735  001F38  0E10               	movlw	16
   736  001F3A  1810               	xorwf	espi_slave_send@received_2,w,c
   737  001F3C  1011               	iorwf	espi_slave_send@received_2+1,w,c
   738  001F3E  B4D8               	btfsc	status,2,c
   739  001F40  0012               	return	
   740  001F42  0E20               	movlw	32
   741  001F44  1810               	xorwf	espi_slave_send@received_2,w,c
   742  001F46  1011               	iorwf	espi_slave_send@received_2+1,w,c
   743  001F48  B4D8               	btfsc	status,2,c
   744  001F4A  0012               	return	
   745  001F4C  2810               	incf	espi_slave_send@received_2,w,c
   746  001F4E  E106               	bnz	l2022
   747  001F50  2811               	incf	espi_slave_send@received_2+1,w,c
   748  001F52  B4D8               	btfsc	status,2,c
   749  001F54  0012               	return	
   750  001F56  D002               	goto	l2022
   751                           
   752                           ;extended_spi.c: 95: return;
   753  001F58  0012               	return	
   754  001F5A  D000               	goto	l2022
   755  001F5C                     l2022:
   756                           
   757                           ;extended_spi.c: 98: buffer_pop(buffer);
   758  001F5C  C007  F001         	movff	espi_slave_send@buffer,buffer_pop@buffer
   759  001F60  C008  F002         	movff	espi_slave_send@buffer+1,buffer_pop@buffer+1
   760  001F64  ECC1  F00D         	call	_buffer_pop	;wreg free
   761                           
   762                           ;extended_spi.c: 99: byte_to_send = buffer_peek(buffer);
   763  001F68  C007  F001         	movff	espi_slave_send@buffer,buffer_peek@buffer
   764  001F6C  C008  F002         	movff	espi_slave_send@buffer+1,buffer_peek@buffer+1
   765  001F70  EC65  F00D         	call	_buffer_peek	;wreg free
   766  001F74  C001  F00A         	movff	?_buffer_peek,espi_slave_send@byte_to_send
   767  001F78  C002  F00B         	movff	?_buffer_peek+1,espi_slave_send@byte_to_send+1
   768                           
   769                           ;extended_spi.c: 100: if (byte_to_send == -1)
   770  001F7C  280A               	incf	espi_slave_send@byte_to_send,w,c
   771  001F7E  E105               	bnz	l2028
   772  001F80  280B               	incf	espi_slave_send@byte_to_send+1,w,c
   773  001F82  B4D8               	btfsc	status,2,c
   774  001F84  D032               	goto	l2050
   775  001F86  D001               	goto	l2028
   776                           
   777                           ;extended_spi.c: 101: break;
   778  001F88  D030               	goto	l2050
   779  001F8A                     l2028:
   780                           
   781                           ;extended_spi.c: 103: encode_data(byte_to_send, &byte_1, &byte_2);
   782  001F8A  0E0C               	movlw	low espi_slave_send@byte_1
   783  001F8C  6E01               	movwf	encode_data@byte_1,c
   784  001F8E  0E00               	movlw	high espi_slave_send@byte_1
   785  001F90  6E02               	movwf	encode_data@byte_1+1,c
   786  001F92  0E0D               	movlw	low espi_slave_send@byte_2
   787  001F94  6E03               	movwf	encode_data@byte_2,c
   788  001F96  0E00               	movlw	high espi_slave_send@byte_2
   789  001F98  6E04               	movwf	encode_data@byte_2+1,c
   790  001F9A  500A               	movf	espi_slave_send@byte_to_send,w,c
   791  001F9C  EC42  F00D         	call	_encode_data
   792                           
   793                           ;extended_spi.c: 105: received_1 = spi_send_get_byte(byte_1);
   794  001FA0  500C               	movf	espi_slave_send@byte_1,w,c
   795  001FA2  EC24  F00C         	call	_spi_send_get_byte
   796  001FA6  6E09               	movwf	??_espi_slave_send& (0+255),c
   797  001FA8  5009               	movf	??_espi_slave_send,w,c
   798  001FAA  6E0E               	movwf	espi_slave_send@received_1,c
   799  001FAC  6A0F               	clrf	espi_slave_send@received_1+1,c
   800                           
   801                           ;extended_spi.c: 106: if (received_1 == 0x30 || received_1 == 0x10 ||
   802                           ;extended_spi.c: 107: received_1 == 0x20 || received_1 == -1)
   803  001FAE  0E30               	movlw	48
   804  001FB0  180E               	xorwf	espi_slave_send@received_1,w,c
   805  001FB2  100F               	iorwf	espi_slave_send@received_1+1,w,c
   806  001FB4  B4D8               	btfsc	status,2,c
   807  001FB6  0012               	return	
   808  001FB8  0E10               	movlw	16
   809  001FBA  180E               	xorwf	espi_slave_send@received_1,w,c
   810  001FBC  100F               	iorwf	espi_slave_send@received_1+1,w,c
   811  001FBE  B4D8               	btfsc	status,2,c
   812  001FC0  0012               	return	
   813  001FC2  0E20               	movlw	32
   814  001FC4  180E               	xorwf	espi_slave_send@received_1,w,c
   815  001FC6  100F               	iorwf	espi_slave_send@received_1+1,w,c
   816  001FC8  B4D8               	btfsc	status,2,c
   817  001FCA  0012               	return	
   818  001FCC  280E               	incf	espi_slave_send@received_1,w,c
   819  001FCE  E105               	bnz	l2040
   820  001FD0  280F               	incf	espi_slave_send@received_1+1,w,c
   821  001FD2  B4D8               	btfsc	status,2,c
   822  001FD4  0012               	return	
   823  001FD6  D001               	goto	l2040
   824                           
   825                           ;extended_spi.c: 108: return;
   826  001FD8  0012               	return	
   827  001FDA                     l2040:
   828                           
   829                           ;extended_spi.c: 110: received_2 = spi_send_get_byte(byte_2);
   830  001FDA  500D               	movf	espi_slave_send@byte_2,w,c
   831  001FDC  EC24  F00C         	call	_spi_send_get_byte
   832  001FE0  D7A2               	goto	L1
   833  001FE2  D7A5               	goto	l2014
   834                           
   835                           ;extended_spi.c: 111: if (received_2 == 0x30 || received_2 == 0x10 ||
   836                           ;extended_spi.c: 112: received_2 == 0x20 || received_2 == -1)
   837  001FE4  D7BB               	goto	l2022
   838                           
   839                           ;extended_spi.c: 113: return;
   840  001FE6  0012               	return	
   841  001FE8  D7B9               	goto	l2022
   842  001FEA                     l2050:
   843                           
   844                           ;extended_spi.c: 114: }
   845                           ;extended_spi.c: 116: spi_send_get_byte(0x30);
   846  001FEA  0E30               	movlw	48
   847  001FEC  EC24  F00C         	call	_spi_send_get_byte
   848                           
   849                           ;extended_spi.c: 117: } else {
   850  001FF0  0012               	return	
   851  001FF2                     l468:
   852                           
   853                           ;extended_spi.c: 118: LATAbits.LATA2 = 1;
   854  001FF2  8489               	bsf	3977,2,c	;volatile
   855                           
   856                           ;extended_spi.c: 119: LATAbits.LATA2 = 0;
   857  001FF4  9489               	bcf	3977,2,c	;volatile
   858                           
   859                           ;extended_spi.c: 121: spi_send_get_byte(0x30);
   860  001FF6  0E30               	movlw	48
   861  001FF8  EC24  F00C         	call	_spi_send_get_byte
   862  001FFC  0012               	return	
   863  001FFE  0012               	return		;funcret
   864  002000                     __end_of_espi_slave_send:
   865                           	opt stack 0
   866                           tblptru	equ	0xFF8
   867                           postinc0	equ	0xFEE
   868                           wreg	equ	0xFE8
   869                           plusw1	equ	0xFE3
   870                           plusw2	equ	0xFDB
   871                           status	equ	0xFD8
   872                           
   873 ;; *************** function _encode_data *****************
   874 ;; Defined at:
   875 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;  data            1    wreg     unsigned char 
   878 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
   879 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
   880 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
   881 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  data            1    5[COMRAM] unsigned char 
   884 ;; Return value:  Size  Location     Type
   885 ;;		None               void
   886 ;; Registers used:
   887 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0
   893 ;;      Params:         4       0
   894 ;;      Locals:         1       0
   895 ;;      Temps:          1       0
   896 ;;      Totals:         6       0
   897 ;;Total ram usage:        6 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_espi_slave_send
   903 ;;		_espi_master_send
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907                           	psect	text3
   908  001A84                     __ptext3:
   909                           	opt stack 0
   910  001A84                     _encode_data:
   911                           	opt stack 29
   912                           
   913                           ;incstack = 0
   914                           ;encode_data@data stored from wreg
   915  001A84  6E06               	movwf	encode_data@data,c
   916                           
   917                           ;encoding.c: 5: *byte_1 = 0xA0;
   918  001A86  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   919  001A8A  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   920  001A8E  0EA0               	movlw	160
   921  001A90  6EDF               	movwf	indf2,c
   922                           
   923                           ;encoding.c: 6: *byte_2 = 0xA0;
   924  001A92  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   925  001A96  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   926  001A9A  0EA0               	movlw	160
   927  001A9C  6EDF               	movwf	indf2,c
   928                           
   929                           ;encoding.c: 8: *byte_1 |= data >> 4;
   930  001A9E  C006  F005         	movff	encode_data@data,??_encode_data
   931  001AA2  3A05               	swapf	??_encode_data,f,c
   932  001AA4  0E0F               	movlw	15
   933  001AA6  1605               	andwf	??_encode_data,f,c
   934  001AA8  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   935  001AAC  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   936  001AB0  5005               	movf	??_encode_data,w,c
   937  001AB2  12DF               	iorwf	indf2,f,c
   938                           
   939                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
   940  001AB4  C006  F005         	movff	encode_data@data,??_encode_data
   941  001AB8  0E0F               	movlw	15
   942  001ABA  1605               	andwf	??_encode_data,f,c
   943  001ABC  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   944  001AC0  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   945  001AC4  5005               	movf	??_encode_data,w,c
   946  001AC6  12DF               	iorwf	indf2,f,c
   947  001AC8  0012               	return		;funcret
   948  001ACA                     __end_of_encode_data:
   949                           	opt stack 0
   950                           tblptru	equ	0xFF8
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           plusw1	equ	0xFE3
   954                           indf2	equ	0xFDF
   955                           plusw2	equ	0xFDB
   956                           fsr2h	equ	0xFDA
   957                           fsr2l	equ	0xFD9
   958                           status	equ	0xFD8
   959                           
   960 ;; *************** function _buffer_peek *****************
   961 ;; Defined at:
   962 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;  buffer          2    0[COMRAM] PTR const struct circula
   965 ;;		 -> main@pic_to_pic(34), 
   966 ;; Auto vars:     Size  Location     Type
   967 ;;  byte            2    4[COMRAM] int 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  2    0[COMRAM] int 
   970 ;; Registers used:
   971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0
   977 ;;      Params:         2       0
   978 ;;      Locals:         2       0
   979 ;;      Temps:          2       0
   980 ;;      Totals:         6       0
   981 ;;Total ram usage:        6 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; This function calls:
   984 ;;		Nothing
   985 ;; This function is called by:
   986 ;;		_espi_slave_send
   987 ;;		_espi_master_send
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text4
   992  001ACA                     __ptext4:
   993                           	opt stack 0
   994  001ACA                     _buffer_peek:
   995                           	opt stack 29
   996                           
   997                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
   998                           
   999                           ;incstack = 0
  1000  001ACA  EE20 F001          	lfsr	2,1
  1001  001ACE  5001               	movf	buffer_peek@buffer,w,c
  1002  001AD0  26D9               	addwf	fsr2l,f,c
  1003  001AD2  5002               	movf	buffer_peek@buffer+1,w,c
  1004  001AD4  22DA               	addwfc	fsr2h,f,c
  1005  001AD6  50DF               	movf	indf2,w,c
  1006  001AD8  A4D8               	btfss	status,2,c
  1007  001ADA  D003               	goto	l1910
  1008                           
  1009                           ;circular_buffer.c: 58: return -1;
  1010  001ADC  6801               	setf	?_buffer_peek,c
  1011  001ADE  6802               	setf	?_buffer_peek+1,c
  1012  001AE0  0012               	return	
  1013  001AE2                     l1910:
  1014                           
  1015                           ;circular_buffer.c: 59: }
  1016                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  1017  001AE2  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
  1018  001AE6  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
  1019  001AEA  50DF               	movf	indf2,w,c
  1020  001AEC  6E03               	movwf	??_buffer_peek& (0+255),c
  1021  001AEE  5003               	movf	??_buffer_peek,w,c
  1022  001AF0  0D01               	mullw	1
  1023  001AF2  0E02               	movlw	2
  1024  001AF4  26F3               	addwf	prodl,f,c
  1025  001AF6  0E00               	movlw	0
  1026  001AF8  22F4               	addwfc	prodh,f,c
  1027  001AFA  50F3               	movf	prodl,w,c
  1028  001AFC  2401               	addwf	buffer_peek@buffer,w,c
  1029  001AFE  6ED9               	movwf	fsr2l,c
  1030  001B00  50F4               	movf	prodh,w,c
  1031  001B02  2002               	addwfc	buffer_peek@buffer+1,w,c
  1032  001B04  6EDA               	movwf	fsr2h,c
  1033  001B06  50DF               	movf	indf2,w,c
  1034  001B08  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
  1035  001B0A  5004               	movf	??_buffer_peek+1,w,c
  1036  001B0C  6E05               	movwf	buffer_peek@byte,c
  1037  001B0E  6A06               	clrf	buffer_peek@byte+1,c
  1038                           
  1039                           ;circular_buffer.c: 63: return byte;
  1040  001B10  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
  1041  001B14  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
  1042  001B18  0012               	return	
  1043  001B1A  0012               	return		;funcret
  1044  001B1C                     __end_of_buffer_peek:
  1045                           	opt stack 0
  1046                           tblptru	equ	0xFF8
  1047                           prodh	equ	0xFF4
  1048                           prodl	equ	0xFF3
  1049                           postinc0	equ	0xFEE
  1050                           wreg	equ	0xFE8
  1051                           plusw1	equ	0xFE3
  1052                           indf2	equ	0xFDF
  1053                           plusw2	equ	0xFDB
  1054                           fsr2h	equ	0xFDA
  1055                           fsr2l	equ	0xFD9
  1056                           status	equ	0xFD8
  1057                           
  1058 ;; *************** function _buffer_count *****************
  1059 ;; Defined at:
  1060 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1063 ;;		 -> main@pic_to_pic(34), 
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      unsigned char 
  1068 ;; Registers used:
  1069 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0
  1075 ;;      Params:         2       0
  1076 ;;      Locals:         0       0
  1077 ;;      Temps:          0       0
  1078 ;;      Totals:         2       0
  1079 ;;Total ram usage:        2 bytes
  1080 ;; Hardware stack levels used:    1
  1081 ;; This function calls:
  1082 ;;		Nothing
  1083 ;; This function is called by:
  1084 ;;		_espi_slave_send
  1085 ;;		_espi_master_send
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text5
  1090  001836                     __ptext5:
  1091                           	opt stack 0
  1092  001836                     _buffer_count:
  1093                           	opt stack 29
  1094                           
  1095                           ;circular_buffer.c: 6: return buffer->count;
  1096                           
  1097                           ;incstack = 0
  1098  001836  EE20 F001          	lfsr	2,1
  1099  00183A  5001               	movf	buffer_count@buffer,w,c
  1100  00183C  26D9               	addwf	fsr2l,f,c
  1101  00183E  5002               	movf	buffer_count@buffer+1,w,c
  1102  001840  22DA               	addwfc	fsr2h,f,c
  1103  001842  50DF               	movf	indf2,w,c
  1104  001844  0012               	return	
  1105  001846  0012               	return		;funcret
  1106  001848                     __end_of_buffer_count:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           prodh	equ	0xFF4
  1110                           prodl	equ	0xFF3
  1111                           postinc0	equ	0xFEE
  1112                           wreg	equ	0xFE8
  1113                           plusw1	equ	0xFE3
  1114                           indf2	equ	0xFDF
  1115                           plusw2	equ	0xFDB
  1116                           fsr2h	equ	0xFDA
  1117                           fsr2l	equ	0xFD9
  1118                           status	equ	0xFD8
  1119                           
  1120 ;; *************** function _espi_slave_receive *****************
  1121 ;; Defined at:
  1122 ;;		line 49 in file "extended_spi.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  buffer          2    5[COMRAM] PTR struct circular_buff
  1125 ;;		 -> main@pic_to_pc(34), 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;  received_2      1    9[COMRAM] char 
  1128 ;;  received_1      1    8[COMRAM] char 
  1129 ;;  value           1    7[COMRAM] unsigned char 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;		None               void
  1132 ;; Registers used:
  1133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0
  1139 ;;      Params:         2       0
  1140 ;;      Locals:         3       0
  1141 ;;      Temps:          0       0
  1142 ;;      Totals:         5       0
  1143 ;;Total ram usage:        5 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; Hardware stack levels required when called:    1
  1146 ;; This function calls:
  1147 ;;		_buffer_push
  1148 ;;		_buffer_space
  1149 ;;		_decode_data
  1150 ;;		_spi_send_get_byte
  1151 ;;		_spi_slave_get_byte
  1152 ;; This function is called by:
  1153 ;;		_main
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text6
  1158  001BFC                     __ptext6:
  1159                           	opt stack 0
  1160  001BFC                     _espi_slave_receive:
  1161                           	opt stack 29
  1162                           
  1163                           ;extended_spi.c: 51: uint8_t value;
  1164                           ;extended_spi.c: 52: int8_t received_1;
  1165                           ;extended_spi.c: 53: int8_t received_2;
  1166                           ;extended_spi.c: 55: LATAbits.LATA2 = 1;
  1167                           
  1168                           ;incstack = 0
  1169  001BFC  8489               	bsf	3977,2,c	;volatile
  1170                           
  1171                           ;extended_spi.c: 56: LATAbits.LATA2 = 0;
  1172  001BFE  9489               	bcf	3977,2,c	;volatile
  1173                           
  1174                           ;extended_spi.c: 58: while (buffer_space(buffer)) {
  1175  001C00  D03D               	goto	l2080
  1176  001C02                     l2056:
  1177                           
  1178                           ;extended_spi.c: 59: received_1 = spi_slave_get_byte();
  1179  001C02  EC61  F00C         	call	_spi_slave_get_byte	;wreg free
  1180  001C06  5001               	movf	?_spi_slave_get_byte,w,c
  1181  001C08  6E09               	movwf	espi_slave_receive@received_1,c
  1182                           
  1183                           ;extended_spi.c: 60: if (received_1 == 0x30 || received_1 == 0x10 ||
  1184                           ;extended_spi.c: 61: received_1 == 0x20 || received_1 == -1)
  1185  001C0A  0E30               	movlw	48
  1186  001C0C  1809               	xorwf	espi_slave_receive@received_1,w,c
  1187  001C0E  B4D8               	btfsc	status,2,c
  1188  001C10  0012               	return	
  1189  001C12  0E10               	movlw	16
  1190  001C14  1809               	xorwf	espi_slave_receive@received_1,w,c
  1191  001C16  B4D8               	btfsc	status,2,c
  1192  001C18  0012               	return	
  1193  001C1A  0E20               	movlw	32
  1194  001C1C  1809               	xorwf	espi_slave_receive@received_1,w,c
  1195  001C1E  B4D8               	btfsc	status,2,c
  1196  001C20  0012               	return	
  1197  001C22  2809               	incf	espi_slave_receive@received_1,w,c
  1198  001C24  B4D8               	btfsc	status,2,c
  1199  001C26  0012               	return	
  1200  001C28  D001               	goto	l2066
  1201                           
  1202                           ;extended_spi.c: 62: return;
  1203  001C2A  0012               	return	
  1204  001C2C                     l2066:
  1205                           
  1206                           ;extended_spi.c: 64: received_2 = spi_slave_get_byte();
  1207  001C2C  EC61  F00C         	call	_spi_slave_get_byte	;wreg free
  1208  001C30  5001               	movf	?_spi_slave_get_byte,w,c
  1209  001C32  6E0A               	movwf	espi_slave_receive@received_2,c
  1210                           
  1211                           ;extended_spi.c: 65: if (received_2 == 0x30 || received_2 == 0x10 ||
  1212                           ;extended_spi.c: 66: received_2 == 0x20 || received_2 == -1)
  1213  001C34  0E30               	movlw	48
  1214  001C36  180A               	xorwf	espi_slave_receive@received_2,w,c
  1215  001C38  B4D8               	btfsc	status,2,c
  1216  001C3A  0012               	return	
  1217  001C3C  0E10               	movlw	16
  1218  001C3E  180A               	xorwf	espi_slave_receive@received_2,w,c
  1219  001C40  B4D8               	btfsc	status,2,c
  1220  001C42  0012               	return	
  1221  001C44  0E20               	movlw	32
  1222  001C46  180A               	xorwf	espi_slave_receive@received_2,w,c
  1223  001C48  B4D8               	btfsc	status,2,c
  1224  001C4A  0012               	return	
  1225  001C4C  280A               	incf	espi_slave_receive@received_2,w,c
  1226  001C4E  B4D8               	btfsc	status,2,c
  1227  001C50  0012               	return	
  1228  001C52  D001               	goto	l2076
  1229                           
  1230                           ;extended_spi.c: 67: return;
  1231  001C54  0012               	return	
  1232  001C56                     l2076:
  1233                           
  1234                           ;extended_spi.c: 69: decode_data( &value, (uint8_t)received_1, (uint8_t)received_2);
  1235  001C56  0E08               	movlw	low espi_slave_receive@value
  1236  001C58  6E01               	movwf	decode_data@data,c
  1237  001C5A  0E00               	movlw	high espi_slave_receive@value
  1238  001C5C  6E02               	movwf	decode_data@data+1,c
  1239  001C5E  C009  F003         	movff	espi_slave_receive@received_1,decode_data@byte_1
  1240  001C62  C00A  F004         	movff	espi_slave_receive@received_2,decode_data@byte_2
  1241  001C66  ECC0  F00C         	call	_decode_data	;wreg free
  1242                           
  1243                           ;extended_spi.c: 70: buffer_push(buffer, value);
  1244  001C6A  C006  F001         	movff	espi_slave_receive@buffer,buffer_push@buffer
  1245  001C6E  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_push@buffer+1
  1246  001C72  C008  F003         	movff	espi_slave_receive@value,buffer_push@byte
  1247  001C76  EC8E  F00D         	call	_buffer_push	;wreg free
  1248  001C7A  D000               	goto	l2080
  1249  001C7C                     l2080:
  1250  001C7C  C006  F001         	movff	espi_slave_receive@buffer,buffer_space@buffer
  1251  001C80  C007  F002         	movff	espi_slave_receive@buffer+1,buffer_space@buffer+1
  1252  001C84  EC2E  F00C         	call	_buffer_space	;wreg free
  1253  001C88  0900               	iorlw	0
  1254  001C8A  A4D8               	btfss	status,2,c
  1255  001C8C  D7BA               	goto	l2056
  1256                           
  1257                           ;extended_spi.c: 71: }
  1258                           ;extended_spi.c: 73: spi_send_get_byte(0x30);
  1259  001C8E  0E30               	movlw	48
  1260  001C90  EC24  F00C         	call	_spi_send_get_byte
  1261  001C94  0012               	return		;funcret
  1262  001C96                     __end_of_espi_slave_receive:
  1263                           	opt stack 0
  1264                           tblptru	equ	0xFF8
  1265                           prodh	equ	0xFF4
  1266                           prodl	equ	0xFF3
  1267                           postinc0	equ	0xFEE
  1268                           wreg	equ	0xFE8
  1269                           plusw1	equ	0xFE3
  1270                           indf2	equ	0xFDF
  1271                           plusw2	equ	0xFDB
  1272                           fsr2h	equ	0xFDA
  1273                           fsr2l	equ	0xFD9
  1274                           status	equ	0xFD8
  1275                           
  1276 ;; *************** function _spi_send_get_byte *****************
  1277 ;; Defined at:
  1278 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  byte            1    wreg     unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  byte            1    0[COMRAM] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      unsigned char 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0
  1292 ;;      Params:         0       0
  1293 ;;      Locals:         1       0
  1294 ;;      Temps:          0       0
  1295 ;;      Totals:         1       0
  1296 ;;Total ram usage:        1 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; This function calls:
  1299 ;;		Nothing
  1300 ;; This function is called by:
  1301 ;;		_espi_slave_receive
  1302 ;;		_espi_slave_send
  1303 ;;		_spi_send_data
  1304 ;;		_spi_master_get_data
  1305 ;;		_wait_pulse
  1306 ;;		_espi_master_send
  1307 ;;		_espi_master_receive
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text7
  1312  001848                     __ptext7:
  1313                           	opt stack 0
  1314  001848                     _spi_send_get_byte:
  1315                           	opt stack 29
  1316                           
  1317                           ;incstack = 0
  1318                           ;spi_send_get_byte@byte stored from wreg
  1319  001848  6E01               	movwf	spi_send_get_byte@byte,c
  1320                           
  1321                           ;spi_pic.c: 35: SSPBUF = byte;
  1322  00184A  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  1323                           
  1324                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  1325  00184E  D000               	goto	l339
  1326  001850                     l339:
  1327  001850  A0C7               	btfss	4039,0,c	;volatile
  1328  001852  D7FE               	goto	l339
  1329                           
  1330                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  1331  001854  BEC6               	btfsc	4038,7,c	;volatile
  1332                           
  1333                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  1334  001856  9EC6               	bcf	4038,7,c	;volatile
  1335                           
  1336                           ;spi_pic.c: 39: return SSPBUF;
  1337  001858  50C9               	movf	4041,w,c	;volatile
  1338  00185A  0012               	return		;funcret
  1339  00185C                     __end_of_spi_send_get_byte:
  1340                           	opt stack 0
  1341                           tblptru	equ	0xFF8
  1342                           prodh	equ	0xFF4
  1343                           prodl	equ	0xFF3
  1344                           postinc0	equ	0xFEE
  1345                           wreg	equ	0xFE8
  1346                           plusw1	equ	0xFE3
  1347                           indf2	equ	0xFDF
  1348                           plusw2	equ	0xFDB
  1349                           fsr2h	equ	0xFDA
  1350                           fsr2l	equ	0xFD9
  1351                           status	equ	0xFD8
  1352                           
  1353 ;; *************** function _decode_data *****************
  1354 ;; Defined at:
  1355 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;  data            2    0[COMRAM] PTR unsigned char 
  1358 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  1359 ;;  byte_1          1    2[COMRAM] unsigned char 
  1360 ;;  byte_2          1    3[COMRAM] unsigned char 
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      char 
  1365 ;; Registers used:
  1366 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0
  1372 ;;      Params:         4       0
  1373 ;;      Locals:         0       0
  1374 ;;      Temps:          1       0
  1375 ;;      Totals:         5       0
  1376 ;;Total ram usage:        5 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_espi_slave_receive
  1382 ;;		_espi_master_receive
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text8
  1387  001980                     __ptext8:
  1388                           	opt stack 0
  1389  001980                     _decode_data:
  1390                           	opt stack 29
  1391                           
  1392                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  1393                           
  1394                           ;incstack = 0
  1395  001980  5003               	movf	decode_data@byte_1,w,c
  1396  001982  0BF0               	andlw	240
  1397  001984  0AA0               	xorlw	160
  1398  001986  A4D8               	btfss	status,2,c
  1399  001988  0012               	return	
  1400  00198A  D002               	goto	l1860
  1401                           
  1402                           ;encoding.c: 15: return -1;
  1403                           ;	Return value of _decode_data is never used
  1404  00198C  0012               	return	
  1405  00198E  D008               	goto	l1864
  1406  001990                     l1860:
  1407                           
  1408                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  1409  001990  5004               	movf	decode_data@byte_2,w,c
  1410  001992  0BF0               	andlw	240
  1411  001994  0AA0               	xorlw	160
  1412  001996  A4D8               	btfss	status,2,c
  1413  001998  0012               	return	
  1414  00199A  D002               	goto	l1864
  1415                           
  1416                           ;encoding.c: 17: return -2;
  1417                           ;	Return value of _decode_data is never used
  1418  00199C  0012               	return	
  1419  00199E  D000               	goto	l1864
  1420  0019A0                     l1864:
  1421                           
  1422                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  1423  0019A0  C004  F005         	movff	decode_data@byte_2,??_decode_data
  1424  0019A4  0E0F               	movlw	15
  1425  0019A6  1605               	andwf	??_decode_data,f,c
  1426  0019A8  3803               	swapf	decode_data@byte_1,w,c
  1427  0019AA  0BF0               	andlw	240
  1428  0019AC  1005               	iorwf	??_decode_data,w,c
  1429  0019AE  C001  FFD9         	movff	decode_data@data,fsr2l
  1430  0019B2  C002  FFDA         	movff	decode_data@data+1,fsr2h
  1431  0019B6  6EDF               	movwf	indf2,c
  1432  0019B8  0012               	return	
  1433                           
  1434                           ;encoding.c: 21: return 0;
  1435                           ;	Return value of _decode_data is never used
  1436  0019BA  0012               	return		;funcret
  1437  0019BC                     __end_of_decode_data:
  1438                           	opt stack 0
  1439                           tblptru	equ	0xFF8
  1440                           prodh	equ	0xFF4
  1441                           prodl	equ	0xFF3
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           plusw1	equ	0xFE3
  1445                           indf2	equ	0xFDF
  1446                           plusw2	equ	0xFDB
  1447                           fsr2h	equ	0xFDA
  1448                           fsr2l	equ	0xFD9
  1449                           status	equ	0xFD8
  1450                           
  1451 ;; *************** function _espi_setup *****************
  1452 ;; Defined at:
  1453 ;;		line 27 in file "extended_spi.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;  mode            1    wreg     unsigned char 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  mode            1    2[COMRAM] unsigned char 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;		None               void
  1460 ;; Registers used:
  1461 ;;		wreg, status,2, status,0, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0
  1467 ;;      Params:         0       0
  1468 ;;      Locals:         1       0
  1469 ;;      Temps:          0       0
  1470 ;;      Totals:         1       0
  1471 ;;Total ram usage:        1 bytes
  1472 ;; Hardware stack levels used:    1
  1473 ;; Hardware stack levels required when called:    1
  1474 ;; This function calls:
  1475 ;;		_setup_spi
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           	psect	text9
  1482  00190E                     __ptext9:
  1483                           	opt stack 0
  1484  00190E                     _espi_setup:
  1485                           	opt stack 29
  1486                           
  1487                           ;incstack = 0
  1488                           ;espi_setup@mode stored from wreg
  1489  00190E  6E03               	movwf	espi_setup@mode,c
  1490                           
  1491                           ;extended_spi.c: 29: setup_spi(0, 0x20 | 0x10 | mode);
  1492  001910  5003               	movf	espi_setup@mode,w,c
  1493  001912  0930               	iorlw	48
  1494  001914  6E01               	movwf	setup_spi@SSPCON1_reg,c
  1495  001916  0E00               	movlw	0
  1496  001918  ECDE  F00C         	call	_setup_spi
  1497                           
  1498                           ;extended_spi.c: 31: ANSELbits.ANS2 = 0;
  1499  00191C  947E               	bcf	3966,2,c	;volatile
  1500                           
  1501                           ;extended_spi.c: 32: ANSELHbits.ANS8 = 0;
  1502  00191E  907F               	bcf	3967,0,c	;volatile
  1503                           
  1504                           ;extended_spi.c: 34: if (mode == 0x04 || mode == 0x05) {
  1505  001920  0E04               	movlw	4
  1506  001922  1803               	xorwf	espi_setup@mode,w,c
  1507  001924  B4D8               	btfsc	status,2,c
  1508  001926  D004               	goto	l451
  1509  001928  0E05               	movlw	5
  1510  00192A  1803               	xorwf	espi_setup@mode,w,c
  1511  00192C  A4D8               	btfss	status,2,c
  1512  00192E  D004               	goto	l449
  1513  001930                     l451:
  1514                           
  1515                           ;extended_spi.c: 35: TRISAbits.RA2 = 0;
  1516  001930  9492               	bcf	3986,2,c	;volatile
  1517                           
  1518                           ;extended_spi.c: 36: LATAbits.LATA2 = 0;
  1519  001932  9489               	bcf	3977,2,c	;volatile
  1520                           
  1521                           ;extended_spi.c: 37: TRISCbits.RC6 = 1;
  1522  001934  8C94               	bsf	3988,6,c	;volatile
  1523                           
  1524                           ;extended_spi.c: 38: } else {
  1525  001936  0012               	return	
  1526  001938                     l449:
  1527                           
  1528                           ;extended_spi.c: 39: TRISAbits.RA2 = 1;
  1529  001938  8492               	bsf	3986,2,c	;volatile
  1530                           
  1531                           ;extended_spi.c: 40: TRISCbits.RC6 = 0;
  1532  00193A  9C94               	bcf	3988,6,c	;volatile
  1533                           
  1534                           ;extended_spi.c: 41: LATCbits.LATC6 = 0;
  1535  00193C  9C8B               	bcf	3979,6,c	;volatile
  1536                           
  1537                           ;extended_spi.c: 42: INTCON2bits.INTEDG2 = 1;
  1538  00193E  88F1               	bsf	intcon2,4,c	;volatile
  1539                           
  1540                           ;extended_spi.c: 43: INTCON3bits.INT2E = 1;
  1541  001940  88F0               	bsf	intcon3,4,c	;volatile
  1542  001942  0012               	return	
  1543  001944  0012               	return		;funcret
  1544  001946                     __end_of_espi_setup:
  1545                           	opt stack 0
  1546                           tblptru	equ	0xFF8
  1547                           prodh	equ	0xFF4
  1548                           prodl	equ	0xFF3
  1549                           intcon2	equ	0xFF1
  1550                           intcon3	equ	0xFF0
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           plusw1	equ	0xFE3
  1554                           indf2	equ	0xFDF
  1555                           plusw2	equ	0xFDB
  1556                           fsr2h	equ	0xFDA
  1557                           fsr2l	equ	0xFD9
  1558                           status	equ	0xFD8
  1559                           
  1560 ;; *************** function _setup_spi *****************
  1561 ;; Defined at:
  1562 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  SSPSTAT_reg     1    wreg     unsigned char 
  1565 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;		None               void
  1570 ;; Registers used:
  1571 ;;		wreg, status,2, status,0
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0
  1577 ;;      Params:         1       0
  1578 ;;      Locals:         1       0
  1579 ;;      Temps:          0       0
  1580 ;;      Totals:         2       0
  1581 ;;Total ram usage:        2 bytes
  1582 ;; Hardware stack levels used:    1
  1583 ;; This function calls:
  1584 ;;		Nothing
  1585 ;; This function is called by:
  1586 ;;		_espi_setup
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text10
  1591  0019BC                     __ptext10:
  1592                           	opt stack 0
  1593  0019BC                     _setup_spi:
  1594                           	opt stack 29
  1595                           
  1596                           ;incstack = 0
  1597                           ;setup_spi@SSPSTAT_reg stored from wreg
  1598  0019BC  6E02               	movwf	setup_spi@SSPSTAT_reg,c
  1599                           
  1600                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
  1601  0019BE  9E94               	bcf	3988,7,c	;volatile
  1602                           
  1603                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
  1604  0019C0  947F               	bcf	3967,2,c	;volatile
  1605                           
  1606                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
  1607  0019C2  8893               	bsf	3987,4,c	;volatile
  1608                           
  1609                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
  1610  0019C4  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
  1611                           
  1612                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
  1613  0019C8  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
  1614                           
  1615                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
  1616  0019CC  50C6               	movf	4038,w,c	;volatile
  1617  0019CE  0B0F               	andlw	15
  1618  0019D0  0A05               	xorlw	5
  1619  0019D2  B4D8               	btfsc	status,2,c
  1620  0019D4  D005               	goto	l333
  1621  0019D6  50C6               	movf	4038,w,c	;volatile
  1622  0019D8  0B0F               	andlw	15
  1623  0019DA  0A04               	xorlw	4
  1624  0019DC  A4D8               	btfss	status,2,c
  1625  0019DE  D00A               	goto	l331
  1626  0019E0                     l333:
  1627                           
  1628                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
  1629  0019E0  8C93               	bsf	3987,6,c	;volatile
  1630                           
  1631                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
  1632  0019E2  50C6               	movf	4038,w,c	;volatile
  1633  0019E4  0B0F               	andlw	15
  1634  0019E6  0A04               	xorlw	4
  1635  0019E8  A4D8               	btfss	status,2,c
  1636  0019EA  D002               	goto	l334
  1637                           
  1638                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
  1639  0019EC  907F               	bcf	3967,0,c	;volatile
  1640                           
  1641                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
  1642  0019EE  8C94               	bsf	3988,6,c	;volatile
  1643  0019F0                     l334:
  1644                           
  1645                           ;spi_pic.c: 26: }
  1646                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
  1647  0019F0  9EC7               	bcf	4039,7,c	;volatile
  1648                           
  1649                           ;spi_pic.c: 28: } else {
  1650  0019F2  0012               	return	
  1651  0019F4                     l331:
  1652                           
  1653                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
  1654  0019F4  9C93               	bcf	3987,6,c	;volatile
  1655  0019F6  0012               	return	
  1656  0019F8  0012               	return		;funcret
  1657  0019FA                     __end_of_setup_spi:
  1658                           	opt stack 0
  1659                           tblptru	equ	0xFF8
  1660                           prodh	equ	0xFF4
  1661                           prodl	equ	0xFF3
  1662                           intcon2	equ	0xFF1
  1663                           intcon3	equ	0xFF0
  1664                           postinc0	equ	0xFEE
  1665                           wreg	equ	0xFE8
  1666                           plusw1	equ	0xFE3
  1667                           indf2	equ	0xFDF
  1668                           plusw2	equ	0xFDB
  1669                           fsr2h	equ	0xFDA
  1670                           fsr2l	equ	0xFD9
  1671                           status	equ	0xFD8
  1672                           
  1673 ;; *************** function _eserial_setup *****************
  1674 ;; Defined at:
  1675 ;;		line 16 in file "extended_serial.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;  baudrate_bit    1    wreg     unsigned char 
  1678 ;;  baudrate_val    2    7[COMRAM] unsigned int 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  baudrate_bit    1    9[COMRAM] unsigned char 
  1681 ;; Return value:  Size  Location     Type
  1682 ;;		None               void
  1683 ;; Registers used:
  1684 ;;		wreg, status,2, cstack
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0
  1690 ;;      Params:         2       0
  1691 ;;      Locals:         1       0
  1692 ;;      Temps:          0       0
  1693 ;;      Totals:         3       0
  1694 ;;Total ram usage:        3 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    1
  1697 ;; This function calls:
  1698 ;;		_setup_simple_serial
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text11
  1705  0018A6                     __ptext11:
  1706                           	opt stack 0
  1707  0018A6                     _eserial_setup:
  1708                           	opt stack 29
  1709                           
  1710                           ;incstack = 0
  1711                           ;eserial_setup@baudrate_bits stored from wreg
  1712  0018A6  6E0A               	movwf	eserial_setup@baudrate_bits,c
  1713                           
  1714                           ;extended_serial.c: 18: ANSELbits.ANS5 = 0;
  1715  0018A8  9A7E               	bcf	3966,5,c	;volatile
  1716                           
  1717                           ;extended_serial.c: 19: ANSELHbits.ANS11 = 0;
  1718  0018AA  967F               	bcf	3967,3,c	;volatile
  1719                           
  1720                           ;extended_serial.c: 21: TRISCbits.RC0 = 0;
  1721  0018AC  9094               	bcf	3988,0,c	;volatile
  1722                           
  1723                           ;extended_serial.c: 22: TRISCbits.RC1 = 1;
  1724  0018AE  8294               	bsf	3988,1,c	;volatile
  1725                           
  1726                           ;extended_serial.c: 24: setup_simple_serial(baudrate_bits, baudrate_value);
  1727  0018B0  C008  F001         	movff	eserial_setup@baudrate_value,setup_simple_serial@baudrate_value
  1728  0018B4  C009  F002         	movff	eserial_setup@baudrate_value+1,setup_simple_serial@baudrate_value+1
  1729  0018B8  500A               	movf	eserial_setup@baudrate_bits,w,c
  1730  0018BA  EC1F  F00D         	call	_setup_simple_serial
  1731                           
  1732                           ;extended_serial.c: 26: LATCbits.LATC0 = 1;
  1733  0018BE  808B               	bsf	3979,0,c	;volatile
  1734  0018C0  0012               	return		;funcret
  1735  0018C2                     __end_of_eserial_setup:
  1736                           	opt stack 0
  1737                           tblptru	equ	0xFF8
  1738                           prodh	equ	0xFF4
  1739                           prodl	equ	0xFF3
  1740                           intcon2	equ	0xFF1
  1741                           intcon3	equ	0xFF0
  1742                           postinc0	equ	0xFEE
  1743                           wreg	equ	0xFE8
  1744                           plusw1	equ	0xFE3
  1745                           indf2	equ	0xFDF
  1746                           plusw2	equ	0xFDB
  1747                           fsr2h	equ	0xFDA
  1748                           fsr2l	equ	0xFD9
  1749                           status	equ	0xFD8
  1750                           
  1751 ;; *************** function _setup_simple_serial *****************
  1752 ;; Defined at:
  1753 ;;		line 18 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  baudrate_bit    1    wreg     unsigned char 
  1756 ;;  baudrate_val    2    0[COMRAM] unsigned int 
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;  baudrate_bit    1    6[COMRAM] unsigned char 
  1759 ;; Return value:  Size  Location     Type
  1760 ;;		None               void
  1761 ;; Registers used:
  1762 ;;		wreg, status,2
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMRAM   BANK0
  1768 ;;      Params:         2       0
  1769 ;;      Locals:         5       0
  1770 ;;      Temps:          0       0
  1771 ;;      Totals:         7       0
  1772 ;;Total ram usage:        7 bytes
  1773 ;; Hardware stack levels used:    1
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_eserial_setup
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           	psect	text12
  1782  001A3E                     __ptext12:
  1783                           	opt stack 0
  1784  001A3E                     _setup_simple_serial:
  1785                           	opt stack 29
  1786                           
  1787                           ;incstack = 0
  1788                           ;setup_simple_serial@baudrate_bits stored from wreg
  1789  001A3E  6E07               	movwf	setup_simple_serial@baudrate_bits,c
  1790                           
  1791                           ;serial_pic.c: 20: ANSELHbits.ANS11 = 0;
  1792  001A40  967F               	bcf	3967,3,c	;volatile
  1793                           
  1794                           ;serial_pic.c: 21: TXSTA = (baudrate_bits & 0x04) ? 0x24: 0x20;
  1795  001A42  B407               	btfsc	setup_simple_serial@baudrate_bits,2,c
  1796  001A44  D004               	goto	l1810
  1797  001A46  0E00               	movlw	0
  1798  001A48  6E04               	movwf	_setup_simple_serial$247+1,c
  1799  001A4A  0E20               	movlw	32
  1800  001A4C  D003               	goto	L2
  1801  001A4E                     l1810:
  1802  001A4E  0E00               	movlw	0
  1803  001A50  6E04               	movwf	_setup_simple_serial$247+1,c
  1804  001A52  0E24               	movlw	36
  1805  001A54                     L2:
  1806  001A54  6E03               	movwf	_setup_simple_serial$247,c
  1807  001A56  D000               	goto	l1812
  1808  001A58                     l1812:
  1809  001A58  C003  FFAC         	movff	_setup_simple_serial$247,4012	;volatile
  1810                           
  1811                           ;serial_pic.c: 22: RCSTA = 0x90;
  1812  001A5C  0E90               	movlw	144
  1813  001A5E  6EAB               	movwf	4011,c	;volatile
  1814                           
  1815                           ;serial_pic.c: 23: BAUDCON = (baudrate_bits & 0x08) ? 0x08 : 0x00;
  1816  001A60  B607               	btfsc	setup_simple_serial@baudrate_bits,3,c
  1817  001A62  D004               	goto	l1818
  1818  001A64  0E00               	movlw	0
  1819  001A66  6E06               	movwf	_setup_simple_serial$248+1,c
  1820  001A68  0E00               	movlw	0
  1821  001A6A  D003               	goto	L3
  1822  001A6C                     l1818:
  1823  001A6C  0E00               	movlw	0
  1824  001A6E  6E06               	movwf	_setup_simple_serial$248+1,c
  1825  001A70  0E08               	movlw	8
  1826  001A72                     L3:
  1827  001A72  6E05               	movwf	_setup_simple_serial$248,c
  1828  001A74  D000               	goto	l1820
  1829  001A76                     l1820:
  1830  001A76  C005  FFB8         	movff	_setup_simple_serial$248,4024	;volatile
  1831                           
  1832                           ;serial_pic.c: 25: SPBRGH = baudrate_value >> 8;
  1833  001A7A  5002               	movf	setup_simple_serial@baudrate_value+1,w,c
  1834  001A7C  6EB0               	movwf	4016,c	;volatile
  1835                           
  1836                           ;serial_pic.c: 26: SPBRG = baudrate_value;
  1837  001A7E  C001  FFAF         	movff	setup_simple_serial@baudrate_value,4015	;volatile
  1838  001A82  0012               	return		;funcret
  1839  001A84                     __end_of_setup_simple_serial:
  1840                           	opt stack 0
  1841                           tblptru	equ	0xFF8
  1842                           prodh	equ	0xFF4
  1843                           prodl	equ	0xFF3
  1844                           intcon2	equ	0xFF1
  1845                           intcon3	equ	0xFF0
  1846                           postinc0	equ	0xFEE
  1847                           wreg	equ	0xFE8
  1848                           plusw1	equ	0xFE3
  1849                           indf2	equ	0xFDF
  1850                           plusw2	equ	0xFDB
  1851                           fsr2h	equ	0xFDA
  1852                           fsr2l	equ	0xFD9
  1853                           status	equ	0xFD8
  1854                           
  1855 ;; *************** function _eserial_send_data *****************
  1856 ;; Defined at:
  1857 ;;		line 29 in file "extended_serial.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  1860 ;;		 -> main@pic_to_pc(34), 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  value           2    9[COMRAM] int 
  1863 ;;  i               1    8[COMRAM] char 
  1864 ;; Return value:  Size  Location     Type
  1865 ;;                  1    wreg      char 
  1866 ;; Registers used:
  1867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1868 ;; Tracked objects:
  1869 ;;		On entry : 0/0
  1870 ;;		On exit  : 0/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMRAM   BANK0
  1873 ;;      Params:         2       0
  1874 ;;      Locals:         3       0
  1875 ;;      Temps:          0       0
  1876 ;;      Totals:         5       0
  1877 ;;Total ram usage:        5 bytes
  1878 ;; Hardware stack levels used:    1
  1879 ;; Hardware stack levels required when called:    1
  1880 ;; This function calls:
  1881 ;;		_buffer_pop
  1882 ;;		_serial_send_byte
  1883 ;; This function is called by:
  1884 ;;		_main
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text13
  1889  0019FA                     __ptext13:
  1890                           	opt stack 0
  1891  0019FA                     _eserial_send_data:
  1892                           	opt stack 29
  1893                           
  1894                           ;extended_serial.c: 34: int8_t i = 0;
  1895                           
  1896                           ;incstack = 0
  1897  0019FA  0E00               	movlw	0
  1898  0019FC  6E09               	movwf	eserial_send_data@i,c
  1899                           
  1900                           ;extended_serial.c: 35: int16_t value = buffer_pop(buffer);
  1901  0019FE  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  1902  001A02  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  1903  001A06  ECC1  F00D         	call	_buffer_pop	;wreg free
  1904  001A0A  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  1905  001A0E  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  1906                           
  1907                           ;extended_serial.c: 36: while (value != -1) {
  1908  001A12  D00F               	goto	l2094
  1909  001A14                     l2088:
  1910                           
  1911                           ;extended_serial.c: 37: serial_send_byte((uint8_t)value);
  1912  001A14  500A               	movf	eserial_send_data@value,w,c
  1913  001A16  EC0B  F00C         	call	_serial_send_byte
  1914                           
  1915                           ;extended_serial.c: 38: value = buffer_pop(buffer);
  1916  001A1A  C007  F001         	movff	eserial_send_data@buffer,buffer_pop@buffer
  1917  001A1E  C008  F002         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
  1918  001A22  ECC1  F00D         	call	_buffer_pop	;wreg free
  1919  001A26  C001  F00A         	movff	?_buffer_pop,eserial_send_data@value
  1920  001A2A  C002  F00B         	movff	?_buffer_pop+1,eserial_send_data@value+1
  1921                           
  1922                           ;extended_serial.c: 39: i++;
  1923  001A2E  2A09               	incf	eserial_send_data@i,f,c
  1924  001A30  D000               	goto	l2094
  1925  001A32                     l2094:
  1926  001A32  280A               	incf	eserial_send_data@value,w,c
  1927  001A34  E1EF               	bnz	l2088
  1928  001A36  280B               	incf	eserial_send_data@value+1,w,c
  1929  001A38  A4D8               	btfss	status,2,c
  1930  001A3A  D7EC               	goto	l2088
  1931                           
  1932                           ;extended_serial.c: 40: }
  1933                           ;extended_serial.c: 42: return i;
  1934                           ;	Return value of _eserial_send_data is never used
  1935  001A3C  0012               	return		;funcret
  1936  001A3E                     __end_of_eserial_send_data:
  1937                           	opt stack 0
  1938                           tblptru	equ	0xFF8
  1939                           prodh	equ	0xFF4
  1940                           prodl	equ	0xFF3
  1941                           intcon2	equ	0xFF1
  1942                           intcon3	equ	0xFF0
  1943                           postinc0	equ	0xFEE
  1944                           wreg	equ	0xFE8
  1945                           plusw1	equ	0xFE3
  1946                           indf2	equ	0xFDF
  1947                           plusw2	equ	0xFDB
  1948                           fsr2h	equ	0xFDA
  1949                           fsr2l	equ	0xFD9
  1950                           status	equ	0xFD8
  1951                           
  1952 ;; *************** function _serial_send_byte *****************
  1953 ;; Defined at:
  1954 ;;		line 66 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;  byte            1    wreg     unsigned char 
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  byte            1    0[COMRAM] unsigned char 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;		None               void
  1961 ;; Registers used:
  1962 ;;		wreg
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0
  1968 ;;      Params:         0       0
  1969 ;;      Locals:         1       0
  1970 ;;      Temps:          0       0
  1971 ;;      Totals:         1       0
  1972 ;;Total ram usage:        1 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_eserial_send_data
  1978 ;;		_serial_send_data
  1979 ;;		_serial_send_buffer
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text14
  1984  001816                     __ptext14:
  1985                           	opt stack 0
  1986  001816                     _serial_send_byte:
  1987                           	opt stack 29
  1988                           
  1989                           ;incstack = 0
  1990                           ;serial_send_byte@byte stored from wreg
  1991  001816  6E01               	movwf	serial_send_byte@byte,c
  1992                           
  1993                           ;serial_pic.c: 68: while (!TXIF);
  1994  001818  D000               	goto	l110
  1995  00181A                     l110:
  1996  00181A  A89E               	btfss	3998,4,c	;volatile
  1997  00181C  D7FE               	goto	l110
  1998                           
  1999                           ;serial_pic.c: 69: TXREG = byte;
  2000  00181E  C001  FFAD         	movff	serial_send_byte@byte,4013	;volatile
  2001  001822  0012               	return		;funcret
  2002  001824                     __end_of_serial_send_byte:
  2003                           	opt stack 0
  2004                           tblptru	equ	0xFF8
  2005                           prodh	equ	0xFF4
  2006                           prodl	equ	0xFF3
  2007                           intcon2	equ	0xFF1
  2008                           intcon3	equ	0xFF0
  2009                           postinc0	equ	0xFEE
  2010                           wreg	equ	0xFE8
  2011                           plusw1	equ	0xFE3
  2012                           indf2	equ	0xFDF
  2013                           plusw2	equ	0xFDB
  2014                           fsr2h	equ	0xFDA
  2015                           fsr2l	equ	0xFD9
  2016                           status	equ	0xFD8
  2017                           
  2018 ;; *************** function _buffer_pop *****************
  2019 ;; Defined at:
  2020 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2023 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  byte            2    4[COMRAM] int 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  2    0[COMRAM] int 
  2028 ;; Registers used:
  2029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0
  2035 ;;      Params:         2       0
  2036 ;;      Locals:         2       0
  2037 ;;      Temps:          2       0
  2038 ;;      Totals:         6       0
  2039 ;;Total ram usage:        6 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; This function calls:
  2042 ;;		Nothing
  2043 ;; This function is called by:
  2044 ;;		_eserial_send_data
  2045 ;;		_espi_slave_send
  2046 ;;		_espi_master_send
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text15
  2051  001B82                     __ptext15:
  2052                           	opt stack 0
  2053  001B82                     _buffer_pop:
  2054                           	opt stack 29
  2055                           
  2056                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
  2057                           
  2058                           ;incstack = 0
  2059  001B82  EE20 F001          	lfsr	2,1
  2060  001B86  5001               	movf	buffer_pop@buffer,w,c
  2061  001B88  26D9               	addwf	fsr2l,f,c
  2062  001B8A  5002               	movf	buffer_pop@buffer+1,w,c
  2063  001B8C  22DA               	addwfc	fsr2h,f,c
  2064  001B8E  50DF               	movf	indf2,w,c
  2065  001B90  A4D8               	btfss	status,2,c
  2066  001B92  D003               	goto	l1872
  2067                           
  2068                           ;circular_buffer.c: 40: return -1;
  2069  001B94  6801               	setf	?_buffer_pop,c
  2070  001B96  6802               	setf	?_buffer_pop+1,c
  2071  001B98  0012               	return	
  2072  001B9A                     l1872:
  2073                           
  2074                           ;circular_buffer.c: 41: }
  2075                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2076  001B9A  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2077  001B9E  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2078  001BA2  50DF               	movf	indf2,w,c
  2079  001BA4  6E03               	movwf	??_buffer_pop& (0+255),c
  2080  001BA6  5003               	movf	??_buffer_pop,w,c
  2081  001BA8  0D01               	mullw	1
  2082  001BAA  0E02               	movlw	2
  2083  001BAC  26F3               	addwf	prodl,f,c
  2084  001BAE  0E00               	movlw	0
  2085  001BB0  22F4               	addwfc	prodh,f,c
  2086  001BB2  50F3               	movf	prodl,w,c
  2087  001BB4  2401               	addwf	buffer_pop@buffer,w,c
  2088  001BB6  6ED9               	movwf	fsr2l,c
  2089  001BB8  50F4               	movf	prodh,w,c
  2090  001BBA  2002               	addwfc	buffer_pop@buffer+1,w,c
  2091  001BBC  6EDA               	movwf	fsr2h,c
  2092  001BBE  50DF               	movf	indf2,w,c
  2093  001BC0  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  2094  001BC2  5004               	movf	??_buffer_pop+1,w,c
  2095  001BC4  6E05               	movwf	buffer_pop@byte,c
  2096  001BC6  6A06               	clrf	buffer_pop@byte+1,c
  2097                           
  2098                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  2099  001BC8  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2100  001BCC  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2101  001BD0  50DF               	movf	indf2,w,c
  2102  001BD2  6E03               	movwf	??_buffer_pop& (0+255),c
  2103  001BD4  2803               	incf	??_buffer_pop,w,c
  2104  001BD6  0B1F               	andlw	31
  2105  001BD8  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2106  001BDC  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2107  001BE0  6EDF               	movwf	indf2,c
  2108                           
  2109                           ;circular_buffer.c: 45: buffer->count--;
  2110  001BE2  EE20 F001          	lfsr	2,1
  2111  001BE6  5001               	movf	buffer_pop@buffer,w,c
  2112  001BE8  26D9               	addwf	fsr2l,f,c
  2113  001BEA  5002               	movf	buffer_pop@buffer+1,w,c
  2114  001BEC  22DA               	addwfc	fsr2h,f,c
  2115  001BEE  06DF               	decf	indf2,f,c
  2116                           
  2117                           ;circular_buffer.c: 47: return byte;
  2118  001BF0  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  2119  001BF4  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  2120  001BF8  0012               	return	
  2121  001BFA  0012               	return		;funcret
  2122  001BFC                     __end_of_buffer_pop:
  2123                           	opt stack 0
  2124                           tblptru	equ	0xFF8
  2125                           prodh	equ	0xFF4
  2126                           prodl	equ	0xFF3
  2127                           intcon2	equ	0xFF1
  2128                           intcon3	equ	0xFF0
  2129                           postinc0	equ	0xFEE
  2130                           wreg	equ	0xFE8
  2131                           plusw1	equ	0xFE3
  2132                           indf2	equ	0xFDF
  2133                           plusw2	equ	0xFDB
  2134                           fsr2h	equ	0xFDA
  2135                           fsr2l	equ	0xFD9
  2136                           status	equ	0xFD8
  2137                           
  2138 ;; *************** function _eserial_receive *****************
  2139 ;; Defined at:
  2140 ;;		line 45 in file "extended_serial.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  2143 ;;		 -> main@pic_to_pic(34), 
  2144 ;;  stop_functio    2    8[COMRAM] PTR FTN()unsigned char 
  2145 ;;		 -> return_false(1), 
  2146 ;;  timer_start     2   10[COMRAM] PTR FTN(int ,)void 
  2147 ;;		 -> set_timer3(0), 
  2148 ;;  timer_up        2   12[COMRAM] PTR FTN()unsigned char 
  2149 ;;		 -> timer3_up(1), 
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;  test            1   15[COMRAM] unsigned char 
  2152 ;;  value           1   16[COMRAM] unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;		None               void
  2155 ;; Registers used:
  2156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0
  2162 ;;      Params:         8       0
  2163 ;;      Locals:         2       0
  2164 ;;      Temps:          1       0
  2165 ;;      Totals:        11       0
  2166 ;;Total ram usage:       11 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    3
  2169 ;; This function calls:
  2170 ;;		_buffer_empty
  2171 ;;		_buffer_push
  2172 ;;		_buffer_space
  2173 ;;		_return_false
  2174 ;;		_serial_peek_receive
  2175 ;;		_set_timer3
  2176 ;;		_timer3_up
  2177 ;; This function is called by:
  2178 ;;		_main
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text16
  2183  001D7A                     __ptext16:
  2184                           	opt stack 0
  2185  001D7A                     _eserial_receive:
  2186                           	opt stack 27
  2187                           
  2188                           ;extended_serial.c: 50: if (buffer_empty(buffer)) {
  2189                           
  2190                           ;incstack = 0
  2191  001D7A  C007  F001         	movff	eserial_receive@buffer,buffer_empty@buffer
  2192  001D7E  C008  F002         	movff	eserial_receive@buffer+1,buffer_empty@buffer+1
  2193  001D82  EC45  F00C         	call	_buffer_empty	;wreg free
  2194  001D86  0900               	iorlw	0
  2195  001D88  B4D8               	btfsc	status,2,c
  2196  001D8A  0012               	return	
  2197                           
  2198                           ;extended_serial.c: 51: uint8_t value;
  2199                           ;extended_serial.c: 52: LATCbits.LATC0 = 0;
  2200  001D8C  908B               	bcf	3979,0,c	;volatile
  2201                           
  2202                           ;extended_serial.c: 54: if (stop_function == (0)) {
  2203  001D8E  5009               	movf	eserial_receive@stop_function,w,c
  2204  001D90  100A               	iorwf	eserial_receive@stop_function+1,w,c
  2205  001D92  B4D8               	btfsc	status,2,c
  2206  001D94  D015               	goto	l1970
  2207  001D96  D01F               	goto	l1972
  2208                           
  2209                           ;extended_serial.c: 55: while (buffer_space(buffer) > 0x04) {
  2210  001D98  D013               	goto	l1970
  2211  001D9A                     l1966:
  2212                           
  2213                           ;extended_serial.c: 56: if (serial_peek_receive(1, &value)) {
  2214  001D9A  0E11               	movlw	low eserial_receive@value
  2215  001D9C  6E01               	movwf	serial_peek_receive@byte,c
  2216  001D9E  0E00               	movlw	high eserial_receive@value
  2217  001DA0  6E02               	movwf	serial_peek_receive@byte+1,c
  2218  001DA2  0E01               	movlw	1
  2219  001DA4  EC70  F00C         	call	_serial_peek_receive
  2220  001DA8  0900               	iorlw	0
  2221  001DAA  B4D8               	btfsc	status,2,c
  2222  001DAC  D009               	goto	l1970
  2223                           
  2224                           ;extended_serial.c: 57: buffer_push(buffer, value);
  2225  001DAE  C007  F001         	movff	eserial_receive@buffer,buffer_push@buffer
  2226  001DB2  C008  F002         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  2227  001DB6  C011  F003         	movff	eserial_receive@value,buffer_push@byte
  2228  001DBA  EC8E  F00D         	call	_buffer_push	;wreg free
  2229  001DBE  D000               	goto	l1970
  2230  001DC0                     l1970:
  2231  001DC0  C007  F001         	movff	eserial_receive@buffer,buffer_space@buffer
  2232  001DC4  C008  F002         	movff	eserial_receive@buffer+1,buffer_space@buffer+1
  2233  001DC8  EC2E  F00C         	call	_buffer_space	;wreg free
  2234  001DCC  6E0F               	movwf	??_eserial_receive& (0+255),c
  2235  001DCE  0E05               	movlw	5
  2236  001DD0  600F               	cpfslt	??_eserial_receive,c
  2237  001DD2  D7E3               	goto	l1966
  2238                           
  2239                           ;extended_serial.c: 58: }
  2240                           ;extended_serial.c: 59: }
  2241                           ;extended_serial.c: 60: } else {
  2242  001DD4  D032               	goto	l207
  2243  001DD6                     l1972:
  2244                           
  2245                           ;extended_serial.c: 61: bool test = 0;
  2246  001DD6  0E00               	movlw	0
  2247  001DD8  D01F               	goto	u1629
  2248  001DDA                     l1974:
  2249                           
  2250                           ;extended_serial.c: 64: if (serial_peek_receive(1, &value)) {
  2251  001DDA  0E11               	movlw	low eserial_receive@value
  2252  001DDC  6E01               	movwf	serial_peek_receive@byte,c
  2253  001DDE  0E00               	movlw	high eserial_receive@value
  2254  001DE0  6E02               	movwf	serial_peek_receive@byte+1,c
  2255  001DE2  0E01               	movlw	1
  2256  001DE4  EC70  F00C         	call	_serial_peek_receive
  2257  001DE8  0900               	iorlw	0
  2258  001DEA  B4D8               	btfsc	status,2,c
  2259  001DEC  D009               	goto	l1978
  2260                           
  2261                           ;extended_serial.c: 65: buffer_push(buffer, value);
  2262  001DEE  C007  F001         	movff	eserial_receive@buffer,buffer_push@buffer
  2263  001DF2  C008  F002         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  2264  001DF6  C011  F003         	movff	eserial_receive@value,buffer_push@byte
  2265  001DFA  EC8E  F00D         	call	_buffer_push	;wreg free
  2266  001DFE  D000               	goto	l1978
  2267  001E00                     l1978:
  2268                           
  2269                           ;extended_serial.c: 66: }
  2270                           ;extended_serial.c: 67: test = (*stop_function)();
  2271  001E00  D801               	call	u1628
  2272  001E02  D00A               	goto	u1629
  2273  001E04                     u1628:
  2274  001E04  0005               	push	
  2275  001E06  6EFA               	movwf	pclath,c
  2276  001E08  5009               	movf	eserial_receive@stop_function,w,c
  2277  001E0A  6EFD               	movwf	tosl,c
  2278  001E0C  500A               	movf	eserial_receive@stop_function+1,w,c
  2279  001E0E  6EFE               	movwf	tosh,c
  2280  001E10  50F8               	movf	tblptru,w,c
  2281  001E12  6EFF               	movwf	tosu,c
  2282  001E14  50FA               	movf	pclath,w,c
  2283  001E16  0012               	return		;indir
  2284  001E18                     u1629:
  2285  001E18  6E10               	movwf	eserial_receive@test,c
  2286  001E1A  D000               	goto	l1980
  2287  001E1C                     l1980:
  2288  001E1C  C007  F001         	movff	eserial_receive@buffer,buffer_space@buffer
  2289  001E20  C008  F002         	movff	eserial_receive@buffer+1,buffer_space@buffer+1
  2290  001E24  EC2E  F00C         	call	_buffer_space	;wreg free
  2291  001E28  6E0F               	movwf	??_eserial_receive& (0+255),c
  2292  001E2A  0E04               	movlw	4
  2293  001E2C  640F               	cpfsgt	??_eserial_receive,c
  2294  001E2E  D005               	goto	l207
  2295  001E30  5010               	movf	eserial_receive@test,w,c
  2296  001E32  A4D8               	btfss	status,2,c
  2297  001E34  D002               	goto	l207
  2298  001E36  D7D1               	goto	l1974
  2299  001E38  D000               	goto	l207
  2300  001E3A                     l207:
  2301                           
  2302                           ;extended_serial.c: 68: }
  2303                           ;extended_serial.c: 69: }
  2304                           ;extended_serial.c: 71: LATCbits.LATC0 = 1;
  2305  001E3A  808B               	bsf	3979,0,c	;volatile
  2306                           
  2307                           ;extended_serial.c: 72: (*timer_start)(65035);
  2308  001E3C  0EFE               	movlw	254
  2309  001E3E  6E02               	movwf	set_timer3@value+1,c
  2310  001E40  0E0B               	movlw	11
  2311  001E42  6E01               	movwf	set_timer3@value,c
  2312  001E44  D801               	call	u1658
  2313  001E46  D01D               	goto	l1990
  2314  001E48                     u1658:
  2315  001E48  0005               	push	
  2316  001E4A  6EFA               	movwf	pclath,c
  2317  001E4C  500B               	movf	eserial_receive@timer_start,w,c
  2318  001E4E  6EFD               	movwf	tosl,c
  2319  001E50  500C               	movf	eserial_receive@timer_start+1,w,c
  2320  001E52  6EFE               	movwf	tosh,c
  2321  001E54  50F8               	movf	tblptru,w,c
  2322  001E56  6EFF               	movwf	tosu,c
  2323  001E58  50FA               	movf	pclath,w,c
  2324  001E5A  0012               	return		;indir
  2325  001E5C                     l1986:
  2326                           
  2327                           ;extended_serial.c: 75: if (serial_peek_receive(1, &value)) {
  2328  001E5C  0E11               	movlw	low eserial_receive@value
  2329  001E5E  6E01               	movwf	serial_peek_receive@byte,c
  2330  001E60  0E00               	movlw	high eserial_receive@value
  2331  001E62  6E02               	movwf	serial_peek_receive@byte+1,c
  2332  001E64  0E01               	movlw	1
  2333  001E66  EC70  F00C         	call	_serial_peek_receive
  2334  001E6A  0900               	iorlw	0
  2335  001E6C  B4D8               	btfsc	status,2,c
  2336  001E6E  D009               	goto	l1990
  2337                           
  2338                           ;extended_serial.c: 76: buffer_push(buffer, value);
  2339  001E70  C007  F001         	movff	eserial_receive@buffer,buffer_push@buffer
  2340  001E74  C008  F002         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  2341  001E78  C011  F003         	movff	eserial_receive@value,buffer_push@byte
  2342  001E7C  EC8E  F00D         	call	_buffer_push	;wreg free
  2343  001E80  D000               	goto	l1990
  2344  001E82                     l1990:
  2345  001E82  D801               	call	u1678
  2346  001E84  D00A               	goto	u1679
  2347  001E86                     u1678:
  2348  001E86  0005               	push	
  2349  001E88  6EFA               	movwf	pclath,c
  2350  001E8A  500D               	movf	eserial_receive@timer_up,w,c
  2351  001E8C  6EFD               	movwf	tosl,c
  2352  001E8E  500E               	movf	eserial_receive@timer_up+1,w,c
  2353  001E90  6EFE               	movwf	tosh,c
  2354  001E92  50F8               	movf	tblptru,w,c
  2355  001E94  6EFF               	movwf	tosu,c
  2356  001E96  50FA               	movf	pclath,w,c
  2357  001E98  0012               	return		;indir
  2358  001E9A                     u1679:
  2359  001E9A  0900               	iorlw	0
  2360  001E9C  A4D8               	btfss	status,2,c
  2361  001E9E  0012               	return	
  2362  001EA0  D7DD               	goto	l1986
  2363  001EA2  0012               	return	
  2364  001EA4  0012               	return		;funcret
  2365  001EA6                     __end_of_eserial_receive:
  2366                           	opt stack 0
  2367                           tosu	equ	0xFFF
  2368                           tosh	equ	0xFFE
  2369                           tosl	equ	0xFFD
  2370                           pclath	equ	0xFFA
  2371                           tblptru	equ	0xFF8
  2372                           prodh	equ	0xFF4
  2373                           prodl	equ	0xFF3
  2374                           intcon2	equ	0xFF1
  2375                           intcon3	equ	0xFF0
  2376                           postinc0	equ	0xFEE
  2377                           wreg	equ	0xFE8
  2378                           plusw1	equ	0xFE3
  2379                           indf2	equ	0xFDF
  2380                           plusw2	equ	0xFDB
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _timer3_up *****************
  2386 ;; Defined at:
  2387 ;;		line 74 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;		None
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      unsigned char 
  2394 ;; Registers used:
  2395 ;;		wreg
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0
  2401 ;;      Params:         0       0
  2402 ;;      Locals:         0       0
  2403 ;;      Temps:          0       0
  2404 ;;      Totals:         0       0
  2405 ;;Total ram usage:        0 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; This function calls:
  2408 ;;		Nothing
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;;		_eserial_receive
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text17
  2416  001808                     __ptext17:
  2417                           	opt stack 0
  2418  001808                     _timer3_up:
  2419                           	opt stack 29
  2420                           
  2421                           ;timers_pic.c: 76: return (PIR2bits.TMR3IF) ? 1 : 0;
  2422                           
  2423                           ;incstack = 0
  2424  001808  A2A1               	btfss	4001,1,c	;volatile
  2425  00180A  D002               	goto	u1490
  2426  00180C  0E01               	movlw	1
  2427  00180E  0012               	return	
  2428  001810                     u1490:
  2429  001810  0E00               	movlw	0
  2430  001812  0012               	return	
  2431  001814  0012               	return		;funcret
  2432  001816                     __end_of_timer3_up:
  2433                           	opt stack 0
  2434                           tosu	equ	0xFFF
  2435                           tosh	equ	0xFFE
  2436                           tosl	equ	0xFFD
  2437                           pclath	equ	0xFFA
  2438                           tblptru	equ	0xFF8
  2439                           prodh	equ	0xFF4
  2440                           prodl	equ	0xFF3
  2441                           intcon2	equ	0xFF1
  2442                           intcon3	equ	0xFF0
  2443                           postinc0	equ	0xFEE
  2444                           wreg	equ	0xFE8
  2445                           plusw1	equ	0xFE3
  2446                           indf2	equ	0xFDF
  2447                           plusw2	equ	0xFDB
  2448                           fsr2h	equ	0xFDA
  2449                           fsr2l	equ	0xFD9
  2450                           status	equ	0xFD8
  2451                           
  2452 ;; *************** function _set_timer3 *****************
  2453 ;; Defined at:
  2454 ;;		line 60 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  value           2    0[COMRAM] int 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;		None
  2459 ;; Return value:  Size  Location     Type
  2460 ;;		None               void
  2461 ;; Registers used:
  2462 ;;		None
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0
  2468 ;;      Params:         2       0
  2469 ;;      Locals:         0       0
  2470 ;;      Temps:          0       0
  2471 ;;      Totals:         2       0
  2472 ;;Total ram usage:        2 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		_main
  2478 ;;		_eserial_receive
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text18
  2483  0017FC                     __ptext18:
  2484                           	opt stack 0
  2485  0017FC                     _set_timer3:
  2486                           	opt stack 29
  2487                           
  2488                           ;timers_pic.c: 62: PIR2bits.TMR3IF = 0;
  2489                           
  2490                           ;incstack = 0
  2491  0017FC  92A1               	bcf	4001,1,c	;volatile
  2492                           
  2493                           ;timers_pic.c: 63: TMR3 = value;
  2494  0017FE  C001  FFB2         	movff	set_timer3@value,4018	;volatile
  2495  001802  C002  FFB3         	movff	set_timer3@value+1,4019	;volatile
  2496  001806  0012               	return		;funcret
  2497  001808                     __end_of_set_timer3:
  2498                           	opt stack 0
  2499                           tosu	equ	0xFFF
  2500                           tosh	equ	0xFFE
  2501                           tosl	equ	0xFFD
  2502                           pclath	equ	0xFFA
  2503                           tblptru	equ	0xFF8
  2504                           prodh	equ	0xFF4
  2505                           prodl	equ	0xFF3
  2506                           intcon2	equ	0xFF1
  2507                           intcon3	equ	0xFF0
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           plusw1	equ	0xFE3
  2511                           indf2	equ	0xFDF
  2512                           plusw2	equ	0xFDB
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _serial_peek_receive *****************
  2518 ;; Defined at:
  2519 ;;		line 29 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;  get_byte        1    wreg     unsigned char 
  2522 ;;  byte            2    0[COMRAM] PTR unsigned char 
  2523 ;;		 -> eserial_receive@value(1), 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  get_byte        1    2[COMRAM] unsigned char 
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  1    wreg      unsigned char 
  2528 ;; Registers used:
  2529 ;;		wreg, fsr2l, fsr2h, status,2
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMRAM   BANK0
  2535 ;;      Params:         2       0
  2536 ;;      Locals:         1       0
  2537 ;;      Temps:          0       0
  2538 ;;      Totals:         3       0
  2539 ;;Total ram usage:        3 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_eserial_receive
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text19
  2549  0018E0                     __ptext19:
  2550                           	opt stack 0
  2551  0018E0                     _serial_peek_receive:
  2552                           	opt stack 29
  2553                           
  2554                           ;incstack = 0
  2555                           ;serial_peek_receive@get_byte stored from wreg
  2556  0018E0  6E03               	movwf	serial_peek_receive@get_byte,c
  2557                           
  2558                           ;serial_pic.c: 31: if (get_byte) {
  2559  0018E2  5003               	movf	serial_peek_receive@get_byte,w,c
  2560  0018E4  B4D8               	btfsc	status,2,c
  2561  0018E6  D00E               	goto	l1840
  2562                           
  2563                           ;serial_pic.c: 32: if (RCIF) {
  2564  0018E8  AA9E               	btfss	3998,5,c	;volatile
  2565  0018EA  D009               	goto	l1836
  2566                           
  2567                           ;serial_pic.c: 33: *byte = RCREG;
  2568  0018EC  C001  FFD9         	movff	serial_peek_receive@byte,fsr2l
  2569  0018F0  C002  FFDA         	movff	serial_peek_receive@byte+1,fsr2h
  2570  0018F4  CFAE FFDF          	movff	4014,indf2	;volatile
  2571                           
  2572                           ;serial_pic.c: 34: return 1;
  2573  0018F8  0E01               	movlw	1
  2574  0018FA  0012               	return	
  2575                           
  2576                           ;serial_pic.c: 35: } else {
  2577  0018FC  D003               	goto	l1840
  2578  0018FE                     l1836:
  2579                           
  2580                           ;serial_pic.c: 36: return 0;
  2581  0018FE  0E00               	movlw	0
  2582  001900  0012               	return	
  2583  001902  D000               	goto	l1840
  2584  001904                     l1840:
  2585                           
  2586                           ;serial_pic.c: 37: }
  2587                           ;serial_pic.c: 38: }
  2588                           ;serial_pic.c: 40: return (RCIF) ? 1 : 0;
  2589  001904  0E00               	movlw	0
  2590  001906  BA9E               	btfsc	3998,5,c	;volatile
  2591  001908  0E01               	movlw	1
  2592  00190A  0012               	return	
  2593  00190C  0012               	return		;funcret
  2594  00190E                     __end_of_serial_peek_receive:
  2595                           	opt stack 0
  2596                           tosu	equ	0xFFF
  2597                           tosh	equ	0xFFE
  2598                           tosl	equ	0xFFD
  2599                           pclath	equ	0xFFA
  2600                           tblptru	equ	0xFF8
  2601                           prodh	equ	0xFF4
  2602                           prodl	equ	0xFF3
  2603                           intcon2	equ	0xFF1
  2604                           intcon3	equ	0xFF0
  2605                           postinc0	equ	0xFEE
  2606                           wreg	equ	0xFE8
  2607                           plusw1	equ	0xFE3
  2608                           indf2	equ	0xFDF
  2609                           plusw2	equ	0xFDB
  2610                           fsr2h	equ	0xFDA
  2611                           fsr2l	equ	0xFD9
  2612                           status	equ	0xFD8
  2613                           
  2614 ;; *************** function _return_false *****************
  2615 ;; Defined at:
  2616 ;;		line 23 in file "main.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;		None
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;		None
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      unsigned char 
  2623 ;; Registers used:
  2624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0
  2630 ;;      Params:         0       0
  2631 ;;      Locals:         0       0
  2632 ;;      Temps:          0       0
  2633 ;;      Totals:         0       0
  2634 ;;Total ram usage:        0 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    2
  2637 ;; This function calls:
  2638 ;;		_spi_slave_peek_receive
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;;		_eserial_receive
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text20
  2646  001824                     __ptext20:
  2647                           	opt stack 0
  2648  001824                     _return_false:
  2649                           	opt stack 27
  2650                           
  2651                           ;main.c: 25: return spi_slave_peek_receive(0, (0));
  2652                           
  2653                           ;incstack = 0
  2654  001824  0E00               	movlw	0
  2655  001826  6E04               	movwf	spi_slave_peek_receive@byte,c
  2656  001828  0E00               	movlw	0
  2657  00182A  6E05               	movwf	spi_slave_peek_receive@byte+1,c
  2658  00182C  0E00               	movlw	0
  2659  00182E  ECA3  F00C         	call	_spi_slave_peek_receive
  2660  001832  0012               	return	
  2661  001834  0012               	return		;funcret
  2662  001836                     __end_of_return_false:
  2663                           	opt stack 0
  2664                           tosu	equ	0xFFF
  2665                           tosh	equ	0xFFE
  2666                           tosl	equ	0xFFD
  2667                           pclath	equ	0xFFA
  2668                           tblptru	equ	0xFF8
  2669                           prodh	equ	0xFF4
  2670                           prodl	equ	0xFF3
  2671                           intcon2	equ	0xFF1
  2672                           intcon3	equ	0xFF0
  2673                           postinc0	equ	0xFEE
  2674                           wreg	equ	0xFE8
  2675                           plusw1	equ	0xFE3
  2676                           indf2	equ	0xFDF
  2677                           plusw2	equ	0xFDB
  2678                           fsr2h	equ	0xFDA
  2679                           fsr2l	equ	0xFD9
  2680                           status	equ	0xFD8
  2681                           
  2682 ;; *************** function _spi_slave_peek_receive *****************
  2683 ;; Defined at:
  2684 ;;		line 42 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;  get_byte        1    wreg     unsigned char 
  2687 ;;  byte            2    3[COMRAM] PTR int 
  2688 ;;		 -> main@value_129(2), NULL(0), 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  get_byte        1    5[COMRAM] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      unsigned char 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0
  2700 ;;      Params:         2       0
  2701 ;;      Locals:         1       0
  2702 ;;      Temps:          0       0
  2703 ;;      Totals:         3       0
  2704 ;;Total ram usage:        3 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    1
  2707 ;; This function calls:
  2708 ;;		_spi_slave_get_byte
  2709 ;; This function is called by:
  2710 ;;		_return_false
  2711 ;;		_main
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text21
  2716  001946                     __ptext21:
  2717                           	opt stack 0
  2718  001946                     _spi_slave_peek_receive:
  2719                           	opt stack 29
  2720                           
  2721                           ;incstack = 0
  2722                           ;spi_slave_peek_receive@get_byte stored from wreg
  2723  001946  6E06               	movwf	spi_slave_peek_receive@get_byte,c
  2724                           
  2725                           ;spi_pic.c: 44: if (get_byte) {
  2726  001948  5006               	movf	spi_slave_peek_receive@get_byte,w,c
  2727  00194A  B4D8               	btfsc	status,2,c
  2728  00194C  D012               	goto	l1796
  2729                           
  2730                           ;spi_pic.c: 45: if (SSPSTATbits.BF) {
  2731  00194E  A0C7               	btfss	4039,0,c	;volatile
  2732  001950  D00D               	goto	l1792
  2733                           
  2734                           ;spi_pic.c: 46: *byte = spi_slave_get_byte();
  2735  001952  EC61  F00C         	call	_spi_slave_get_byte	;wreg free
  2736  001956  C004  FFD9         	movff	spi_slave_peek_receive@byte,fsr2l
  2737  00195A  C005  FFDA         	movff	spi_slave_peek_receive@byte+1,fsr2h
  2738  00195E  C001  FFDE         	movff	?_spi_slave_get_byte,postinc2
  2739  001962  C002  FFDD         	movff	?_spi_slave_get_byte+1,postdec2
  2740                           
  2741                           ;spi_pic.c: 47: return 1;
  2742  001966  0E01               	movlw	1
  2743  001968  0012               	return	
  2744                           
  2745                           ;spi_pic.c: 48: } else {
  2746  00196A  D003               	goto	l1796
  2747  00196C                     l1792:
  2748                           
  2749                           ;spi_pic.c: 49: return 0;
  2750  00196C  0E00               	movlw	0
  2751  00196E  0012               	return	
  2752  001970  D000               	goto	l1796
  2753  001972                     l1796:
  2754                           
  2755                           ;spi_pic.c: 50: }
  2756                           ;spi_pic.c: 51: }
  2757                           ;spi_pic.c: 53: return (SSPSTATbits.BF) ? 1 : 0;
  2758  001972  A0C7               	btfss	4039,0,c	;volatile
  2759  001974  D002               	goto	u1360
  2760  001976  0E01               	movlw	1
  2761  001978  0012               	return	
  2762  00197A                     u1360:
  2763  00197A  0E00               	movlw	0
  2764  00197C  0012               	return	
  2765  00197E  0012               	return		;funcret
  2766  001980                     __end_of_spi_slave_peek_receive:
  2767                           	opt stack 0
  2768                           tosu	equ	0xFFF
  2769                           tosh	equ	0xFFE
  2770                           tosl	equ	0xFFD
  2771                           pclath	equ	0xFFA
  2772                           tblptru	equ	0xFF8
  2773                           prodh	equ	0xFF4
  2774                           prodl	equ	0xFF3
  2775                           intcon2	equ	0xFF1
  2776                           intcon3	equ	0xFF0
  2777                           postinc0	equ	0xFEE
  2778                           wreg	equ	0xFE8
  2779                           plusw1	equ	0xFE3
  2780                           indf2	equ	0xFDF
  2781                           postinc2	equ	0xFDE
  2782                           postdec2	equ	0xFDD
  2783                           plusw2	equ	0xFDB
  2784                           fsr2h	equ	0xFDA
  2785                           fsr2l	equ	0xFD9
  2786                           status	equ	0xFD8
  2787                           
  2788 ;; *************** function _spi_slave_get_byte *****************
  2789 ;; Defined at:
  2790 ;;		line 111 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;		None
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;  byte            1    2[COMRAM] unsigned char 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  2    0[COMRAM] int 
  2797 ;; Registers used:
  2798 ;;		None
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0
  2804 ;;      Params:         2       0
  2805 ;;      Locals:         1       0
  2806 ;;      Temps:          0       0
  2807 ;;      Totals:         3       0
  2808 ;;Total ram usage:        3 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; This function calls:
  2811 ;;		Nothing
  2812 ;; This function is called by:
  2813 ;;		_spi_slave_peek_receive
  2814 ;;		_espi_slave_receive
  2815 ;;		_spi_slave_get_data
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text22
  2820  0018C2                     __ptext22:
  2821                           	opt stack 0
  2822  0018C2                     _spi_slave_get_byte:
  2823                           	opt stack 29
  2824                           
  2825                           ;spi_pic.c: 113: while (!SSPSTATbits.BF);
  2826                           
  2827                           ;incstack = 0
  2828  0018C2  D000               	goto	l386
  2829  0018C4                     l386:
  2830  0018C4  A0C7               	btfss	4039,0,c	;volatile
  2831  0018C6  D7FE               	goto	l386
  2832                           
  2833                           ;spi_pic.c: 114: uint8_t byte = SSPBUF;
  2834  0018C8  CFC9 F003          	movff	4041,spi_slave_get_byte@byte	;volatile
  2835                           
  2836                           ;spi_pic.c: 115: SSPBUF = dummy_byte;
  2837  0018CC  C05A  FFC9         	movff	_dummy_byte,4041	;volatile
  2838                           
  2839                           ;spi_pic.c: 116: if (SSPCON1bits.SSPOV) {
  2840  0018D0  ACC6               	btfss	4038,6,c	;volatile
  2841  0018D2  D002               	goto	l389
  2842                           
  2843                           ;spi_pic.c: 117: SSPCON1bits.SSPOV = 0;
  2844  0018D4  9CC6               	bcf	4038,6,c	;volatile
  2845                           
  2846                           ;spi_pic.c: 118: byte = -1;
  2847  0018D6  6803               	setf	spi_slave_get_byte@byte,c
  2848  0018D8                     l389:
  2849                           
  2850                           ;spi_pic.c: 119: }
  2851                           ;spi_pic.c: 120: return byte;
  2852  0018D8  C003  F001         	movff	spi_slave_get_byte@byte,?_spi_slave_get_byte
  2853  0018DC  6A02               	clrf	?_spi_slave_get_byte+1,c
  2854  0018DE  0012               	return		;funcret
  2855  0018E0                     __end_of_spi_slave_get_byte:
  2856                           	opt stack 0
  2857                           tosu	equ	0xFFF
  2858                           tosh	equ	0xFFE
  2859                           tosl	equ	0xFFD
  2860                           pclath	equ	0xFFA
  2861                           tblptru	equ	0xFF8
  2862                           prodh	equ	0xFF4
  2863                           prodl	equ	0xFF3
  2864                           intcon2	equ	0xFF1
  2865                           intcon3	equ	0xFF0
  2866                           postinc0	equ	0xFEE
  2867                           wreg	equ	0xFE8
  2868                           plusw1	equ	0xFE3
  2869                           indf2	equ	0xFDF
  2870                           postinc2	equ	0xFDE
  2871                           postdec2	equ	0xFDD
  2872                           plusw2	equ	0xFDB
  2873                           fsr2h	equ	0xFDA
  2874                           fsr2l	equ	0xFD9
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function _buffer_space *****************
  2878 ;; Defined at:
  2879 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2882 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;		None
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      unsigned char 
  2887 ;; Registers used:
  2888 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMRAM   BANK0
  2894 ;;      Params:         2       0
  2895 ;;      Locals:         0       0
  2896 ;;      Temps:          0       0
  2897 ;;      Totals:         2       0
  2898 ;;Total ram usage:        2 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; This function calls:
  2901 ;;		Nothing
  2902 ;; This function is called by:
  2903 ;;		_eserial_receive
  2904 ;;		_espi_slave_receive
  2905 ;;		_espi_master_receive
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           	psect	text23
  2910  00185C                     __ptext23:
  2911                           	opt stack 0
  2912  00185C                     _buffer_space:
  2913                           	opt stack 29
  2914                           
  2915                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  2916                           
  2917                           ;incstack = 0
  2918  00185C  EE20 F001          	lfsr	2,1
  2919  001860  5001               	movf	buffer_space@buffer,w,c
  2920  001862  26D9               	addwf	fsr2l,f,c
  2921  001864  5002               	movf	buffer_space@buffer+1,w,c
  2922  001866  22DA               	addwfc	fsr2h,f,c
  2923  001868  50DF               	movf	indf2,w,c
  2924  00186A  0800               	sublw	0
  2925  00186C  0F20               	addlw	32
  2926  00186E  0012               	return	
  2927  001870  0012               	return		;funcret
  2928  001872                     __end_of_buffer_space:
  2929                           	opt stack 0
  2930                           tosu	equ	0xFFF
  2931                           tosh	equ	0xFFE
  2932                           tosl	equ	0xFFD
  2933                           pclath	equ	0xFFA
  2934                           tblptru	equ	0xFF8
  2935                           prodh	equ	0xFF4
  2936                           prodl	equ	0xFF3
  2937                           intcon2	equ	0xFF1
  2938                           intcon3	equ	0xFF0
  2939                           postinc0	equ	0xFEE
  2940                           wreg	equ	0xFE8
  2941                           plusw1	equ	0xFE3
  2942                           indf2	equ	0xFDF
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           plusw2	equ	0xFDB
  2946                           fsr2h	equ	0xFDA
  2947                           fsr2l	equ	0xFD9
  2948                           status	equ	0xFD8
  2949                           
  2950 ;; *************** function _buffer_push *****************
  2951 ;; Defined at:
  2952 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2955 ;;		 -> main@pic_to_pc(34), main@pic_to_pic(34), 
  2956 ;;  byte            1    2[COMRAM] unsigned char 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;  current_posi    1    4[COMRAM] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      unsigned char 
  2961 ;; Registers used:
  2962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0
  2968 ;;      Params:         3       0
  2969 ;;      Locals:         1       0
  2970 ;;      Temps:          1       0
  2971 ;;      Totals:         5       0
  2972 ;;Total ram usage:        5 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_eserial_receive
  2978 ;;		_espi_slave_receive
  2979 ;;		_espi_master_receive
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text24
  2984  001B1C                     __ptext24:
  2985                           	opt stack 0
  2986  001B1C                     _buffer_push:
  2987                           	opt stack 29
  2988                           
  2989                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  2990                           
  2991                           ;incstack = 0
  2992  001B1C  EE20 F001          	lfsr	2,1
  2993  001B20  5001               	movf	buffer_push@buffer,w,c
  2994  001B22  26D9               	addwf	fsr2l,f,c
  2995  001B24  5002               	movf	buffer_push@buffer+1,w,c
  2996  001B26  22DA               	addwfc	fsr2h,f,c
  2997  001B28  0E20               	movlw	32
  2998  001B2A  18DE               	xorwf	postinc2,w,c
  2999  001B2C  B4D8               	btfsc	status,2,c
  3000  001B2E  0012               	return	
  3001  001B30  D001               	goto	l1890
  3002                           
  3003                           ;circular_buffer.c: 27: return 0;
  3004                           ;	Return value of _buffer_push is never used
  3005  001B32  0012               	return	
  3006  001B34                     l1890:
  3007                           
  3008                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  3009                           ;circular_buffer.c: 30: & (0x20 - 1);
  3010  001B34  EE20 F001          	lfsr	2,1
  3011  001B38  5001               	movf	buffer_push@buffer,w,c
  3012  001B3A  26D9               	addwf	fsr2l,f,c
  3013  001B3C  5002               	movf	buffer_push@buffer+1,w,c
  3014  001B3E  22DA               	addwfc	fsr2h,f,c
  3015  001B40  50DF               	movf	indf2,w,c
  3016  001B42  6E04               	movwf	??_buffer_push& (0+255),c
  3017  001B44  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  3018  001B48  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  3019  001B4C  50DF               	movf	indf2,w,c
  3020  001B4E  2404               	addwf	??_buffer_push,w,c
  3021  001B50  0B1F               	andlw	31
  3022  001B52  6E05               	movwf	buffer_push@current_position,c
  3023                           
  3024                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  3025  001B54  5005               	movf	buffer_push@current_position,w,c
  3026  001B56  0D01               	mullw	1
  3027  001B58  0E02               	movlw	2
  3028  001B5A  26F3               	addwf	prodl,f,c
  3029  001B5C  0E00               	movlw	0
  3030  001B5E  22F4               	addwfc	prodh,f,c
  3031  001B60  50F3               	movf	prodl,w,c
  3032  001B62  2401               	addwf	buffer_push@buffer,w,c
  3033  001B64  6ED9               	movwf	fsr2l,c
  3034  001B66  50F4               	movf	prodh,w,c
  3035  001B68  2002               	addwfc	buffer_push@buffer+1,w,c
  3036  001B6A  6EDA               	movwf	fsr2h,c
  3037  001B6C  C003  FFDF         	movff	buffer_push@byte,indf2
  3038                           
  3039                           ;circular_buffer.c: 32: buffer->count++;
  3040  001B70  EE20 F001          	lfsr	2,1
  3041  001B74  5001               	movf	buffer_push@buffer,w,c
  3042  001B76  26D9               	addwf	fsr2l,f,c
  3043  001B78  5002               	movf	buffer_push@buffer+1,w,c
  3044  001B7A  22DA               	addwfc	fsr2h,f,c
  3045  001B7C  2ADF               	incf	indf2,f,c
  3046  001B7E  0012               	return	
  3047                           
  3048                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  3049                           ;	Return value of _buffer_push is never used
  3050  001B80  0012               	return		;funcret
  3051  001B82                     __end_of_buffer_push:
  3052                           	opt stack 0
  3053                           tosu	equ	0xFFF
  3054                           tosh	equ	0xFFE
  3055                           tosl	equ	0xFFD
  3056                           pclath	equ	0xFFA
  3057                           tblptru	equ	0xFF8
  3058                           prodh	equ	0xFF4
  3059                           prodl	equ	0xFF3
  3060                           intcon2	equ	0xFF1
  3061                           intcon3	equ	0xFF0
  3062                           postinc0	equ	0xFEE
  3063                           wreg	equ	0xFE8
  3064                           plusw1	equ	0xFE3
  3065                           indf2	equ	0xFDF
  3066                           postinc2	equ	0xFDE
  3067                           postdec2	equ	0xFDD
  3068                           plusw2	equ	0xFDB
  3069                           fsr2h	equ	0xFDA
  3070                           fsr2l	equ	0xFD9
  3071                           status	equ	0xFD8
  3072                           
  3073 ;; *************** function _buffer_empty *****************
  3074 ;; Defined at:
  3075 ;;		line 14 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3078 ;;		 -> main@pic_to_pic(34), 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;		None
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      unsigned char 
  3083 ;; Registers used:
  3084 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0
  3090 ;;      Params:         2       0
  3091 ;;      Locals:         0       0
  3092 ;;      Temps:          0       0
  3093 ;;      Totals:         2       0
  3094 ;;Total ram usage:        2 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_eserial_receive
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text25
  3104  00188A                     __ptext25:
  3105                           	opt stack 0
  3106  00188A                     _buffer_empty:
  3107                           	opt stack 29
  3108                           
  3109                           ;circular_buffer.c: 16: return (buffer->count == 0) ? 1 : 0;
  3110                           
  3111                           ;incstack = 0
  3112  00188A  EE20 F001          	lfsr	2,1
  3113  00188E  5001               	movf	buffer_empty@buffer,w,c
  3114  001890  26D9               	addwf	fsr2l,f,c
  3115  001892  5002               	movf	buffer_empty@buffer+1,w,c
  3116  001894  22DA               	addwfc	fsr2h,f,c
  3117  001896  50DF               	movf	indf2,w,c
  3118  001898  A4D8               	btfss	status,2,c
  3119  00189A  D002               	goto	u1450
  3120  00189C  0E01               	movlw	1
  3121  00189E  0012               	return	
  3122  0018A0                     u1450:
  3123  0018A0  0E00               	movlw	0
  3124  0018A2  0012               	return	
  3125  0018A4  0012               	return		;funcret
  3126  0018A6                     __end_of_buffer_empty:
  3127                           	opt stack 0
  3128  0000                     tosu	equ	0xFFF
  3129                           tosh	equ	0xFFE
  3130                           tosl	equ	0xFFD
  3131                           pclath	equ	0xFFA
  3132                           tblptru	equ	0xFF8
  3133                           prodh	equ	0xFF4
  3134                           prodl	equ	0xFF3
  3135                           intcon2	equ	0xFF1
  3136                           intcon3	equ	0xFF0
  3137                           postinc0	equ	0xFEE
  3138                           wreg	equ	0xFE8
  3139                           plusw1	equ	0xFE3
  3140                           indf2	equ	0xFDF
  3141                           postinc2	equ	0xFDE
  3142                           postdec2	equ	0xFDD
  3143                           plusw2	equ	0xFDB
  3144                           fsr2h	equ	0xFDA
  3145                           fsr2l	equ	0xFD9
  3146                           status	equ	0xFD8
  3147                           tosu	equ	0xFFF
  3148                           tosh	equ	0xFFE
  3149                           tosl	equ	0xFFD
  3150                           pclath	equ	0xFFA
  3151                           tblptru	equ	0xFF8
  3152                           prodh	equ	0xFF4
  3153                           prodl	equ	0xFF3
  3154                           intcon2	equ	0xFF1
  3155                           intcon3	equ	0xFF0
  3156                           postinc0	equ	0xFEE
  3157                           wreg	equ	0xFE8
  3158                           plusw1	equ	0xFE3
  3159                           indf2	equ	0xFDF
  3160                           postinc2	equ	0xFDE
  3161                           postdec2	equ	0xFDD
  3162                           plusw2	equ	0xFDB
  3163                           fsr2h	equ	0xFDA
  3164                           fsr2l	equ	0xFD9
  3165                           status	equ	0xFD8
  3166                           
  3167                           	psect	text26
  3168  000000                     __ptext26:
  3169                           	opt stack 0
  3170                           tosu	equ	0xFFF
  3171                           tosh	equ	0xFFE
  3172                           tosl	equ	0xFFD
  3173                           pclath	equ	0xFFA
  3174                           tblptru	equ	0xFF8
  3175                           prodh	equ	0xFF4
  3176                           prodl	equ	0xFF3
  3177                           intcon2	equ	0xFF1
  3178                           intcon3	equ	0xFF0
  3179                           postinc0	equ	0xFEE
  3180                           wreg	equ	0xFE8
  3181                           plusw1	equ	0xFE3
  3182                           indf2	equ	0xFDF
  3183                           postinc2	equ	0xFDE
  3184                           postdec2	equ	0xFDD
  3185                           plusw2	equ	0xFDB
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190                           	psect	rparam
  3191  0000                     tosu	equ	0xFFF
  3192                           tosh	equ	0xFFE
  3193                           tosl	equ	0xFFD
  3194                           pclath	equ	0xFFA
  3195                           tblptru	equ	0xFF8
  3196                           prodh	equ	0xFF4
  3197                           prodl	equ	0xFF3
  3198                           intcon2	equ	0xFF1
  3199                           intcon3	equ	0xFF0
  3200                           postinc0	equ	0xFEE
  3201                           wreg	equ	0xFE8
  3202                           plusw1	equ	0xFE3
  3203                           indf2	equ	0xFDF
  3204                           postinc2	equ	0xFDE
  3205                           postdec2	equ	0xFDD
  3206                           plusw2	equ	0xFDB
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      90
    BANK0           160      0      68

Pointer List with Targets:

    espi_slave_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    espi_slave_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    spi_slave_peek_receive@byte	PTR int  size(2) Largest target is 2
		 -> main@value_129(COMRAM[2]), NULL(NULL[0]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_empty@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), main@pic_to_pic(COMRAM[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    eserial_receive@timer_up	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    eserial_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    eserial_receive@stop_function	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> return_false(), 

    eserial_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pic(COMRAM[34]), 

    eserial_send_data@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@pic_to_pc(COMRAM[34]), 

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    serial_send_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_load_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_disable_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    S173interrupt_serial$data	PTR unsigned char  size(2) Largest target is 0

    serial_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_peek_receive@byte	PTR unsigned char  size(2) Largest target is 1
		 -> eserial_receive@value(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_eserial_receive
    _main->_espi_slave_send
    _espi_slave_send->_buffer_peek
    _espi_slave_send->_buffer_pop
    _espi_slave_send->_encode_data
    _espi_slave_receive->_buffer_push
    _espi_slave_receive->_decode_data
    _espi_setup->_setup_spi
    _eserial_setup->_setup_simple_serial
    _eserial_send_data->_buffer_pop
    _return_false->_spi_slave_peek_receive
    _spi_slave_peek_receive->_spi_slave_get_byte

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                73    73      0    7947
                                             17 COMRAM    72    72      0
                    _eserial_receive
                  _eserial_send_data
                      _eserial_setup
                         _espi_setup
                 _espi_slave_receive
                    _espi_slave_send
                       _setup_timer3
             _spi_slave_peek_receive
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _espi_slave_send                                     11     9      2    2140
                                              6 COMRAM    11     9      2
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                  _spi_send_get_byte
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     516
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     281
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_slave_receive                                   5     3      2    1995
                                              5 COMRAM     5     3      2
                        _buffer_push
                       _buffer_space
                        _decode_data
                  _spi_send_get_byte
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (2) _spi_send_get_byte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _eserial_setup                                        3     1      2     308
                                              7 COMRAM     3     1      2
                _setup_simple_serial
 ---------------------------------------------------------------------------------
 (2) _setup_simple_serial                                  7     5      2     200
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _eserial_send_data                                    5     3      2     595
                                              6 COMRAM     5     3      2
                         _buffer_pop
                   _serial_send_byte
 ---------------------------------------------------------------------------------
 (2) _serial_send_byte                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     411
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _eserial_receive                                     11     3      8    2296
                                              6 COMRAM    11     3      8
                       _buffer_empty
                        _buffer_push
                       _buffer_space
                       _return_false *
                _serial_peek_receive
                         _set_timer3 *
                          _timer3_up *
 ---------------------------------------------------------------------------------
 (2) _timer3_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _set_timer3                                           2     0      2      65
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _serial_peek_receive                                  3     1      2     236
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _return_false                                         0     0      0     196
             _spi_slave_peek_receive
 ---------------------------------------------------------------------------------
 (1) _spi_slave_peek_receive                               3     1      2     196
                                              3 COMRAM     3     1      2
                 _spi_slave_get_byte
 ---------------------------------------------------------------------------------
 (2) _spi_slave_get_byte                                   3     1      2      24
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     278
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     801
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _buffer_empty                                         2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eserial_receive
     _buffer_empty
     _buffer_push
     _buffer_space
     _return_false *
       _spi_slave_peek_receive
         _spi_slave_get_byte
     _serial_peek_receive *
     _set_timer3 *
     _timer3_up *
   _eserial_send_data
     _buffer_pop
     _serial_send_byte
   _eserial_setup
     _setup_simple_serial
   _espi_setup
     _setup_spi
   _espi_slave_receive
     _buffer_push
     _buffer_space
     _decode_data
     _spi_send_get_byte
     _spi_slave_get_byte
   _espi_slave_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _spi_send_get_byte
   _setup_timer3
   _spi_slave_peek_receive
     _spi_slave_get_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      44       4       42.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5A       1       94.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9E       5        0.0%
DATA                 0      0      9E       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Aug 25 12:43:59 2015

                  _espi_slave_send 1EA6                        _SSPSTATbits 000FC7  
           eserial_send_data@value 000A                 _espi_slave_receive 1BFC  
          ?_spi_slave_peek_receive 0004            eserial_send_data@buffer 0007  
                              l110 181A                                l207 1E3A  
                              l331 19F4                                l333 19E0  
                              l334 19F0                                l451 1930  
                              l339 1850                                l449 1938  
                              l386 18C4                                l468 1FF2  
                              l389 18D8                                tosl 000FFD  
                              wreg 000FE8                       __CFG_FOSC$HS 000000  
              ?_espi_slave_receive 0006                       __CFG_LVP$OFF 000000  
                             l2012 1F20                               l2022 1F5C  
                             l2014 1F2E                               l2040 1FDA  
                             l2120 1D2E                               l2112 1CDE  
                             l2050 1FEA                               l2028 1F8A  
                             l2124 1D46                               l2132 1D68  
                             l2056 1C02                               l2080 1C7C  
                             l2066 1C2C                               l2076 1C56  
                             l2094 1A32                               l2088 1A14  
                             l1810 1A4E                               l1820 1A76  
                             l1812 1A58                               l1910 1AE2  
                             l1840 1904                               l1818 1A6C  
                             l1836 18FE                               l1860 1990  
                             l1792 196C                               l1872 1B9A  
                             l1864 19A0                               l1890 1B34  
                             l1970 1DC0                               l1796 1972  
                             l1980 1E1C                               l1972 1DD6  
      __size_of_spi_slave_get_byte 001E                               l1990 1E82  
                             l1974 1DDA                               l1966 1D9A  
                             l1986 1E5C                               l1978 1E00  
                             u2030 1D5A                               u1360 197A  
                             u1450 18A0                               u1490 1810  
                             u1628 1E04                               u1629 1E18  
                             u1658 1E48                               u1678 1E86  
                             u1679 1E9A                               u1981 1CA0  
                             u1991 1CB2                               _RCIE 007CED  
                             _RCIF 007CF5             __size_of_eserial_setup 001C  
                             _TMR0 000FD6                               _TMR1 000FCE  
                             _TMR3 000FB2                               _TXIE 007CEC  
                             _TXIF 007CF4                               _main 1C96  
                             fsr2h 000FDA                               indf2 000FDF  
                             fsr2l 000FD9                               prodh 000FF4  
                             prodl 000FF3                               start 0000  
            spi_send_get_byte@byte 0001                     ??_buffer_count 0003  
                   ??_buffer_empty 0003                     ??_buffer_space 0003  
             ??_espi_slave_receive 0008                       ___param_bank 000010  
             eserial_receive@value 0011               setup_spi@SSPCON1_reg 0001  
   __end_of_spi_slave_peek_receive 1980                              ?_main 0001  
                            _T0CON 000FD5                              _T1CON 000FCD  
                            _T3CON 000FB1                              _RCREG 000FAE  
                            _RCSTA 000FAB                              _SPBRG 000FAF  
                            _TXREG 000FAD                              _TXSTA 000FAC  
             __size_of_decode_data 003C                              main@i 0012  
                            pclath 000FFA               serial_send_byte@byte 0001  
                            plusw1 000FE3                              plusw2 000FDB  
                            status 000FD8            __end_of_espi_slave_send 2000  
             setup_spi@SSPSTAT_reg 0002                   buffer_pop@buffer 0001  
                  __initialization 1872                       __end_of_main 1D7A  
            eserial_receive@buffer 0007                      _eserial_setup 18A6  
                           ??_main 0012                  _spi_send_get_byte 1848  
                    __activetblptr 000002                 ?_spi_send_get_byte 0001  
                buffer_peek@buffer 0001                    encode_data@data 0006  
     espi_slave_receive@received_1 0009       espi_slave_receive@received_2 000A  
         __size_of_eserial_receive 012C                ??_spi_send_get_byte 0001  
                           _INT2IF 007F81                     __CFG_WDTEN$OFF 000000  
                           _INTCON 000FF2                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9           __end_of_serial_send_byte 1824  
                  decode_data@data 0001                      main@pic_to_pc 0016  
             __size_of_encode_data 0046                     ?_eserial_setup 0008  
             __size_of_buffer_peek 0052               __size_of_buffer_push 0066  
        __end_of_spi_send_get_byte 185C                             clear_0 1878  
                    main@value_129 0014        __end_of_setup_simple_serial 1A84  
             __end_of_buffer_count 1848               __end_of_buffer_empty 18A6  
                  set_timer3@value 0001                             tblptru 000FF8  
            setup_timer3@T3CON_reg 0001               __end_of_buffer_space 1872  
                       __accesstop 0060            __end_of__initialization 1880  
                 ?_espi_slave_send 0007                      ___rparam_used 000001  
     __size_of_serial_peek_receive 002E                     __pcstackCOMRAM 0001  
               buffer_count@buffer 0001           espi_slave_receive@buffer 0006  
                   buffer_pop@byte 0005       eserial_receive@stop_function 0009  
                _eserial_send_data 19FA                 ?_eserial_send_data 0007  
               buffer_empty@buffer 0001                         __pbssBANK0 0060  
              ??_eserial_send_data 0009            serial_peek_receive@byte 0001  
                ??_eserial_receive 000F                    ??_eserial_setup 000A  
       __size_of_spi_send_get_byte 0014                            _BAUDCON 000FB8  
        __end_of_eserial_send_data 1A3E                  buffer_push@buffer 0001  
               __size_of_timer3_up 000E                 __size_of_setup_spi 003E  
       __end_of_spi_slave_get_byte 18E0                         _buffer_pop 1B82  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
           spi_slave_get_byte@byte 0003                     main@pic_to_pic 0038  
   spi_slave_peek_receive@get_byte 0006                            __Hparam 0000  
                          __Lparam 0000        __size_of_espi_slave_receive 009A  
                       _espi_setup 190E                         _dummy_byte 005A  
                          __pcinit 1872                          _ANSELbits 000F7E  
                          __ramtop 0100              __size_of_buffer_count 0012  
            __size_of_buffer_empty 001C                            __ptext0 1C96  
                          __ptext1 17F4                            __ptext2 1EA6  
                          __ptext3 1A84                            __ptext4 1ACA  
                          __ptext5 1836                            __ptext6 1BFC  
                          __ptext7 1848                            __ptext8 1980  
                          __ptext9 190E              __size_of_buffer_space 0016  
                    ??_decode_data 0005              espi_slave_send@buffer 0007  
            espi_slave_send@byte_1 000C              espi_slave_send@byte_2 000D  
             end_of_initialization 1880                      __Lmediumconst 0000  
                __end_of_timer3_up 1816                  ?_serial_send_byte 0001  
                     _buffer_count 1836                       _buffer_empty 188A  
                __end_of_setup_spi 19FA                 ??_serial_send_byte 0001  
                     _buffer_space 185C                          _RCSTAbits 000FAB  
                       _set_timer3 17FC                            postdec2 000FDD  
                    ?_return_false 0001          espi_slave_send@received_1 000E  
        espi_slave_send@received_2 0010                            postinc0 000FEE  
                          postinc2 000FDE         eserial_setup@baudrate_bits 000A  
       __size_of_eserial_send_data 0044                _serial_peek_receive 18E0  
                    ?_setup_timer3 0001                          _TRISAbits 000F92  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                      ?_buffer_pop 0001                __end_of_decode_data 19BC  
                    ??_encode_data 0005               ?_serial_peek_receive 0001  
                    ??_buffer_peek 0003                      ??_buffer_push 0004  
         ??_spi_slave_peek_receive 0006                     ??_return_false 0007  
              eserial_receive@test 0010                        ?_espi_setup 0001  
                  buffer_peek@byte 0005                     espi_setup@mode 0003  
                   ??_setup_timer3 0001                start_initialization 1872  
                  _eserial_receive 1D7A       __size_of_setup_simple_serial 0046  
       eserial_receive@timer_start 000B                 buffer_space@buffer 0001  
            ??_serial_peek_receive 0003                    buffer_push@byte 0003  
          eserial_receive@timer_up 000D                __end_of_encode_data 1ACA  
                      ?_set_timer3 0001                __size_of_buffer_pop 007A  
         __size_of_espi_slave_send 015A                __end_of_buffer_peek 1B1C  
              __end_of_buffer_push 1B82                        _decode_data 1980  
                      __pbssCOMRAM 005A            espi_slave_receive@value 0008  
              __size_of_espi_setup 0038                 _spi_slave_get_byte 18C2  
  __size_of_spi_slave_peek_receive 003A              __end_of_eserial_setup 18C2  
              ?_spi_slave_get_byte 0001        serial_peek_receive@get_byte 0003  
                encode_data@byte_1 0001                  encode_data@byte_2 0003  
          __end_of_eserial_receive 1EA6   setup_simple_serial@baudrate_bits 0007  
             __end_of_return_false 1836               ??_spi_slave_get_byte 0003  
              __size_of_set_timer3 000C                           _LATAbits 000F89  
                         _LATCbits 000F8B                        _encode_data 1A84  
       __end_of_espi_slave_receive 1C96                           _PIE1bits 000F9D  
                         _PIE2bits 000FA0               __end_of_setup_timer3 17FC  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
                      _buffer_peek 1ACA                        _buffer_push 1B1C  
                        _timer3_up 1808                          main@F4065 0060  
                        main@F4067 0082                          _setup_spi 19BC  
        __size_of_serial_send_byte 000E                  ??_espi_slave_send 0009  
           _spi_slave_peek_receive 1946                       ??_buffer_pop 0003  
       spi_slave_peek_receive@byte 0004                  decode_data@byte_1 0003  
                decode_data@byte_2 0004                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                           __Hrparam 0000  
                         __Lrparam 0000                         ?_timer3_up 0001  
                     ??_espi_setup 0003                 __end_of_buffer_pop 1BFC  
                       ?_setup_spi 0001                 eserial_send_data@i 0009  
              _setup_simple_serial 1A3E                   ?_eserial_receive 0007  
                       _ANSELHbits 000F7F                           __ptext10 19BC  
                         __ptext11 18A6                           __ptext20 1824  
                         __ptext12 1A3E                           __ptext21 1946  
                         __ptext13 19FA                           __ptext22 18C2  
                         __ptext14 1816                           __ptext23 185C  
                         __ptext15 1B82                           __ptext24 1B1C  
                         __ptext16 1D7A                           __ptext25 188A  
                         __ptext17 1808                           __ptext26 0000  
                         __ptext18 17FC                           __ptext19 18E0  
             ?_setup_simple_serial 0001                 __end_of_espi_setup 1946  
                    __size_of_main 00E4                       ??_set_timer3 0003  
            __size_of_return_false 0012                         _INTCONbits 000FF2  
                     ?_decode_data 0001        __end_of_serial_peek_receive 190E  
            ??_setup_simple_serial 0003                 __end_of_set_timer3 1808  
            __size_of_setup_timer3 0008                        ??_timer3_up 0001  
                     _return_false 1824                        ??_setup_spi 0002  
                 _serial_send_byte 1816                       _setup_timer3 17F4  
      buffer_push@current_position 0005                        _SSPCON1bits 000FC6  
      eserial_setup@baudrate_value 0008                       ?_encode_data 0001  
setup_simple_serial@baudrate_value 0001        espi_slave_send@byte_to_send 000A  
                    ?_buffer_count 0001                      ?_buffer_empty 0001  
                     ?_buffer_peek 0001                      ?_buffer_space 0001  
                     ?_buffer_push 0001            _setup_simple_serial$247 0003  
          _setup_simple_serial$248 0005  
