

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Jul 28 19:08:59 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    25  0000                     _ANSELHbits	set	3967
    26  0000                     _ANSELbits	set	3966
    27  0000                     _BAUDCON	set	4024
    28  0000                     _INTCON	set	4082
    29  0000                     _LATCbits	set	3979
    30  0000                     _RCREG	set	4014
    31  0000                     _RCSTA	set	4011
    32  0000                     _RCSTAbits	set	4011
    33  0000                     _SPBRG	set	4015
    34  0000                     _SPBRGH	set	4016
    35  0000                     _TRISCbits	set	3988
    36  0000                     _TXREG	set	4013
    37  0000                     _TXSTA	set	4012
    38  0000                     _RCIE	set	31981
    39  0000                     _RCIF	set	31989
    40  0000                     _TXIE	set	31980
    41  0000                     _TXIF	set	31988
    42                           
    43                           ; 0 bytes @ 0x20
    44 ;;
    45 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
    46 ;;
    47 ;; *************** function _main *****************
    48 ;; Defined at:
    49 ;;		line 23 in file "main.c"
    50 ;; Parameters:    Size  Location     Type
    51 ;;		None
    52 ;; Auto vars:     Size  Location     Type
    53 ;;		None
    54 ;; Return value:  Size  Location     Type
    55 ;;                  2   16[None  ] int 
    56 ;; Registers used:
    57 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
    58 ;; Tracked objects:
    59 ;;		On entry : 0/0
    60 ;;		On exit  : 0/0
    61 ;;		Unchanged: 0/0
    62 ;; Data sizes:     COMRAM   BANK0
    63 ;;      Params:         0       0
    64 ;;      Locals:         0       0
    65 ;;      Temps:          0       1
    66 ;;      Totals:         0       1
    67 ;;Total ram usage:        1 bytes
    68 ;; Hardware stack levels required when called:    5
    69 ;; This function calls:
    70 ;;		_buffer_count
    71 ;;		_eserial_send_data
    72 ;;		_eserial_setup
    73 ;; This function is called by:
    74 ;;		Startup code after reset
    75 ;; This function uses a non-reentrant model
    76 ;;
    77                           
    78                           	psect	text0
    79  00021C                     __ptext0:
    80                           	opt stack 0
    81  00021C                     _main:
    82                           	opt stack 26
    83                           
    84                           ;main.c: 25: eserial_setup(0x08 | 0x04, 0x13);
    85                           
    86                           ;incstack = 0
    87  00021C  0E00               	movlw	0
    88  00021E  6E48               	movwf	eserial_setup@baudrate_value+1,c
    89  000220  0E13               	movlw	19
    90  000222  6E47               	movwf	eserial_setup@baudrate_value,c
    91  000224  0E0C               	movlw	12
    92  000226  EC5B  F001         	call	_eserial_setup
    93  00022A  D000               	goto	l1243
    94  00022C                     l1243:
    95                           
    96                           ;main.c: 28: if(buffer_count(&my_buffer) > 0x20 - 4)
    97  00022C  0E07               	movlw	low _my_buffer
    98  00022E  6E40               	movwf	buffer_count@buffer,c
    99  000230  0E00               	movlw	high _my_buffer
   100  000232  6E41               	movwf	buffer_count@buffer+1,c
   101  000234  EC90  F001         	call	_buffer_count	;wreg free
   102  000238  0100               	movlb	0	; () banked
   103  00023A  6F63               	movwf	??_main& (0+255),b
   104  00023C  0E1C               	movlw	28
   105  00023E  0100               	movlb	0	; () banked
   106  000240  6563               	cpfsgt	??_main& (0+255),b
   107  000242  D7F4               	goto	l1243
   108                           
   109                           ; BSR set to: 0
   110                           ;main.c: 29: eserial_send_data(&my_buffer);
   111  000244  0E07               	movlw	low _my_buffer
   112  000246  6E46               	movwf	eserial_send_data@buffer,c
   113  000248  0E00               	movlw	high _my_buffer
   114  00024A  6E47               	movwf	eserial_send_data@buffer+1,c
   115  00024C  ECB9  F000         	call	_eserial_send_data	;wreg free
   116  000250  D7ED               	goto	l1243
   117                           
   118                           ;main.c: 30: }
   119                           ;main.c: 32: return (0);
   120                           ;	Return value of _main is never used
   121  000252  EF47  F000         	goto	start
   122  000256                     __end_of_main:
   123                           	opt stack 0
   124                           
   125                           	psect	cinit
   126  00030E                     __pcinit:
   127                           	opt stack 0
   128  00030E                     start_initialization:
   129                           	opt stack 0
   130  00030E                     __initialization:
   131                           	opt stack 0
   132                           
   133                           ; Clear objects allocated to COMRAM (40 bytes)
   134  00030E  EE00  F001         	lfsr	0,__pbssCOMRAM
   135  000312  0E28               	movlw	40
   136  000314                     clear_0:
   137  000314  6AEE               	clrf	postinc0,c
   138  000316  06E8               	decf	wreg,f,c
   139  000318  E1FD               	bnz	clear_0
   140  00031A                     end_of_initialization:
   141                           	opt stack 0
   142  00031A                     __end_of__initialization:
   143                           	opt stack 0
   144  00031A  0100               	movlb	0
   145  00031C  EF0E  F001         	goto	_main	;jump to C main() function
   146                           postinc0	equ	0xFEE
   147                           wreg	equ	0xFE8
   148                           
   149                           	psect	bssCOMRAM
   150  000001                     __pbssCOMRAM:
   151                           	opt stack 0
   152  000001                     _interrupt_data:
   153                           	opt stack 0
   154  000001                     	ds	6
   155  000007                     _my_buffer:
   156                           	opt stack 0
   157  000007                     	ds	34
   158                           postinc0	equ	0xFEE
   159                           wreg	equ	0xFE8
   160                           
   161                           	psect	cstackBANK0
   162  000060                     __pcstackBANK0:
   163                           	opt stack 0
   164  000060                     eserial_setup@baudrate_bits:
   165                           	opt stack 0
   166  000060                     eserial_send_data@i:
   167                           	opt stack 0
   168                           
   169                           ; 1 bytes @ 0x0
   170  000060                     	ds	1
   171  000061                     eserial_send_data@value:
   172                           	opt stack 0
   173                           
   174                           ; 2 bytes @ 0x1
   175  000061                     	ds	2
   176  000063                     ??_main:
   177                           
   178                           ; 0 bytes @ 0x3
   179  000063                     	ds	1
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           
   183                           	psect	cstackCOMRAM
   184  000029                     __pcstackCOMRAM:
   185                           	opt stack 0
   186  000029                     buffer_space@buffer:
   187                           	opt stack 0
   188  000029                     buffer_push@buffer:
   189                           	opt stack 0
   190                           
   191                           ; 2 bytes @ 0x0
   192  000029                     	ds	2
   193  00002B                     buffer_push@byte:
   194                           	opt stack 0
   195                           
   196                           ; 1 bytes @ 0x2
   197  00002B                     	ds	1
   198  00002C                     ??_buffer_push:
   199                           
   200                           ; 0 bytes @ 0x3
   201  00002C                     	ds	1
   202  00002D                     buffer_push@current_position:
   203                           	opt stack 0
   204                           
   205                           ; 1 bytes @ 0x4
   206  00002D                     	ds	1
   207  00002E                     eserial_receive@buffer:
   208                           	opt stack 0
   209                           
   210                           ; 2 bytes @ 0x5
   211  00002E                     	ds	2
   212  000030                     ??_eserial_receive:
   213                           
   214                           ; 0 bytes @ 0x7
   215  000030                     	ds	1
   216  000031                     eserial_receive@value:
   217                           	opt stack 0
   218                           
   219                           ; 1 bytes @ 0x8
   220  000031                     	ds	1
   221  000032                     ??_isr:
   222                           
   223                           ; 0 bytes @ 0x9
   224  000032                     	ds	14
   225  000040                     ??_serial_interrupts:
   226  000040                     ?_buffer_pop:
   227                           	opt stack 0
   228  000040                     serial_send_byte@byte:
   229                           	opt stack 0
   230  000040                     setup_simple_serial@baudrate_value:
   231                           	opt stack 0
   232  000040                     buffer_count@buffer:
   233                           	opt stack 0
   234  000040                     buffer_empty@buffer:
   235                           	opt stack 0
   236  000040                     buffer_pop@buffer:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x17
   240  000040                     	ds	1
   241  000041                     serial_interrupts@interrupts:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x18
   245  000041                     	ds	1
   246  000042                     ??_buffer_pop:
   247  000042                     _setup_simple_serial$172:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x19
   251  000042                     	ds	2
   252  000044                     _setup_simple_serial$173:
   253                           	opt stack 0
   254  000044                     buffer_pop@byte:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x1B
   258  000044                     	ds	2
   259  000046                     setup_simple_serial@baudrate_bits:
   260                           	opt stack 0
   261  000046                     eserial_send_data@buffer:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x1D
   265  000046                     	ds	1
   266  000047                     eserial_setup@baudrate_value:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x1E
   270  000047                     	ds	1
   271  000048                     
   272                           ; 0 bytes @ 0x1F
   273  000048                     	ds	1
   274  000049                     postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           
   277 ;; *************** function _eserial_setup *****************
   278 ;; Defined at:
   279 ;;		line 20 in file "extended_serial.c"
   280 ;; Parameters:    Size  Location     Type
   281 ;;  baudrate_bit    1    wreg     unsigned char 
   282 ;;  baudrate_val    2   30[COMRAM] unsigned int 
   283 ;; Auto vars:     Size  Location     Type
   284 ;;  baudrate_bit    1    0[BANK0 ] unsigned char 
   285 ;; Return value:  Size  Location     Type
   286 ;;		None               void
   287 ;; Registers used:
   288 ;;		wreg, status,2, status,0, cstack
   289 ;; Tracked objects:
   290 ;;		On entry : 0/0
   291 ;;		On exit  : 0/0
   292 ;;		Unchanged: 0/0
   293 ;; Data sizes:     COMRAM   BANK0
   294 ;;      Params:         2       0
   295 ;;      Locals:         0       1
   296 ;;      Temps:          0       0
   297 ;;      Totals:         2       1
   298 ;;Total ram usage:        3 bytes
   299 ;; Hardware stack levels used:    1
   300 ;; Hardware stack levels required when called:    4
   301 ;; This function calls:
   302 ;;		_serial_interrupts
   303 ;;		_setup_simple_serial
   304 ;; This function is called by:
   305 ;;		_main
   306 ;; This function uses a non-reentrant model
   307 ;;
   308                           
   309                           	psect	text1
   310  0002B6                     __ptext1:
   311                           	opt stack 0
   312  0002B6                     _eserial_setup:
   313                           	opt stack 26
   314                           
   315                           ;incstack = 0
   316                           ;eserial_setup@baudrate_bits stored from wreg
   317  0002B6  0100               	movlb	0	; () banked
   318  0002B8  6F60               	movwf	eserial_setup@baudrate_bits& (0+255),b
   319                           
   320                           ; BSR set to: 0
   321                           ;extended_serial.c: 22: ANSELbits.ANS5 = 0;
   322  0002BA  9A7E               	bcf	3966,5,c	;volatile
   323                           
   324                           ;extended_serial.c: 23: ANSELHbits.ANS11 = 0;
   325  0002BC  967F               	bcf	3967,3,c	;volatile
   326                           
   327                           ;extended_serial.c: 25: TRISCbits.RC0 = 0;
   328  0002BE  9094               	bcf	3988,0,c	;volatile
   329                           
   330                           ;extended_serial.c: 26: TRISCbits.RC1 = 1;
   331  0002C0  8294               	bsf	3988,1,c	;volatile
   332                           
   333                           ; BSR set to: 0
   334                           ;extended_serial.c: 28: setup_simple_serial(baudrate_bits, baudrate_value);
   335  0002C2  C047  F040         	movff	eserial_setup@baudrate_value,setup_simple_serial@baudrate_value
   336  0002C6  C048  F041         	movff	eserial_setup@baudrate_value+1,setup_simple_serial@baudrate_value+1
   337  0002CA  0100               	movlb	0	; () banked
   338  0002CC  5160               	movf	eserial_setup@baudrate_bits& (0+255),w,b
   339  0002CE  ECEB  F000         	call	_setup_simple_serial
   340                           
   341                           ;extended_serial.c: 29: serial_interrupts(0x01);
   342  0002D2  0E01               	movlw	1
   343  0002D4  EC45  F001         	call	_serial_interrupts
   344                           
   345                           ;extended_serial.c: 31: LATCbits.LATC0 = 0;
   346  0002D8  908B               	bcf	3979,0,c	;volatile
   347  0002DA  0012               	return		;funcret
   348  0002DC                     __end_of_eserial_setup:
   349                           	opt stack 0
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           
   353 ;; *************** function _setup_simple_serial *****************
   354 ;; Defined at:
   355 ;;		line 28 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;  baudrate_bit    1    wreg     unsigned char 
   358 ;;  baudrate_val    2   23[COMRAM] unsigned int 
   359 ;; Auto vars:     Size  Location     Type
   360 ;;  baudrate_bit    1   29[COMRAM] unsigned char 
   361 ;; Return value:  Size  Location     Type
   362 ;;		None               void
   363 ;; Registers used:
   364 ;;		wreg, status,2
   365 ;; Tracked objects:
   366 ;;		On entry : 0/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMRAM   BANK0
   370 ;;      Params:         2       0
   371 ;;      Locals:         5       0
   372 ;;      Temps:          0       0
   373 ;;      Totals:         7       0
   374 ;;Total ram usage:        7 bytes
   375 ;; Hardware stack levels used:    1
   376 ;; Hardware stack levels required when called:    3
   377 ;; This function calls:
   378 ;;		Nothing
   379 ;; This function is called by:
   380 ;;		_eserial_setup
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384                           	psect	text2
   385  0001D6                     __ptext2:
   386                           	opt stack 0
   387  0001D6                     _setup_simple_serial:
   388                           	opt stack 26
   389                           
   390                           ;incstack = 0
   391                           ;setup_simple_serial@baudrate_bits stored from wreg
   392  0001D6  6E46               	movwf	setup_simple_serial@baudrate_bits,c
   393                           
   394                           ;serial_pic.c: 30: ANSELHbits.ANS11 = 0;
   395  0001D8  967F               	bcf	3967,3,c	;volatile
   396                           
   397                           ;serial_pic.c: 31: TXSTA = (baudrate_bits & 0x04) ? 0x24: 0x20;
   398  0001DA  B446               	btfsc	setup_simple_serial@baudrate_bits,2,c
   399  0001DC  D004               	goto	l1173
   400  0001DE  0E00               	movlw	0
   401  0001E0  6E43               	movwf	_setup_simple_serial$172+1,c
   402  0001E2  0E20               	movlw	32
   403  0001E4  D003               	goto	L1
   404  0001E6                     l1173:
   405  0001E6  0E00               	movlw	0
   406  0001E8  6E43               	movwf	_setup_simple_serial$172+1,c
   407  0001EA  0E24               	movlw	36
   408  0001EC                     L1:
   409  0001EC  6E42               	movwf	_setup_simple_serial$172,c
   410  0001EE  D000               	goto	l1175
   411  0001F0                     l1175:
   412  0001F0  C042  FFAC         	movff	_setup_simple_serial$172,4012	;volatile
   413                           
   414                           ;serial_pic.c: 32: RCSTA = 0x90;
   415  0001F4  0E90               	movlw	144
   416  0001F6  6EAB               	movwf	4011,c	;volatile
   417                           
   418                           ;serial_pic.c: 33: BAUDCON = (baudrate_bits & 0x08) ? 0x08 : 0x00;
   419  0001F8  B646               	btfsc	setup_simple_serial@baudrate_bits,3,c
   420  0001FA  D004               	goto	l1181
   421  0001FC  0E00               	movlw	0
   422  0001FE  6E45               	movwf	_setup_simple_serial$173+1,c
   423  000200  0E00               	movlw	0
   424  000202  D003               	goto	L2
   425  000204                     l1181:
   426  000204  0E00               	movlw	0
   427  000206  6E45               	movwf	_setup_simple_serial$173+1,c
   428  000208  0E08               	movlw	8
   429  00020A                     L2:
   430  00020A  6E44               	movwf	_setup_simple_serial$173,c
   431  00020C  D000               	goto	l1183
   432  00020E                     l1183:
   433  00020E  C044  FFB8         	movff	_setup_simple_serial$173,4024	;volatile
   434                           
   435                           ;serial_pic.c: 35: SPBRGH = baudrate_value >> 8;
   436  000212  5041               	movf	setup_simple_serial@baudrate_value+1,w,c
   437  000214  6EB0               	movwf	4016,c	;volatile
   438                           
   439                           ;serial_pic.c: 36: SPBRG = baudrate_value;
   440  000216  C040  FFAF         	movff	setup_simple_serial@baudrate_value,4015	;volatile
   441  00021A  0012               	return		;funcret
   442  00021C                     __end_of_setup_simple_serial:
   443                           	opt stack 0
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           
   447 ;; *************** function _serial_interrupts *****************
   448 ;; Defined at:
   449 ;;		line 98 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;  interrupts      1    wreg     unsigned char 
   452 ;; Auto vars:     Size  Location     Type
   453 ;;  interrupts      1   24[COMRAM] unsigned char 
   454 ;; Return value:  Size  Location     Type
   455 ;;		None               void
   456 ;; Registers used:
   457 ;;		wreg, status,2, status,0
   458 ;; Tracked objects:
   459 ;;		On entry : 0/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMRAM   BANK0
   463 ;;      Params:         0       0
   464 ;;      Locals:         1       0
   465 ;;      Temps:          1       0
   466 ;;      Totals:         2       0
   467 ;;Total ram usage:        2 bytes
   468 ;; Hardware stack levels used:    1
   469 ;; Hardware stack levels required when called:    3
   470 ;; This function calls:
   471 ;;		Nothing
   472 ;; This function is called by:
   473 ;;		_eserial_setup
   474 ;; This function uses a non-reentrant model
   475 ;;
   476                           
   477                           	psect	text3
   478  00028A                     __ptext3:
   479                           	opt stack 0
   480  00028A                     _serial_interrupts:
   481                           	opt stack 26
   482                           
   483                           ;incstack = 0
   484                           ;serial_interrupts@interrupts stored from wreg
   485  00028A  6E41               	movwf	serial_interrupts@interrupts,c
   486                           
   487                           ;serial_pic.c: 100: if (interrupts & (0x01 | 0x02)) {
   488  00028C  C041  F040         	movff	serial_interrupts@interrupts,??_serial_interrupts
   489  000290  0E03               	movlw	3
   490  000292  1640               	andwf	??_serial_interrupts,f,c
   491  000294  B4D8               	btfsc	status,2,c
   492  000296  0012               	return	
   493                           
   494                           ;serial_pic.c: 101: INTCON |= 0xC0;
   495  000298  0EC0               	movlw	192
   496  00029A  12F2               	iorwf	intcon,f,c	;volatile
   497                           
   498                           ;serial_pic.c: 102: RCIE = (interrupts & 0x01) ? 1 : 0;
   499  00029C  A041               	btfss	serial_interrupts@interrupts,0,c
   500  00029E  D002               	goto	u600
   501  0002A0  8A9D               	bsf	3997,5,c	;volatile
   502  0002A2  D001               	goto	l1197
   503  0002A4                     u600:
   504  0002A4  9A9D               	bcf	3997,5,c	;volatile
   505  0002A6                     l1197:
   506                           
   507                           ;serial_pic.c: 103: interrupt_data.tx_int_enable = (interrupts & 0x02) ? 1 : 0;
   508  0002A6  A241               	btfss	serial_interrupts@interrupts,1,c
   509  0002A8  D002               	goto	u620
   510  0002AA  0E01               	movlw	1
   511  0002AC  D001               	goto	u630
   512  0002AE                     u620:
   513  0002AE  0E00               	movlw	0
   514  0002B0                     u630:
   515  0002B0  6E01               	movwf	_interrupt_data,c
   516  0002B2  0012               	return	
   517  0002B4  0012               	return		;funcret
   518  0002B6                     __end_of_serial_interrupts:
   519                           	opt stack 0
   520                           intcon	equ	0xFF2
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           status	equ	0xFD8
   524                           
   525 ;; *************** function _eserial_send_data *****************
   526 ;; Defined at:
   527 ;;		line 38 in file "extended_serial.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;  buffer          2   29[COMRAM] PTR volatile struct circ
   530 ;;		 -> my_buffer(34), 
   531 ;; Auto vars:     Size  Location     Type
   532 ;;  value           2    1[BANK0 ] int 
   533 ;;  i               1    0[BANK0 ] char 
   534 ;; Return value:  Size  Location     Type
   535 ;;                  1    wreg      char 
   536 ;; Registers used:
   537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   538 ;; Tracked objects:
   539 ;;		On entry : 0/0
   540 ;;		On exit  : 0/0
   541 ;;		Unchanged: 0/0
   542 ;; Data sizes:     COMRAM   BANK0
   543 ;;      Params:         2       0
   544 ;;      Locals:         0       3
   545 ;;      Temps:          0       0
   546 ;;      Totals:         2       3
   547 ;;Total ram usage:        5 bytes
   548 ;; Hardware stack levels used:    1
   549 ;; Hardware stack levels required when called:    4
   550 ;; This function calls:
   551 ;;		_buffer_empty
   552 ;;		_buffer_pop
   553 ;;		_serial_send_byte
   554 ;; This function is called by:
   555 ;;		_main
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           	psect	text4
   560  000172                     __ptext4:
   561                           	opt stack 0
   562  000172                     _eserial_send_data:
   563                           	opt stack 26
   564                           
   565                           ;extended_serial.c: 43: int8_t i = 0;
   566                           
   567                           ;incstack = 0
   568  000172  0E00               	movlw	0
   569  000174  0100               	movlb	0	; () banked
   570  000176  6F60               	movwf	eserial_send_data@i& (0+255),b
   571                           
   572                           ; BSR set to: 0
   573                           ;extended_serial.c: 44: int16_t value = buffer_pop(buffer);
   574  000178  C046  F040         	movff	eserial_send_data@buffer,buffer_pop@buffer
   575  00017C  C047  F041         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
   576  000180  EC49  F000         	call	_buffer_pop	;wreg free
   577  000184  C040  F061         	movff	?_buffer_pop,eserial_send_data@value
   578  000188  C041  F062         	movff	?_buffer_pop+1,eserial_send_data@value+1
   579                           
   580                           ;extended_serial.c: 45: while (value != -1) {
   581  00018C  D011               	goto	l1235
   582  00018E                     l1229:
   583                           
   584                           ;extended_serial.c: 46: serial_send_byte((uint8_t)value);
   585  00018E  0100               	movlb	0	; () banked
   586  000190  5161               	movf	eserial_send_data@value& (0+255),w,b
   587  000192  EC99  F001         	call	_serial_send_byte
   588                           
   589                           ;extended_serial.c: 47: value = buffer_pop(buffer);
   590  000196  C046  F040         	movff	eserial_send_data@buffer,buffer_pop@buffer
   591  00019A  C047  F041         	movff	eserial_send_data@buffer+1,buffer_pop@buffer+1
   592  00019E  EC49  F000         	call	_buffer_pop	;wreg free
   593  0001A2  C040  F061         	movff	?_buffer_pop,eserial_send_data@value
   594  0001A6  C041  F062         	movff	?_buffer_pop+1,eserial_send_data@value+1
   595                           
   596                           ;extended_serial.c: 48: i++;
   597  0001AA  0100               	movlb	0	; () banked
   598  0001AC  2B60               	incf	eserial_send_data@i& (0+255),f,b
   599  0001AE  D000               	goto	l1235
   600  0001B0                     l1235:
   601  0001B0  0100               	movlb	0	; () banked
   602  0001B2  2961               	incf	eserial_send_data@value& (0+255),w,b
   603  0001B4  E1EC               	bnz	l1229
   604  0001B6  0100               	movlb	0	; () banked
   605  0001B8  2962               	incf	(eserial_send_data@value+1)& (0+255),w,b
   606  0001BA  A4D8               	btfss	status,2,c
   607  0001BC  D7E8               	goto	l1229
   608                           
   609                           ; BSR set to: 0
   610                           ;extended_serial.c: 49: }
   611                           ;extended_serial.c: 51: if (buffer_empty(buffer))
   612                           
   613                           ; BSR set to: 0
   614  0001BE  C046  F040         	movff	eserial_send_data@buffer,buffer_empty@buffer
   615  0001C2  C047  F041         	movff	eserial_send_data@buffer+1,buffer_empty@buffer+1
   616  0001C6  EC6E  F001         	call	_buffer_empty	;wreg free
   617  0001CA  0900               	iorlw	0
   618  0001CC  B4D8               	btfsc	status,2,c
   619  0001CE  0012               	return	
   620                           
   621                           ;extended_serial.c: 52: LATCbits.LATC0 = 0;
   622  0001D0  908B               	bcf	3979,0,c	;volatile
   623  0001D2  0012               	return	
   624                           
   625                           ;extended_serial.c: 54: return i;
   626                           ;	Return value of _eserial_send_data is never used
   627  0001D4  0012               	return		;funcret
   628  0001D6                     __end_of_eserial_send_data:
   629                           	opt stack 0
   630                           intcon	equ	0xFF2
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           status	equ	0xFD8
   634                           
   635 ;; *************** function _serial_send_byte *****************
   636 ;; Defined at:
   637 ;;		line 76 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;  byte            1    wreg     unsigned char 
   640 ;; Auto vars:     Size  Location     Type
   641 ;;  byte            1   23[COMRAM] unsigned char 
   642 ;; Return value:  Size  Location     Type
   643 ;;		None               void
   644 ;; Registers used:
   645 ;;		wreg
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0
   651 ;;      Params:         0       0
   652 ;;      Locals:         1       0
   653 ;;      Temps:          0       0
   654 ;;      Totals:         1       0
   655 ;;Total ram usage:        1 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; Hardware stack levels required when called:    3
   658 ;; This function calls:
   659 ;;		Nothing
   660 ;; This function is called by:
   661 ;;		_eserial_send_data
   662 ;;		_serial_send_data
   663 ;;		_serial_send_buffer
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           	psect	text5
   668  000332                     __ptext5:
   669                           	opt stack 0
   670  000332                     _serial_send_byte:
   671                           	opt stack 26
   672                           
   673                           ;incstack = 0
   674                           ;serial_send_byte@byte stored from wreg
   675  000332  6E40               	movwf	serial_send_byte@byte,c
   676                           
   677                           ;serial_pic.c: 78: while (!TXIF);
   678  000334  D000               	goto	l96
   679  000336                     l96:
   680  000336  A89E               	btfss	3998,4,c	;volatile
   681  000338  D7FE               	goto	l96
   682                           
   683                           ;serial_pic.c: 79: TXREG = byte;
   684  00033A  C040  FFAD         	movff	serial_send_byte@byte,4013	;volatile
   685  00033E  0012               	return		;funcret
   686  000340                     __end_of_serial_send_byte:
   687                           	opt stack 0
   688                           intcon	equ	0xFF2
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           status	equ	0xFD8
   692                           
   693 ;; *************** function _buffer_pop *****************
   694 ;; Defined at:
   695 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  buffer          2   23[COMRAM] PTR volatile struct circ
   698 ;;		 -> my_buffer(34), 
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  byte            2   27[COMRAM] int 
   701 ;; Return value:  Size  Location     Type
   702 ;;                  2   23[COMRAM] int 
   703 ;; Registers used:
   704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMRAM   BANK0
   710 ;;      Params:         2       0
   711 ;;      Locals:         2       0
   712 ;;      Temps:          2       0
   713 ;;      Totals:         6       0
   714 ;;Total ram usage:        6 bytes
   715 ;; Hardware stack levels used:    1
   716 ;; Hardware stack levels required when called:    3
   717 ;; This function calls:
   718 ;;		Nothing
   719 ;; This function is called by:
   720 ;;		_eserial_send_data
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text6
   725  000092                     __ptext6:
   726                           	opt stack 0
   727  000092                     _buffer_pop:
   728                           	opt stack 26
   729                           
   730                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
   731                           
   732                           ;incstack = 0
   733  000092  EE20 F001          	lfsr	2,1
   734  000096  5040               	movf	buffer_pop@buffer,w,c
   735  000098  26D9               	addwf	fsr2l,f,c
   736  00009A  5041               	movf	buffer_pop@buffer+1,w,c
   737  00009C  22DA               	addwfc	fsr2h,f,c
   738  00009E  50DF               	movf	indf2,w,c
   739  0000A0  A4D8               	btfss	status,2,c
   740  0000A2  D003               	goto	l1203
   741                           
   742                           ;circular_buffer.c: 40: return -1;
   743  0000A4  6840               	setf	?_buffer_pop,c
   744  0000A6  6841               	setf	?_buffer_pop+1,c
   745  0000A8  0012               	return	
   746  0000AA                     l1203:
   747                           
   748                           ;circular_buffer.c: 41: }
   749                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
   750  0000AA  C040  FFD9         	movff	buffer_pop@buffer,fsr2l
   751  0000AE  C041  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   752  0000B2  50DF               	movf	indf2,w,c
   753  0000B4  6E42               	movwf	??_buffer_pop& (0+255),c
   754  0000B6  5042               	movf	??_buffer_pop,w,c
   755  0000B8  0D01               	mullw	1
   756  0000BA  0E02               	movlw	2
   757  0000BC  26F3               	addwf	prodl,f,c
   758  0000BE  0E00               	movlw	0
   759  0000C0  22F4               	addwfc	prodh,f,c
   760  0000C2  50F3               	movf	prodl,w,c
   761  0000C4  2440               	addwf	buffer_pop@buffer,w,c
   762  0000C6  6ED9               	movwf	fsr2l,c
   763  0000C8  50F4               	movf	prodh,w,c
   764  0000CA  2041               	addwfc	buffer_pop@buffer+1,w,c
   765  0000CC  6EDA               	movwf	fsr2h,c
   766  0000CE  50DF               	movf	indf2,w,c
   767  0000D0  6E43               	movwf	(??_buffer_pop+1)& (0+255),c
   768  0000D2  5043               	movf	??_buffer_pop+1,w,c
   769  0000D4  6E44               	movwf	buffer_pop@byte,c
   770  0000D6  6A45               	clrf	buffer_pop@byte+1,c
   771                           
   772                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
   773  0000D8  C040  FFD9         	movff	buffer_pop@buffer,fsr2l
   774  0000DC  C041  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   775  0000E0  50DF               	movf	indf2,w,c
   776  0000E2  6E42               	movwf	??_buffer_pop& (0+255),c
   777  0000E4  2842               	incf	??_buffer_pop,w,c
   778  0000E6  0B1F               	andlw	31
   779  0000E8  C040  FFD9         	movff	buffer_pop@buffer,fsr2l
   780  0000EC  C041  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   781  0000F0  6EDF               	movwf	indf2,c
   782                           
   783                           ;circular_buffer.c: 45: buffer->count--;
   784  0000F2  EE20 F001          	lfsr	2,1
   785  0000F6  5040               	movf	buffer_pop@buffer,w,c
   786  0000F8  26D9               	addwf	fsr2l,f,c
   787  0000FA  5041               	movf	buffer_pop@buffer+1,w,c
   788  0000FC  22DA               	addwfc	fsr2h,f,c
   789  0000FE  06DF               	decf	indf2,f,c
   790                           
   791                           ;circular_buffer.c: 47: return byte;
   792  000100  C044  F040         	movff	buffer_pop@byte,?_buffer_pop
   793  000104  C045  F041         	movff	buffer_pop@byte+1,?_buffer_pop+1
   794  000108  0012               	return	
   795  00010A  0012               	return		;funcret
   796  00010C                     __end_of_buffer_pop:
   797                           	opt stack 0
   798                           prodh	equ	0xFF4
   799                           prodl	equ	0xFF3
   800                           intcon	equ	0xFF2
   801                           postinc0	equ	0xFEE
   802                           wreg	equ	0xFE8
   803                           indf2	equ	0xFDF
   804                           fsr2h	equ	0xFDA
   805                           fsr2l	equ	0xFD9
   806                           status	equ	0xFD8
   807                           
   808 ;; *************** function _buffer_empty *****************
   809 ;; Defined at:
   810 ;;		line 14 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  buffer          2   23[COMRAM] PTR  struct circular_buf
   813 ;;		 -> my_buffer(34), 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      unsigned char 
   818 ;; Registers used:
   819 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0
   825 ;;      Params:         2       0
   826 ;;      Locals:         0       0
   827 ;;      Temps:          0       0
   828 ;;      Totals:         2       0
   829 ;;Total ram usage:        2 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    3
   832 ;; This function calls:
   833 ;;		Nothing
   834 ;; This function is called by:
   835 ;;		_eserial_send_data
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text7
   840  0002DC                     __ptext7:
   841                           	opt stack 0
   842  0002DC                     _buffer_empty:
   843                           	opt stack 26
   844                           
   845                           ;circular_buffer.c: 16: return (buffer->count == 0) ? 1 : 0;
   846                           
   847                           ;incstack = 0
   848  0002DC  EE20 F001          	lfsr	2,1
   849  0002E0  5040               	movf	buffer_empty@buffer,w,c
   850  0002E2  26D9               	addwf	fsr2l,f,c
   851  0002E4  5041               	movf	buffer_empty@buffer+1,w,c
   852  0002E6  22DA               	addwfc	fsr2h,f,c
   853  0002E8  50DF               	movf	indf2,w,c
   854  0002EA  A4D8               	btfss	status,2,c
   855  0002EC  D002               	goto	u650
   856  0002EE  0E01               	movlw	1
   857  0002F0  0012               	return	
   858  0002F2                     u650:
   859  0002F2  0E00               	movlw	0
   860  0002F4  0012               	return	
   861  0002F6  0012               	return		;funcret
   862  0002F8                     __end_of_buffer_empty:
   863                           	opt stack 0
   864                           prodh	equ	0xFF4
   865                           prodl	equ	0xFF3
   866                           intcon	equ	0xFF2
   867                           postinc0	equ	0xFEE
   868                           wreg	equ	0xFE8
   869                           indf2	equ	0xFDF
   870                           fsr2h	equ	0xFDA
   871                           fsr2l	equ	0xFD9
   872                           status	equ	0xFD8
   873                           
   874 ;; *************** function _buffer_count *****************
   875 ;; Defined at:
   876 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   877 ;; Parameters:    Size  Location     Type
   878 ;;  buffer          2   23[COMRAM] PTR  struct circular_buf
   879 ;;		 -> my_buffer(34), 
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      unsigned char 
   884 ;; Registers used:
   885 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0
   891 ;;      Params:         2       0
   892 ;;      Locals:         0       0
   893 ;;      Temps:          0       0
   894 ;;      Totals:         2       0
   895 ;;Total ram usage:        2 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; Hardware stack levels required when called:    3
   898 ;; This function calls:
   899 ;;		Nothing
   900 ;; This function is called by:
   901 ;;		_main
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text8
   906  000320                     __ptext8:
   907                           	opt stack 0
   908  000320                     _buffer_count:
   909                           	opt stack 27
   910                           
   911                           ;circular_buffer.c: 6: return buffer->count;
   912                           
   913                           ;incstack = 0
   914  000320  EE20 F001          	lfsr	2,1
   915  000324  5040               	movf	buffer_count@buffer,w,c
   916  000326  26D9               	addwf	fsr2l,f,c
   917  000328  5041               	movf	buffer_count@buffer+1,w,c
   918  00032A  22DA               	addwfc	fsr2h,f,c
   919  00032C  50DF               	movf	indf2,w,c
   920  00032E  0012               	return	
   921  000330  0012               	return		;funcret
   922  000332                     __end_of_buffer_count:
   923                           	opt stack 0
   924                           prodh	equ	0xFF4
   925                           prodl	equ	0xFF3
   926                           intcon	equ	0xFF2
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           indf2	equ	0xFDF
   930                           fsr2h	equ	0xFDA
   931                           fsr2l	equ	0xFD9
   932                           status	equ	0xFD8
   933                           
   934 ;; *************** function _isr *****************
   935 ;; Defined at:
   936 ;;		line 35 in file "main.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;		None
   939 ;; Auto vars:     Size  Location     Type
   940 ;;		None
   941 ;; Return value:  Size  Location     Type
   942 ;;		None               void
   943 ;; Registers used:
   944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMRAM   BANK0
   950 ;;      Params:         0       0
   951 ;;      Locals:         0       0
   952 ;;      Temps:         14       0
   953 ;;      Totals:        14       0
   954 ;;Total ram usage:       14 bytes
   955 ;; Hardware stack levels used:    1
   956 ;; Hardware stack levels required when called:    2
   957 ;; This function calls:
   958 ;;		_eserial_receive
   959 ;; This function is called by:
   960 ;;		Interrupt level 2
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           	psect	intcode
   965  000008                     __pintcode:
   966                           	opt stack 0
   967  000008                     _isr:
   968                           	opt stack 26
   969                           
   970                           ;incstack = 0
   971  000008  CFFA F032          	movff	pclath,??_isr
   972  00000C  CFFB F033          	movff	pclatu,??_isr+1
   973  000010  CFE9 F034          	movff	fsr0l,??_isr+2
   974  000014  CFEA F035          	movff	fsr0h,??_isr+3
   975  000018  CFE1 F036          	movff	fsr1l,??_isr+4
   976  00001C  CFE2 F037          	movff	fsr1h,??_isr+5
   977  000020  CFD9 F038          	movff	fsr2l,??_isr+6
   978  000024  CFDA F039          	movff	fsr2h,??_isr+7
   979  000028  CFF3 F03A          	movff	prodl,??_isr+8
   980  00002C  CFF4 F03B          	movff	prodh,??_isr+9
   981  000030  CFF6 F03C          	movff	tblptrl,??_isr+10
   982  000034  CFF7 F03D          	movff	tblptrh,??_isr+11
   983  000038  CFF8 F03E          	movff	tblptru,??_isr+12
   984  00003C  CFF5 F03F          	movff	tablat,??_isr+13
   985                           
   986                           ;main.c: 37: if (RCIF && RCIE) {
   987  000040  BA9E               	btfsc	3998,5,c	;volatile
   988  000042  AA9D               	btfss	3997,5,c	;volatile
   989  000044  D007               	goto	i2l25
   990                           
   991                           ;main.c: 38: eserial_receive(&my_buffer);
   992  000046  0E07               	movlw	low _my_buffer
   993  000048  6E2E               	movwf	eserial_receive@buffer,c
   994  00004A  0E00               	movlw	high _my_buffer
   995  00004C  6E2F               	movwf	eserial_receive@buffer+1,c
   996  00004E  EC2B  F001         	call	_eserial_receive	;wreg free
   997  000052  D000               	goto	i2l25
   998  000054                     i2l25:
   999  000054  C03F  FFF5         	movff	??_isr+13,tablat
  1000  000058  C03E  FFF8         	movff	??_isr+12,tblptru
  1001  00005C  C03D  FFF7         	movff	??_isr+11,tblptrh
  1002  000060  C03C  FFF6         	movff	??_isr+10,tblptrl
  1003  000064  C03B  FFF4         	movff	??_isr+9,prodh
  1004  000068  C03A  FFF3         	movff	??_isr+8,prodl
  1005  00006C  C039  FFDA         	movff	??_isr+7,fsr2h
  1006  000070  C038  FFD9         	movff	??_isr+6,fsr2l
  1007  000074  C037  FFE2         	movff	??_isr+5,fsr1h
  1008  000078  C036  FFE1         	movff	??_isr+4,fsr1l
  1009  00007C  C035  FFEA         	movff	??_isr+3,fsr0h
  1010  000080  C034  FFE9         	movff	??_isr+2,fsr0l
  1011  000084  C033  FFFB         	movff	??_isr+1,pclatu
  1012  000088  C032  FFFA         	movff	??_isr,pclath
  1013  00008C  0011               	retfie		f
  1014  00008E                     __end_of_isr:
  1015                           	opt stack 0
  1016                           pclatu	equ	0xFFB
  1017                           pclath	equ	0xFFA
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           prodh	equ	0xFF4
  1023                           prodl	equ	0xFF3
  1024                           intcon	equ	0xFF2
  1025                           postinc0	equ	0xFEE
  1026                           fsr0h	equ	0xFEA
  1027                           fsr0l	equ	0xFE9
  1028                           wreg	equ	0xFE8
  1029                           fsr1h	equ	0xFE2
  1030                           fsr1l	equ	0xFE1
  1031                           indf2	equ	0xFDF
  1032                           fsr2h	equ	0xFDA
  1033                           fsr2l	equ	0xFD9
  1034                           status	equ	0xFD8
  1035                           
  1036 ;; *************** function _eserial_receive *****************
  1037 ;; Defined at:
  1038 ;;		line 57 in file "extended_serial.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  buffer          2    5[COMRAM] PTR volatile struct circ
  1041 ;;		 -> my_buffer(34), 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  value           1    8[COMRAM] unsigned char 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;		None               void
  1046 ;; Registers used:
  1047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMRAM   BANK0
  1053 ;;      Params:         2       0
  1054 ;;      Locals:         1       0
  1055 ;;      Temps:          1       0
  1056 ;;      Totals:         4       0
  1057 ;;Total ram usage:        4 bytes
  1058 ;; Hardware stack levels used:    1
  1059 ;; Hardware stack levels required when called:    1
  1060 ;; This function calls:
  1061 ;;		_buffer_push
  1062 ;;		_buffer_space
  1063 ;;		_serial_get_byte
  1064 ;; This function is called by:
  1065 ;;		_isr
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069                           	psect	text10
  1070  000256                     __ptext10:
  1071                           	opt stack 0
  1072  000256                     _eserial_receive:
  1073                           	opt stack 26
  1074                           
  1075                           ;extended_serial.c: 75: if (buffer_space(buffer) <= 0x05)
  1076                           
  1077                           ;incstack = 0
  1078  000256  C02E  F029         	movff	eserial_receive@buffer,buffer_space@buffer
  1079  00025A  C02F  F02A         	movff	eserial_receive@buffer+1,buffer_space@buffer+1
  1080  00025E  EC7C  F001         	call	_buffer_space	;wreg free
  1081  000262  6E30               	movwf	??_eserial_receive& (0+255),c
  1082  000264  0E06               	movlw	6
  1083  000266  6030               	cpfslt	??_eserial_receive,c
  1084  000268  D002               	goto	i2l190
  1085                           
  1086                           ;extended_serial.c: 76: LATCbits.LATC0 = 1;
  1087  00026A  808B               	bsf	3979,0,c	;volatile
  1088  00026C  D002               	goto	i2l1151
  1089  00026E                     i2l190:
  1090                           
  1091                           ;extended_serial.c: 77: else
  1092                           ;extended_serial.c: 78: LATCbits.LATC0 = 0;
  1093  00026E  908B               	bcf	3979,0,c	;volatile
  1094  000270  D000               	goto	i2l1151
  1095  000272                     i2l1151:
  1096                           
  1097                           ;extended_serial.c: 80: uint8_t value = serial_get_byte();
  1098  000272  ECA0  F001         	call	_serial_get_byte	;wreg free
  1099  000276  6E31               	movwf	eserial_receive@value,c
  1100                           
  1101                           ;extended_serial.c: 81: buffer_push(buffer, value);
  1102  000278  C02E  F029         	movff	eserial_receive@buffer,buffer_push@buffer
  1103  00027C  C02F  F02A         	movff	eserial_receive@buffer+1,buffer_push@buffer+1
  1104  000280  C031  F02B         	movff	eserial_receive@value,buffer_push@byte
  1105  000284  EC86  F000         	call	_buffer_push	;wreg free
  1106  000288  0012               	return		;funcret
  1107  00028A                     __end_of_eserial_receive:
  1108                           	opt stack 0
  1109                           pclatu	equ	0xFFB
  1110                           pclath	equ	0xFFA
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           prodh	equ	0xFF4
  1116                           prodl	equ	0xFF3
  1117                           intcon	equ	0xFF2
  1118                           postinc0	equ	0xFEE
  1119                           fsr0h	equ	0xFEA
  1120                           fsr0l	equ	0xFE9
  1121                           wreg	equ	0xFE8
  1122                           fsr1h	equ	0xFE2
  1123                           fsr1l	equ	0xFE1
  1124                           indf2	equ	0xFDF
  1125                           fsr2h	equ	0xFDA
  1126                           fsr2l	equ	0xFD9
  1127                           status	equ	0xFD8
  1128                           
  1129 ;; *************** function _serial_get_byte *****************
  1130 ;; Defined at:
  1131 ;;		line 53 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/serial_pic.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;		None
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;		None
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      unsigned char 
  1138 ;; Registers used:
  1139 ;;		wreg, status,2
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMRAM   BANK0
  1145 ;;      Params:         0       0
  1146 ;;      Locals:         0       0
  1147 ;;      Temps:          0       0
  1148 ;;      Totals:         0       0
  1149 ;;Total ram usage:        0 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; This function calls:
  1152 ;;		Nothing
  1153 ;; This function is called by:
  1154 ;;		_eserial_receive
  1155 ;;		_serial_get_data
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text11
  1160  000340                     __ptext11:
  1161                           	opt stack 0
  1162  000340                     _serial_get_byte:
  1163                           	opt stack 26
  1164                           
  1165                           ;serial_pic.c: 55: while (!RCIF);
  1166                           
  1167                           ;incstack = 0
  1168  000340  D000               	goto	i2l79
  1169  000342                     i2l79:
  1170  000342  AA9E               	btfss	3998,5,c	;volatile
  1171  000344  D7FE               	goto	i2l79
  1172                           
  1173                           ;serial_pic.c: 57: return RCREG;
  1174  000346  50AE               	movf	4014,w,c	;volatile
  1175  000348  0012               	return	
  1176  00034A  0012               	return		;funcret
  1177  00034C                     __end_of_serial_get_byte:
  1178                           	opt stack 0
  1179                           pclatu	equ	0xFFB
  1180                           pclath	equ	0xFFA
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           prodh	equ	0xFF4
  1186                           prodl	equ	0xFF3
  1187                           intcon	equ	0xFF2
  1188                           postinc0	equ	0xFEE
  1189                           fsr0h	equ	0xFEA
  1190                           fsr0l	equ	0xFE9
  1191                           wreg	equ	0xFE8
  1192                           fsr1h	equ	0xFE2
  1193                           fsr1l	equ	0xFE1
  1194                           indf2	equ	0xFDF
  1195                           fsr2h	equ	0xFDA
  1196                           fsr2l	equ	0xFD9
  1197                           status	equ	0xFD8
  1198                           
  1199 ;; *************** function _buffer_space *****************
  1200 ;; Defined at:
  1201 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;  buffer          2    0[COMRAM] PTR  struct circular_buf
  1204 ;;		 -> my_buffer(34), 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;		None
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      unsigned char 
  1209 ;; Registers used:
  1210 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0
  1216 ;;      Params:         2       0
  1217 ;;      Locals:         0       0
  1218 ;;      Temps:          0       0
  1219 ;;      Totals:         2       0
  1220 ;;Total ram usage:        2 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; This function calls:
  1223 ;;		Nothing
  1224 ;; This function is called by:
  1225 ;;		_eserial_receive
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text12
  1230  0002F8                     __ptext12:
  1231                           	opt stack 0
  1232  0002F8                     _buffer_space:
  1233                           	opt stack 26
  1234                           
  1235                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  1236                           
  1237                           ;incstack = 0
  1238  0002F8  EE20 F001          	lfsr	2,1
  1239  0002FC  5029               	movf	buffer_space@buffer,w,c
  1240  0002FE  26D9               	addwf	fsr2l,f,c
  1241  000300  502A               	movf	buffer_space@buffer+1,w,c
  1242  000302  22DA               	addwfc	fsr2h,f,c
  1243  000304  50DF               	movf	indf2,w,c
  1244  000306  0800               	sublw	0
  1245  000308  0F20               	addlw	32
  1246  00030A  0012               	return	
  1247  00030C  0012               	return		;funcret
  1248  00030E                     __end_of_buffer_space:
  1249                           	opt stack 0
  1250                           pclatu	equ	0xFFB
  1251                           pclath	equ	0xFFA
  1252                           tblptru	equ	0xFF8
  1253                           tblptrh	equ	0xFF7
  1254                           tblptrl	equ	0xFF6
  1255                           tablat	equ	0xFF5
  1256                           prodh	equ	0xFF4
  1257                           prodl	equ	0xFF3
  1258                           intcon	equ	0xFF2
  1259                           postinc0	equ	0xFEE
  1260                           fsr0h	equ	0xFEA
  1261                           fsr0l	equ	0xFE9
  1262                           wreg	equ	0xFE8
  1263                           fsr1h	equ	0xFE2
  1264                           fsr1l	equ	0xFE1
  1265                           indf2	equ	0xFDF
  1266                           fsr2h	equ	0xFDA
  1267                           fsr2l	equ	0xFD9
  1268                           status	equ	0xFD8
  1269                           
  1270 ;; *************** function _buffer_push *****************
  1271 ;; Defined at:
  1272 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;  buffer          2    0[COMRAM] PTR volatile struct circ
  1275 ;;		 -> my_buffer(34), 
  1276 ;;  byte            1    2[COMRAM] unsigned char 
  1277 ;; Auto vars:     Size  Location     Type
  1278 ;;  current_posi    1    4[COMRAM] unsigned char 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  1    wreg      unsigned char 
  1281 ;; Registers used:
  1282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMRAM   BANK0
  1288 ;;      Params:         3       0
  1289 ;;      Locals:         1       0
  1290 ;;      Temps:          1       0
  1291 ;;      Totals:         5       0
  1292 ;;Total ram usage:        5 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; This function calls:
  1295 ;;		Nothing
  1296 ;; This function is called by:
  1297 ;;		_eserial_receive
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text13
  1302  00010C                     __ptext13:
  1303                           	opt stack 0
  1304  00010C                     _buffer_push:
  1305                           	opt stack 26
  1306                           
  1307                           ;circular_buffer.c: 26: if (buffer->count == 0x20) {
  1308                           
  1309                           ;incstack = 0
  1310  00010C  EE20 F001          	lfsr	2,1
  1311  000110  5029               	movf	buffer_push@buffer,w,c
  1312  000112  26D9               	addwf	fsr2l,f,c
  1313  000114  502A               	movf	buffer_push@buffer+1,w,c
  1314  000116  22DA               	addwfc	fsr2h,f,c
  1315  000118  0E20               	movlw	32
  1316  00011A  18DE               	xorwf	postinc2,w,c
  1317  00011C  B4D8               	btfsc	status,2,c
  1318  00011E  0012               	return	
  1319  000120  D001               	goto	i2l1111
  1320                           
  1321                           ;circular_buffer.c: 28: } else {
  1322                           
  1323                           ;circular_buffer.c: 27: return 0;
  1324                           ;	Return value of _buffer_push is never used
  1325  000122  0012               	return	
  1326  000124                     i2l1111:
  1327                           
  1328                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  1329                           ;circular_buffer.c: 30: & (0x20 - 1);
  1330  000124  EE20 F001          	lfsr	2,1
  1331  000128  5029               	movf	buffer_push@buffer,w,c
  1332  00012A  26D9               	addwf	fsr2l,f,c
  1333  00012C  502A               	movf	buffer_push@buffer+1,w,c
  1334  00012E  22DA               	addwfc	fsr2h,f,c
  1335  000130  50DF               	movf	indf2,w,c
  1336  000132  6E2C               	movwf	??_buffer_push& (0+255),c
  1337  000134  C029  FFD9         	movff	buffer_push@buffer,fsr2l
  1338  000138  C02A  FFDA         	movff	buffer_push@buffer+1,fsr2h
  1339  00013C  50DF               	movf	indf2,w,c
  1340  00013E  242C               	addwf	??_buffer_push,w,c
  1341  000140  0B1F               	andlw	31
  1342  000142  6E2D               	movwf	buffer_push@current_position,c
  1343                           
  1344                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  1345  000144  502D               	movf	buffer_push@current_position,w,c
  1346  000146  0D01               	mullw	1
  1347  000148  0E02               	movlw	2
  1348  00014A  26F3               	addwf	prodl,f,c
  1349  00014C  0E00               	movlw	0
  1350  00014E  22F4               	addwfc	prodh,f,c
  1351  000150  50F3               	movf	prodl,w,c
  1352  000152  2429               	addwf	buffer_push@buffer,w,c
  1353  000154  6ED9               	movwf	fsr2l,c
  1354  000156  50F4               	movf	prodh,w,c
  1355  000158  202A               	addwfc	buffer_push@buffer+1,w,c
  1356  00015A  6EDA               	movwf	fsr2h,c
  1357  00015C  C02B  FFDF         	movff	buffer_push@byte,indf2
  1358                           
  1359                           ;circular_buffer.c: 32: buffer->count++;
  1360  000160  EE20 F001          	lfsr	2,1
  1361  000164  5029               	movf	buffer_push@buffer,w,c
  1362  000166  26D9               	addwf	fsr2l,f,c
  1363  000168  502A               	movf	buffer_push@buffer+1,w,c
  1364  00016A  22DA               	addwfc	fsr2h,f,c
  1365  00016C  2ADF               	incf	indf2,f,c
  1366                           
  1367                           ;circular_buffer.c: 33: return 1;
  1368                           ;	Return value of _buffer_push is never used
  1369  00016E  0012               	return	
  1370  000170  0012               	return		;funcret
  1371  000172                     __end_of_buffer_push:
  1372                           	opt stack 0
  1373  0000                     pclatu	equ	0xFFB
  1374                           pclath	equ	0xFFA
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           prodh	equ	0xFF4
  1380                           prodl	equ	0xFF3
  1381                           intcon	equ	0xFF2
  1382                           postinc0	equ	0xFEE
  1383                           fsr0h	equ	0xFEA
  1384                           fsr0l	equ	0xFE9
  1385                           wreg	equ	0xFE8
  1386                           fsr1h	equ	0xFE2
  1387                           fsr1l	equ	0xFE1
  1388                           indf2	equ	0xFDF
  1389                           postinc2	equ	0xFDE
  1390                           fsr2h	equ	0xFDA
  1391                           fsr2l	equ	0xFD9
  1392                           status	equ	0xFD8
  1393                           pclatu	equ	0xFFB
  1394                           pclath	equ	0xFFA
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           prodh	equ	0xFF4
  1400                           prodl	equ	0xFF3
  1401                           intcon	equ	0xFF2
  1402                           postinc0	equ	0xFEE
  1403                           fsr0h	equ	0xFEA
  1404                           fsr0l	equ	0xFE9
  1405                           wreg	equ	0xFE8
  1406                           fsr1h	equ	0xFE2
  1407                           fsr1l	equ	0xFE1
  1408                           indf2	equ	0xFDF
  1409                           postinc2	equ	0xFDE
  1410                           fsr2h	equ	0xFDA
  1411                           fsr2l	equ	0xFD9
  1412                           status	equ	0xFD8
  1413                           
  1414                           	psect	rparam
  1415  0000                     pclatu	equ	0xFFB
  1416                           pclath	equ	0xFFA
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           prodh	equ	0xFF4
  1422                           prodl	equ	0xFF3
  1423                           intcon	equ	0xFF2
  1424                           postinc0	equ	0xFEE
  1425                           fsr0h	equ	0xFEA
  1426                           fsr0l	equ	0xFE9
  1427                           wreg	equ	0xFE8
  1428                           fsr1h	equ	0xFE2
  1429                           fsr1l	equ	0xFE1
  1430                           indf2	equ	0xFDF
  1431                           postinc2	equ	0xFDE
  1432                           fsr2h	equ	0xFDA
  1433                           fsr2l	equ	0xFD9
  1434                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      72
    BANK0           160      4       4

Pointer List with Targets:

    buffer_pop@buffer	PTR volatile struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    buffer_push@buffer	PTR volatile struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    buffer_empty@buffer	PTR  struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    buffer_space@buffer	PTR  struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    buffer_count@buffer	PTR  struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    eserial_receive@buffer	PTR volatile struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    eserial_send_data@buffer	PTR volatile struct circular_buffer size(2) Largest target is 34
		 -> my_buffer(COMRAM[34]), 

    S55interrupt_serial$data	PTR unsigned char  size(2) Largest target is 0

    interrupt_data.data	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_eserial_setup
    _eserial_setup->_setup_simple_serial
    _eserial_send_data->_buffer_pop

Critical Paths under _isr in COMRAM

    _isr->_eserial_receive
    _eserial_receive->_buffer_push

Critical Paths under _main in BANK0

    _main->_eserial_send_data

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1238
                                              3 BANK0      1     1      0
                       _buffer_count
                  _eserial_send_data
                      _eserial_setup
 ---------------------------------------------------------------------------------
 (1) _eserial_setup                                        3     1      2     456
                                             30 COMRAM     2     0      2
                                              0 BANK0      1     1      0
                  _serial_interrupts
                _setup_simple_serial
 ---------------------------------------------------------------------------------
 (2) _setup_simple_serial                                  7     5      2     263
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _serial_interrupts                                    2     2      0      66
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _eserial_send_data                                    5     3      2     707
                                             29 COMRAM     2     0      2
                                              0 BANK0      3     3      0
                       _buffer_empty
                         _buffer_pop
                   _serial_send_byte
 ---------------------------------------------------------------------------------
 (2) _serial_send_byte                                     1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     350
                                             23 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_empty                                         2     0      2      96
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buffer_count                                         2     0      2      75
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                 14    14      0     456
                                              9 COMRAM    14    14      0
                    _eserial_receive
 ---------------------------------------------------------------------------------
 (4) _eserial_receive                                      4     2      2     456
                                              5 COMRAM     4     2      2
                        _buffer_push
                       _buffer_space
                    _serial_get_byte
 ---------------------------------------------------------------------------------
 (5) _serial_get_byte                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _buffer_space                                         2     0      2      75
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _buffer_push                                          5     2      3     261
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buffer_count
   _eserial_send_data
     _buffer_empty
     _buffer_pop
     _serial_send_byte
   _eserial_setup
     _serial_interrupts
     _setup_simple_serial

 _isr (ROOT)
   _eserial_receive
     _buffer_push
     _buffer_space
     _serial_get_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      4       4       4        2.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      48       1       75.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4C       5        0.0%
DATA                 0      0      4C       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Jul 28 19:08:59 2015

                               l96 0336             eserial_send_data@value 0061  
          eserial_send_data@buffer 0046                                u600 02A4  
                              u620 02AE                                u630 02B0  
                              u650 02F2                                _isr 0008  
                              wreg 000FE8                       __CFG_FOSC$HS 000000  
                     __CFG_LVP$OFF 000000                               l1203 00AA  
                             l1235 01B0                               l1243 022C  
                             l1229 018E                               l1181 0204  
                             l1173 01E6                               l1183 020E  
                             l1175 01F0                               l1197 02A6  
                             ?_isr 0029                               _RCIE 007CED  
                             _RCIF 007CF5                               i2l25 0054  
           __size_of_eserial_setup 0026                               i2l79 0342  
                             _TXIE 007CEC                               _TXIF 007CF4  
                             _main 021C                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             pclat 000FFA                               prodh 000FF4  
                             prodl 000FF3                               start 008E  
                   ??_buffer_count 0042                     ??_buffer_empty 0042  
                   ??_buffer_space 002B                       ___param_bank 000010  
          __end_of_serial_get_byte 034C               eserial_receive@value 0031  
                            ??_isr 0032         __size_of_serial_interrupts 002C  
                            ?_main 0029                              i2l190 026E  
                            _RCREG 000FAE                              _RCSTA 000FAB  
                            _SPBRG 000FAF                              _TXREG 000FAD  
                            _TXSTA 000FAC                              tablat 000FF5  
             serial_send_byte@byte 0040                              status 000FD8  
                 buffer_pop@buffer 0040                    __initialization 030E  
                     __end_of_main 0256              eserial_receive@buffer 002E  
                    _eserial_setup 02B6                             ??_main 0063  
                    __activetblptr 000000           __size_of_eserial_receive 0034  
                           i2l1111 0124                             i2l1151 0272  
                           _INTCON 000FF2                             _SPBRGH 000FB0  
         __end_of_serial_send_byte 0340                   ?_serial_get_byte 0029  
                   ?_eserial_setup 0047               __size_of_buffer_push 0066  
                           clear_0 0314        __end_of_setup_simple_serial 021C  
             __end_of_buffer_count 0332               __end_of_buffer_empty 02F8  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8               __end_of_buffer_space 030E  
                       __accesstop 0060            __end_of__initialization 031A  
                    ___rparam_used 000001                     __pcstackCOMRAM 0029  
               buffer_count@buffer 0040                     buffer_pop@byte 0044  
                _eserial_send_data 0172                 ?_eserial_send_data 0046  
               buffer_empty@buffer 0040                ??_eserial_send_data 0048  
                ??_eserial_receive 0030                    ??_eserial_setup 0049  
                          _BAUDCON 000FB8          __end_of_eserial_send_data 01D6  
                buffer_push@buffer 0029                         _buffer_pop 0092  
                          __Hparam 0000                            __Lparam 0000  
                          __pcinit 030E                          _ANSELbits 000F7E  
                          __ramtop 0100              __size_of_buffer_count 0012  
            __size_of_buffer_empty 001C                            __ptext0 021C  
                          __ptext1 02B6                            __ptext2 01D6  
                          __ptext3 028A                            __ptext4 0172  
                          __ptext5 0332                            __ptext6 0092  
                          __ptext7 02DC                            __ptext8 0320  
            __size_of_buffer_space 0016                       __size_of_isr 0086  
             end_of_initialization 031A                  ?_serial_send_byte 0029  
                     _buffer_count 0320                       _buffer_empty 02DC  
               ??_serial_send_byte 0040                       _buffer_space 02F8  
                        _RCSTAbits 000FAB                            postinc0 000FEE  
                          postinc2 000FDE         eserial_setup@baudrate_bits 0060  
       __size_of_eserial_send_data 0064                          _TRISCbits 000F94  
                      ?_buffer_pop 0040                      ??_buffer_push 002C  
         __size_of_serial_get_byte 000C                start_initialization 030E  
                      __end_of_isr 008E                    _eserial_receive 0256  
     __size_of_setup_simple_serial 0046                 buffer_space@buffer 0029  
                  buffer_push@byte 002B                __size_of_buffer_pop 007A  
              __end_of_buffer_push 0172                        __pbssCOMRAM 0001  
                    __pcstackBANK0 0060                          __pintcode 0008  
            __end_of_eserial_setup 02DC            __end_of_eserial_receive 028A  
 setup_simple_serial@baudrate_bits 0046                  ??_serial_get_byte 0029  
                         _LATCbits 000F8B        serial_interrupts@interrupts 0041  
                        _my_buffer 0007                        _buffer_push 010C  
        __size_of_serial_send_byte 000E                       ??_buffer_pop 0042  
                         __Hrparam 0000                           __Lrparam 0000  
               __end_of_buffer_pop 010C                 eserial_send_data@i 0060  
              _setup_simple_serial 01D6                   ?_eserial_receive 002E  
                       _ANSELHbits 000F7F                           __ptext10 0256  
                         __ptext11 0340                           __ptext12 02F8  
                         __ptext13 010C               ?_setup_simple_serial 0040  
                    __size_of_main 003A                  _serial_interrupts 028A  
               ?_serial_interrupts 0029              ??_setup_simple_serial 0042  
                         intlevel2 0000                ??_serial_interrupts 0040  
        __end_of_serial_interrupts 02B6                   _serial_send_byte 0332  
                  _serial_get_byte 0340                     _interrupt_data 0001  
      buffer_push@current_position 002D        eserial_setup@baudrate_value 0047  
setup_simple_serial@baudrate_value 0040                      ?_buffer_count 0040  
                    ?_buffer_empty 0040                      ?_buffer_space 0029  
                     ?_buffer_push 0029            _setup_simple_serial$172 0042  
          _setup_simple_serial$173 0044  
