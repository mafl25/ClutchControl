

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Aug 05 12:55:08 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	idataBANK0
    43  001771                     __pidataBANK0:
    44                           	opt stack 0
    45                           
    46                           ;initializer for main@F3995
    47  001771  55                 	db	85
    48  001772  DD                 	db	221
    49  001773  00                 	db	0
    50  0000                     _TMR0	set	4054
    51  0000                     _TMR3	set	4018
    52  0000                     _ANSELHbits	set	3967
    53  0000                     _ANSELbits	set	3966
    54  0000                     _CCP1CONbits	set	4029
    55  0000                     _CCPR1L	set	4030
    56  0000                     _INTCON	set	4082
    57  0000                     _INTCON2bits	set	4081
    58  0000                     _INTCON3bits	set	4080
    59  0000                     _INTCONbits	set	4082
    60  0000                     _LATAbits	set	3977
    61  0000                     _LATCbits	set	3979
    62  0000                     _OSCCONbits	set	4051
    63  0000                     _PIE2bits	set	4000
    64  0000                     _PIR2bits	set	4001
    65  0000                     _PR2	set	4043
    66  0000                     _PSTRCON	set	4025
    67  0000                     _PSTRCONbits	set	4025
    68  0000                     _SSPBUF	set	4041
    69  0000                     _SSPCON1	set	4038
    70  0000                     _SSPCON1bits	set	4038
    71  0000                     _SSPSTAT	set	4039
    72  0000                     _SSPSTATbits	set	4039
    73  0000                     _T0CON	set	4053
    74  0000                     _T2CONbits	set	4042
    75  0000                     _T3CON	set	4017
    76  0000                     _TRISAbits	set	3986
    77  0000                     _TRISBbits	set	3987
    78  0000                     _TRISCbits	set	3988
    79  0000                     _INT2IF	set	32641
    80                           
    81                           ; #config settings
    82  0000                     
    83                           	psect	cinit
    84  001844                     __pcinit:
    85                           	opt stack 0
    86  001844                     start_initialization:
    87                           	opt stack 0
    88  001844                     __initialization:
    89                           	opt stack 0
    90                           
    91                           ; Clear objects allocated to BANK0 (68 bytes)
    92  001844  EE00  F0AB         	lfsr	0,__pbssBANK0
    93  001848  0E44               	movlw	68
    94  00184A                     clear_0:
    95  00184A  6AEE               	clrf	postinc0,c
    96  00184C  06E8               	decf	wreg,f,c
    97  00184E  E1FD               	bnz	clear_0
    98                           
    99                           ; Clear objects allocated to COMRAM (1 bytes)
   100  001850  6A16               	clrf	__pbssCOMRAM& (0+255),c
   101                           
   102                           ; Initialize objects allocated to BANK0 (3 bytes)
   103                           ; load TBLPTR registers with __pidataBANK0
   104  001852  0E71               	movlw	low __pidataBANK0
   105  001854  6EF6               	movwf	tblptrl,c
   106  001856  0E17               	movlw	high __pidataBANK0
   107  001858  6EF7               	movwf	tblptrh,c
   108  00185A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   109  00185C  6EF8               	movwf	tblptru,c
   110  00185E  0009               	tblrd		*+	;fetch initializer
   111  001860  CFF5 F0EF          	movff	tablat,__pdataBANK0
   112  001864  0009               	tblrd		*+	;fetch initializer
   113  001866  CFF5 F0F0          	movff	tablat,__pdataBANK0+1
   114  00186A  0009               	tblrd		*+	;fetch initializer
   115  00186C  CFF5 F0F1          	movff	tablat,__pdataBANK0+2
   116  001870                     end_of_initialization:
   117                           	opt stack 0
   118  001870                     __end_of__initialization:
   119                           	opt stack 0
   120  001870  0E00               	movlw	low (__Lmediumconst shr (0+16))
   121  001872  6EF8               	movwf	tblptru,c
   122  001874  0100               	movlb	0
   123  001876  EF32  F00F         	goto	_main	;jump to C main() function
   124                           tblptru	equ	0xFF8
   125                           tblptrh	equ	0xFF7
   126                           tblptrl	equ	0xFF6
   127                           tablat	equ	0xFF5
   128                           postinc0	equ	0xFEE
   129                           wreg	equ	0xFE8
   130                           
   131                           	psect	bssCOMRAM
   132  000016                     __pbssCOMRAM:
   133                           	opt stack 0
   134  000016                     _dummy_byte:
   135                           	opt stack 0
   136  000016                     	ds	1
   137                           tblptru	equ	0xFF8
   138                           tblptrh	equ	0xFF7
   139                           tblptrl	equ	0xFF6
   140                           tablat	equ	0xFF5
   141                           postinc0	equ	0xFEE
   142                           wreg	equ	0xFE8
   143                           
   144                           	psect	bssBANK0
   145  0000AB                     __pbssBANK0:
   146                           	opt stack 0
   147  0000AB                     main@F3991:
   148                           	opt stack 0
   149  0000AB                     	ds	34
   150  0000CD                     main@F3993:
   151                           	opt stack 0
   152  0000CD                     	ds	34
   153                           tblptru	equ	0xFF8
   154                           tblptrh	equ	0xFF7
   155                           tblptrl	equ	0xFF6
   156                           tablat	equ	0xFF5
   157                           postinc0	equ	0xFEE
   158                           wreg	equ	0xFE8
   159                           
   160                           	psect	dataBANK0
   161  0000EF                     __pdataBANK0:
   162                           	opt stack 0
   163  0000EF                     main@F3995:
   164                           	opt stack 0
   165  0000EF                     	ds	3
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           postinc0	equ	0xFEE
   171                           wreg	equ	0xFE8
   172                           
   173                           	psect	cstackBANK0
   174  000060                     __pcstackBANK0:
   175                           	opt stack 0
   176  000060                     main@name:
   177                           	opt stack 0
   178                           
   179                           ; 3 bytes @ 0x0
   180  000060                     	ds	3
   181  000063                     main@value:
   182                           	opt stack 0
   183                           
   184                           ; 2 bytes @ 0x3
   185  000063                     	ds	2
   186  000065                     main@byte_1:
   187                           	opt stack 0
   188                           
   189                           ; 1 bytes @ 0x5
   190  000065                     	ds	1
   191  000066                     main@byte_2:
   192                           	opt stack 0
   193                           
   194                           ; 1 bytes @ 0x6
   195  000066                     	ds	1
   196  000067                     main@send:
   197                           	opt stack 0
   198                           
   199                           ; 34 bytes @ 0x7
   200  000067                     	ds	34
   201  000089                     main@receive:
   202                           	opt stack 0
   203                           
   204                           ; 34 bytes @ 0x29
   205  000089                     	ds	34
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	cstackCOMRAM
   214  000001                     __pcstackCOMRAM:
   215                           	opt stack 0
   216  000001                     ?_buffer_pop:
   217                           	opt stack 0
   218  000001                     ?_buffer_peek:
   219                           	opt stack 0
   220  000001                     setup_spi@SSPCON1_reg:
   221                           	opt stack 0
   222  000001                     spi_send_get_byte@byte:
   223                           	opt stack 0
   224  000001                     setup_timer0@T0CON_reg:
   225                           	opt stack 0
   226  000001                     setup_timer3@T3CON_reg:
   227                           	opt stack 0
   228  000001                     pmwSingleModeSetUp@valuePR2:
   229                           	opt stack 0
   230  000001                     selectOutput@toggle:
   231                           	opt stack 0
   232  000001                     buffer_count@buffer:
   233                           	opt stack 0
   234  000001                     buffer_space@buffer:
   235                           	opt stack 0
   236  000001                     buffer_empty@buffer:
   237                           	opt stack 0
   238  000001                     buffer_push@buffer:
   239                           	opt stack 0
   240  000001                     buffer_pop@buffer:
   241                           	opt stack 0
   242  000001                     buffer_peek@buffer:
   243                           	opt stack 0
   244  000001                     encode_data@byte_1:
   245                           	opt stack 0
   246  000001                     decode_data@data:
   247                           	opt stack 0
   248  000001                     set_timer0@value:
   249                           	opt stack 0
   250  000001                     set_timer3@value:
   251                           	opt stack 0
   252  000001                     setPulseWidth@width:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x0
   256  000001                     	ds	1
   257  000002                     ??_selectOutput:
   258  000002                     setup_spi@SSPSTAT_reg:
   259                           	opt stack 0
   260  000002                     pmwSingleModeSetUp@scaler:
   261                           	opt stack 0
   262                           
   263                           ; 1 bytes @ 0x1
   264  000002                     	ds	1
   265  000003                     ??_buffer_pop:
   266  000003                     ??_setPulseWidth:
   267  000003                     ??_buffer_peek:
   268  000003                     espi_setup@mode:
   269                           	opt stack 0
   270  000003                     buffer_push@byte:
   271                           	opt stack 0
   272  000003                     decode_data@byte_1:
   273                           	opt stack 0
   274  000003                     pmwSingleModeSetUp@outputs:
   275                           	opt stack 0
   276  000003                     selectOutput@outputs:
   277                           	opt stack 0
   278  000003                     wait_pulse@timer_start:
   279                           	opt stack 0
   280  000003                     encode_data@byte_2:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x2
   284  000003                     	ds	1
   285  000004                     ??_buffer_push:
   286  000004                     decode_data@byte_2:
   287                           	opt stack 0
   288  000004                     pmwSingleModeSetUp@polarity:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0x3
   292  000004                     	ds	1
   293  000005                     ??_decode_data:
   294  000005                     ??_encode_data:
   295  000005                     buffer_push@current_position:
   296                           	opt stack 0
   297  000005                     wait_pulse@timer:
   298                           	opt stack 0
   299  000005                     buffer_pop@byte:
   300                           	opt stack 0
   301  000005                     buffer_peek@byte:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x4
   305  000005                     	ds	1
   306  000006                     encode_data@data:
   307                           	opt stack 0
   308  000006                     load_buffer@buffer:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x5
   312  000006                     	ds	1
   313  000007                     wait_pulse@value:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x6
   317  000007                     	ds	1
   318  000008                     load_buffer@str:
   319                           	opt stack 0
   320  000008                     espi_master_send@buffer:
   321                           	opt stack 0
   322  000008                     espi_master_receive@buffer:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x7
   326  000008                     	ds	2
   327  00000A                     load_buffer@size:
   328                           	opt stack 0
   329  00000A                     espi_master_send@timer_start:
   330                           	opt stack 0
   331  00000A                     espi_master_receive@timer_start:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x9
   335  00000A                     	ds	2
   336  00000C                     ??_load_buffer:
   337  00000C                     espi_master_send@timer:
   338                           	opt stack 0
   339  00000C                     espi_master_receive@timer:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0xB
   343  00000C                     	ds	1
   344  00000D                     load_buffer@i:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0xC
   348  00000D                     	ds	1
   349  00000E                     espi_master_send@received_1:
   350                           	opt stack 0
   351  00000E                     espi_master_receive@received_1:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0xD
   355  00000E                     	ds	1
   356  00000F                     espi_master_send@received_2:
   357                           	opt stack 0
   358  00000F                     espi_master_receive@received_2:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0xE
   362  00000F                     	ds	1
   363  000010                     espi_master_receive@value:
   364                           	opt stack 0
   365  000010                     espi_master_send@byte_to_send:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0xF
   369  000010                     	ds	2
   370  000012                     espi_master_send@byte_1:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x11
   374  000012                     	ds	1
   375  000013                     espi_master_send@byte_2:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x12
   379  000013                     	ds	1
   380  000014                     ??_main:
   381                           
   382                           ; 0 bytes @ 0x13
   383  000014                     	ds	2
   384                           tblptru	equ	0xFF8
   385                           tblptrh	equ	0xFF7
   386                           tblptrl	equ	0xFF6
   387                           tablat	equ	0xFF5
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391 ;;
   392 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   393 ;;
   394 ;; *************** function _main *****************
   395 ;; Defined at:
   396 ;;		line 14 in file "main.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;		None
   399 ;; Auto vars:     Size  Location     Type
   400 ;;  value           2    3[BANK0 ] int 
   401 ;;  byte_2          1    6[BANK0 ] unsigned char 
   402 ;;  byte_1          1    5[BANK0 ] unsigned char 
   403 ;;  receive        34   41[BANK0 ] struct circular_buffer
   404 ;;  send           34    7[BANK0 ] struct circular_buffer
   405 ;;  name            3    0[BANK0 ] unsigned char [3]
   406 ;; Return value:  Size  Location     Type
   407 ;;                  2   36[None  ] int 
   408 ;; Registers used:
   409 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMRAM   BANK0
   415 ;;      Params:         0       0
   416 ;;      Locals:         0      75
   417 ;;      Temps:          2       0
   418 ;;      Totals:         2      75
   419 ;;Total ram usage:       77 bytes
   420 ;; Hardware stack levels required when called:    3
   421 ;; This function calls:
   422 ;;		_buffer_count
   423 ;;		_buffer_pop
   424 ;;		_espi_master_receive
   425 ;;		_espi_master_send
   426 ;;		_espi_setup
   427 ;;		_load_buffer
   428 ;;		_pmwSingleModeSetUp
   429 ;;		_selectOutput
   430 ;;		_setPulseWidth
   431 ;;		_set_timer0
   432 ;;		_setup_timer0
   433 ;;		_setup_timer3
   434 ;;		_timer0_up
   435 ;; This function is called by:
   436 ;;		Startup code after reset
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           	psect	text0
   441  001E64                     __ptext0:
   442                           	opt stack 0
   443  001E64                     _main:
   444                           	opt stack 28
   445                           
   446                           ;main.c: 15: OSCCONbits.IRCF = 0x07;
   447                           
   448                           ;incstack = 0
   449  001E64  88D3               	bsf	4051,4,c	;volatile
   450  001E66  8AD3               	bsf	4051,5,c	;volatile
   451  001E68  8CD3               	bsf	4051,6,c	;volatile
   452                           
   453                           ;main.c: 17: espi_setup(0x00);
   454  001E6A  0E00               	movlw	0
   455  001E6C  EC3D  F00C         	call	_espi_setup
   456                           
   457                           ;main.c: 18: setup_timer3(0x80 | 0x00 | 0x01);
   458  001E70  0E81               	movlw	129
   459  001E72  ECBE  F00B         	call	_setup_timer3
   460                           
   461                           ;main.c: 19: setup_timer0(0x07 | 0x80);
   462  001E76  0E87               	movlw	135
   463  001E78  ECBA  F00B         	call	_setup_timer0
   464                           
   465                           ;main.c: 20: pmwSingleModeSetUp(PACH_PBDH, 254, TMRP_1, 0x01 | 0x02);
   466  001E7C  0EFE               	movlw	254
   467  001E7E  6E01               	movwf	pmwSingleModeSetUp@valuePR2,c
   468  001E80  0E00               	movlw	0
   469  001E82  6E02               	movwf	pmwSingleModeSetUp@scaler,c
   470  001E84  0E03               	movlw	3
   471  001E86  6E03               	movwf	pmwSingleModeSetUp@outputs,c
   472  001E88  0E00               	movlw	0
   473  001E8A  EC97  F00D         	call	_pmwSingleModeSetUp
   474                           
   475                           ;main.c: 22: struct circular_buffer send = {0, 0, {0}};
   476  001E8E  EE20  F0AB         	lfsr	2,main@F3991
   477  001E92  EE10  F067         	lfsr	1,main@send
   478  001E96  0E21               	movlw	33
   479  001E98                     u1501:
   480  001E98  CFDB FFE3          	movff	plusw2,plusw1
   481  001E9C  06E8               	decf	wreg,f,c
   482  001E9E  E2FC               	bc	u1501
   483                           
   484                           ;main.c: 23: struct circular_buffer receive = {0, 0, {0}};
   485  001EA0  EE20  F0CD         	lfsr	2,main@F3993
   486  001EA4  EE10  F089         	lfsr	1,main@receive
   487  001EA8  0E21               	movlw	33
   488  001EAA                     u1511:
   489  001EAA  CFDB FFE3          	movff	plusw2,plusw1
   490  001EAE  06E8               	decf	wreg,f,c
   491  001EB0  E2FC               	bc	u1511
   492                           
   493                           ;main.c: 25: char name[3] = {0x55, 0xDD, 0x00};
   494  001EB2  C0EF  F060         	movff	main@F3995,main@name
   495  001EB6  C0F0  F061         	movff	main@F3995+1,main@name+1
   496  001EBA  C0F1  F062         	movff	main@F3995+2,main@name+2
   497                           
   498                           ;main.c: 27: set_timer0(55000);
   499  001EBE  0ED6               	movlw	214
   500  001EC0  6E02               	movwf	set_timer0@value+1,c
   501  001EC2  0ED8               	movlw	216
   502  001EC4  6E01               	movwf	set_timer0@value,c
   503  001EC6  ECCD  F00B         	call	_set_timer0	;wreg free
   504  001ECA  D000               	goto	l1780
   505  001ECC                     l1780:
   506                           
   507                           ;main.c: 30: espi_master_receive(&receive, &set_timer3, &timer3_up);
   508  001ECC  0E89               	movlw	low main@receive
   509  001ECE  6E08               	movwf	espi_master_receive@buffer,c
   510  001ED0  0E00               	movlw	high main@receive
   511  001ED2  6E09               	movwf	espi_master_receive@buffer+1,c
   512  001ED4  0E8E               	movlw	low _set_timer3
   513  001ED6  6E0A               	movwf	espi_master_receive@timer_start,c
   514  001ED8  0E17               	movlw	high _set_timer3
   515  001EDA  6E0B               	movwf	espi_master_receive@timer_start+1,c
   516  001EDC  0EA6               	movlw	low _timer3_up
   517  001EDE  6E0C               	movwf	espi_master_receive@timer,c
   518  001EE0  0E17               	movlw	high _timer3_up
   519  001EE2  6E0D               	movwf	espi_master_receive@timer+1,c
   520  001EE4  EC85  F00E         	call	_espi_master_receive	;wreg free
   521                           
   522                           ;main.c: 32: if (buffer_count(&receive) >= 3) {
   523  001EE8  0E89               	movlw	low main@receive
   524  001EEA  6E01               	movwf	buffer_count@buffer,c
   525  001EEC  0E00               	movlw	high main@receive
   526  001EEE  6E02               	movwf	buffer_count@buffer+1,c
   527  001EF0  ECE1  F00B         	call	_buffer_count	;wreg free
   528  001EF4  6E14               	movwf	??_main& (0+255),c
   529  001EF6  0E02               	movlw	2
   530  001EF8  6414               	cpfsgt	??_main,c
   531  001EFA  D058               	goto	l1798
   532                           
   533                           ;main.c: 33: uint8_t byte_1;
   534                           ;main.c: 34: uint8_t byte_2;
   535                           ;main.c: 35: int16_t value = buffer_pop(&receive);
   536  001EFC  0E89               	movlw	low main@receive
   537  001EFE  6E01               	movwf	buffer_pop@buffer,c
   538  001F00  0E00               	movlw	high main@receive
   539  001F02  6E02               	movwf	buffer_pop@buffer+1,c
   540  001F04  EC1A  F00D         	call	_buffer_pop	;wreg free
   541  001F08  C001  F063         	movff	?_buffer_pop,main@value
   542  001F0C  C002  F064         	movff	?_buffer_pop+1,main@value+1
   543                           
   544                           ;main.c: 37: switch (value) {
   545  001F10  D03D               	goto	l1796
   546  001F12                     l1786:
   547                           
   548                           ;main.c: 39: byte_1 = buffer_pop(&receive);
   549  001F12  0E89               	movlw	low main@receive
   550  001F14  6E01               	movwf	buffer_pop@buffer,c
   551  001F16  0E00               	movlw	high main@receive
   552  001F18  6E02               	movwf	buffer_pop@buffer+1,c
   553  001F1A  EC1A  F00D         	call	_buffer_pop	;wreg free
   554  001F1E  5001               	movf	?_buffer_pop,w,c
   555  001F20  0100               	movlb	0	; () banked
   556  001F22  6F65               	movwf	main@byte_1& (0+255),b
   557                           
   558                           ;main.c: 40: byte_2 = buffer_pop(&receive);
   559  001F24  0E89               	movlw	low main@receive
   560  001F26  6E01               	movwf	buffer_pop@buffer,c
   561  001F28  0E00               	movlw	high main@receive
   562  001F2A  6E02               	movwf	buffer_pop@buffer+1,c
   563  001F2C  EC1A  F00D         	call	_buffer_pop	;wreg free
   564  001F30  5001               	movf	?_buffer_pop,w,c
   565  001F32  0100               	movlb	0	; () banked
   566  001F34  6F66               	movwf	main@byte_2& (0+255),b
   567                           
   568                           ; BSR set to: 0
   569                           ;main.c: 41: setPulseWidth(byte_1 << 2 | byte_2);
   570  001F36  0100               	movlb	0	; () banked
   571  001F38  5166               	movf	main@byte_2& (0+255),w,b
   572  001F3A  C065  F014         	movff	main@byte_1,??_main
   573  001F3E  6A15               	clrf	(??_main+1)& (0+255),c
   574  001F40  90D8               	bcf	status,0,c
   575  001F42  3614               	rlcf	??_main,f,c
   576  001F44  3615               	rlcf	??_main+1,f,c
   577  001F46  90D8               	bcf	status,0,c
   578  001F48  3614               	rlcf	??_main,f,c
   579  001F4A  3615               	rlcf	??_main+1,f,c
   580  001F4C  1014               	iorwf	??_main,w,c
   581  001F4E  6E01               	movwf	setPulseWidth@width,c
   582  001F50  5015               	movf	??_main+1,w,c
   583  001F52  6E02               	movwf	setPulseWidth@width+1,c
   584  001F54  EC0D  F00C         	call	_setPulseWidth	;wreg free
   585                           
   586                           ;main.c: 42: break;
   587  001F58  D029               	goto	l1798
   588  001F5A                     l1790:
   589                           
   590                           ;main.c: 44: byte_1 = buffer_pop(&receive);
   591  001F5A  0E89               	movlw	low main@receive
   592  001F5C  6E01               	movwf	buffer_pop@buffer,c
   593  001F5E  0E00               	movlw	high main@receive
   594  001F60  6E02               	movwf	buffer_pop@buffer+1,c
   595  001F62  EC1A  F00D         	call	_buffer_pop	;wreg free
   596  001F66  5001               	movf	?_buffer_pop,w,c
   597  001F68  0100               	movlb	0	; () banked
   598  001F6A  6F65               	movwf	main@byte_1& (0+255),b
   599                           
   600                           ;main.c: 45: byte_2 = buffer_pop(&receive);
   601  001F6C  0E89               	movlw	low main@receive
   602  001F6E  6E01               	movwf	buffer_pop@buffer,c
   603  001F70  0E00               	movlw	high main@receive
   604  001F72  6E02               	movwf	buffer_pop@buffer+1,c
   605  001F74  EC1A  F00D         	call	_buffer_pop	;wreg free
   606  001F78  5001               	movf	?_buffer_pop,w,c
   607  001F7A  0100               	movlb	0	; () banked
   608  001F7C  6F66               	movwf	main@byte_2& (0+255),b
   609                           
   610                           ; BSR set to: 0
   611                           ;main.c: 46: selectOutput(byte_1, byte_2);
   612  001F7E  C066  F001         	movff	main@byte_2,selectOutput@toggle
   613  001F82  0100               	movlb	0	; () banked
   614  001F84  5165               	movf	main@byte_1& (0+255),w,b
   615  001F86  EC34  F00E         	call	_selectOutput
   616                           
   617                           ;main.c: 48: }
   618                           
   619                           ;main.c: 47: break;
   620  001F8A  D010               	goto	l1798
   621  001F8C                     l1796:
   622  001F8C  C063  F014         	movff	main@value,??_main
   623  001F90  C064  F015         	movff	main@value+1,??_main+1
   624                           
   625                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   626                           ; Switch size 1, requested type "space"
   627                           ; Number of cases is 1, Range of values is 0 to 0
   628                           ; switch strategies available:
   629                           ; Name         Instructions Cycles
   630                           ; simple_byte            4     3 (average)
   631                           ;	Chosen strategy is simple_byte
   632  001F94  5015               	movf	??_main+1,w,c
   633  001F96  0A00               	xorlw	0	; case 0
   634  001F98  A4D8               	btfss	status,2,c
   635  001F9A  D008               	goto	l1798
   636                           
   637                           ; Switch size 1, requested type "space"
   638                           ; Number of cases is 2, Range of values is 170 to 172
   639                           ; switch strategies available:
   640                           ; Name         Instructions Cycles
   641                           ; simple_byte            7     4 (average)
   642                           ;	Chosen strategy is simple_byte
   643  001F9C  5014               	movf	??_main,w,c
   644  001F9E  0AAA               	xorlw	170	; case 170
   645  001FA0  B4D8               	btfsc	status,2,c
   646  001FA2  D7DB               	goto	l1790
   647  001FA4  0A06               	xorlw	6	; case 172
   648  001FA6  B4D8               	btfsc	status,2,c
   649  001FA8  D7B4               	goto	l1786
   650  001FAA  D000               	goto	l1798
   651  001FAC                     l1798:
   652                           
   653                           ;main.c: 49: }
   654                           ;main.c: 53: if (timer0_up()) {
   655  001FAC  ECDA  F00B         	call	_timer0_up	;wreg free
   656  001FB0  0900               	iorlw	0
   657  001FB2  B4D8               	btfsc	status,2,c
   658  001FB4  D78B               	goto	l1780
   659                           
   660                           ;main.c: 54: load_buffer(&send, name, 3);
   661  001FB6  0E67               	movlw	low main@send
   662  001FB8  6E06               	movwf	load_buffer@buffer,c
   663  001FBA  0E00               	movlw	high main@send
   664  001FBC  6E07               	movwf	load_buffer@buffer+1,c
   665  001FBE  0E60               	movlw	low main@name
   666  001FC0  6E08               	movwf	load_buffer@str,c
   667  001FC2  0E00               	movlw	high main@name
   668  001FC4  6E09               	movwf	load_buffer@str+1,c
   669  001FC6  0E00               	movlw	0
   670  001FC8  6E0B               	movwf	load_buffer@size+1,c
   671  001FCA  0E03               	movlw	3
   672  001FCC  6E0A               	movwf	load_buffer@size,c
   673  001FCE  ECE4  F00D         	call	_load_buffer	;wreg free
   674                           
   675                           ;main.c: 55: espi_master_send(&send, &set_timer3, &timer3_up);
   676  001FD2  0E67               	movlw	low main@send
   677  001FD4  6E08               	movwf	espi_master_send@buffer,c
   678  001FD6  0E00               	movlw	high main@send
   679  001FD8  6E09               	movwf	espi_master_send@buffer+1,c
   680  001FDA  0E8E               	movlw	low _set_timer3
   681  001FDC  6E0A               	movwf	espi_master_send@timer_start,c
   682  001FDE  0E17               	movlw	high _set_timer3
   683  001FE0  6E0B               	movwf	espi_master_send@timer_start+1,c
   684  001FE2  0EA6               	movlw	low _timer3_up
   685  001FE4  6E0C               	movwf	espi_master_send@timer,c
   686  001FE6  0E17               	movlw	high _timer3_up
   687  001FE8  6E0D               	movwf	espi_master_send@timer+1,c
   688  001FEA  ECD8  F00E         	call	_espi_master_send	;wreg free
   689                           
   690                           ;main.c: 56: set_timer0(55000);
   691  001FEE  0ED6               	movlw	214
   692  001FF0  6E02               	movwf	set_timer0@value+1,c
   693  001FF2  0ED8               	movlw	216
   694  001FF4  6E01               	movwf	set_timer0@value,c
   695  001FF6  ECCD  F00B         	call	_set_timer0	;wreg free
   696  001FFA  D768               	goto	l1780
   697                           
   698                           ;main.c: 57: }
   699                           ;main.c: 58: }
   700                           ;main.c: 60: return 0;
   701                           ;	Return value of _main is never used
   702  001FFC  EF00  F000         	goto	start
   703  002000                     __end_of_main:
   704                           	opt stack 0
   705                           tblptru	equ	0xFF8
   706                           tblptrh	equ	0xFF7
   707                           tblptrl	equ	0xFF6
   708                           tablat	equ	0xFF5
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           plusw1	equ	0xFE3
   712                           plusw2	equ	0xFDB
   713                           status	equ	0xFD8
   714                           
   715 ;; *************** function _timer0_up *****************
   716 ;; Defined at:
   717 ;;		line 22 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;		None
   722 ;; Return value:  Size  Location     Type
   723 ;;                  1    wreg      unsigned char 
   724 ;; Registers used:
   725 ;;		wreg
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0
   731 ;;      Params:         0       0
   732 ;;      Locals:         0       0
   733 ;;      Temps:          0       0
   734 ;;      Totals:         0       0
   735 ;;Total ram usage:        0 bytes
   736 ;; Hardware stack levels used:    1
   737 ;; This function calls:
   738 ;;		Nothing
   739 ;; This function is called by:
   740 ;;		_main
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           	psect	text1
   745  0017B4                     __ptext1:
   746                           	opt stack 0
   747  0017B4                     _timer0_up:
   748                           	opt stack 30
   749                           
   750                           ;timers_pic.c: 24: return (INTCONbits.TMR0IF) ? 1 : 0;
   751                           
   752                           ;incstack = 0
   753  0017B4  A4F2               	btfss	intcon,2,c	;volatile
   754  0017B6  D002               	goto	u1400
   755  0017B8  0E01               	movlw	1
   756  0017BA  0012               	return	
   757  0017BC                     u1400:
   758  0017BC  0E00               	movlw	0
   759  0017BE  0012               	return	
   760  0017C0  0012               	return		;funcret
   761  0017C2                     __end_of_timer0_up:
   762                           	opt stack 0
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           intcon	equ	0xFF2
   768                           postinc0	equ	0xFEE
   769                           wreg	equ	0xFE8
   770                           plusw1	equ	0xFE3
   771                           plusw2	equ	0xFDB
   772                           status	equ	0xFD8
   773                           
   774 ;; *************** function _setup_timer3 *****************
   775 ;; Defined at:
   776 ;;		line 29 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   777 ;; Parameters:    Size  Location     Type
   778 ;;  T3CON_reg       1    wreg     unsigned char 
   779 ;; Auto vars:     Size  Location     Type
   780 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   781 ;; Return value:  Size  Location     Type
   782 ;;		None               void
   783 ;; Registers used:
   784 ;;		wreg
   785 ;; Tracked objects:
   786 ;;		On entry : 0/0
   787 ;;		On exit  : 0/0
   788 ;;		Unchanged: 0/0
   789 ;; Data sizes:     COMRAM   BANK0
   790 ;;      Params:         0       0
   791 ;;      Locals:         1       0
   792 ;;      Temps:          0       0
   793 ;;      Totals:         1       0
   794 ;;Total ram usage:        1 bytes
   795 ;; Hardware stack levels used:    1
   796 ;; This function calls:
   797 ;;		Nothing
   798 ;; This function is called by:
   799 ;;		_main
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           	psect	text2
   804  00177C                     __ptext2:
   805                           	opt stack 0
   806  00177C                     _setup_timer3:
   807                           	opt stack 30
   808                           
   809                           ;incstack = 0
   810                           ;setup_timer3@T3CON_reg stored from wreg
   811  00177C  6E01               	movwf	setup_timer3@T3CON_reg,c
   812                           
   813                           ;timers_pic.c: 31: T3CON = T3CON_reg;
   814  00177E  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   815  001782  0012               	return		;funcret
   816  001784                     __end_of_setup_timer3:
   817                           	opt stack 0
   818                           tblptru	equ	0xFF8
   819                           tblptrh	equ	0xFF7
   820                           tblptrl	equ	0xFF6
   821                           tablat	equ	0xFF5
   822                           intcon	equ	0xFF2
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           plusw1	equ	0xFE3
   826                           plusw2	equ	0xFDB
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function _setup_timer0 *****************
   830 ;; Defined at:
   831 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  T0CON_reg       1    wreg     unsigned char 
   834 ;; Auto vars:     Size  Location     Type
   835 ;;  T0CON_reg       1    0[COMRAM] unsigned char 
   836 ;; Return value:  Size  Location     Type
   837 ;;		None               void
   838 ;; Registers used:
   839 ;;		wreg
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0
   845 ;;      Params:         0       0
   846 ;;      Locals:         1       0
   847 ;;      Temps:          0       0
   848 ;;      Totals:         1       0
   849 ;;Total ram usage:        1 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text3
   859  001774                     __ptext3:
   860                           	opt stack 0
   861  001774                     _setup_timer0:
   862                           	opt stack 30
   863                           
   864                           ;incstack = 0
   865                           ;setup_timer0@T0CON_reg stored from wreg
   866  001774  6E01               	movwf	setup_timer0@T0CON_reg,c
   867                           
   868                           ;timers_pic.c: 5: T0CON = T0CON_reg;
   869  001776  C001  FFD5         	movff	setup_timer0@T0CON_reg,4053	;volatile
   870  00177A  0012               	return		;funcret
   871  00177C                     __end_of_setup_timer0:
   872                           	opt stack 0
   873                           tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           intcon	equ	0xFF2
   878                           postinc0	equ	0xFEE
   879                           wreg	equ	0xFE8
   880                           plusw1	equ	0xFE3
   881                           plusw2	equ	0xFDB
   882                           status	equ	0xFD8
   883                           
   884 ;; *************** function _set_timer0 *****************
   885 ;; Defined at:
   886 ;;		line 8 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  value           2    0[COMRAM] int 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;		None
   891 ;; Return value:  Size  Location     Type
   892 ;;		None               void
   893 ;; Registers used:
   894 ;;		None
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0
   900 ;;      Params:         2       0
   901 ;;      Locals:         0       0
   902 ;;      Temps:          0       0
   903 ;;      Totals:         2       0
   904 ;;Total ram usage:        2 bytes
   905 ;; Hardware stack levels used:    1
   906 ;; This function calls:
   907 ;;		Nothing
   908 ;; This function is called by:
   909 ;;		_main
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text4
   914  00179A                     __ptext4:
   915                           	opt stack 0
   916  00179A                     _set_timer0:
   917                           	opt stack 30
   918                           
   919                           ;timers_pic.c: 10: INTCONbits.TMR0IF = 0;
   920                           
   921                           ;incstack = 0
   922  00179A  94F2               	bcf	intcon,2,c	;volatile
   923                           
   924                           ;timers_pic.c: 11: TMR0 = value;
   925  00179C  C001  FFD6         	movff	set_timer0@value,4054	;volatile
   926  0017A0  C002  FFD7         	movff	set_timer0@value+1,4055	;volatile
   927  0017A4  0012               	return		;funcret
   928  0017A6                     __end_of_set_timer0:
   929                           	opt stack 0
   930                           tblptru	equ	0xFF8
   931                           tblptrh	equ	0xFF7
   932                           tblptrl	equ	0xFF6
   933                           tablat	equ	0xFF5
   934                           intcon	equ	0xFF2
   935                           postinc0	equ	0xFEE
   936                           wreg	equ	0xFE8
   937                           plusw1	equ	0xFE3
   938                           plusw2	equ	0xFDB
   939                           status	equ	0xFD8
   940                           
   941 ;; *************** function _setPulseWidth *****************
   942 ;; Defined at:
   943 ;;		line 57 in file "../TorqueGriper.X/pwm.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  width           2    0[COMRAM] unsigned int 
   946 ;; Auto vars:     Size  Location     Type
   947 ;;		None
   948 ;; Return value:  Size  Location     Type
   949 ;;		None               void
   950 ;; Registers used:
   951 ;;		wreg, status,2, status,0
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0
   957 ;;      Params:         2       0
   958 ;;      Locals:         0       0
   959 ;;      Temps:          2       0
   960 ;;      Totals:         4       0
   961 ;;Total ram usage:        4 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; This function calls:
   964 ;;		Nothing
   965 ;; This function is called by:
   966 ;;		_main
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text5
   971  00181A                     __ptext5:
   972                           	opt stack 0
   973  00181A                     _setPulseWidth:
   974                           	opt stack 30
   975                           
   976                           ;pwm.c: 59: CCP1CONbits.DC1B = width;
   977                           
   978                           ;incstack = 0
   979  00181A  C001  F003         	movff	setPulseWidth@width,??_setPulseWidth
   980  00181E  3A03               	swapf	??_setPulseWidth,f,c
   981  001820  50BD               	movf	4029,w,c	;volatile
   982  001822  1803               	xorwf	??_setPulseWidth,w,c
   983  001824  0BCF               	andlw	-49
   984  001826  1803               	xorwf	??_setPulseWidth,w,c
   985  001828  6EBD               	movwf	4029,c	;volatile
   986                           
   987                           ;pwm.c: 60: CCPR1L = width >> 2;
   988  00182A  C001  F003         	movff	setPulseWidth@width,??_setPulseWidth
   989  00182E  C002  F004         	movff	setPulseWidth@width+1,??_setPulseWidth+1
   990  001832  90D8               	bcf	status,0,c
   991  001834  3204               	rrcf	??_setPulseWidth+1,f,c
   992  001836  3203               	rrcf	??_setPulseWidth,f,c
   993  001838  90D8               	bcf	status,0,c
   994  00183A  3204               	rrcf	??_setPulseWidth+1,f,c
   995  00183C  3203               	rrcf	??_setPulseWidth,f,c
   996  00183E  5003               	movf	??_setPulseWidth,w,c
   997  001840  6EBE               	movwf	4030,c	;volatile
   998  001842  0012               	return		;funcret
   999  001844                     __end_of_setPulseWidth:
  1000                           	opt stack 0
  1001                           tblptru	equ	0xFF8
  1002                           tblptrh	equ	0xFF7
  1003                           tblptrl	equ	0xFF6
  1004                           tablat	equ	0xFF5
  1005                           intcon	equ	0xFF2
  1006                           postinc0	equ	0xFEE
  1007                           wreg	equ	0xFE8
  1008                           plusw1	equ	0xFE3
  1009                           plusw2	equ	0xFDB
  1010                           status	equ	0xFD8
  1011                           
  1012 ;; *************** function _selectOutput *****************
  1013 ;; Defined at:
  1014 ;;		line 63 in file "../TorqueGriper.X/pwm.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;  outputs         1    wreg     unsigned char 
  1017 ;;  toggle          1    0[COMRAM] unsigned char 
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  outputs         1    2[COMRAM] unsigned char 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;		None               void
  1022 ;; Registers used:
  1023 ;;		wreg, status,2, status,0
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0
  1029 ;;      Params:         1       0
  1030 ;;      Locals:         1       0
  1031 ;;      Temps:          1       0
  1032 ;;      Totals:         3       0
  1033 ;;Total ram usage:        3 bytes
  1034 ;; Hardware stack levels used:    1
  1035 ;; This function calls:
  1036 ;;		Nothing
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text6
  1043  001C68                     __ptext6:
  1044                           	opt stack 0
  1045  001C68                     _selectOutput:
  1046                           	opt stack 30
  1047                           
  1048                           ;incstack = 0
  1049                           ;selectOutput@outputs stored from wreg
  1050  001C68  6E03               	movwf	selectOutput@outputs,c
  1051                           
  1052                           ;pwm.c: 65: switch (outputs){
  1053  001C6A  D03D               	goto	l1700
  1054  001C6C                     l1688:
  1055                           
  1056                           ;pwm.c: 67: PSTRCON = 0xF0;
  1057  001C6C  0EF0               	movlw	240
  1058  001C6E  6EB9               	movwf	4025,c	;volatile
  1059                           
  1060                           ;pwm.c: 68: break;
  1061  001C70  0012               	return	
  1062  001C72                     l1690:
  1063                           
  1064                           ;pwm.c: 70: PSTRCONbits.STRA = (toggle) ? 1 : 0;
  1065  001C72  5001               	movf	selectOutput@toggle,w,c
  1066  001C74  B4D8               	btfsc	status,2,c
  1067  001C76  D003               	goto	u1320
  1068  001C78  6A02               	clrf	??_selectOutput& (0+255),c
  1069  001C7A  2A02               	incf	??_selectOutput& (0+255),f,c
  1070  001C7C  D001               	goto	u1338
  1071  001C7E                     u1320:
  1072  001C7E  6A02               	clrf	??_selectOutput& (0+255),c
  1073  001C80                     u1338:
  1074  001C80  50B9               	movf	4025,w,c	;volatile
  1075  001C82  1802               	xorwf	??_selectOutput,w,c
  1076  001C84  0BFE               	andlw	-2
  1077  001C86  1802               	xorwf	??_selectOutput,w,c
  1078  001C88  6EB9               	movwf	4025,c	;volatile
  1079                           
  1080                           ;pwm.c: 71: break;
  1081  001C8A  0012               	return	
  1082  001C8C                     l1692:
  1083                           
  1084                           ;pwm.c: 73: PSTRCONbits.STRB = (toggle) ? 1 : 0;
  1085  001C8C  5001               	movf	selectOutput@toggle,w,c
  1086  001C8E  B4D8               	btfsc	status,2,c
  1087  001C90  D003               	goto	u1340
  1088  001C92  6A02               	clrf	??_selectOutput& (0+255),c
  1089  001C94  2A02               	incf	??_selectOutput& (0+255),f,c
  1090  001C96  D001               	goto	u1358
  1091  001C98                     u1340:
  1092  001C98  6A02               	clrf	??_selectOutput& (0+255),c
  1093  001C9A                     u1358:
  1094  001C9A  4602               	rlncf	??_selectOutput,f,c
  1095  001C9C  50B9               	movf	4025,w,c	;volatile
  1096  001C9E  1802               	xorwf	??_selectOutput,w,c
  1097  001CA0  0BFD               	andlw	-3
  1098  001CA2  1802               	xorwf	??_selectOutput,w,c
  1099  001CA4  6EB9               	movwf	4025,c	;volatile
  1100                           
  1101                           ;pwm.c: 74: break;
  1102  001CA6  0012               	return	
  1103  001CA8                     l1694:
  1104                           
  1105                           ;pwm.c: 76: PSTRCONbits.STRC = (toggle) ? 1 : 0;
  1106  001CA8  5001               	movf	selectOutput@toggle,w,c
  1107  001CAA  B4D8               	btfsc	status,2,c
  1108  001CAC  D003               	goto	u1360
  1109  001CAE  6A02               	clrf	??_selectOutput& (0+255),c
  1110  001CB0  2A02               	incf	??_selectOutput& (0+255),f,c
  1111  001CB2  D001               	goto	u1378
  1112  001CB4                     u1360:
  1113  001CB4  6A02               	clrf	??_selectOutput& (0+255),c
  1114  001CB6                     u1378:
  1115  001CB6  4602               	rlncf	??_selectOutput,f,c
  1116  001CB8  4602               	rlncf	??_selectOutput,f,c
  1117  001CBA  50B9               	movf	4025,w,c	;volatile
  1118  001CBC  1802               	xorwf	??_selectOutput,w,c
  1119  001CBE  0BFB               	andlw	-5
  1120  001CC0  1802               	xorwf	??_selectOutput,w,c
  1121  001CC2  6EB9               	movwf	4025,c	;volatile
  1122                           
  1123                           ;pwm.c: 77: break;
  1124  001CC4  0012               	return	
  1125  001CC6                     l1696:
  1126                           
  1127                           ;pwm.c: 79: PSTRCONbits.STRD = (toggle) ? 1 : 0;
  1128  001CC6  5001               	movf	selectOutput@toggle,w,c
  1129  001CC8  B4D8               	btfsc	status,2,c
  1130  001CCA  D003               	goto	u1380
  1131  001CCC  6A02               	clrf	??_selectOutput& (0+255),c
  1132  001CCE  2A02               	incf	??_selectOutput& (0+255),f,c
  1133  001CD0  D001               	goto	u1398
  1134  001CD2                     u1380:
  1135  001CD2  6A02               	clrf	??_selectOutput& (0+255),c
  1136  001CD4                     u1398:
  1137  001CD4  4602               	rlncf	??_selectOutput,f,c
  1138  001CD6  4602               	rlncf	??_selectOutput,f,c
  1139  001CD8  4602               	rlncf	??_selectOutput,f,c
  1140  001CDA  50B9               	movf	4025,w,c	;volatile
  1141  001CDC  1802               	xorwf	??_selectOutput,w,c
  1142  001CDE  0BF7               	andlw	-9
  1143  001CE0  1802               	xorwf	??_selectOutput,w,c
  1144  001CE2  6EB9               	movwf	4025,c	;volatile
  1145                           
  1146                           ;pwm.c: 81: }
  1147                           
  1148                           ;pwm.c: 80: break;
  1149  001CE4  0012               	return	
  1150  001CE6                     l1700:
  1151  001CE6  5003               	movf	selectOutput@outputs,w,c
  1152                           
  1153                           ; Switch size 1, requested type "space"
  1154                           ; Number of cases is 5, Range of values is 0 to 8
  1155                           ; switch strategies available:
  1156                           ; Name         Instructions Cycles
  1157                           ; simple_byte           16     9 (average)
  1158                           ;	Chosen strategy is simple_byte
  1159  001CE8  0A00               	xorlw	0	; case 0
  1160  001CEA  B4D8               	btfsc	status,2,c
  1161  001CEC  D7BF               	goto	l1688
  1162  001CEE  0A01               	xorlw	1	; case 1
  1163  001CF0  B4D8               	btfsc	status,2,c
  1164  001CF2  D7BF               	goto	l1690
  1165  001CF4  0A03               	xorlw	3	; case 2
  1166  001CF6  B4D8               	btfsc	status,2,c
  1167  001CF8  D7C9               	goto	l1692
  1168  001CFA  0A06               	xorlw	6	; case 4
  1169  001CFC  B4D8               	btfsc	status,2,c
  1170  001CFE  D7D4               	goto	l1694
  1171  001D00  0A0C               	xorlw	12	; case 8
  1172  001D02  A4D8               	btfss	status,2,c
  1173  001D04  0012               	return	
  1174  001D06  D7DF               	goto	l1696
  1175  001D08  0012               	return		;funcret
  1176  001D0A                     __end_of_selectOutput:
  1177                           	opt stack 0
  1178                           tblptru	equ	0xFF8
  1179                           tblptrh	equ	0xFF7
  1180                           tblptrl	equ	0xFF6
  1181                           tablat	equ	0xFF5
  1182                           intcon	equ	0xFF2
  1183                           postinc0	equ	0xFEE
  1184                           wreg	equ	0xFE8
  1185                           plusw1	equ	0xFE3
  1186                           plusw2	equ	0xFDB
  1187                           status	equ	0xFD8
  1188                           
  1189 ;; *************** function _pmwSingleModeSetUp *****************
  1190 ;; Defined at:
  1191 ;;		line 3 in file "../TorqueGriper.X/pwm.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  polarity        1    wreg     enum E3665
  1194 ;;  valuePR2        1    0[COMRAM] unsigned char 
  1195 ;;  scaler          1    1[COMRAM] enum E3671
  1196 ;;  outputs         1    2[COMRAM] unsigned char 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  polarity        1    3[COMRAM] enum E3665
  1199 ;; Return value:  Size  Location     Type
  1200 ;;		None               void
  1201 ;; Registers used:
  1202 ;;		wreg, status,2, status,0
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0
  1208 ;;      Params:         3       0
  1209 ;;      Locals:         1       0
  1210 ;;      Temps:          0       0
  1211 ;;      Totals:         4       0
  1212 ;;Total ram usage:        4 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; This function calls:
  1215 ;;		Nothing
  1216 ;; This function is called by:
  1217 ;;		_main
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           	psect	text7
  1222  001B2E                     __ptext7:
  1223                           	opt stack 0
  1224  001B2E                     _pmwSingleModeSetUp:
  1225                           	opt stack 30
  1226                           
  1227                           ;incstack = 0
  1228                           ;pmwSingleModeSetUp@polarity stored from wreg
  1229  001B2E  6E04               	movwf	pmwSingleModeSetUp@polarity,c
  1230                           
  1231                           ;pwm.c: 6: T2CONbits.TMR2ON = 1;
  1232  001B30  84CA               	bsf	4042,2,c	;volatile
  1233                           
  1234                           ;pwm.c: 8: switch (scaler) {
  1235  001B32  D009               	goto	l1630
  1236  001B34                     l1624:
  1237                           
  1238                           ;pwm.c: 10: T2CONbits.T2CKPS = 0x00;
  1239  001B34  0EFC               	movlw	-4
  1240  001B36  16CA               	andwf	4042,f,c	;volatile
  1241                           
  1242                           ;pwm.c: 11: break;
  1243  001B38  D011               	goto	l1632
  1244                           
  1245                           ;pwm.c: 12: case TMRP_4:
  1246  001B3A  D000               	goto	l1628
  1247  001B3C                     l1628:
  1248                           
  1249                           ;pwm.c: 16: T2CONbits.T2CKPS = 0x11;
  1250  001B3C  50CA               	movf	4042,w,c	;volatile
  1251  001B3E  0BFC               	andlw	-4
  1252  001B40  0901               	iorlw	1
  1253  001B42  6ECA               	movwf	4042,c	;volatile
  1254                           
  1255                           ;pwm.c: 17: }
  1256  001B44  D00B               	goto	l1632
  1257  001B46                     l1630:
  1258  001B46  5002               	movf	pmwSingleModeSetUp@scaler,w,c
  1259                           
  1260                           ; Switch size 1, requested type "space"
  1261                           ; Number of cases is 3, Range of values is 0 to 2
  1262                           ; switch strategies available:
  1263                           ; Name         Instructions Cycles
  1264                           ; simple_byte           10     6 (average)
  1265                           ;	Chosen strategy is simple_byte
  1266  001B48  0A00               	xorlw	0	; case 0
  1267  001B4A  B4D8               	btfsc	status,2,c
  1268  001B4C  D7F3               	goto	l1624
  1269  001B4E  0A01               	xorlw	1	; case 1
  1270  001B50  B4D8               	btfsc	status,2,c
  1271  001B52  D7F4               	goto	l1628
  1272  001B54  0A03               	xorlw	3	; case 2
  1273  001B56  B4D8               	btfsc	status,2,c
  1274  001B58  D7F1               	goto	l1628
  1275  001B5A  D000               	goto	l1632
  1276  001B5C                     l1632:
  1277                           
  1278                           ;pwm.c: 19: CCP1CONbits.P1M = 0x00;
  1279  001B5C  0E3F               	movlw	-193
  1280  001B5E  16BD               	andwf	4029,f,c	;volatile
  1281                           
  1282                           ;pwm.c: 21: switch (polarity) {
  1283  001B60  D012               	goto	l1640
  1284  001B62                     l1634:
  1285                           
  1286                           ;pwm.c: 23: CCP1CONbits.CCP1M = 0b1100;
  1287  001B62  50BD               	movf	4029,w,c	;volatile
  1288  001B64  0BF0               	andlw	-16
  1289  001B66  090C               	iorlw	12
  1290  001B68  D007               	goto	L2
  1291  001B6A                     l1636:
  1292                           
  1293                           ;pwm.c: 26: CCP1CONbits.CCP1M = 0b1101;
  1294  001B6A  50BD               	movf	4029,w,c	;volatile
  1295  001B6C  0BF0               	andlw	-16
  1296  001B6E  090D               	iorlw	13
  1297  001B70  D003               	goto	L2
  1298  001B72                     l1638:
  1299                           
  1300                           ;pwm.c: 29: CCP1CONbits.CCP1M = 0b1110;
  1301  001B72  50BD               	movf	4029,w,c	;volatile
  1302  001B74  0BF0               	andlw	-16
  1303  001B76  090E               	iorlw	14
  1304  001B78                     L2:
  1305  001B78  6EBD               	movwf	4029,c	;volatile
  1306                           
  1307                           ;pwm.c: 30: break;
  1308  001B7A  D012               	goto	l373
  1309  001B7C                     l376:
  1310                           
  1311                           ;pwm.c: 32: CCP1CONbits.CCP1M = 0b1111;
  1312  001B7C  80BD               	bsf	4029,0,c	;volatile
  1313  001B7E  82BD               	bsf	4029,1,c	;volatile
  1314  001B80  84BD               	bsf	4029,2,c	;volatile
  1315  001B82  86BD               	bsf	4029,3,c	;volatile
  1316                           
  1317                           ;pwm.c: 33: }
  1318  001B84  D00D               	goto	l373
  1319  001B86                     l1640:
  1320  001B86  5004               	movf	pmwSingleModeSetUp@polarity,w,c
  1321                           
  1322                           ; Switch size 1, requested type "space"
  1323                           ; Number of cases is 4, Range of values is 0 to 3
  1324                           ; switch strategies available:
  1325                           ; Name         Instructions Cycles
  1326                           ; simple_byte           13     7 (average)
  1327                           ;	Chosen strategy is simple_byte
  1328  001B88  0A00               	xorlw	0	; case 0
  1329  001B8A  B4D8               	btfsc	status,2,c
  1330  001B8C  D7EA               	goto	l1634
  1331  001B8E  0A01               	xorlw	1	; case 1
  1332  001B90  B4D8               	btfsc	status,2,c
  1333  001B92  D7EB               	goto	l1636
  1334  001B94  0A03               	xorlw	3	; case 2
  1335  001B96  B4D8               	btfsc	status,2,c
  1336  001B98  D7EC               	goto	l1638
  1337  001B9A  0A01               	xorlw	1	; case 3
  1338  001B9C  B4D8               	btfsc	status,2,c
  1339  001B9E  D7EE               	goto	l376
  1340  001BA0                     l373:
  1341                           
  1342                           ;pwm.c: 35: PSTRCONbits.STRSYNC = 1;
  1343  001BA0  88B9               	bsf	4025,4,c	;volatile
  1344                           
  1345                           ;pwm.c: 37: if (outputs & 0x01) {
  1346  001BA2  A003               	btfss	pmwSingleModeSetUp@outputs,0,c
  1347  001BA4  D002               	goto	l377
  1348                           
  1349                           ;pwm.c: 38: LATCbits.LATC5 = 0;
  1350  001BA6  9A8B               	bcf	3979,5,c	;volatile
  1351                           
  1352                           ;pwm.c: 39: TRISCbits.RC5 = 0;
  1353  001BA8  9A94               	bcf	3988,5,c	;volatile
  1354  001BAA                     l377:
  1355                           
  1356                           ;pwm.c: 40: }
  1357                           ;pwm.c: 41: if (outputs & 0x02) {
  1358  001BAA  A203               	btfss	pmwSingleModeSetUp@outputs,1,c
  1359  001BAC  D002               	goto	l378
  1360                           
  1361                           ;pwm.c: 42: LATCbits.LATC4 = 0;
  1362  001BAE  988B               	bcf	3979,4,c	;volatile
  1363                           
  1364                           ;pwm.c: 43: TRISCbits.RC4 = 0;
  1365  001BB0  9894               	bcf	3988,4,c	;volatile
  1366  001BB2                     l378:
  1367                           
  1368                           ;pwm.c: 44: }
  1369                           ;pwm.c: 45: if (outputs & 0x04) {
  1370  001BB2  A403               	btfss	pmwSingleModeSetUp@outputs,2,c
  1371  001BB4  D002               	goto	l379
  1372                           
  1373                           ;pwm.c: 46: LATCbits.LATC3 = 0;
  1374  001BB6  968B               	bcf	3979,3,c	;volatile
  1375                           
  1376                           ;pwm.c: 47: TRISCbits.RC3 = 0;
  1377  001BB8  9694               	bcf	3988,3,c	;volatile
  1378  001BBA                     l379:
  1379                           
  1380                           ;pwm.c: 48: }
  1381                           ;pwm.c: 49: if (outputs & 0x08) {
  1382  001BBA  A603               	btfss	pmwSingleModeSetUp@outputs,3,c
  1383  001BBC  D002               	goto	l380
  1384                           
  1385                           ;pwm.c: 50: LATCbits.LATC2 = 0;
  1386  001BBE  948B               	bcf	3979,2,c	;volatile
  1387                           
  1388                           ;pwm.c: 51: TRISCbits.RC2 = 0;
  1389  001BC0  9494               	bcf	3988,2,c	;volatile
  1390  001BC2                     l380:
  1391                           
  1392                           ;pwm.c: 52: }
  1393                           ;pwm.c: 54: PR2 = valuePR2;
  1394  001BC2  C001  FFCB         	movff	pmwSingleModeSetUp@valuePR2,4043	;volatile
  1395  001BC6  0012               	return		;funcret
  1396  001BC8                     __end_of_pmwSingleModeSetUp:
  1397                           	opt stack 0
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           intcon	equ	0xFF2
  1403                           postinc0	equ	0xFEE
  1404                           wreg	equ	0xFE8
  1405                           plusw1	equ	0xFE3
  1406                           plusw2	equ	0xFDB
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _load_buffer *****************
  1410 ;; Defined at:
  1411 ;;		line 63 in file "main.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  buffer          2    5[COMRAM] PTR struct circular_buff
  1414 ;;		 -> main@send(34), 
  1415 ;;  str             2    7[COMRAM] PTR unsigned char 
  1416 ;;		 -> main@name(3), 
  1417 ;;  size            2    9[COMRAM] int 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  i               2   12[COMRAM] int 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      unsigned char 
  1422 ;; Registers used:
  1423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0
  1429 ;;      Params:         6       0
  1430 ;;      Locals:         2       0
  1431 ;;      Temps:          1       0
  1432 ;;      Totals:         9       0
  1433 ;;Total ram usage:        9 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    1
  1436 ;; This function calls:
  1437 ;;		_buffer_push
  1438 ;; This function is called by:
  1439 ;;		_main
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text8
  1444  001BC8                     __ptext8:
  1445                           	opt stack 0
  1446  001BC8                     _load_buffer:
  1447                           	opt stack 29
  1448                           
  1449                           ;main.c: 65: int i;
  1450                           ;main.c: 66: if (size < 0) {
  1451                           
  1452                           ;incstack = 0
  1453  001BC8  AE0B               	btfss	load_buffer@size+1,7,c
  1454  001BCA  D026               	goto	l1718
  1455                           
  1456                           ;main.c: 67: for (i = 0; str[i] != 0; i++) {
  1457  001BCC  0E00               	movlw	0
  1458  001BCE  6E0E               	movwf	load_buffer@i+1,c
  1459  001BD0  0E00               	movlw	0
  1460  001BD2  6E0D               	movwf	load_buffer@i,c
  1461  001BD4  D016               	goto	l1716
  1462  001BD6                     l1710:
  1463                           
  1464                           ;main.c: 68: if (buffer_push(buffer, str[i]))
  1465  001BD6  C006  F001         	movff	load_buffer@buffer,buffer_push@buffer
  1466  001BDA  C007  F002         	movff	load_buffer@buffer+1,buffer_push@buffer+1
  1467  001BDE  500D               	movf	load_buffer@i,w,c
  1468  001BE0  2408               	addwf	load_buffer@str,w,c
  1469  001BE2  6ED9               	movwf	fsr2l,c
  1470  001BE4  500E               	movf	load_buffer@i+1,w,c
  1471  001BE6  2009               	addwfc	load_buffer@str+1,w,c
  1472  001BE8  6EDA               	movwf	fsr2h,c
  1473  001BEA  50DF               	movf	indf2,w,c
  1474  001BEC  6E03               	movwf	buffer_push@byte,c
  1475  001BEE  EC57  F00D         	call	_buffer_push	;wreg free
  1476  001BF2  0900               	iorlw	0
  1477  001BF4  A4D8               	btfss	status,2,c
  1478  001BF6  0012               	return	
  1479  001BF8  D001               	goto	l1714
  1480                           
  1481                           ;main.c: 69: return 0;
  1482                           ;	Return value of _load_buffer is never used
  1483  001BFA  0012               	return	
  1484  001BFC                     l1714:
  1485  001BFC  4A0D               	infsnz	load_buffer@i,f,c
  1486  001BFE  2A0E               	incf	load_buffer@i+1,f,c
  1487  001C00  D000               	goto	l1716
  1488  001C02                     l1716:
  1489  001C02  500D               	movf	load_buffer@i,w,c
  1490  001C04  2408               	addwf	load_buffer@str,w,c
  1491  001C06  6ED9               	movwf	fsr2l,c
  1492  001C08  500E               	movf	load_buffer@i+1,w,c
  1493  001C0A  2009               	addwfc	load_buffer@str+1,w,c
  1494  001C0C  6EDA               	movwf	fsr2h,c
  1495  001C0E  50DF               	movf	indf2,w,c
  1496  001C10  B4D8               	btfsc	status,2,c
  1497  001C12  0012               	return	
  1498  001C14  D7E0               	goto	l1710
  1499                           
  1500                           ;main.c: 70: }
  1501                           ;main.c: 71: } else {
  1502  001C16  0012               	return	
  1503  001C18                     l1718:
  1504                           
  1505                           ;main.c: 72: for (i = 0; i < size; i++) {
  1506  001C18  0E00               	movlw	0
  1507  001C1A  6E0E               	movwf	load_buffer@i+1,c
  1508  001C1C  0E00               	movlw	0
  1509  001C1E  6E0D               	movwf	load_buffer@i,c
  1510  001C20  D016               	goto	l1726
  1511  001C22                     l1720:
  1512                           
  1513                           ;main.c: 73: if (buffer_push(buffer, str[i]))
  1514  001C22  C006  F001         	movff	load_buffer@buffer,buffer_push@buffer
  1515  001C26  C007  F002         	movff	load_buffer@buffer+1,buffer_push@buffer+1
  1516  001C2A  500D               	movf	load_buffer@i,w,c
  1517  001C2C  2408               	addwf	load_buffer@str,w,c
  1518  001C2E  6ED9               	movwf	fsr2l,c
  1519  001C30  500E               	movf	load_buffer@i+1,w,c
  1520  001C32  2009               	addwfc	load_buffer@str+1,w,c
  1521  001C34  6EDA               	movwf	fsr2h,c
  1522  001C36  50DF               	movf	indf2,w,c
  1523  001C38  6E03               	movwf	buffer_push@byte,c
  1524  001C3A  EC57  F00D         	call	_buffer_push	;wreg free
  1525  001C3E  0900               	iorlw	0
  1526  001C40  A4D8               	btfss	status,2,c
  1527  001C42  0012               	return	
  1528  001C44  D001               	goto	l1724
  1529                           
  1530                           ;main.c: 74: return 0;
  1531                           ;	Return value of _load_buffer is never used
  1532  001C46  0012               	return	
  1533  001C48                     l1724:
  1534  001C48  4A0D               	infsnz	load_buffer@i,f,c
  1535  001C4A  2A0E               	incf	load_buffer@i+1,f,c
  1536  001C4C  D000               	goto	l1726
  1537  001C4E                     l1726:
  1538  001C4E  500A               	movf	load_buffer@size,w,c
  1539  001C50  5C0D               	subwf	load_buffer@i,w,c
  1540  001C52  500E               	movf	load_buffer@i+1,w,c
  1541  001C54  0A80               	xorlw	128
  1542  001C56  6E0C               	movwf	??_load_buffer& (0+255),c
  1543  001C58  500B               	movf	load_buffer@size+1,w,c
  1544  001C5A  0A80               	xorlw	128
  1545  001C5C  580C               	subwfb	??_load_buffer& (0+255),w,c
  1546  001C5E  B0D8               	btfsc	status,0,c
  1547  001C60  0012               	return	
  1548  001C62  D7DF               	goto	l1720
  1549  001C64  0012               	return	
  1550                           
  1551                           ;main.c: 75: }
  1552                           ;main.c: 76: }
  1553                           ;main.c: 78: return 1;
  1554                           ;	Return value of _load_buffer is never used
  1555  001C66  0012               	return		;funcret
  1556  001C68                     __end_of_load_buffer:
  1557                           	opt stack 0
  1558                           tblptru	equ	0xFF8
  1559                           tblptrh	equ	0xFF7
  1560                           tblptrl	equ	0xFF6
  1561                           tablat	equ	0xFF5
  1562                           intcon	equ	0xFF2
  1563                           postinc0	equ	0xFEE
  1564                           wreg	equ	0xFE8
  1565                           plusw1	equ	0xFE3
  1566                           indf2	equ	0xFDF
  1567                           plusw2	equ	0xFDB
  1568                           fsr2h	equ	0xFDA
  1569                           fsr2l	equ	0xFD9
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function _espi_setup *****************
  1573 ;; Defined at:
  1574 ;;		line 27 in file "../TorqueGriper.X/extended_spi.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  mode            1    wreg     unsigned char 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  mode            1    2[COMRAM] unsigned char 
  1579 ;; Return value:  Size  Location     Type
  1580 ;;		None               void
  1581 ;; Registers used:
  1582 ;;		wreg, status,2, status,0, cstack
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMRAM   BANK0
  1588 ;;      Params:         0       0
  1589 ;;      Locals:         1       0
  1590 ;;      Temps:          0       0
  1591 ;;      Totals:         1       0
  1592 ;;Total ram usage:        1 bytes
  1593 ;; Hardware stack levels used:    1
  1594 ;; Hardware stack levels required when called:    1
  1595 ;; This function calls:
  1596 ;;		_setup_spi
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text9
  1603  00187A                     __ptext9:
  1604                           	opt stack 0
  1605  00187A                     _espi_setup:
  1606                           	opt stack 29
  1607                           
  1608                           ;incstack = 0
  1609                           ;espi_setup@mode stored from wreg
  1610  00187A  6E03               	movwf	espi_setup@mode,c
  1611                           
  1612                           ;extended_spi.c: 29: setup_spi(0, 0x20 | 0x10 | mode);
  1613  00187C  5003               	movf	espi_setup@mode,w,c
  1614  00187E  0930               	iorlw	48
  1615  001880  6E01               	movwf	setup_spi@SSPCON1_reg,c
  1616  001882  0E00               	movlw	0
  1617  001884  EC77  F00C         	call	_setup_spi
  1618                           
  1619                           ;extended_spi.c: 31: ANSELbits.ANS2 = 0;
  1620  001888  947E               	bcf	3966,2,c	;volatile
  1621                           
  1622                           ;extended_spi.c: 32: ANSELHbits.ANS8 = 0;
  1623  00188A  907F               	bcf	3967,0,c	;volatile
  1624                           
  1625                           ;extended_spi.c: 34: if (mode == 0x04 || mode == 0x05) {
  1626  00188C  0E04               	movlw	4
  1627  00188E  1803               	xorwf	espi_setup@mode,w,c
  1628  001890  B4D8               	btfsc	status,2,c
  1629  001892  D004               	goto	l208
  1630  001894  0E05               	movlw	5
  1631  001896  1803               	xorwf	espi_setup@mode,w,c
  1632  001898  A4D8               	btfss	status,2,c
  1633  00189A  D004               	goto	l206
  1634  00189C                     l208:
  1635                           
  1636                           ;extended_spi.c: 35: TRISAbits.RA2 = 0;
  1637  00189C  9492               	bcf	3986,2,c	;volatile
  1638                           
  1639                           ;extended_spi.c: 36: LATAbits.LATA2 = 0;
  1640  00189E  9489               	bcf	3977,2,c	;volatile
  1641                           
  1642                           ;extended_spi.c: 37: TRISCbits.RC6 = 1;
  1643  0018A0  8C94               	bsf	3988,6,c	;volatile
  1644                           
  1645                           ;extended_spi.c: 38: } else {
  1646  0018A2  0012               	return	
  1647  0018A4                     l206:
  1648                           
  1649                           ;extended_spi.c: 39: TRISAbits.RA2 = 1;
  1650  0018A4  8492               	bsf	3986,2,c	;volatile
  1651                           
  1652                           ;extended_spi.c: 40: TRISCbits.RC6 = 0;
  1653  0018A6  9C94               	bcf	3988,6,c	;volatile
  1654                           
  1655                           ;extended_spi.c: 41: LATCbits.LATC6 = 0;
  1656  0018A8  9C8B               	bcf	3979,6,c	;volatile
  1657                           
  1658                           ;extended_spi.c: 42: INTCON2bits.INTEDG2 = 1;
  1659  0018AA  88F1               	bsf	intcon2,4,c	;volatile
  1660                           
  1661                           ;extended_spi.c: 43: INTCON3bits.INT2E = 1;
  1662  0018AC  88F0               	bsf	intcon3,4,c	;volatile
  1663  0018AE  0012               	return	
  1664  0018B0  0012               	return		;funcret
  1665  0018B2                     __end_of_espi_setup:
  1666                           	opt stack 0
  1667                           tblptru	equ	0xFF8
  1668                           tblptrh	equ	0xFF7
  1669                           tblptrl	equ	0xFF6
  1670                           tablat	equ	0xFF5
  1671                           intcon	equ	0xFF2
  1672                           intcon2	equ	0xFF1
  1673                           intcon3	equ	0xFF0
  1674                           postinc0	equ	0xFEE
  1675                           wreg	equ	0xFE8
  1676                           plusw1	equ	0xFE3
  1677                           indf2	equ	0xFDF
  1678                           plusw2	equ	0xFDB
  1679                           fsr2h	equ	0xFDA
  1680                           fsr2l	equ	0xFD9
  1681                           status	equ	0xFD8
  1682                           
  1683 ;; *************** function _setup_spi *****************
  1684 ;; Defined at:
  1685 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1686 ;; Parameters:    Size  Location     Type
  1687 ;;  SSPSTAT_reg     1    wreg     unsigned char 
  1688 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
  1691 ;; Return value:  Size  Location     Type
  1692 ;;		None               void
  1693 ;; Registers used:
  1694 ;;		wreg, status,2, status,0
  1695 ;; Tracked objects:
  1696 ;;		On entry : 0/0
  1697 ;;		On exit  : 0/0
  1698 ;;		Unchanged: 0/0
  1699 ;; Data sizes:     COMRAM   BANK0
  1700 ;;      Params:         1       0
  1701 ;;      Locals:         1       0
  1702 ;;      Temps:          0       0
  1703 ;;      Totals:         2       0
  1704 ;;Total ram usage:        2 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; This function calls:
  1707 ;;		Nothing
  1708 ;; This function is called by:
  1709 ;;		_espi_setup
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text10
  1714  0018EE                     __ptext10:
  1715                           	opt stack 0
  1716  0018EE                     _setup_spi:
  1717                           	opt stack 29
  1718                           
  1719                           ;incstack = 0
  1720                           ;setup_spi@SSPSTAT_reg stored from wreg
  1721  0018EE  6E02               	movwf	setup_spi@SSPSTAT_reg,c
  1722                           
  1723                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
  1724  0018F0  9E94               	bcf	3988,7,c	;volatile
  1725                           
  1726                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
  1727  0018F2  947F               	bcf	3967,2,c	;volatile
  1728                           
  1729                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
  1730  0018F4  8893               	bsf	3987,4,c	;volatile
  1731                           
  1732                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
  1733  0018F6  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
  1734                           
  1735                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
  1736  0018FA  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
  1737                           
  1738                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
  1739  0018FE  50C6               	movf	4038,w,c	;volatile
  1740  001900  0B0F               	andlw	15
  1741  001902  0A05               	xorlw	5
  1742  001904  B4D8               	btfsc	status,2,c
  1743  001906  D005               	goto	l90
  1744  001908  50C6               	movf	4038,w,c	;volatile
  1745  00190A  0B0F               	andlw	15
  1746  00190C  0A04               	xorlw	4
  1747  00190E  A4D8               	btfss	status,2,c
  1748  001910  D00A               	goto	l88
  1749  001912                     l90:
  1750                           
  1751                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
  1752  001912  8C93               	bsf	3987,6,c	;volatile
  1753                           
  1754                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
  1755  001914  50C6               	movf	4038,w,c	;volatile
  1756  001916  0B0F               	andlw	15
  1757  001918  0A04               	xorlw	4
  1758  00191A  A4D8               	btfss	status,2,c
  1759  00191C  D002               	goto	l91
  1760                           
  1761                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
  1762  00191E  907F               	bcf	3967,0,c	;volatile
  1763                           
  1764                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
  1765  001920  8C94               	bsf	3988,6,c	;volatile
  1766  001922                     l91:
  1767                           
  1768                           ;spi_pic.c: 26: }
  1769                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
  1770  001922  9EC7               	bcf	4039,7,c	;volatile
  1771                           
  1772                           ;spi_pic.c: 28: } else {
  1773  001924  0012               	return	
  1774  001926                     l88:
  1775                           
  1776                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
  1777  001926  9C93               	bcf	3987,6,c	;volatile
  1778  001928  0012               	return	
  1779  00192A  0012               	return		;funcret
  1780  00192C                     __end_of_setup_spi:
  1781                           	opt stack 0
  1782                           tblptru	equ	0xFF8
  1783                           tblptrh	equ	0xFF7
  1784                           tblptrl	equ	0xFF6
  1785                           tablat	equ	0xFF5
  1786                           intcon	equ	0xFF2
  1787                           intcon2	equ	0xFF1
  1788                           intcon3	equ	0xFF0
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           plusw1	equ	0xFE3
  1792                           indf2	equ	0xFDF
  1793                           plusw2	equ	0xFDB
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _espi_master_send *****************
  1799 ;; Defined at:
  1800 ;;		line 138 in file "../TorqueGriper.X/extended_spi.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  buffer          2    7[COMRAM] PTR struct circular_buff
  1803 ;;		 -> main@send(34), 
  1804 ;;  timer_start     2    9[COMRAM] PTR FTN(int ,)void 
  1805 ;;		 -> set_timer3(0), 
  1806 ;;  timer           2   11[COMRAM] PTR FTN()unsigned char 
  1807 ;;		 -> timer3_up(1), 
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;  byte_to_send    2   15[COMRAM] unsigned int 
  1810 ;;  byte_2          1   18[COMRAM] unsigned char 
  1811 ;;  byte_1          1   17[COMRAM] unsigned char 
  1812 ;;  received_2      1   14[COMRAM] unsigned char 
  1813 ;;  received_1      1   13[COMRAM] unsigned char 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;		None               void
  1816 ;; Registers used:
  1817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0
  1823 ;;      Params:         6       0
  1824 ;;      Locals:         6       0
  1825 ;;      Temps:          0       0
  1826 ;;      Totals:        12       0
  1827 ;;Total ram usage:       12 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    2
  1830 ;; This function calls:
  1831 ;;		_buffer_count
  1832 ;;		_buffer_peek
  1833 ;;		_buffer_pop
  1834 ;;		_encode_data
  1835 ;;		_send_delay
  1836 ;;		_spi_send_get_byte
  1837 ;;		_wait_pulse
  1838 ;; This function is called by:
  1839 ;;		_main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text11
  1844  001DB0                     __ptext11:
  1845                           	opt stack 0
  1846  001DB0                     _espi_master_send:
  1847                           	opt stack 28
  1848                           
  1849                           ;extended_spi.c: 142: if (buffer_count(buffer)) {
  1850                           
  1851                           ;incstack = 0
  1852  001DB0  C008  F001         	movff	espi_master_send@buffer,buffer_count@buffer
  1853  001DB4  C009  F002         	movff	espi_master_send@buffer+1,buffer_count@buffer+1
  1854  001DB8  ECE1  F00B         	call	_buffer_count	;wreg free
  1855  001DBC  0900               	iorlw	0
  1856  001DBE  B4D8               	btfsc	status,2,c
  1857  001DC0  0012               	return	
  1858                           
  1859                           ;extended_spi.c: 143: spi_send_get_byte(0x10);
  1860  001DC2  0E10               	movlw	16
  1861  001DC4  ECEA  F00B         	call	_spi_send_get_byte
  1862                           
  1863                           ;extended_spi.c: 145: wait_pulse(0x10, timer_start, timer);
  1864  001DC8  C00A  F003         	movff	espi_master_send@timer_start,wait_pulse@timer_start
  1865  001DCC  C00B  F004         	movff	espi_master_send@timer_start+1,wait_pulse@timer_start+1
  1866  001DD0  C00C  F005         	movff	espi_master_send@timer,wait_pulse@timer
  1867  001DD4  C00D  F006         	movff	espi_master_send@timer+1,wait_pulse@timer+1
  1868  001DD8  0E10               	movlw	16
  1869  001DDA  ECE2  F00C         	call	_wait_pulse
  1870  001DDE  D000               	goto	l1734
  1871  001DE0                     l1734:
  1872                           
  1873                           ;extended_spi.c: 154: byte_to_send = buffer_peek(buffer);
  1874  001DE0  C008  F001         	movff	espi_master_send@buffer,buffer_peek@buffer
  1875  001DE4  C009  F002         	movff	espi_master_send@buffer+1,buffer_peek@buffer+1
  1876  001DE8  ECB9  F00C         	call	_buffer_peek	;wreg free
  1877  001DEC  C001  F010         	movff	?_buffer_peek,espi_master_send@byte_to_send
  1878  001DF0  C002  F011         	movff	?_buffer_peek+1,espi_master_send@byte_to_send+1
  1879                           
  1880                           ;extended_spi.c: 155: if (byte_to_send == -1)
  1881  001DF4  2810               	incf	espi_master_send@byte_to_send,w,c
  1882  001DF6  E105               	bnz	l1740
  1883  001DF8  2811               	incf	espi_master_send@byte_to_send+1,w,c
  1884  001DFA  B4D8               	btfsc	status,2,c
  1885  001DFC  D02C               	goto	l1760
  1886  001DFE  D001               	goto	l1740
  1887                           
  1888                           ;extended_spi.c: 156: break;
  1889  001E00  D02A               	goto	l1760
  1890  001E02                     l1740:
  1891                           
  1892                           ;extended_spi.c: 157: encode_data(byte_to_send, &byte_1, &byte_2);
  1893  001E02  0E12               	movlw	low espi_master_send@byte_1
  1894  001E04  6E01               	movwf	encode_data@byte_1,c
  1895  001E06  0E00               	movlw	high espi_master_send@byte_1
  1896  001E08  6E02               	movwf	encode_data@byte_1+1,c
  1897  001E0A  0E13               	movlw	low espi_master_send@byte_2
  1898  001E0C  6E03               	movwf	encode_data@byte_2,c
  1899  001E0E  0E00               	movlw	high espi_master_send@byte_2
  1900  001E10  6E04               	movwf	encode_data@byte_2+1,c
  1901  001E12  5010               	movf	espi_master_send@byte_to_send,w,c
  1902  001E14  EC96  F00C         	call	_encode_data
  1903                           
  1904                           ;extended_spi.c: 159: received_1 = spi_send_get_byte(byte_1);
  1905  001E18  5012               	movf	espi_master_send@byte_1,w,c
  1906  001E1A  ECEA  F00B         	call	_spi_send_get_byte
  1907  001E1E  6E0E               	movwf	espi_master_send@received_1,c
  1908                           
  1909                           ;extended_spi.c: 160: send_delay();
  1910  001E20  ECC2  F00B         	call	_send_delay	;wreg free
  1911                           
  1912                           ;extended_spi.c: 161: if (received_1 == 0x30)
  1913  001E24  0E30               	movlw	48
  1914  001E26  180E               	xorwf	espi_master_send@received_1,w,c
  1915  001E28  B4D8               	btfsc	status,2,c
  1916  001E2A  0012               	return	
  1917  001E2C  D001               	goto	l1750
  1918                           
  1919                           ;extended_spi.c: 162: return;
  1920  001E2E  0012               	return	
  1921  001E30                     l1750:
  1922                           
  1923                           ;extended_spi.c: 164: received_2 = spi_send_get_byte(byte_2);
  1924  001E30  5013               	movf	espi_master_send@byte_2,w,c
  1925  001E32  ECEA  F00B         	call	_spi_send_get_byte
  1926  001E36  6E0F               	movwf	espi_master_send@received_2,c
  1927                           
  1928                           ;extended_spi.c: 165: send_delay();
  1929  001E38  ECC2  F00B         	call	_send_delay	;wreg free
  1930                           
  1931                           ;extended_spi.c: 166: if (received_2 == 0x30)
  1932  001E3C  0E30               	movlw	48
  1933  001E3E  180F               	xorwf	espi_master_send@received_2,w,c
  1934  001E40  B4D8               	btfsc	status,2,c
  1935  001E42  0012               	return	
  1936  001E44  D001               	goto	l1758
  1937                           
  1938                           ;extended_spi.c: 167: return;
  1939  001E46  0012               	return	
  1940  001E48                     l1758:
  1941                           
  1942                           ;extended_spi.c: 169: buffer_pop(buffer);
  1943  001E48  C008  F001         	movff	espi_master_send@buffer,buffer_pop@buffer
  1944  001E4C  C009  F002         	movff	espi_master_send@buffer+1,buffer_pop@buffer+1
  1945  001E50  EC1A  F00D         	call	_buffer_pop	;wreg free
  1946  001E54  D7C5               	goto	l1734
  1947  001E56                     l1760:
  1948                           
  1949                           ;extended_spi.c: 170: }
  1950                           ;extended_spi.c: 172: spi_send_get_byte(0x30);
  1951  001E56  0E30               	movlw	48
  1952  001E58  ECEA  F00B         	call	_spi_send_get_byte
  1953                           
  1954                           ;extended_spi.c: 173: send_delay();
  1955  001E5C  ECC2  F00B         	call	_send_delay	;wreg free
  1956  001E60  0012               	return	
  1957  001E62  0012               	return		;funcret
  1958  001E64                     __end_of_espi_master_send:
  1959                           	opt stack 0
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           tblptrl	equ	0xFF6
  1963                           tablat	equ	0xFF5
  1964                           intcon	equ	0xFF2
  1965                           intcon2	equ	0xFF1
  1966                           intcon3	equ	0xFF0
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           plusw1	equ	0xFE3
  1970                           indf2	equ	0xFDF
  1971                           plusw2	equ	0xFDB
  1972                           fsr2h	equ	0xFDA
  1973                           fsr2l	equ	0xFD9
  1974                           status	equ	0xFD8
  1975                           
  1976 ;; *************** function _encode_data *****************
  1977 ;; Defined at:
  1978 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  data            1    wreg     unsigned char 
  1981 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
  1982 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
  1983 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
  1984 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;  data            1    5[COMRAM] unsigned char 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;		None               void
  1989 ;; Registers used:
  1990 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0
  1996 ;;      Params:         4       0
  1997 ;;      Locals:         1       0
  1998 ;;      Temps:          1       0
  1999 ;;      Totals:         6       0
  2000 ;;Total ram usage:        6 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; This function calls:
  2003 ;;		Nothing
  2004 ;; This function is called by:
  2005 ;;		_espi_master_send
  2006 ;;		_espi_slave_send
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text12
  2011  00192C                     __ptext12:
  2012                           	opt stack 0
  2013  00192C                     _encode_data:
  2014                           	opt stack 29
  2015                           
  2016                           ;incstack = 0
  2017                           ;encode_data@data stored from wreg
  2018  00192C  6E06               	movwf	encode_data@data,c
  2019                           
  2020                           ;encoding.c: 5: *byte_1 = 0xA0;
  2021  00192E  C001  FFD9         	movff	encode_data@byte_1,fsr2l
  2022  001932  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
  2023  001936  0EA0               	movlw	160
  2024  001938  6EDF               	movwf	indf2,c
  2025                           
  2026                           ;encoding.c: 6: *byte_2 = 0xA0;
  2027  00193A  C003  FFD9         	movff	encode_data@byte_2,fsr2l
  2028  00193E  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
  2029  001942  0EA0               	movlw	160
  2030  001944  6EDF               	movwf	indf2,c
  2031                           
  2032                           ;encoding.c: 8: *byte_1 |= data >> 4;
  2033  001946  C006  F005         	movff	encode_data@data,??_encode_data
  2034  00194A  3A05               	swapf	??_encode_data,f,c
  2035  00194C  0E0F               	movlw	15
  2036  00194E  1605               	andwf	??_encode_data,f,c
  2037  001950  C001  FFD9         	movff	encode_data@byte_1,fsr2l
  2038  001954  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
  2039  001958  5005               	movf	??_encode_data,w,c
  2040  00195A  12DF               	iorwf	indf2,f,c
  2041                           
  2042                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
  2043  00195C  C006  F005         	movff	encode_data@data,??_encode_data
  2044  001960  0E0F               	movlw	15
  2045  001962  1605               	andwf	??_encode_data,f,c
  2046  001964  C003  FFD9         	movff	encode_data@byte_2,fsr2l
  2047  001968  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
  2048  00196C  5005               	movf	??_encode_data,w,c
  2049  00196E  12DF               	iorwf	indf2,f,c
  2050  001970  0012               	return		;funcret
  2051  001972                     __end_of_encode_data:
  2052                           	opt stack 0
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           intcon	equ	0xFF2
  2058                           intcon2	equ	0xFF1
  2059                           intcon3	equ	0xFF0
  2060                           postinc0	equ	0xFEE
  2061                           wreg	equ	0xFE8
  2062                           plusw1	equ	0xFE3
  2063                           indf2	equ	0xFDF
  2064                           plusw2	equ	0xFDB
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           status	equ	0xFD8
  2068                           
  2069 ;; *************** function _buffer_pop *****************
  2070 ;; Defined at:
  2071 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2074 ;;		 -> main@receive(34), main@send(34), 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  byte            2    4[COMRAM] int 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  2    0[COMRAM] int 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0
  2086 ;;      Params:         2       0
  2087 ;;      Locals:         2       0
  2088 ;;      Temps:          2       0
  2089 ;;      Totals:         6       0
  2090 ;;Total ram usage:        6 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; This function calls:
  2093 ;;		Nothing
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;;		_espi_master_send
  2097 ;;		_espi_slave_send
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text13
  2102  001A34                     __ptext13:
  2103                           	opt stack 0
  2104  001A34                     _buffer_pop:
  2105                           	opt stack 29
  2106                           
  2107                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
  2108                           
  2109                           ;incstack = 0
  2110  001A34  EE20 F001          	lfsr	2,1
  2111  001A38  5001               	movf	buffer_pop@buffer,w,c
  2112  001A3A  26D9               	addwf	fsr2l,f,c
  2113  001A3C  5002               	movf	buffer_pop@buffer+1,w,c
  2114  001A3E  22DA               	addwfc	fsr2h,f,c
  2115  001A40  50DF               	movf	indf2,w,c
  2116  001A42  A4D8               	btfss	status,2,c
  2117  001A44  D003               	goto	l1518
  2118                           
  2119                           ;circular_buffer.c: 40: return -1;
  2120  001A46  6801               	setf	?_buffer_pop,c
  2121  001A48  6802               	setf	?_buffer_pop+1,c
  2122  001A4A  0012               	return	
  2123  001A4C                     l1518:
  2124                           
  2125                           ;circular_buffer.c: 41: }
  2126                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2127  001A4C  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2128  001A50  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2129  001A54  50DF               	movf	indf2,w,c
  2130  001A56  6E03               	movwf	??_buffer_pop& (0+255),c
  2131  001A58  5003               	movf	??_buffer_pop,w,c
  2132  001A5A  0D01               	mullw	1
  2133  001A5C  0E02               	movlw	2
  2134  001A5E  26F3               	addwf	prodl,f,c
  2135  001A60  0E00               	movlw	0
  2136  001A62  22F4               	addwfc	prodh,f,c
  2137  001A64  50F3               	movf	prodl,w,c
  2138  001A66  2401               	addwf	buffer_pop@buffer,w,c
  2139  001A68  6ED9               	movwf	fsr2l,c
  2140  001A6A  50F4               	movf	prodh,w,c
  2141  001A6C  2002               	addwfc	buffer_pop@buffer+1,w,c
  2142  001A6E  6EDA               	movwf	fsr2h,c
  2143  001A70  50DF               	movf	indf2,w,c
  2144  001A72  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  2145  001A74  5004               	movf	??_buffer_pop+1,w,c
  2146  001A76  6E05               	movwf	buffer_pop@byte,c
  2147  001A78  6A06               	clrf	buffer_pop@byte+1,c
  2148                           
  2149                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  2150  001A7A  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2151  001A7E  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2152  001A82  50DF               	movf	indf2,w,c
  2153  001A84  6E03               	movwf	??_buffer_pop& (0+255),c
  2154  001A86  2803               	incf	??_buffer_pop,w,c
  2155  001A88  0B1F               	andlw	31
  2156  001A8A  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2157  001A8E  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2158  001A92  6EDF               	movwf	indf2,c
  2159                           
  2160                           ;circular_buffer.c: 45: buffer->count--;
  2161  001A94  EE20 F001          	lfsr	2,1
  2162  001A98  5001               	movf	buffer_pop@buffer,w,c
  2163  001A9A  26D9               	addwf	fsr2l,f,c
  2164  001A9C  5002               	movf	buffer_pop@buffer+1,w,c
  2165  001A9E  22DA               	addwfc	fsr2h,f,c
  2166  001AA0  06DF               	decf	indf2,f,c
  2167                           
  2168                           ;circular_buffer.c: 47: return byte;
  2169  001AA2  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  2170  001AA6  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  2171  001AAA  0012               	return	
  2172  001AAC  0012               	return		;funcret
  2173  001AAE                     __end_of_buffer_pop:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           intcon	equ	0xFF2
  2182                           intcon2	equ	0xFF1
  2183                           intcon3	equ	0xFF0
  2184                           postinc0	equ	0xFEE
  2185                           wreg	equ	0xFE8
  2186                           plusw1	equ	0xFE3
  2187                           indf2	equ	0xFDF
  2188                           plusw2	equ	0xFDB
  2189                           fsr2h	equ	0xFDA
  2190                           fsr2l	equ	0xFD9
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _buffer_peek *****************
  2194 ;; Defined at:
  2195 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2198 ;;		 -> main@send(34), 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  byte            2    4[COMRAM] int 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  2    0[COMRAM] int 
  2203 ;; Registers used:
  2204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0
  2210 ;;      Params:         2       0
  2211 ;;      Locals:         2       0
  2212 ;;      Temps:          2       0
  2213 ;;      Totals:         6       0
  2214 ;;Total ram usage:        6 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; This function calls:
  2217 ;;		Nothing
  2218 ;; This function is called by:
  2219 ;;		_espi_master_send
  2220 ;;		_espi_slave_send
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text14
  2225  001972                     __ptext14:
  2226                           	opt stack 0
  2227  001972                     _buffer_peek:
  2228                           	opt stack 29
  2229                           
  2230                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
  2231                           
  2232                           ;incstack = 0
  2233  001972  EE20 F001          	lfsr	2,1
  2234  001976  5001               	movf	buffer_peek@buffer,w,c
  2235  001978  26D9               	addwf	fsr2l,f,c
  2236  00197A  5002               	movf	buffer_peek@buffer+1,w,c
  2237  00197C  22DA               	addwfc	fsr2h,f,c
  2238  00197E  50DF               	movf	indf2,w,c
  2239  001980  A4D8               	btfss	status,2,c
  2240  001982  D003               	goto	l1582
  2241                           
  2242                           ;circular_buffer.c: 58: return -1;
  2243  001984  6801               	setf	?_buffer_peek,c
  2244  001986  6802               	setf	?_buffer_peek+1,c
  2245  001988  0012               	return	
  2246  00198A                     l1582:
  2247                           
  2248                           ;circular_buffer.c: 59: }
  2249                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2250  00198A  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
  2251  00198E  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
  2252  001992  50DF               	movf	indf2,w,c
  2253  001994  6E03               	movwf	??_buffer_peek& (0+255),c
  2254  001996  5003               	movf	??_buffer_peek,w,c
  2255  001998  0D01               	mullw	1
  2256  00199A  0E02               	movlw	2
  2257  00199C  26F3               	addwf	prodl,f,c
  2258  00199E  0E00               	movlw	0
  2259  0019A0  22F4               	addwfc	prodh,f,c
  2260  0019A2  50F3               	movf	prodl,w,c
  2261  0019A4  2401               	addwf	buffer_peek@buffer,w,c
  2262  0019A6  6ED9               	movwf	fsr2l,c
  2263  0019A8  50F4               	movf	prodh,w,c
  2264  0019AA  2002               	addwfc	buffer_peek@buffer+1,w,c
  2265  0019AC  6EDA               	movwf	fsr2h,c
  2266  0019AE  50DF               	movf	indf2,w,c
  2267  0019B0  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
  2268  0019B2  5004               	movf	??_buffer_peek+1,w,c
  2269  0019B4  6E05               	movwf	buffer_peek@byte,c
  2270  0019B6  6A06               	clrf	buffer_peek@byte+1,c
  2271                           
  2272                           ;circular_buffer.c: 63: return byte;
  2273  0019B8  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
  2274  0019BC  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
  2275  0019C0  0012               	return	
  2276  0019C2  0012               	return		;funcret
  2277  0019C4                     __end_of_buffer_peek:
  2278                           	opt stack 0
  2279                           tblptru	equ	0xFF8
  2280                           tblptrh	equ	0xFF7
  2281                           tblptrl	equ	0xFF6
  2282                           tablat	equ	0xFF5
  2283                           prodh	equ	0xFF4
  2284                           prodl	equ	0xFF3
  2285                           intcon	equ	0xFF2
  2286                           intcon2	equ	0xFF1
  2287                           intcon3	equ	0xFF0
  2288                           postinc0	equ	0xFEE
  2289                           wreg	equ	0xFE8
  2290                           plusw1	equ	0xFE3
  2291                           indf2	equ	0xFDF
  2292                           plusw2	equ	0xFDB
  2293                           fsr2h	equ	0xFDA
  2294                           fsr2l	equ	0xFD9
  2295                           status	equ	0xFD8
  2296                           
  2297 ;; *************** function _buffer_count *****************
  2298 ;; Defined at:
  2299 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2302 ;;		 -> main@receive(34), main@send(34), 
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;		None
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  1    wreg      unsigned char 
  2307 ;; Registers used:
  2308 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0
  2314 ;;      Params:         2       0
  2315 ;;      Locals:         0       0
  2316 ;;      Temps:          0       0
  2317 ;;      Totals:         2       0
  2318 ;;Total ram usage:        2 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; This function calls:
  2321 ;;		Nothing
  2322 ;; This function is called by:
  2323 ;;		_main
  2324 ;;		_espi_master_send
  2325 ;;		_espi_slave_send
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text15
  2330  0017C2                     __ptext15:
  2331                           	opt stack 0
  2332  0017C2                     _buffer_count:
  2333                           	opt stack 29
  2334                           
  2335                           ;circular_buffer.c: 6: return buffer->count;
  2336                           
  2337                           ;incstack = 0
  2338  0017C2  EE20 F001          	lfsr	2,1
  2339  0017C6  5001               	movf	buffer_count@buffer,w,c
  2340  0017C8  26D9               	addwf	fsr2l,f,c
  2341  0017CA  5002               	movf	buffer_count@buffer+1,w,c
  2342  0017CC  22DA               	addwfc	fsr2h,f,c
  2343  0017CE  50DF               	movf	indf2,w,c
  2344  0017D0  0012               	return	
  2345  0017D2  0012               	return		;funcret
  2346  0017D4                     __end_of_buffer_count:
  2347                           	opt stack 0
  2348                           tblptru	equ	0xFF8
  2349                           tblptrh	equ	0xFF7
  2350                           tblptrl	equ	0xFF6
  2351                           tablat	equ	0xFF5
  2352                           prodh	equ	0xFF4
  2353                           prodl	equ	0xFF3
  2354                           intcon	equ	0xFF2
  2355                           intcon2	equ	0xFF1
  2356                           intcon3	equ	0xFF0
  2357                           postinc0	equ	0xFEE
  2358                           wreg	equ	0xFE8
  2359                           plusw1	equ	0xFE3
  2360                           indf2	equ	0xFDF
  2361                           plusw2	equ	0xFDB
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _espi_master_receive *****************
  2367 ;; Defined at:
  2368 ;;		line 177 in file "../TorqueGriper.X/extended_spi.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;  buffer          2    7[COMRAM] PTR struct circular_buff
  2371 ;;		 -> main@receive(34), 
  2372 ;;  timer_start     2    9[COMRAM] PTR FTN(int ,)void 
  2373 ;;		 -> set_timer3(0), 
  2374 ;;  timer           2   11[COMRAM] PTR FTN()unsigned char 
  2375 ;;		 -> timer3_up(1), 
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;  value           1   15[COMRAM] unsigned char 
  2378 ;;  received_2      1   14[COMRAM] unsigned char 
  2379 ;;  received_1      1   13[COMRAM] unsigned char 
  2380 ;; Return value:  Size  Location     Type
  2381 ;;		None               void
  2382 ;; Registers used:
  2383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0
  2389 ;;      Params:         6       0
  2390 ;;      Locals:         3       0
  2391 ;;      Temps:          0       0
  2392 ;;      Totals:         9       0
  2393 ;;Total ram usage:        9 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    2
  2396 ;; This function calls:
  2397 ;;		_buffer_empty
  2398 ;;		_buffer_push
  2399 ;;		_buffer_space
  2400 ;;		_decode_data
  2401 ;;		_send_delay
  2402 ;;		_spi_send_get_byte
  2403 ;;		_wait_pulse
  2404 ;; This function is called by:
  2405 ;;		_main
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text16
  2410  001D0A                     __ptext16:
  2411                           	opt stack 0
  2412  001D0A                     _espi_master_receive:
  2413                           	opt stack 28
  2414                           
  2415                           ;extended_spi.c: 181: if (buffer_empty(buffer)) {
  2416                           
  2417                           ;incstack = 0
  2418  001D0A  C008  F001         	movff	espi_master_receive@buffer,buffer_empty@buffer
  2419  001D0E  C009  F002         	movff	espi_master_receive@buffer+1,buffer_empty@buffer+1
  2420  001D12  ECFF  F00B         	call	_buffer_empty	;wreg free
  2421  001D16  0900               	iorlw	0
  2422  001D18  B4D8               	btfsc	status,2,c
  2423  001D1A  0012               	return	
  2424                           
  2425                           ;extended_spi.c: 182: spi_send_get_byte(0x20);
  2426  001D1C  0E20               	movlw	32
  2427  001D1E  ECEA  F00B         	call	_spi_send_get_byte
  2428                           
  2429                           ;extended_spi.c: 184: wait_pulse(0x20, timer_start, timer);
  2430  001D22  C00A  F003         	movff	espi_master_receive@timer_start,wait_pulse@timer_start
  2431  001D26  C00B  F004         	movff	espi_master_receive@timer_start+1,wait_pulse@timer_start+1
  2432  001D2A  C00C  F005         	movff	espi_master_receive@timer,wait_pulse@timer
  2433  001D2E  C00D  F006         	movff	espi_master_receive@timer+1,wait_pulse@timer+1
  2434  001D32  0E20               	movlw	32
  2435  001D34  ECE2  F00C         	call	_wait_pulse
  2436                           
  2437                           ;extended_spi.c: 186: uint8_t received_1;
  2438                           ;extended_spi.c: 187: uint8_t received_2;
  2439                           ;extended_spi.c: 188: uint8_t value;
  2440                           ;extended_spi.c: 190: while (buffer_space(buffer)) {
  2441  001D38  D02B               	goto	l1678
  2442  001D3A                     l1658:
  2443                           
  2444                           ;extended_spi.c: 191: received_1 = spi_send_get_byte(0xE0);
  2445  001D3A  0EE0               	movlw	224
  2446  001D3C  ECEA  F00B         	call	_spi_send_get_byte
  2447  001D40  6E0E               	movwf	espi_master_receive@received_1,c
  2448                           
  2449                           ;extended_spi.c: 192: send_delay();
  2450  001D42  ECC2  F00B         	call	_send_delay	;wreg free
  2451                           
  2452                           ;extended_spi.c: 193: if (received_1 == 0x30)
  2453  001D46  0E30               	movlw	48
  2454  001D48  180E               	xorwf	espi_master_receive@received_1,w,c
  2455  001D4A  B4D8               	btfsc	status,2,c
  2456  001D4C  0012               	return	
  2457  001D4E  D001               	goto	l1666
  2458                           
  2459                           ;extended_spi.c: 194: return;
  2460  001D50  0012               	return	
  2461  001D52                     l1666:
  2462                           
  2463                           ;extended_spi.c: 196: received_2 = spi_send_get_byte(0xE0);
  2464  001D52  0EE0               	movlw	224
  2465  001D54  ECEA  F00B         	call	_spi_send_get_byte
  2466  001D58  6E0F               	movwf	espi_master_receive@received_2,c
  2467                           
  2468                           ;extended_spi.c: 197: send_delay();
  2469  001D5A  ECC2  F00B         	call	_send_delay	;wreg free
  2470                           
  2471                           ;extended_spi.c: 198: if (received_2 == 0x30)
  2472  001D5E  0E30               	movlw	48
  2473  001D60  180F               	xorwf	espi_master_receive@received_2,w,c
  2474  001D62  B4D8               	btfsc	status,2,c
  2475  001D64  0012               	return	
  2476  001D66  D001               	goto	l1674
  2477                           
  2478                           ;extended_spi.c: 199: return;
  2479  001D68  0012               	return	
  2480  001D6A                     l1674:
  2481                           
  2482                           ;extended_spi.c: 201: decode_data(&value, received_1, received_2);
  2483  001D6A  0E10               	movlw	low espi_master_receive@value
  2484  001D6C  6E01               	movwf	decode_data@data,c
  2485  001D6E  0E00               	movlw	high espi_master_receive@value
  2486  001D70  6E02               	movwf	decode_data@data+1,c
  2487  001D72  C00E  F003         	movff	espi_master_receive@received_1,decode_data@byte_1
  2488  001D76  C00F  F004         	movff	espi_master_receive@received_2,decode_data@byte_2
  2489  001D7A  EC59  F00C         	call	_decode_data	;wreg free
  2490                           
  2491                           ;extended_spi.c: 202: buffer_push(buffer, value);
  2492  001D7E  C008  F001         	movff	espi_master_receive@buffer,buffer_push@buffer
  2493  001D82  C009  F002         	movff	espi_master_receive@buffer+1,buffer_push@buffer+1
  2494  001D86  C010  F003         	movff	espi_master_receive@value,buffer_push@byte
  2495  001D8A  EC57  F00D         	call	_buffer_push	;wreg free
  2496  001D8E  D000               	goto	l1678
  2497  001D90                     l1678:
  2498  001D90  C008  F001         	movff	espi_master_receive@buffer,buffer_space@buffer
  2499  001D94  C009  F002         	movff	espi_master_receive@buffer+1,buffer_space@buffer+1
  2500  001D98  ECF4  F00B         	call	_buffer_space	;wreg free
  2501  001D9C  0900               	iorlw	0
  2502  001D9E  A4D8               	btfss	status,2,c
  2503  001DA0  D7CC               	goto	l1658
  2504                           
  2505                           ;extended_spi.c: 203: }
  2506                           ;extended_spi.c: 205: spi_send_get_byte(0x30);
  2507  001DA2  0E30               	movlw	48
  2508  001DA4  ECEA  F00B         	call	_spi_send_get_byte
  2509                           
  2510                           ;extended_spi.c: 206: send_delay();
  2511  001DA8  ECC2  F00B         	call	_send_delay	;wreg free
  2512  001DAC  0012               	return	
  2513  001DAE  0012               	return		;funcret
  2514  001DB0                     __end_of_espi_master_receive:
  2515                           	opt stack 0
  2516                           tblptru	equ	0xFF8
  2517                           tblptrh	equ	0xFF7
  2518                           tblptrl	equ	0xFF6
  2519                           tablat	equ	0xFF5
  2520                           prodh	equ	0xFF4
  2521                           prodl	equ	0xFF3
  2522                           intcon	equ	0xFF2
  2523                           intcon2	equ	0xFF1
  2524                           intcon3	equ	0xFF0
  2525                           postinc0	equ	0xFEE
  2526                           wreg	equ	0xFE8
  2527                           plusw1	equ	0xFE3
  2528                           indf2	equ	0xFDF
  2529                           plusw2	equ	0xFDB
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function _wait_pulse *****************
  2535 ;; Defined at:
  2536 ;;		line 125 in file "../TorqueGriper.X/extended_spi.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  value           1    wreg     unsigned char 
  2539 ;;  timer_start     2    2[COMRAM] PTR FTN(int ,)void 
  2540 ;;		 -> set_timer3(0), 
  2541 ;;  timer           2    4[COMRAM] PTR FTN()unsigned char 
  2542 ;;		 -> timer3_up(1), 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  value           1    6[COMRAM] unsigned char 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;		None               void
  2547 ;; Registers used:
  2548 ;;		wreg, status,2, pclat, tosl, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0
  2554 ;;      Params:         4       0
  2555 ;;      Locals:         1       0
  2556 ;;      Temps:          0       0
  2557 ;;      Totals:         5       0
  2558 ;;Total ram usage:        5 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    1
  2561 ;; This function calls:
  2562 ;;		_set_timer3
  2563 ;;		_spi_send_get_byte
  2564 ;;		_timer3_up
  2565 ;; This function is called by:
  2566 ;;		_espi_master_send
  2567 ;;		_espi_master_receive
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text17
  2572  0019C4                     __ptext17:
  2573                           	opt stack 0
  2574  0019C4                     _wait_pulse:
  2575                           	opt stack 28
  2576                           
  2577                           ;incstack = 0
  2578                           ;wait_pulse@value stored from wreg
  2579  0019C4  6E07               	movwf	wait_pulse@value,c
  2580                           
  2581                           ;extended_spi.c: 128: (*timer_start)(54335);
  2582  0019C6  0ED4               	movlw	212
  2583  0019C8  6E02               	movwf	set_timer3@value+1,c
  2584  0019CA  0E3F               	movlw	63
  2585  0019CC  6E01               	movwf	set_timer3@value,c
  2586  0019CE  D801               	call	u1158
  2587  0019D0  D02D               	goto	l1602
  2588  0019D2                     u1158:
  2589  0019D2  0005               	push	
  2590  0019D4  6EFA               	movwf	pclath,c
  2591  0019D6  5003               	movf	wait_pulse@timer_start,w,c
  2592  0019D8  6EFD               	movwf	tosl,c
  2593  0019DA  5004               	movf	wait_pulse@timer_start+1,w,c
  2594  0019DC  6EFE               	movwf	tosh,c
  2595  0019DE  50F8               	movf	tblptru,w,c
  2596  0019E0  6EFF               	movwf	tosu,c
  2597  0019E2  50FA               	movf	pclath,w,c
  2598  0019E4  0012               	return		;indir
  2599  0019E6                     l1596:
  2600                           
  2601                           ;extended_spi.c: 130: if ((*timer)()) {
  2602  0019E6  D801               	call	u1168
  2603  0019E8  D00A               	goto	u1169
  2604  0019EA                     u1168:
  2605  0019EA  0005               	push	
  2606  0019EC  6EFA               	movwf	pclath,c
  2607  0019EE  5005               	movf	wait_pulse@timer,w,c
  2608  0019F0  6EFD               	movwf	tosl,c
  2609  0019F2  5006               	movf	wait_pulse@timer+1,w,c
  2610  0019F4  6EFE               	movwf	tosh,c
  2611  0019F6  50F8               	movf	tblptru,w,c
  2612  0019F8  6EFF               	movwf	tosu,c
  2613  0019FA  50FA               	movf	pclath,w,c
  2614  0019FC  0012               	return		;indir
  2615  0019FE                     u1169:
  2616  0019FE  0900               	iorlw	0
  2617  001A00  B4D8               	btfsc	status,2,c
  2618  001A02  D014               	goto	l1602
  2619                           
  2620                           ;extended_spi.c: 131: spi_send_get_byte(value);
  2621  001A04  5007               	movf	wait_pulse@value,w,c
  2622  001A06  ECEA  F00B         	call	_spi_send_get_byte
  2623                           
  2624                           ;extended_spi.c: 132: (*timer_start)(54335);
  2625  001A0A  0ED4               	movlw	212
  2626  001A0C  6E02               	movwf	set_timer3@value+1,c
  2627  001A0E  0E3F               	movlw	63
  2628  001A10  6E01               	movwf	set_timer3@value,c
  2629  001A12  D801               	call	u1188
  2630  001A14  D00B               	goto	l1602
  2631  001A16                     u1188:
  2632  001A16  0005               	push	
  2633  001A18  6EFA               	movwf	pclath,c
  2634  001A1A  5003               	movf	wait_pulse@timer_start,w,c
  2635  001A1C  6EFD               	movwf	tosl,c
  2636  001A1E  5004               	movf	wait_pulse@timer_start+1,w,c
  2637  001A20  6EFE               	movwf	tosh,c
  2638  001A22  50F8               	movf	tblptru,w,c
  2639  001A24  6EFF               	movwf	tosu,c
  2640  001A26  50FA               	movf	pclath,w,c
  2641  001A28  0012               	return		;indir
  2642  001A2A  D000               	goto	l1602
  2643  001A2C                     l1602:
  2644  001A2C  A2F0               	btfss	intcon3,1,c	;volatile
  2645  001A2E  D7DB               	goto	l1596
  2646                           
  2647                           ;extended_spi.c: 133: }
  2648                           ;extended_spi.c: 134: }
  2649                           ;extended_spi.c: 135: INT2IF = 0;
  2650  001A30  92F0               	bcf	intcon3,1,c	;volatile
  2651  001A32  0012               	return		;funcret
  2652  001A34                     __end_of_wait_pulse:
  2653                           	opt stack 0
  2654                           tosu	equ	0xFFF
  2655                           tosh	equ	0xFFE
  2656                           tosl	equ	0xFFD
  2657                           pclath	equ	0xFFA
  2658                           tblptru	equ	0xFF8
  2659                           tblptrh	equ	0xFF7
  2660                           tblptrl	equ	0xFF6
  2661                           tablat	equ	0xFF5
  2662                           prodh	equ	0xFF4
  2663                           prodl	equ	0xFF3
  2664                           intcon	equ	0xFF2
  2665                           intcon2	equ	0xFF1
  2666                           intcon3	equ	0xFF0
  2667                           postinc0	equ	0xFEE
  2668                           wreg	equ	0xFE8
  2669                           plusw1	equ	0xFE3
  2670                           indf2	equ	0xFDF
  2671                           plusw2	equ	0xFDB
  2672                           fsr2h	equ	0xFDA
  2673                           fsr2l	equ	0xFD9
  2674                           status	equ	0xFD8
  2675                           
  2676 ;; *************** function _timer3_up *****************
  2677 ;; Defined at:
  2678 ;;		line 48 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;		None
  2681 ;; Auto vars:     Size  Location     Type
  2682 ;;		None
  2683 ;; Return value:  Size  Location     Type
  2684 ;;                  1    wreg      unsigned char 
  2685 ;; Registers used:
  2686 ;;		wreg
  2687 ;; Tracked objects:
  2688 ;;		On entry : 0/0
  2689 ;;		On exit  : 0/0
  2690 ;;		Unchanged: 0/0
  2691 ;; Data sizes:     COMRAM   BANK0
  2692 ;;      Params:         0       0
  2693 ;;      Locals:         0       0
  2694 ;;      Temps:          0       0
  2695 ;;      Totals:         0       0
  2696 ;;Total ram usage:        0 bytes
  2697 ;; Hardware stack levels used:    1
  2698 ;; This function calls:
  2699 ;;		Nothing
  2700 ;; This function is called by:
  2701 ;;		_main
  2702 ;;		_wait_pulse
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           	psect	text18
  2707  0017A6                     __ptext18:
  2708                           	opt stack 0
  2709  0017A6                     _timer3_up:
  2710                           	opt stack 28
  2711                           
  2712                           ;timers_pic.c: 50: return (PIR2bits.TMR3IF) ? 1 : 0;
  2713                           
  2714                           ;incstack = 0
  2715  0017A6  A2A1               	btfss	4001,1,c	;volatile
  2716  0017A8  D002               	goto	u1040
  2717  0017AA  0E01               	movlw	1
  2718  0017AC  0012               	return	
  2719  0017AE                     u1040:
  2720  0017AE  0E00               	movlw	0
  2721  0017B0  0012               	return	
  2722  0017B2  0012               	return		;funcret
  2723  0017B4                     __end_of_timer3_up:
  2724                           	opt stack 0
  2725                           tosu	equ	0xFFF
  2726                           tosh	equ	0xFFE
  2727                           tosl	equ	0xFFD
  2728                           pclath	equ	0xFFA
  2729                           tblptru	equ	0xFF8
  2730                           tblptrh	equ	0xFF7
  2731                           tblptrl	equ	0xFF6
  2732                           tablat	equ	0xFF5
  2733                           prodh	equ	0xFF4
  2734                           prodl	equ	0xFF3
  2735                           intcon	equ	0xFF2
  2736                           intcon2	equ	0xFF1
  2737                           intcon3	equ	0xFF0
  2738                           postinc0	equ	0xFEE
  2739                           wreg	equ	0xFE8
  2740                           plusw1	equ	0xFE3
  2741                           indf2	equ	0xFDF
  2742                           plusw2	equ	0xFDB
  2743                           fsr2h	equ	0xFDA
  2744                           fsr2l	equ	0xFD9
  2745                           status	equ	0xFD8
  2746                           
  2747 ;; *************** function _spi_send_get_byte *****************
  2748 ;; Defined at:
  2749 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;  byte            1    wreg     unsigned char 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  byte            1    0[COMRAM] unsigned char 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      unsigned char 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0
  2763 ;;      Params:         0       0
  2764 ;;      Locals:         1       0
  2765 ;;      Temps:          0       0
  2766 ;;      Totals:         1       0
  2767 ;;Total ram usage:        1 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; This function calls:
  2770 ;;		Nothing
  2771 ;; This function is called by:
  2772 ;;		_wait_pulse
  2773 ;;		_espi_master_send
  2774 ;;		_espi_master_receive
  2775 ;;		_spi_send_data
  2776 ;;		_spi_master_get_data
  2777 ;;		_espi_slave_receive
  2778 ;;		_espi_slave_send
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           	psect	text19
  2783  0017D4                     __ptext19:
  2784                           	opt stack 0
  2785  0017D4                     _spi_send_get_byte:
  2786                           	opt stack 28
  2787                           
  2788                           ;incstack = 0
  2789                           ;spi_send_get_byte@byte stored from wreg
  2790  0017D4  6E01               	movwf	spi_send_get_byte@byte,c
  2791                           
  2792                           ;spi_pic.c: 35: SSPBUF = byte;
  2793  0017D6  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  2794                           
  2795                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  2796  0017DA  D000               	goto	l96
  2797  0017DC                     l96:
  2798  0017DC  A0C7               	btfss	4039,0,c	;volatile
  2799  0017DE  D7FE               	goto	l96
  2800                           
  2801                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  2802  0017E0  BEC6               	btfsc	4038,7,c	;volatile
  2803                           
  2804                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  2805  0017E2  9EC6               	bcf	4038,7,c	;volatile
  2806                           
  2807                           ;spi_pic.c: 39: return SSPBUF;
  2808  0017E4  50C9               	movf	4041,w,c	;volatile
  2809  0017E6  0012               	return		;funcret
  2810  0017E8                     __end_of_spi_send_get_byte:
  2811                           	opt stack 0
  2812                           tosu	equ	0xFFF
  2813                           tosh	equ	0xFFE
  2814                           tosl	equ	0xFFD
  2815                           pclath	equ	0xFFA
  2816                           tblptru	equ	0xFF8
  2817                           tblptrh	equ	0xFF7
  2818                           tblptrl	equ	0xFF6
  2819                           tablat	equ	0xFF5
  2820                           prodh	equ	0xFF4
  2821                           prodl	equ	0xFF3
  2822                           intcon	equ	0xFF2
  2823                           intcon2	equ	0xFF1
  2824                           intcon3	equ	0xFF0
  2825                           postinc0	equ	0xFEE
  2826                           wreg	equ	0xFE8
  2827                           plusw1	equ	0xFE3
  2828                           indf2	equ	0xFDF
  2829                           plusw2	equ	0xFDB
  2830                           fsr2h	equ	0xFDA
  2831                           fsr2l	equ	0xFD9
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function _set_timer3 *****************
  2835 ;; Defined at:
  2836 ;;		line 34 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  value           2    0[COMRAM] int 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;		None               void
  2843 ;; Registers used:
  2844 ;;		None
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0
  2850 ;;      Params:         2       0
  2851 ;;      Locals:         0       0
  2852 ;;      Temps:          0       0
  2853 ;;      Totals:         2       0
  2854 ;;Total ram usage:        2 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_main
  2860 ;;		_wait_pulse
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text20
  2865  00178E                     __ptext20:
  2866                           	opt stack 0
  2867  00178E                     _set_timer3:
  2868                           	opt stack 28
  2869                           
  2870                           ;timers_pic.c: 36: PIR2bits.TMR3IF = 0;
  2871                           
  2872                           ;incstack = 0
  2873  00178E  92A1               	bcf	4001,1,c	;volatile
  2874                           
  2875                           ;timers_pic.c: 37: TMR3 = value;
  2876  001790  C001  FFB2         	movff	set_timer3@value,4018	;volatile
  2877  001794  C002  FFB3         	movff	set_timer3@value+1,4019	;volatile
  2878  001798  0012               	return		;funcret
  2879  00179A                     __end_of_set_timer3:
  2880                           	opt stack 0
  2881                           tosu	equ	0xFFF
  2882                           tosh	equ	0xFFE
  2883                           tosl	equ	0xFFD
  2884                           pclath	equ	0xFFA
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           prodh	equ	0xFF4
  2890                           prodl	equ	0xFF3
  2891                           intcon	equ	0xFF2
  2892                           intcon2	equ	0xFF1
  2893                           intcon3	equ	0xFF0
  2894                           postinc0	equ	0xFEE
  2895                           wreg	equ	0xFE8
  2896                           plusw1	equ	0xFE3
  2897                           indf2	equ	0xFDF
  2898                           plusw2	equ	0xFDB
  2899                           fsr2h	equ	0xFDA
  2900                           fsr2l	equ	0xFD9
  2901                           status	equ	0xFD8
  2902                           
  2903 ;; *************** function _send_delay *****************
  2904 ;; Defined at:
  2905 ;;		line 22 in file "../TorqueGriper.X/extended_spi.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;		None               void
  2912 ;; Registers used:
  2913 ;;		wreg
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0
  2919 ;;      Params:         0       0
  2920 ;;      Locals:         0       0
  2921 ;;      Temps:          0       0
  2922 ;;      Totals:         0       0
  2923 ;;Total ram usage:        0 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; This function calls:
  2926 ;;		Nothing
  2927 ;; This function is called by:
  2928 ;;		_espi_master_send
  2929 ;;		_espi_master_receive
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           	psect	text21
  2934  001784                     __ptext21:
  2935                           	opt stack 0
  2936  001784                     _send_delay:
  2937                           	opt stack 29
  2938                           
  2939                           ;extended_spi.c: 24: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2940                           
  2941                           ;incstack = 0
  2942  001784  0E06               	movlw	6
  2943  001786                     u1907:
  2944  001786  2EE8               	decfsz	wreg,f,c
  2945  001788  D7FE               	goto	u1907
  2946  00178A  D000               	nop2		;nop
  2947  00178C  0012               	return		;funcret
  2948  00178E                     __end_of_send_delay:
  2949                           	opt stack 0
  2950                           tosu	equ	0xFFF
  2951                           tosh	equ	0xFFE
  2952                           tosl	equ	0xFFD
  2953                           pclath	equ	0xFFA
  2954                           tblptru	equ	0xFF8
  2955                           tblptrh	equ	0xFF7
  2956                           tblptrl	equ	0xFF6
  2957                           tablat	equ	0xFF5
  2958                           prodh	equ	0xFF4
  2959                           prodl	equ	0xFF3
  2960                           intcon	equ	0xFF2
  2961                           intcon2	equ	0xFF1
  2962                           intcon3	equ	0xFF0
  2963                           postinc0	equ	0xFEE
  2964                           wreg	equ	0xFE8
  2965                           plusw1	equ	0xFE3
  2966                           indf2	equ	0xFDF
  2967                           plusw2	equ	0xFDB
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8
  2971                           
  2972 ;; *************** function _decode_data *****************
  2973 ;; Defined at:
  2974 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;  data            2    0[COMRAM] PTR unsigned char 
  2977 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  2978 ;;  byte_1          1    2[COMRAM] unsigned char 
  2979 ;;  byte_2          1    3[COMRAM] unsigned char 
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;		None
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      char 
  2984 ;; Registers used:
  2985 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0
  2991 ;;      Params:         4       0
  2992 ;;      Locals:         0       0
  2993 ;;      Temps:          1       0
  2994 ;;      Totals:         5       0
  2995 ;;Total ram usage:        5 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; This function calls:
  2998 ;;		Nothing
  2999 ;; This function is called by:
  3000 ;;		_espi_master_receive
  3001 ;;		_espi_slave_receive
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           	psect	text22
  3006  0018B2                     __ptext22:
  3007                           	opt stack 0
  3008  0018B2                     _decode_data:
  3009                           	opt stack 29
  3010                           
  3011                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  3012                           
  3013                           ;incstack = 0
  3014  0018B2  5003               	movf	decode_data@byte_1,w,c
  3015  0018B4  0BF0               	andlw	240
  3016  0018B6  0AA0               	xorlw	160
  3017  0018B8  A4D8               	btfss	status,2,c
  3018  0018BA  0012               	return	
  3019  0018BC  D002               	goto	l1566
  3020                           
  3021                           ;encoding.c: 15: return -1;
  3022                           ;	Return value of _decode_data is never used
  3023  0018BE  0012               	return	
  3024  0018C0  D008               	goto	l1570
  3025  0018C2                     l1566:
  3026                           
  3027                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  3028  0018C2  5004               	movf	decode_data@byte_2,w,c
  3029  0018C4  0BF0               	andlw	240
  3030  0018C6  0AA0               	xorlw	160
  3031  0018C8  A4D8               	btfss	status,2,c
  3032  0018CA  0012               	return	
  3033  0018CC  D002               	goto	l1570
  3034                           
  3035                           ;encoding.c: 17: return -2;
  3036                           ;	Return value of _decode_data is never used
  3037  0018CE  0012               	return	
  3038  0018D0  D000               	goto	l1570
  3039  0018D2                     l1570:
  3040                           
  3041                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  3042  0018D2  C004  F005         	movff	decode_data@byte_2,??_decode_data
  3043  0018D6  0E0F               	movlw	15
  3044  0018D8  1605               	andwf	??_decode_data,f,c
  3045  0018DA  3803               	swapf	decode_data@byte_1,w,c
  3046  0018DC  0BF0               	andlw	240
  3047  0018DE  1005               	iorwf	??_decode_data,w,c
  3048  0018E0  C001  FFD9         	movff	decode_data@data,fsr2l
  3049  0018E4  C002  FFDA         	movff	decode_data@data+1,fsr2h
  3050  0018E8  6EDF               	movwf	indf2,c
  3051  0018EA  0012               	return	
  3052                           
  3053                           ;encoding.c: 21: return 0;
  3054                           ;	Return value of _decode_data is never used
  3055  0018EC  0012               	return		;funcret
  3056  0018EE                     __end_of_decode_data:
  3057                           	opt stack 0
  3058                           tosu	equ	0xFFF
  3059                           tosh	equ	0xFFE
  3060                           tosl	equ	0xFFD
  3061                           pclath	equ	0xFFA
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           intcon2	equ	0xFF1
  3070                           intcon3	equ	0xFF0
  3071                           postinc0	equ	0xFEE
  3072                           wreg	equ	0xFE8
  3073                           plusw1	equ	0xFE3
  3074                           indf2	equ	0xFDF
  3075                           plusw2	equ	0xFDB
  3076                           fsr2h	equ	0xFDA
  3077                           fsr2l	equ	0xFD9
  3078                           status	equ	0xFD8
  3079                           
  3080 ;; *************** function _buffer_space *****************
  3081 ;; Defined at:
  3082 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3085 ;;		 -> main@receive(34), 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;		None
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      unsigned char 
  3090 ;; Registers used:
  3091 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMRAM   BANK0
  3097 ;;      Params:         2       0
  3098 ;;      Locals:         0       0
  3099 ;;      Temps:          0       0
  3100 ;;      Totals:         2       0
  3101 ;;Total ram usage:        2 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; This function calls:
  3104 ;;		Nothing
  3105 ;; This function is called by:
  3106 ;;		_espi_master_receive
  3107 ;;		_espi_slave_receive
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text23
  3112  0017E8                     __ptext23:
  3113                           	opt stack 0
  3114  0017E8                     _buffer_space:
  3115                           	opt stack 29
  3116                           
  3117                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  3118                           
  3119                           ;incstack = 0
  3120  0017E8  EE20 F001          	lfsr	2,1
  3121  0017EC  5001               	movf	buffer_space@buffer,w,c
  3122  0017EE  26D9               	addwf	fsr2l,f,c
  3123  0017F0  5002               	movf	buffer_space@buffer+1,w,c
  3124  0017F2  22DA               	addwfc	fsr2h,f,c
  3125  0017F4  50DF               	movf	indf2,w,c
  3126  0017F6  0800               	sublw	0
  3127  0017F8  0F20               	addlw	32
  3128  0017FA  0012               	return	
  3129  0017FC  0012               	return		;funcret
  3130  0017FE                     __end_of_buffer_space:
  3131                           	opt stack 0
  3132                           tosu	equ	0xFFF
  3133                           tosh	equ	0xFFE
  3134                           tosl	equ	0xFFD
  3135                           pclath	equ	0xFFA
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           prodh	equ	0xFF4
  3141                           prodl	equ	0xFF3
  3142                           intcon	equ	0xFF2
  3143                           intcon2	equ	0xFF1
  3144                           intcon3	equ	0xFF0
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           plusw1	equ	0xFE3
  3148                           indf2	equ	0xFDF
  3149                           plusw2	equ	0xFDB
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _buffer_push *****************
  3155 ;; Defined at:
  3156 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  3159 ;;		 -> main@receive(34), main@send(34), 
  3160 ;;  byte            1    2[COMRAM] unsigned char 
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  current_posi    1    4[COMRAM] unsigned char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  1    wreg      unsigned char 
  3165 ;; Registers used:
  3166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMRAM   BANK0
  3172 ;;      Params:         3       0
  3173 ;;      Locals:         1       0
  3174 ;;      Temps:          1       0
  3175 ;;      Totals:         5       0
  3176 ;;Total ram usage:        5 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_load_buffer
  3182 ;;		_espi_master_receive
  3183 ;;		_espi_slave_receive
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text24
  3188  001AAE                     __ptext24:
  3189                           	opt stack 0
  3190  001AAE                     _buffer_push:
  3191                           	opt stack 29
  3192                           
  3193                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  3194                           
  3195                           ;incstack = 0
  3196  001AAE  EE20 F001          	lfsr	2,1
  3197  001AB2  5001               	movf	buffer_push@buffer,w,c
  3198  001AB4  26D9               	addwf	fsr2l,f,c
  3199  001AB6  5002               	movf	buffer_push@buffer+1,w,c
  3200  001AB8  22DA               	addwfc	fsr2h,f,c
  3201  001ABA  0E20               	movlw	32
  3202  001ABC  18DE               	xorwf	postinc2,w,c
  3203  001ABE  A4D8               	btfss	status,2,c
  3204  001AC0  D002               	goto	l1534
  3205                           
  3206                           ;circular_buffer.c: 27: return 0;
  3207  001AC2  0E00               	movlw	0
  3208  001AC4  0012               	return	
  3209  001AC6                     l1534:
  3210                           
  3211                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  3212                           ;circular_buffer.c: 30: & (0x20 - 1);
  3213  001AC6  EE20 F001          	lfsr	2,1
  3214  001ACA  5001               	movf	buffer_push@buffer,w,c
  3215  001ACC  26D9               	addwf	fsr2l,f,c
  3216  001ACE  5002               	movf	buffer_push@buffer+1,w,c
  3217  001AD0  22DA               	addwfc	fsr2h,f,c
  3218  001AD2  50DF               	movf	indf2,w,c
  3219  001AD4  6E04               	movwf	??_buffer_push& (0+255),c
  3220  001AD6  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  3221  001ADA  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  3222  001ADE  50DF               	movf	indf2,w,c
  3223  001AE0  2404               	addwf	??_buffer_push,w,c
  3224  001AE2  0B1F               	andlw	31
  3225  001AE4  6E05               	movwf	buffer_push@current_position,c
  3226                           
  3227                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  3228  001AE6  5005               	movf	buffer_push@current_position,w,c
  3229  001AE8  0D01               	mullw	1
  3230  001AEA  0E02               	movlw	2
  3231  001AEC  26F3               	addwf	prodl,f,c
  3232  001AEE  0E00               	movlw	0
  3233  001AF0  22F4               	addwfc	prodh,f,c
  3234  001AF2  50F3               	movf	prodl,w,c
  3235  001AF4  2401               	addwf	buffer_push@buffer,w,c
  3236  001AF6  6ED9               	movwf	fsr2l,c
  3237  001AF8  50F4               	movf	prodh,w,c
  3238  001AFA  2002               	addwfc	buffer_push@buffer+1,w,c
  3239  001AFC  6EDA               	movwf	fsr2h,c
  3240  001AFE  C003  FFDF         	movff	buffer_push@byte,indf2
  3241                           
  3242                           ;circular_buffer.c: 32: buffer->count++;
  3243  001B02  EE20 F001          	lfsr	2,1
  3244  001B06  5001               	movf	buffer_push@buffer,w,c
  3245  001B08  26D9               	addwf	fsr2l,f,c
  3246  001B0A  5002               	movf	buffer_push@buffer+1,w,c
  3247  001B0C  22DA               	addwfc	fsr2h,f,c
  3248  001B0E  2ADF               	incf	indf2,f,c
  3249                           
  3250                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  3251  001B10  EE20 F001          	lfsr	2,1
  3252  001B14  5001               	movf	buffer_push@buffer,w,c
  3253  001B16  26D9               	addwf	fsr2l,f,c
  3254  001B18  5002               	movf	buffer_push@buffer+1,w,c
  3255  001B1A  22DA               	addwfc	fsr2h,f,c
  3256  001B1C  0E20               	movlw	32
  3257  001B1E  18DE               	xorwf	postinc2,w,c
  3258  001B20  A4D8               	btfss	status,2,c
  3259  001B22  D002               	goto	u1070
  3260  001B24  0E01               	movlw	1
  3261  001B26  0012               	return	
  3262  001B28                     u1070:
  3263  001B28  0E00               	movlw	0
  3264  001B2A  0012               	return	
  3265  001B2C  0012               	return		;funcret
  3266  001B2E                     __end_of_buffer_push:
  3267                           	opt stack 0
  3268                           tosu	equ	0xFFF
  3269                           tosh	equ	0xFFE
  3270                           tosl	equ	0xFFD
  3271                           pclath	equ	0xFFA
  3272                           tblptru	equ	0xFF8
  3273                           tblptrh	equ	0xFF7
  3274                           tblptrl	equ	0xFF6
  3275                           tablat	equ	0xFF5
  3276                           prodh	equ	0xFF4
  3277                           prodl	equ	0xFF3
  3278                           intcon	equ	0xFF2
  3279                           intcon2	equ	0xFF1
  3280                           intcon3	equ	0xFF0
  3281                           postinc0	equ	0xFEE
  3282                           wreg	equ	0xFE8
  3283                           plusw1	equ	0xFE3
  3284                           indf2	equ	0xFDF
  3285                           postinc2	equ	0xFDE
  3286                           plusw2	equ	0xFDB
  3287                           fsr2h	equ	0xFDA
  3288                           fsr2l	equ	0xFD9
  3289                           status	equ	0xFD8
  3290                           
  3291 ;; *************** function _buffer_empty *****************
  3292 ;; Defined at:
  3293 ;;		line 14 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3296 ;;		 -> main@receive(34), 
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;		None
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      unsigned char 
  3301 ;; Registers used:
  3302 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMRAM   BANK0
  3308 ;;      Params:         2       0
  3309 ;;      Locals:         0       0
  3310 ;;      Temps:          0       0
  3311 ;;      Totals:         2       0
  3312 ;;Total ram usage:        2 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		_espi_master_receive
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text25
  3322  0017FE                     __ptext25:
  3323                           	opt stack 0
  3324  0017FE                     _buffer_empty:
  3325                           	opt stack 29
  3326                           
  3327                           ;circular_buffer.c: 16: return (buffer->count == 0) ? 1 : 0;
  3328                           
  3329                           ;incstack = 0
  3330  0017FE  EE20 F001          	lfsr	2,1
  3331  001802  5001               	movf	buffer_empty@buffer,w,c
  3332  001804  26D9               	addwf	fsr2l,f,c
  3333  001806  5002               	movf	buffer_empty@buffer+1,w,c
  3334  001808  22DA               	addwfc	fsr2h,f,c
  3335  00180A  50DF               	movf	indf2,w,c
  3336  00180C  A4D8               	btfss	status,2,c
  3337  00180E  D002               	goto	u1200
  3338  001810  0E01               	movlw	1
  3339  001812  0012               	return	
  3340  001814                     u1200:
  3341  001814  0E00               	movlw	0
  3342  001816  0012               	return	
  3343  001818  0012               	return		;funcret
  3344  00181A                     __end_of_buffer_empty:
  3345                           	opt stack 0
  3346  0000                     tosu	equ	0xFFF
  3347                           tosh	equ	0xFFE
  3348                           tosl	equ	0xFFD
  3349                           pclath	equ	0xFFA
  3350                           tblptru	equ	0xFF8
  3351                           tblptrh	equ	0xFF7
  3352                           tblptrl	equ	0xFF6
  3353                           tablat	equ	0xFF5
  3354                           prodh	equ	0xFF4
  3355                           prodl	equ	0xFF3
  3356                           intcon	equ	0xFF2
  3357                           intcon2	equ	0xFF1
  3358                           intcon3	equ	0xFF0
  3359                           postinc0	equ	0xFEE
  3360                           wreg	equ	0xFE8
  3361                           plusw1	equ	0xFE3
  3362                           indf2	equ	0xFDF
  3363                           postinc2	equ	0xFDE
  3364                           plusw2	equ	0xFDB
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           tosu	equ	0xFFF
  3369                           tosh	equ	0xFFE
  3370                           tosl	equ	0xFFD
  3371                           pclath	equ	0xFFA
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           intcon	equ	0xFF2
  3379                           intcon2	equ	0xFF1
  3380                           intcon3	equ	0xFF0
  3381                           postinc0	equ	0xFEE
  3382                           wreg	equ	0xFE8
  3383                           plusw1	equ	0xFE3
  3384                           indf2	equ	0xFDF
  3385                           postinc2	equ	0xFDE
  3386                           plusw2	equ	0xFDB
  3387                           fsr2h	equ	0xFDA
  3388                           fsr2l	equ	0xFD9
  3389                           status	equ	0xFD8
  3390                           
  3391                           	psect	text26
  3392  000000                     __ptext26:
  3393                           	opt stack 0
  3394                           tosu	equ	0xFFF
  3395                           tosh	equ	0xFFE
  3396                           tosl	equ	0xFFD
  3397                           pclath	equ	0xFFA
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           intcon	equ	0xFF2
  3405                           intcon2	equ	0xFF1
  3406                           intcon3	equ	0xFF0
  3407                           postinc0	equ	0xFEE
  3408                           wreg	equ	0xFE8
  3409                           plusw1	equ	0xFE3
  3410                           indf2	equ	0xFDF
  3411                           postinc2	equ	0xFDE
  3412                           plusw2	equ	0xFDB
  3413                           fsr2h	equ	0xFDA
  3414                           fsr2l	equ	0xFD9
  3415                           status	equ	0xFD8
  3416                           
  3417                           	psect	rparam
  3418  0000                     tosu	equ	0xFFF
  3419                           tosh	equ	0xFFE
  3420                           tosl	equ	0xFFD
  3421                           pclath	equ	0xFFA
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           intcon2	equ	0xFF1
  3430                           intcon3	equ	0xFF0
  3431                           postinc0	equ	0xFEE
  3432                           wreg	equ	0xFE8
  3433                           plusw1	equ	0xFE3
  3434                           indf2	equ	0xFDF
  3435                           postinc2	equ	0xFDE
  3436                           plusw2	equ	0xFDB
  3437                           fsr2h	equ	0xFDA
  3438                           fsr2l	equ	0xFD9
  3439                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     21      22
    BANK0           160     75     146

Pointer List with Targets:

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    buffer_empty@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    espi_master_receive@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    espi_master_send@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_send@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 

    wait_pulse@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    wait_pulse@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    load_buffer@str	PTR unsigned char  size(2) Largest target is 3
		 -> main@name(BANK0[3]), 

    load_buffer@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 


Critical Paths under _main in COMRAM

    _main->_espi_master_send
    _load_buffer->_buffer_push
    _espi_setup->_setup_spi
    _espi_master_send->_wait_pulse
    _espi_master_receive->_wait_pulse
    _wait_pulse->_set_timer3

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                77    77      0    8274
                                             19 COMRAM     2     2      0
                                              0 BANK0     75    75      0
                       _buffer_count
                         _buffer_pop
                _espi_master_receive
                   _espi_master_send
                         _espi_setup
                        _load_buffer
                 _pmwSingleModeSetUp
                       _selectOutput
                      _setPulseWidth
                         _set_timer0
                       _setup_timer0
                       _setup_timer3
                          _timer0_up
 ---------------------------------------------------------------------------------
 (1) _timer0_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _set_timer0                                           2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _setPulseWidth                                        4     2      2     108
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _selectOutput                                         3     2      1     174
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _pmwSingleModeSetUp                                   4     1      3     346
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _load_buffer                                          9     3      6    1127
                                              5 COMRAM     9     3      6
                        _buffer_push
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _espi_master_send                                    12     6      6    2599
                                              7 COMRAM    12     6      6
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     516
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     603
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     281
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     214
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_master_receive                                  9     3      6    2353
                                              7 COMRAM     9     3      6
                       _buffer_empty
                        _buffer_push
                       _buffer_space
                        _decode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _wait_pulse                                           5     1      4     474
                                              2 COMRAM     5     1      4
                         _set_timer3 *
                  _spi_send_get_byte
                          _timer3_up *
 ---------------------------------------------------------------------------------
 (3) _timer3_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _spi_send_get_byte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _set_timer3                                           2     0      2     108
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _send_delay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     689
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _buffer_empty                                         2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buffer_count
   _buffer_pop
   _espi_master_receive
     _buffer_empty
     _buffer_push
     _buffer_space
     _decode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
       _spi_send_get_byte *
       _timer3_up *
   _espi_master_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
       _spi_send_get_byte *
       _timer3_up *
   _espi_setup
     _setup_spi
   _load_buffer
     _buffer_push
   _pmwSingleModeSetUp
   _selectOutput
   _setPulseWidth
   _set_timer0
   _setup_timer0
   _setup_timer3
   _timer0_up

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     4B      92       4       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     15      16       1       23.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A8       5        0.0%
DATA                 0      0      A8       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Aug 05 12:55:08 2015

           ?_pmwSingleModeSetUp 0001                     _SSPSTATbits 000FC7                              l90 1912  
                            l91 1922                              l96 17DC                              l88 1926  
                           l206 18A4                             l208 189C                             l380 1BC2  
                           l373 1BA0                             l376 1B7C                             l377 1BAA  
                           l378 1BB2                             l379 1BBA                             _PR2 000FCB  
 espi_master_receive@received_1 000E   espi_master_receive@received_2 000F                             tosl 000FFD  
                           wreg 000FE8            ??_pmwSingleModeSetUp 0004                    __CFG_LVP$OFF 000000  
                          l1602 1A2C                            l1700 1CE6                            l1534 1AC6  
                          l1518 1A4C                            l1710 1BD6                            l1630 1B46  
                          l1720 1C22                            l1640 1B86                            l1632 1B5C  
                          l1624 1B34                            l1570 18D2                            l1714 1BFC  
                          l1634 1B62                            l1740 1E02                            l1724 1C48  
                          l1716 1C02                            l1636 1B6A                            l1628 1B3C  
                          l1566 18C2                            l1582 198A                            l1750 1E30  
                          l1734 1DE0                            l1726 1C4E                            l1718 1C18  
                          l1638 1B72                            l1760 1E56                            l1674 1D6A  
                          l1666 1D52                            l1658 1D3A                            l1690 1C72  
                          l1596 19E6                            l1692 1C8C                            l1780 1ECC  
                          l1678 1D90                            l1758 1E48                            l1694 1CA8  
                          l1790 1F5A                            l1696 1CC6                            l1688 1C6C  
                          l1786 1F12                            l1796 1F8C                            l1798 1FAC  
                          u1200 1814                            u1040 17AE                            u1070 1B28  
                          u1320 1C7E                            u1400 17BC                            u1340 1C98  
                          u1501 1E98                            u1158 19D2                            u1511 1EAA  
                          u1168 19EA                            u1360 1CB4                            u1169 19FE  
                          u1338 1C80                            u1188 1A16                            u1380 1CD2  
                          u1358 1C9A                            u1378 1CB6                            u1398 1CD4  
                          u1907 1786                            _TMR0 000FD6                            _TMR3 000FB2  
                   main@receive 0089                            _main 1E64                            fsr2h 000FDA  
                          indf2 000FDF                            fsr2l 000FD9                            prodh 000FF4  
                          prodl 000FF3                            start 0000           spi_send_get_byte@byte 0001  
                ??_buffer_count 0003                  ??_buffer_empty 0003                   __CFG_FOSC$IRC 000000  
                ??_buffer_space 0003                    ___param_bank 000010            setup_spi@SSPCON1_reg 0001  
                  ?_load_buffer 0006                           ?_main 0001                           _T0CON 000FD5  
                         _T3CON 000FB1            __size_of_decode_data 003C             _espi_master_receive 1D0A  
                         pclath 000FFA                           tablat 000FF5                           plusw1 000FE3  
                         plusw2 000FDB                           status 000FD8            setup_spi@SSPSTAT_reg 0002  
      __end_of_espi_master_send 1E64                buffer_pop@buffer 0001                 __initialization 1844  
                  __end_of_main 2000            ?_espi_master_receive 0008             selectOutput@outputs 0003  
                        ??_main 0014               _spi_send_get_byte 17D4                   __activetblptr 000002  
            ?_spi_send_get_byte 0001               buffer_peek@buffer 0001                 encode_data@data 0006  
                        _CCPR1L 000FBE           setup_timer0@T0CON_reg 0001             ??_spi_send_get_byte 0001  
                        _INT2IF 007F81                          _INTCON 000FF2                          _SSPBUF 000FC9  
         __end_of_setPulseWidth 1844                 decode_data@data 0001       pmwSingleModeSetUp@outputs 0003  
          __size_of_encode_data 0046                 load_buffer@size 000A           ??_espi_master_receive 000E  
          __size_of_buffer_peek 0052            __size_of_buffer_push 0080       __end_of_spi_send_get_byte 17E8  
                        clear_0 184A    espi_master_send@byte_to_send 0010                 set_timer0@value 0001  
          __end_of_buffer_count 17D4            __end_of_buffer_empty 181A                 set_timer3@value 0001  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
         setup_timer3@T3CON_reg 0001            __end_of_buffer_space 17FE                      __accesstop 0060  
       __end_of__initialization 1870                   ___rparam_used 000001                  __pcstackCOMRAM 0001  
                  __pidataBANK0 1771              buffer_count@buffer 0001                  buffer_pop@byte 0005  
          __size_of_load_buffer 00A0        pmwSingleModeSetUp@scaler 0002              buffer_empty@buffer 0001  
                    __pbssBANK0 00AB                   ?_selectOutput 0001      __size_of_spi_send_get_byte 0014  
             buffer_push@buffer 0001              __size_of_timer0_up 000E              __size_of_timer3_up 000E  
            __size_of_setup_spi 003E                      _buffer_pop 1A34     __size_of_pmwSingleModeSetUp 009A  
                       _PSTRCON 000FB9                         _SSPCON1 000FC6                         _SSPSTAT 000FC7  
     espi_master_receive@buffer 0008               ?_espi_master_send 0008                         __Hparam 0000  
                       __Lparam 0000                    load_buffer@i 000D              ??_espi_master_send 000E  
                ??_selectOutput 0002                      _espi_setup 187A                      _dummy_byte 0016  
                       __pcinit 1844                       _ANSELbits 000F7E                         __ramtop 0100  
         __size_of_buffer_count 0012           __size_of_buffer_empty 001C                         __ptext0 1E64  
                       __ptext1 17B4                         __ptext2 177C                         __ptext3 1774  
                       __ptext4 179A                         __ptext5 181A                         __ptext6 1C68  
                       __ptext7 1B2E                         __ptext8 1BC8                         __ptext9 187A  
         __size_of_buffer_space 0016                       _T2CONbits 000FCA                   ??_decode_data 0005  
          end_of_initialization 1870                      _send_delay 1784                   __Lmediumconst 0000  
             __end_of_timer0_up 17C2               __end_of_timer3_up 17B4                    _buffer_count 17C2  
                  _buffer_empty 17FE               __end_of_setup_spi 192C     espi_master_send@timer_start 000A  
                  _buffer_space 17E8                      _set_timer0 179A                      _set_timer3 178E  
                       postinc0 000FEE                         postinc2 000FDE                      _wait_pulse 19C4  
                 ?_setup_timer0 0001                   ?_setup_timer3 0001                       _TRISAbits 000F92  
                     _TRISBbits 000F93                       _TRISCbits 000F94                     ?_buffer_pop 0001  
           __end_of_decode_data 18EE                   ??_encode_data 0005                     _CCP1CONbits 000FBD  
   __end_of_espi_master_receive 1DB0                      main@byte_1 0065                      main@byte_2 0066  
                 ??_buffer_peek 0003                   ??_buffer_push 0004                     ?_espi_setup 0001  
               buffer_peek@byte 0005                  espi_setup@mode 0003                  ??_setup_timer0 0001  
                ??_setup_timer3 0001          __size_of_setPulseWidth 002A             start_initialization 1844  
            selectOutput@toggle 0001            __end_of_selectOutput 1D0A                     ?_send_delay 0001  
            buffer_space@buffer 0001                 buffer_push@byte 0003                  load_buffer@str 0008  
                   ?_set_timer0 0001             __end_of_encode_data 1972                     ?_set_timer3 0001  
           __size_of_buffer_pop 007A                     __pdataBANK0 00EF                     ?_wait_pulse 0003  
                 ??_load_buffer 000C             __end_of_buffer_peek 19C4             __end_of_buffer_push 1B2E  
                   _decode_data 18B2                     __pbssCOMRAM 0016                   __pcstackBANK0 0060  
           __size_of_espi_setup 0038                   _setPulseWidth 181A      espi_master_send@received_1 000E  
    espi_master_send@received_2 000F           wait_pulse@timer_start 0003               encode_data@byte_1 0001  
             encode_data@byte_2 0003             __size_of_send_delay 000A       __size_of_espi_master_send 00B4  
    __end_of_pmwSingleModeSetUp 1BC8             __end_of_load_buffer 1C68             __size_of_set_timer0 000C  
           __size_of_set_timer3 000C             __size_of_wait_pulse 0070                        _LATAbits 000F89  
                      _LATCbits 000F8B                     _encode_data 192C                  ?_setPulseWidth 0001  
                      _PIE2bits 000FA0            __end_of_setup_timer0 177C            __end_of_setup_timer3 1784  
                      _PIR2bits 000FA1                     _buffer_peek 1972                     _buffer_push 1AAE  
                     _timer0_up 17B4                       _timer3_up 17A6                       main@F3991 00AB  
                     main@F3993 00CD                       main@F3995 00EF                       _setup_spi 18EE  
         __size_of_selectOutput 00A2                       main@value 0063  espi_master_receive@timer_start 000A  
                  ??_buffer_pop 0003               decode_data@byte_1 0003               decode_data@byte_2 0004  
                   _INTCON2bits 000FF1                     _INTCON3bits 000FF0               load_buffer@buffer 0006  
                      __Hrparam 0000                        __Lrparam 0000                      ?_timer0_up 0001  
                    ?_timer3_up 0001                    ??_espi_setup 0003                 wait_pulse@value 0007  
               wait_pulse@timer 0005              __end_of_buffer_pop 1AAE                    _selectOutput 1C68  
                    ?_setup_spi 0001                     _load_buffer 1BC8                      _ANSELHbits 000F7F  
                      __ptext10 18EE                        __ptext11 1DB0                        __ptext20 178E  
                      __ptext12 192C                        __ptext21 1784                        __ptext13 1A34  
                      __ptext22 18B2                        __ptext14 1972                        __ptext23 17E8  
                      __ptext15 17C2                        __ptext24 1AAE                        __ptext16 1D0A  
                      __ptext25 17FE                        __ptext17 19C4                        __ptext26 0000  
                      __ptext18 17A6                        __ptext19 17D4              __end_of_espi_setup 18B2  
                  ??_send_delay 0001                 ??_setPulseWidth 0003                   __size_of_main 019C  
                  ??_set_timer0 0003                    ??_set_timer3 0003    __size_of_espi_master_receive 00A6  
                  ??_wait_pulse 0007                        main@name 0060                        main@send 0067  
              _espi_master_send 1DB0              __end_of_send_delay 178E                      _INTCONbits 000FF2  
                  ?_decode_data 0001        espi_master_receive@value 0010        espi_master_receive@timer 000C  
            __end_of_set_timer0 17A6              __end_of_set_timer3 179A           __size_of_setup_timer0 0008  
         __size_of_setup_timer3 0008              __end_of_wait_pulse 1A34                      _OSCCONbits 000FD3  
                   ??_timer0_up 0001                     ??_timer3_up 0001                     ??_setup_spi 0002  
            setPulseWidth@width 0001                     _PSTRCONbits 000FB9                    _setup_timer0 1774  
                  _setup_timer3 177C      pmwSingleModeSetUp@valuePR2 0001     buffer_push@current_position 0005  
                   _SSPCON1bits 000FC6      pmwSingleModeSetUp@polarity 0004              _pmwSingleModeSetUp 1B2E  
                  ?_encode_data 0001          espi_master_send@buffer 0008          espi_master_send@byte_1 0012  
        espi_master_send@byte_2 0013                   ?_buffer_count 0001                   ?_buffer_empty 0001  
         espi_master_send@timer 000C                    ?_buffer_peek 0001                   ?_buffer_space 0001  
                  ?_buffer_push 0001  
