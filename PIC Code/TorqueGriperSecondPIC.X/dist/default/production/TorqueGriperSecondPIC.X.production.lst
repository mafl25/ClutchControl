

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Aug 03 17:07:45 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    30  0000                     _TMR3	set	4018
    31  0000                     _ANSELHbits	set	3967
    32  0000                     _ANSELbits	set	3966
    33  0000                     _INTCON	set	4082
    34  0000                     _INTCON2bits	set	4081
    35  0000                     _INTCON3bits	set	4080
    36  0000                     _LATAbits	set	3977
    37  0000                     _LATCbits	set	3979
    38  0000                     _OSCCONbits	set	4051
    39  0000                     _PIE2bits	set	4000
    40  0000                     _PIR2bits	set	4001
    41  0000                     _PORTCbits	set	3970
    42  0000                     _SSPBUF	set	4041
    43  0000                     _SSPCON1	set	4038
    44  0000                     _SSPCON1bits	set	4038
    45  0000                     _SSPSTAT	set	4039
    46  0000                     _SSPSTATbits	set	4039
    47  0000                     _T3CON	set	4017
    48  0000                     _TRISAbits	set	3986
    49  0000                     _TRISBbits	set	3987
    50  0000                     _TRISCbits	set	3988
    51  0000                     _INT2IF	set	32641
    52                           
    53 ;;
    54 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    55 ;;
    56 ;; *************** function _main *****************
    57 ;; Defined at:
    58 ;;		line 11 in file "main.c"
    59 ;; Parameters:    Size  Location     Type
    60 ;;		None
    61 ;; Auto vars:     Size  Location     Type
    62 ;;  buffer         34   19[COMRAM] struct circular_buffer
    63 ;; Return value:  Size  Location     Type
    64 ;;                  2   16[None  ] int 
    65 ;; Registers used:
    66 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
    67 ;; Tracked objects:
    68 ;;		On entry : 0/0
    69 ;;		On exit  : 0/0
    70 ;;		Unchanged: 0/0
    71 ;; Data sizes:     COMRAM   BANK0
    72 ;;      Params:         0       0
    73 ;;      Locals:        34       0
    74 ;;      Temps:          0       0
    75 ;;      Totals:        34       0
    76 ;;Total ram usage:       34 bytes
    77 ;; Hardware stack levels required when called:    3
    78 ;; This function calls:
    79 ;;		_espi_master_receive
    80 ;;		_espi_master_send
    81 ;;		_espi_setup
    82 ;;		_setup_timer3
    83 ;; This function is called by:
    84 ;;		Startup code after reset
    85 ;; This function uses a non-reentrant model
    86 ;;
    87                           
    88                           	psect	text0
    89  001CFC                     __ptext0:
    90                           	opt stack 0
    91  001CFC                     _main:
    92                           	opt stack 28
    93                           
    94                           ;main.c: 12: OSCCONbits.IRCF = 0x07;
    95                           
    96                           ;incstack = 0
    97  001CFC  88D3               	bsf	4051,4,c	;volatile
    98  001CFE  8AD3               	bsf	4051,5,c	;volatile
    99  001D00  8CD3               	bsf	4051,6,c	;volatile
   100                           
   101                           ;main.c: 14: espi_setup(0x00);
   102  001D02  0E00               	movlw	0
   103  001D04  ECD9  F00D         	call	_espi_setup
   104                           
   105                           ;main.c: 15: setup_timer3(0x80 | 0x00 | 0x01);
   106  001D08  0E81               	movlw	129
   107  001D0A  EC8C  F00D         	call	_setup_timer3
   108                           
   109                           ;main.c: 17: struct circular_buffer buffer = {0, 0, {0}};
   110  001D0E  EE20  F036         	lfsr	2,main@F3971
   111  001D12  EE10  F014         	lfsr	1,main@buffer
   112  001D16  0E21               	movlw	33
   113  001D18                     u891:
   114  001D18  CFDB FFE3          	movff	plusw2,plusw1
   115  001D1C  06E8               	decf	wreg,f,c
   116  001D1E  E2FC               	bc	u891
   117  001D20  D000               	goto	l1328
   118  001D22                     l1328:
   119                           
   120                           ;main.c: 22: espi_master_receive(&buffer, &set_timer3, &timer3_up);
   121  001D22  0E14               	movlw	low main@buffer
   122  001D24  6E08               	movwf	espi_master_receive@buffer,c
   123  001D26  0E00               	movlw	high main@buffer
   124  001D28  6E09               	movwf	espi_master_receive@buffer+1,c
   125  001D2A  0E2A               	movlw	low _set_timer3
   126  001D2C  6E0A               	movwf	espi_master_receive@timer_start,c
   127  001D2E  0E1B               	movlw	high _set_timer3
   128  001D30  6E0B               	movwf	espi_master_receive@timer_start+1,c
   129  001D32  0E36               	movlw	low _timer3_up
   130  001D34  6E0C               	movwf	espi_master_receive@timer,c
   131  001D36  0E1B               	movlw	high _timer3_up
   132  001D38  6E0D               	movwf	espi_master_receive@timer+1,c
   133  001D3A  EC53  F00F         	call	_espi_master_receive	;wreg free
   134                           
   135                           ;main.c: 23: espi_master_send(&buffer, &set_timer3, &timer3_up);
   136  001D3E  0E14               	movlw	low main@buffer
   137  001D40  6E08               	movwf	espi_master_send@buffer,c
   138  001D42  0E00               	movlw	high main@buffer
   139  001D44  6E09               	movwf	espi_master_send@buffer+1,c
   140  001D46  0E2A               	movlw	low _set_timer3
   141  001D48  6E0A               	movwf	espi_master_send@timer_start,c
   142  001D4A  0E1B               	movlw	high _set_timer3
   143  001D4C  6E0B               	movwf	espi_master_send@timer_start+1,c
   144  001D4E  0E36               	movlw	low _timer3_up
   145  001D50  6E0C               	movwf	espi_master_send@timer,c
   146  001D52  0E1B               	movlw	high _timer3_up
   147  001D54  6E0D               	movwf	espi_master_send@timer+1,c
   148  001D56  ECA6  F00F         	call	_espi_master_send	;wreg free
   149  001D5A  D7E3               	goto	l1328
   150                           
   151                           ;main.c: 25: }
   152                           ;main.c: 27: return 0;
   153                           ;	Return value of _main is never used
   154  001D5C  EF00  F000         	goto	start
   155  001D60                     __end_of_main:
   156                           	opt stack 0
   157                           wreg	equ	0xFE8
   158                           plusw1	equ	0xFE3
   159                           plusw2	equ	0xFDB
   160                           
   161                           	psect	cinit
   162  001B80                     __pcinit:
   163                           	opt stack 0
   164  001B80                     start_initialization:
   165                           	opt stack 0
   166  001B80                     __initialization:
   167                           	opt stack 0
   168                           
   169                           ; Clear objects allocated to COMRAM (35 bytes)
   170  001B80  EE00  F036         	lfsr	0,__pbssCOMRAM
   171  001B84  0E23               	movlw	35
   172  001B86                     clear_0:
   173  001B86  6AEE               	clrf	postinc0,c
   174  001B88  06E8               	decf	wreg,f,c
   175  001B8A  E1FD               	bnz	clear_0
   176  001B8C                     end_of_initialization:
   177                           	opt stack 0
   178  001B8C                     __end_of__initialization:
   179                           	opt stack 0
   180  001B8C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   181  001B8E  6EF8               	movwf	tblptru,c
   182  001B90  0100               	movlb	0
   183  001B92  EF7E  F00E         	goto	_main	;jump to C main() function
   184                           tblptru	equ	0xFF8
   185                           postinc0	equ	0xFEE
   186                           wreg	equ	0xFE8
   187                           plusw1	equ	0xFE3
   188                           plusw2	equ	0xFDB
   189                           
   190                           	psect	bssCOMRAM
   191  000036                     __pbssCOMRAM:
   192                           	opt stack 0
   193  000036                     main@F3971:
   194                           	opt stack 0
   195  000036                     	ds	34
   196  000058                     _dummy_byte:
   197                           	opt stack 0
   198  000058                     	ds	1
   199                           tblptru	equ	0xFF8
   200                           postinc0	equ	0xFEE
   201                           wreg	equ	0xFE8
   202                           plusw1	equ	0xFE3
   203                           plusw2	equ	0xFDB
   204                           
   205                           	psect	cstackCOMRAM
   206  000001                     __pcstackCOMRAM:
   207                           	opt stack 0
   208  000001                     ?_buffer_peek:
   209                           	opt stack 0
   210  000001                     setup_spi@SSPCON1_reg:
   211                           	opt stack 0
   212  000001                     spi_send_get_byte@byte:
   213                           	opt stack 0
   214  000001                     setup_timer3@T3CON_reg:
   215                           	opt stack 0
   216  000001                     buffer_count@buffer:
   217                           	opt stack 0
   218  000001                     buffer_space@buffer:
   219                           	opt stack 0
   220  000001                     buffer_empty@buffer:
   221                           	opt stack 0
   222  000001                     buffer_push@buffer:
   223                           	opt stack 0
   224  000001                     buffer_pop@buffer:
   225                           	opt stack 0
   226  000001                     buffer_peek@buffer:
   227                           	opt stack 0
   228  000001                     encode_data@byte_1:
   229                           	opt stack 0
   230  000001                     decode_data@data:
   231                           	opt stack 0
   232  000001                     set_timer3@value:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x0
   236  000001                     	ds	1
   237  000002                     setup_spi@SSPSTAT_reg:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0x1
   241  000002                     	ds	1
   242  000003                     ??_buffer_peek:
   243  000003                     ??_buffer_pop:
   244  000003                     espi_setup@mode:
   245                           	opt stack 0
   246  000003                     buffer_push@byte:
   247                           	opt stack 0
   248  000003                     decode_data@byte_1:
   249                           	opt stack 0
   250  000003                     wait_pulse@timer_start:
   251                           	opt stack 0
   252  000003                     encode_data@byte_2:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x2
   256  000003                     	ds	1
   257  000004                     ??_buffer_push:
   258  000004                     decode_data@byte_2:
   259                           	opt stack 0
   260                           
   261                           ; 1 bytes @ 0x3
   262  000004                     	ds	1
   263  000005                     ??_decode_data:
   264  000005                     ??_encode_data:
   265  000005                     buffer_push@current_position:
   266                           	opt stack 0
   267  000005                     wait_pulse@timer:
   268                           	opt stack 0
   269  000005                     buffer_pop@byte:
   270                           	opt stack 0
   271  000005                     buffer_peek@byte:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x4
   275  000005                     	ds	1
   276  000006                     encode_data@data:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0x5
   280  000006                     	ds	1
   281  000007                     wait_pulse@value:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0x6
   285  000007                     	ds	1
   286  000008                     espi_master_send@buffer:
   287                           	opt stack 0
   288  000008                     espi_master_receive@buffer:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x7
   292  000008                     	ds	2
   293  00000A                     espi_master_send@timer_start:
   294                           	opt stack 0
   295  00000A                     espi_master_receive@timer_start:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x9
   299  00000A                     	ds	2
   300  00000C                     espi_master_send@timer:
   301                           	opt stack 0
   302  00000C                     espi_master_receive@timer:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0xB
   306  00000C                     	ds	2
   307  00000E                     espi_master_send@received_1:
   308                           	opt stack 0
   309  00000E                     espi_master_receive@received_1:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0xD
   313  00000E                     	ds	1
   314  00000F                     espi_master_send@received_2:
   315                           	opt stack 0
   316  00000F                     espi_master_receive@received_2:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0xE
   320  00000F                     	ds	1
   321  000010                     espi_master_receive@value:
   322                           	opt stack 0
   323  000010                     espi_master_send@byte_to_send:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0xF
   327  000010                     	ds	2
   328  000012                     espi_master_send@byte_1:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x11
   332  000012                     	ds	1
   333  000013                     espi_master_send@byte_2:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x12
   337  000013                     	ds	1
   338  000014                     main@buffer:
   339                           	opt stack 0
   340                           
   341                           ; 34 bytes @ 0x13
   342  000014                     	ds	34
   343                           tblptru	equ	0xFF8
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           plusw1	equ	0xFE3
   347                           plusw2	equ	0xFDB
   348                           
   349 ;; *************** function _setup_timer3 *****************
   350 ;; Defined at:
   351 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;  T3CON_reg       1    wreg     unsigned char 
   354 ;; Auto vars:     Size  Location     Type
   355 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   356 ;; Return value:  Size  Location     Type
   357 ;;		None               void
   358 ;; Registers used:
   359 ;;		wreg
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMRAM   BANK0
   365 ;;      Params:         0       0
   366 ;;      Locals:         1       0
   367 ;;      Temps:          0       0
   368 ;;      Totals:         1       0
   369 ;;Total ram usage:        1 bytes
   370 ;; Hardware stack levels used:    1
   371 ;; This function calls:
   372 ;;		Nothing
   373 ;; This function is called by:
   374 ;;		_main
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378                           	psect	text1
   379  001B18                     __ptext1:
   380                           	opt stack 0
   381  001B18                     _setup_timer3:
   382                           	opt stack 30
   383                           
   384                           ;incstack = 0
   385                           ;setup_timer3@T3CON_reg stored from wreg
   386  001B18  6E01               	movwf	setup_timer3@T3CON_reg,c
   387                           
   388                           ;timers_pic.c: 5: T3CON = T3CON_reg;
   389  001B1A  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   390  001B1E  0012               	return		;funcret
   391  001B20                     __end_of_setup_timer3:
   392                           	opt stack 0
   393                           tblptru	equ	0xFF8
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           plusw1	equ	0xFE3
   397                           plusw2	equ	0xFDB
   398                           
   399 ;; *************** function _espi_setup *****************
   400 ;; Defined at:
   401 ;;		line 24 in file "../TorqueGriper.X/extended_spi.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;  mode            1    wreg     unsigned char 
   404 ;; Auto vars:     Size  Location     Type
   405 ;;  mode            1    2[COMRAM] unsigned char 
   406 ;; Return value:  Size  Location     Type
   407 ;;		None               void
   408 ;; Registers used:
   409 ;;		wreg, status,2, status,0, cstack
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMRAM   BANK0
   415 ;;      Params:         0       0
   416 ;;      Locals:         1       0
   417 ;;      Temps:          0       0
   418 ;;      Totals:         1       0
   419 ;;Total ram usage:        1 bytes
   420 ;; Hardware stack levels used:    1
   421 ;; Hardware stack levels required when called:    1
   422 ;; This function calls:
   423 ;;		_setup_spi
   424 ;; This function is called by:
   425 ;;		_main
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           	psect	text2
   430  001BB2                     __ptext2:
   431                           	opt stack 0
   432  001BB2                     _espi_setup:
   433                           	opt stack 29
   434                           
   435                           ;incstack = 0
   436                           ;espi_setup@mode stored from wreg
   437  001BB2  6E03               	movwf	espi_setup@mode,c
   438                           
   439                           ;extended_spi.c: 26: setup_spi(0, 0x20 | 0x10 | mode);
   440  001BB4  5003               	movf	espi_setup@mode,w,c
   441  001BB6  0930               	iorlw	48
   442  001BB8  6E01               	movwf	setup_spi@SSPCON1_reg,c
   443  001BBA  0E00               	movlw	0
   444  001BBC  EC13  F00E         	call	_setup_spi
   445                           
   446                           ;extended_spi.c: 28: ANSELbits.ANS2 = 0;
   447  001BC0  947E               	bcf	3966,2,c	;volatile
   448                           
   449                           ;extended_spi.c: 29: ANSELHbits.ANS8 = 0;
   450  001BC2  907F               	bcf	3967,0,c	;volatile
   451                           
   452                           ;extended_spi.c: 31: if (mode == 0x04 || mode == 0x05) {
   453  001BC4  0E04               	movlw	4
   454  001BC6  1803               	xorwf	espi_setup@mode,w,c
   455  001BC8  B4D8               	btfsc	status,2,c
   456  001BCA  D004               	goto	l122
   457  001BCC  0E05               	movlw	5
   458  001BCE  1803               	xorwf	espi_setup@mode,w,c
   459  001BD0  A4D8               	btfss	status,2,c
   460  001BD2  D004               	goto	l120
   461  001BD4                     l122:
   462                           
   463                           ;extended_spi.c: 32: TRISAbits.RA2 = 0;
   464  001BD4  9492               	bcf	3986,2,c	;volatile
   465                           
   466                           ;extended_spi.c: 33: LATAbits.LATA2 = 0;
   467  001BD6  9489               	bcf	3977,2,c	;volatile
   468                           
   469                           ;extended_spi.c: 34: TRISCbits.RC6 = 1;
   470  001BD8  8C94               	bsf	3988,6,c	;volatile
   471                           
   472                           ;extended_spi.c: 35: } else {
   473  001BDA  0012               	return	
   474  001BDC                     l120:
   475                           
   476                           ;extended_spi.c: 36: TRISAbits.RA2 = 1;
   477  001BDC  8492               	bsf	3986,2,c	;volatile
   478                           
   479                           ;extended_spi.c: 37: TRISCbits.RC6 = 0;
   480  001BDE  9C94               	bcf	3988,6,c	;volatile
   481                           
   482                           ;extended_spi.c: 38: LATCbits.LATC6 = 0;
   483  001BE0  9C8B               	bcf	3979,6,c	;volatile
   484                           
   485                           ;extended_spi.c: 39: INTCON2bits.INTEDG2 = 1;
   486  001BE2  88F1               	bsf	intcon2,4,c	;volatile
   487                           
   488                           ;extended_spi.c: 40: INTCON3bits.INT2E = 1;
   489  001BE4  88F0               	bsf	intcon3,4,c	;volatile
   490  001BE6  0012               	return	
   491  001BE8  0012               	return		;funcret
   492  001BEA                     __end_of_espi_setup:
   493                           	opt stack 0
   494                           tblptru	equ	0xFF8
   495                           intcon2	equ	0xFF1
   496                           intcon3	equ	0xFF0
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           plusw1	equ	0xFE3
   500                           plusw2	equ	0xFDB
   501                           status	equ	0xFD8
   502                           
   503 ;; *************** function _setup_spi *****************
   504 ;; Defined at:
   505 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;  SSPSTAT_reg     1    wreg     unsigned char 
   508 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
   509 ;; Auto vars:     Size  Location     Type
   510 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
   511 ;; Return value:  Size  Location     Type
   512 ;;		None               void
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0
   520 ;;      Params:         1       0
   521 ;;      Locals:         1       0
   522 ;;      Temps:          0       0
   523 ;;      Totals:         2       0
   524 ;;Total ram usage:        2 bytes
   525 ;; Hardware stack levels used:    1
   526 ;; This function calls:
   527 ;;		Nothing
   528 ;; This function is called by:
   529 ;;		_espi_setup
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text3
   534  001C26                     __ptext3:
   535                           	opt stack 0
   536  001C26                     _setup_spi:
   537                           	opt stack 29
   538                           
   539                           ;incstack = 0
   540                           ;setup_spi@SSPSTAT_reg stored from wreg
   541  001C26  6E02               	movwf	setup_spi@SSPSTAT_reg,c
   542                           
   543                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
   544  001C28  9E94               	bcf	3988,7,c	;volatile
   545                           
   546                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
   547  001C2A  947F               	bcf	3967,2,c	;volatile
   548                           
   549                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
   550  001C2C  8893               	bsf	3987,4,c	;volatile
   551                           
   552                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
   553  001C2E  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
   554                           
   555                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
   556  001C32  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
   557                           
   558                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
   559  001C36  50C6               	movf	4038,w,c	;volatile
   560  001C38  0B0F               	andlw	15
   561  001C3A  0A05               	xorlw	5
   562  001C3C  B4D8               	btfsc	status,2,c
   563  001C3E  D005               	goto	l47
   564  001C40  50C6               	movf	4038,w,c	;volatile
   565  001C42  0B0F               	andlw	15
   566  001C44  0A04               	xorlw	4
   567  001C46  A4D8               	btfss	status,2,c
   568  001C48  D00A               	goto	l45
   569  001C4A                     l47:
   570                           
   571                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
   572  001C4A  8C93               	bsf	3987,6,c	;volatile
   573                           
   574                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
   575  001C4C  50C6               	movf	4038,w,c	;volatile
   576  001C4E  0B0F               	andlw	15
   577  001C50  0A04               	xorlw	4
   578  001C52  A4D8               	btfss	status,2,c
   579  001C54  D002               	goto	l48
   580                           
   581                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
   582  001C56  907F               	bcf	3967,0,c	;volatile
   583                           
   584                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
   585  001C58  8C94               	bsf	3988,6,c	;volatile
   586  001C5A                     l48:
   587                           
   588                           ;spi_pic.c: 26: }
   589                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
   590  001C5A  9EC7               	bcf	4039,7,c	;volatile
   591                           
   592                           ;spi_pic.c: 28: } else {
   593  001C5C  0012               	return	
   594  001C5E                     l45:
   595                           
   596                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
   597  001C5E  9C93               	bcf	3987,6,c	;volatile
   598  001C60  0012               	return	
   599  001C62  0012               	return		;funcret
   600  001C64                     __end_of_setup_spi:
   601                           	opt stack 0
   602                           tblptru	equ	0xFF8
   603                           intcon2	equ	0xFF1
   604                           intcon3	equ	0xFF0
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           plusw1	equ	0xFE3
   608                           plusw2	equ	0xFDB
   609                           status	equ	0xFD8
   610                           
   611 ;; *************** function _espi_master_send *****************
   612 ;; Defined at:
   613 ;;		line 135 in file "../TorqueGriper.X/extended_spi.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;  buffer          2    7[COMRAM] PTR struct circular_buff
   616 ;;		 -> main@buffer(34), 
   617 ;;  timer_start     2    9[COMRAM] PTR FTN(int ,)void 
   618 ;;		 -> set_timer3(0), 
   619 ;;  timer           2   11[COMRAM] PTR FTN()unsigned char 
   620 ;;		 -> timer3_up(1), 
   621 ;; Auto vars:     Size  Location     Type
   622 ;;  byte_to_send    2   15[COMRAM] unsigned int 
   623 ;;  byte_2          1   18[COMRAM] unsigned char 
   624 ;;  byte_1          1   17[COMRAM] unsigned char 
   625 ;;  received_2      1   14[COMRAM] unsigned char 
   626 ;;  received_1      1   13[COMRAM] unsigned char 
   627 ;; Return value:  Size  Location     Type
   628 ;;		None               void
   629 ;; Registers used:
   630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMRAM   BANK0
   636 ;;      Params:         6       0
   637 ;;      Locals:         6       0
   638 ;;      Temps:          0       0
   639 ;;      Totals:        12       0
   640 ;;Total ram usage:       12 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; Hardware stack levels required when called:    2
   643 ;; This function calls:
   644 ;;		_buffer_count
   645 ;;		_buffer_peek
   646 ;;		_buffer_pop
   647 ;;		_encode_data
   648 ;;		_send_delay
   649 ;;		_spi_send_get_byte
   650 ;;		_wait_pulse
   651 ;; This function is called by:
   652 ;;		_main
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           	psect	text4
   657  001F4C                     __ptext4:
   658                           	opt stack 0
   659  001F4C                     _espi_master_send:
   660                           	opt stack 28
   661                           
   662                           ;extended_spi.c: 139: if (buffer_count(buffer)) {
   663                           
   664                           ;incstack = 0
   665  001F4C  C008  F001         	movff	espi_master_send@buffer,buffer_count@buffer
   666  001F50  C009  F002         	movff	espi_master_send@buffer+1,buffer_count@buffer+1
   667  001F54  ECA2  F00D         	call	_buffer_count	;wreg free
   668  001F58  0900               	iorlw	0
   669  001F5A  B4D8               	btfsc	status,2,c
   670  001F5C  0012               	return	
   671                           
   672                           ;extended_spi.c: 140: spi_send_get_byte(0x10);
   673  001F5E  0E10               	movlw	16
   674  001F60  ECAB  F00D         	call	_spi_send_get_byte
   675                           
   676                           ;extended_spi.c: 142: wait_pulse(0x10, timer_start, timer);
   677  001F64  C00A  F003         	movff	espi_master_send@timer_start,wait_pulse@timer_start
   678  001F68  C00B  F004         	movff	espi_master_send@timer_start+1,wait_pulse@timer_start+1
   679  001F6C  C00C  F005         	movff	espi_master_send@timer,wait_pulse@timer
   680  001F70  C00D  F006         	movff	espi_master_send@timer+1,wait_pulse@timer+1
   681  001F74  0E10               	movlw	16
   682  001F76  ECE3  F00E         	call	_wait_pulse
   683  001F7A  D000               	goto	l1290
   684  001F7C                     l1290:
   685                           
   686                           ;extended_spi.c: 151: byte_to_send = buffer_peek(buffer);
   687  001F7C  C008  F001         	movff	espi_master_send@buffer,buffer_peek@buffer
   688  001F80  C009  F002         	movff	espi_master_send@buffer+1,buffer_peek@buffer+1
   689  001F84  EC55  F00E         	call	_buffer_peek	;wreg free
   690  001F88  C001  F010         	movff	?_buffer_peek,espi_master_send@byte_to_send
   691  001F8C  C002  F011         	movff	?_buffer_peek+1,espi_master_send@byte_to_send+1
   692                           
   693                           ;extended_spi.c: 152: if (byte_to_send == -1)
   694  001F90  2810               	incf	espi_master_send@byte_to_send,w,c
   695  001F92  E105               	bnz	l1296
   696  001F94  2811               	incf	espi_master_send@byte_to_send+1,w,c
   697  001F96  B4D8               	btfsc	status,2,c
   698  001F98  D02C               	goto	l1316
   699  001F9A  D001               	goto	l1296
   700                           
   701                           ;extended_spi.c: 153: break;
   702  001F9C  D02A               	goto	l1316
   703  001F9E                     l1296:
   704                           
   705                           ;extended_spi.c: 154: encode_data(byte_to_send, &byte_1, &byte_2);
   706  001F9E  0E12               	movlw	low espi_master_send@byte_1
   707  001FA0  6E01               	movwf	encode_data@byte_1,c
   708  001FA2  0E00               	movlw	high espi_master_send@byte_1
   709  001FA4  6E02               	movwf	encode_data@byte_1+1,c
   710  001FA6  0E13               	movlw	low espi_master_send@byte_2
   711  001FA8  6E03               	movwf	encode_data@byte_2,c
   712  001FAA  0E00               	movlw	high espi_master_send@byte_2
   713  001FAC  6E04               	movwf	encode_data@byte_2+1,c
   714  001FAE  5010               	movf	espi_master_send@byte_to_send,w,c
   715  001FB0  EC32  F00E         	call	_encode_data
   716                           
   717                           ;extended_spi.c: 156: received_1 = spi_send_get_byte(byte_1);
   718  001FB4  5012               	movf	espi_master_send@byte_1,w,c
   719  001FB6  ECAB  F00D         	call	_spi_send_get_byte
   720  001FBA  6E0E               	movwf	espi_master_send@received_1,c
   721                           
   722                           ;extended_spi.c: 157: send_delay();
   723  001FBC  EC90  F00D         	call	_send_delay	;wreg free
   724                           
   725                           ;extended_spi.c: 158: if (received_1 == 0x30)
   726  001FC0  0E30               	movlw	48
   727  001FC2  180E               	xorwf	espi_master_send@received_1,w,c
   728  001FC4  B4D8               	btfsc	status,2,c
   729  001FC6  0012               	return	
   730  001FC8  D001               	goto	l1306
   731                           
   732                           ;extended_spi.c: 159: return;
   733  001FCA  0012               	return	
   734  001FCC                     l1306:
   735                           
   736                           ;extended_spi.c: 161: received_2 = spi_send_get_byte(byte_2);
   737  001FCC  5013               	movf	espi_master_send@byte_2,w,c
   738  001FCE  ECAB  F00D         	call	_spi_send_get_byte
   739  001FD2  6E0F               	movwf	espi_master_send@received_2,c
   740                           
   741                           ;extended_spi.c: 162: send_delay();
   742  001FD4  EC90  F00D         	call	_send_delay	;wreg free
   743                           
   744                           ;extended_spi.c: 163: if (received_2 == 0x30)
   745  001FD8  0E30               	movlw	48
   746  001FDA  180F               	xorwf	espi_master_send@received_2,w,c
   747  001FDC  B4D8               	btfsc	status,2,c
   748  001FDE  0012               	return	
   749  001FE0  D001               	goto	l1314
   750                           
   751                           ;extended_spi.c: 164: return;
   752  001FE2  0012               	return	
   753  001FE4                     l1314:
   754                           
   755                           ;extended_spi.c: 166: buffer_pop(buffer);
   756  001FE4  C008  F001         	movff	espi_master_send@buffer,buffer_pop@buffer
   757  001FE8  C009  F002         	movff	espi_master_send@buffer+1,buffer_pop@buffer+1
   758  001FEC  EC1B  F00F         	call	_buffer_pop	;wreg free
   759  001FF0  D7C5               	goto	l1290
   760  001FF2                     l1316:
   761                           
   762                           ;extended_spi.c: 167: }
   763                           ;extended_spi.c: 169: spi_send_get_byte(0x30);
   764  001FF2  0E30               	movlw	48
   765  001FF4  ECAB  F00D         	call	_spi_send_get_byte
   766                           
   767                           ;extended_spi.c: 170: send_delay();
   768  001FF8  EC90  F00D         	call	_send_delay	;wreg free
   769  001FFC  0012               	return	
   770  001FFE  0012               	return		;funcret
   771  002000                     __end_of_espi_master_send:
   772                           	opt stack 0
   773                           tblptru	equ	0xFF8
   774                           intcon2	equ	0xFF1
   775                           intcon3	equ	0xFF0
   776                           postinc0	equ	0xFEE
   777                           wreg	equ	0xFE8
   778                           plusw1	equ	0xFE3
   779                           plusw2	equ	0xFDB
   780                           status	equ	0xFD8
   781                           
   782 ;; *************** function _encode_data *****************
   783 ;; Defined at:
   784 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
   785 ;; Parameters:    Size  Location     Type
   786 ;;  data            1    wreg     unsigned char 
   787 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
   788 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
   789 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
   790 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  data            1    5[COMRAM] unsigned char 
   793 ;; Return value:  Size  Location     Type
   794 ;;		None               void
   795 ;; Registers used:
   796 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMRAM   BANK0
   802 ;;      Params:         4       0
   803 ;;      Locals:         1       0
   804 ;;      Temps:          1       0
   805 ;;      Totals:         6       0
   806 ;;Total ram usage:        6 bytes
   807 ;; Hardware stack levels used:    1
   808 ;; This function calls:
   809 ;;		Nothing
   810 ;; This function is called by:
   811 ;;		_espi_master_send
   812 ;;		_espi_slave_send
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text5
   817  001C64                     __ptext5:
   818                           	opt stack 0
   819  001C64                     _encode_data:
   820                           	opt stack 29
   821                           
   822                           ;incstack = 0
   823                           ;encode_data@data stored from wreg
   824  001C64  6E06               	movwf	encode_data@data,c
   825                           
   826                           ;encoding.c: 5: *byte_1 = 0xA0;
   827  001C66  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   828  001C6A  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   829  001C6E  0EA0               	movlw	160
   830  001C70  6EDF               	movwf	indf2,c
   831                           
   832                           ;encoding.c: 6: *byte_2 = 0xA0;
   833  001C72  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   834  001C76  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   835  001C7A  0EA0               	movlw	160
   836  001C7C  6EDF               	movwf	indf2,c
   837                           
   838                           ;encoding.c: 8: *byte_1 |= data >> 4;
   839  001C7E  C006  F005         	movff	encode_data@data,??_encode_data
   840  001C82  3A05               	swapf	??_encode_data,f,c
   841  001C84  0E0F               	movlw	15
   842  001C86  1605               	andwf	??_encode_data,f,c
   843  001C88  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   844  001C8C  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   845  001C90  5005               	movf	??_encode_data,w,c
   846  001C92  12DF               	iorwf	indf2,f,c
   847                           
   848                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
   849  001C94  C006  F005         	movff	encode_data@data,??_encode_data
   850  001C98  0E0F               	movlw	15
   851  001C9A  1605               	andwf	??_encode_data,f,c
   852  001C9C  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   853  001CA0  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   854  001CA4  5005               	movf	??_encode_data,w,c
   855  001CA6  12DF               	iorwf	indf2,f,c
   856  001CA8  0012               	return		;funcret
   857  001CAA                     __end_of_encode_data:
   858                           	opt stack 0
   859                           tblptru	equ	0xFF8
   860                           intcon2	equ	0xFF1
   861                           intcon3	equ	0xFF0
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           plusw1	equ	0xFE3
   865                           indf2	equ	0xFDF
   866                           plusw2	equ	0xFDB
   867                           fsr2h	equ	0xFDA
   868                           fsr2l	equ	0xFD9
   869                           status	equ	0xFD8
   870                           
   871 ;; *************** function _buffer_pop *****************
   872 ;; Defined at:
   873 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
   876 ;;		 -> main@buffer(34), 
   877 ;; Auto vars:     Size  Location     Type
   878 ;;  byte            2    4[COMRAM] int 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  2    0[COMRAM] int 
   881 ;; Registers used:
   882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0
   888 ;;      Params:         2       0
   889 ;;      Locals:         2       0
   890 ;;      Temps:          2       0
   891 ;;      Totals:         6       0
   892 ;;Total ram usage:        6 bytes
   893 ;; Hardware stack levels used:    1
   894 ;; This function calls:
   895 ;;		Nothing
   896 ;; This function is called by:
   897 ;;		_espi_master_send
   898 ;;		_espi_slave_send
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text6
   903  001E36                     __ptext6:
   904                           	opt stack 0
   905  001E36                     _buffer_pop:
   906                           	opt stack 29
   907                           
   908                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
   909                           
   910                           ;incstack = 0
   911  001E36  EE20 F001          	lfsr	2,1
   912  001E3A  5001               	movf	buffer_pop@buffer,w,c
   913  001E3C  26D9               	addwf	fsr2l,f,c
   914  001E3E  5002               	movf	buffer_pop@buffer+1,w,c
   915  001E40  22DA               	addwfc	fsr2h,f,c
   916  001E42  50DF               	movf	indf2,w,c
   917  001E44  B4D8               	btfsc	status,2,c
   918  001E46  0012               	return	
   919  001E48  D001               	goto	l1220
   920                           
   921                           ;circular_buffer.c: 40: return -1;
   922                           ;	Return value of _buffer_pop is never used
   923  001E4A  0012               	return	
   924  001E4C                     l1220:
   925                           
   926                           ;circular_buffer.c: 41: }
   927                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
   928  001E4C  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
   929  001E50  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   930  001E54  50DF               	movf	indf2,w,c
   931  001E56  6E03               	movwf	??_buffer_pop& (0+255),c
   932  001E58  5003               	movf	??_buffer_pop,w,c
   933  001E5A  0D01               	mullw	1
   934  001E5C  0E02               	movlw	2
   935  001E5E  26F3               	addwf	prodl,f,c
   936  001E60  0E00               	movlw	0
   937  001E62  22F4               	addwfc	prodh,f,c
   938  001E64  50F3               	movf	prodl,w,c
   939  001E66  2401               	addwf	buffer_pop@buffer,w,c
   940  001E68  6ED9               	movwf	fsr2l,c
   941  001E6A  50F4               	movf	prodh,w,c
   942  001E6C  2002               	addwfc	buffer_pop@buffer+1,w,c
   943  001E6E  6EDA               	movwf	fsr2h,c
   944  001E70  50DF               	movf	indf2,w,c
   945  001E72  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
   946  001E74  5004               	movf	??_buffer_pop+1,w,c
   947  001E76  6E05               	movwf	buffer_pop@byte,c
   948  001E78  6A06               	clrf	buffer_pop@byte+1,c
   949                           
   950                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
   951  001E7A  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
   952  001E7E  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   953  001E82  50DF               	movf	indf2,w,c
   954  001E84  6E03               	movwf	??_buffer_pop& (0+255),c
   955  001E86  2803               	incf	??_buffer_pop,w,c
   956  001E88  0B1F               	andlw	31
   957  001E8A  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
   958  001E8E  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   959  001E92  6EDF               	movwf	indf2,c
   960                           
   961                           ;circular_buffer.c: 45: buffer->count--;
   962  001E94  EE20 F001          	lfsr	2,1
   963  001E98  5001               	movf	buffer_pop@buffer,w,c
   964  001E9A  26D9               	addwf	fsr2l,f,c
   965  001E9C  5002               	movf	buffer_pop@buffer+1,w,c
   966  001E9E  22DA               	addwfc	fsr2h,f,c
   967  001EA0  06DF               	decf	indf2,f,c
   968  001EA2  0012               	return	
   969                           
   970                           ;circular_buffer.c: 47: return byte;
   971                           ;	Return value of _buffer_pop is never used
   972  001EA4  0012               	return		;funcret
   973  001EA6                     __end_of_buffer_pop:
   974                           	opt stack 0
   975                           tblptru	equ	0xFF8
   976                           prodh	equ	0xFF4
   977                           prodl	equ	0xFF3
   978                           intcon2	equ	0xFF1
   979                           intcon3	equ	0xFF0
   980                           postinc0	equ	0xFEE
   981                           wreg	equ	0xFE8
   982                           plusw1	equ	0xFE3
   983                           indf2	equ	0xFDF
   984                           plusw2	equ	0xFDB
   985                           fsr2h	equ	0xFDA
   986                           fsr2l	equ	0xFD9
   987                           status	equ	0xFD8
   988                           
   989 ;; *************** function _buffer_peek *****************
   990 ;; Defined at:
   991 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;  buffer          2    0[COMRAM] PTR const struct circula
   994 ;;		 -> main@buffer(34), 
   995 ;; Auto vars:     Size  Location     Type
   996 ;;  byte            2    4[COMRAM] int 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  2    0[COMRAM] unsigned int 
   999 ;; Registers used:
  1000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMRAM   BANK0
  1006 ;;      Params:         2       0
  1007 ;;      Locals:         2       0
  1008 ;;      Temps:          2       0
  1009 ;;      Totals:         6       0
  1010 ;;Total ram usage:        6 bytes
  1011 ;; Hardware stack levels used:    1
  1012 ;; This function calls:
  1013 ;;		Nothing
  1014 ;; This function is called by:
  1015 ;;		_espi_master_send
  1016 ;;		_espi_slave_send
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text7
  1021  001CAA                     __ptext7:
  1022                           	opt stack 0
  1023  001CAA                     _buffer_peek:
  1024                           	opt stack 29
  1025                           
  1026                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
  1027                           
  1028                           ;incstack = 0
  1029  001CAA  EE20 F001          	lfsr	2,1
  1030  001CAE  5001               	movf	buffer_peek@buffer,w,c
  1031  001CB0  26D9               	addwf	fsr2l,f,c
  1032  001CB2  5002               	movf	buffer_peek@buffer+1,w,c
  1033  001CB4  22DA               	addwfc	fsr2h,f,c
  1034  001CB6  50DF               	movf	indf2,w,c
  1035  001CB8  A4D8               	btfss	status,2,c
  1036  001CBA  D003               	goto	l1204
  1037                           
  1038                           ;circular_buffer.c: 58: return -1;
  1039  001CBC  6801               	setf	?_buffer_peek,c
  1040  001CBE  6802               	setf	?_buffer_peek+1,c
  1041  001CC0  0012               	return	
  1042  001CC2                     l1204:
  1043                           
  1044                           ;circular_buffer.c: 59: }
  1045                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  1046  001CC2  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
  1047  001CC6  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
  1048  001CCA  50DF               	movf	indf2,w,c
  1049  001CCC  6E03               	movwf	??_buffer_peek& (0+255),c
  1050  001CCE  5003               	movf	??_buffer_peek,w,c
  1051  001CD0  0D01               	mullw	1
  1052  001CD2  0E02               	movlw	2
  1053  001CD4  26F3               	addwf	prodl,f,c
  1054  001CD6  0E00               	movlw	0
  1055  001CD8  22F4               	addwfc	prodh,f,c
  1056  001CDA  50F3               	movf	prodl,w,c
  1057  001CDC  2401               	addwf	buffer_peek@buffer,w,c
  1058  001CDE  6ED9               	movwf	fsr2l,c
  1059  001CE0  50F4               	movf	prodh,w,c
  1060  001CE2  2002               	addwfc	buffer_peek@buffer+1,w,c
  1061  001CE4  6EDA               	movwf	fsr2h,c
  1062  001CE6  50DF               	movf	indf2,w,c
  1063  001CE8  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
  1064  001CEA  5004               	movf	??_buffer_peek+1,w,c
  1065  001CEC  6E05               	movwf	buffer_peek@byte,c
  1066  001CEE  6A06               	clrf	buffer_peek@byte+1,c
  1067                           
  1068                           ;circular_buffer.c: 63: return byte;
  1069  001CF0  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
  1070  001CF4  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
  1071  001CF8  0012               	return	
  1072  001CFA  0012               	return		;funcret
  1073  001CFC                     __end_of_buffer_peek:
  1074                           	opt stack 0
  1075                           tblptru	equ	0xFF8
  1076                           prodh	equ	0xFF4
  1077                           prodl	equ	0xFF3
  1078                           intcon2	equ	0xFF1
  1079                           intcon3	equ	0xFF0
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           plusw1	equ	0xFE3
  1083                           indf2	equ	0xFDF
  1084                           plusw2	equ	0xFDB
  1085                           fsr2h	equ	0xFDA
  1086                           fsr2l	equ	0xFD9
  1087                           status	equ	0xFD8
  1088                           
  1089 ;; *************** function _buffer_count *****************
  1090 ;; Defined at:
  1091 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1094 ;;		 -> main@buffer(34), 
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;		None
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      unsigned char 
  1099 ;; Registers used:
  1100 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0
  1106 ;;      Params:         2       0
  1107 ;;      Locals:         0       0
  1108 ;;      Temps:          0       0
  1109 ;;      Totals:         2       0
  1110 ;;Total ram usage:        2 bytes
  1111 ;; Hardware stack levels used:    1
  1112 ;; This function calls:
  1113 ;;		Nothing
  1114 ;; This function is called by:
  1115 ;;		_espi_master_send
  1116 ;;		_espi_slave_send
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text8
  1121  001B44                     __ptext8:
  1122                           	opt stack 0
  1123  001B44                     _buffer_count:
  1124                           	opt stack 29
  1125                           
  1126                           ;circular_buffer.c: 6: return buffer->count;
  1127                           
  1128                           ;incstack = 0
  1129  001B44  EE20 F001          	lfsr	2,1
  1130  001B48  5001               	movf	buffer_count@buffer,w,c
  1131  001B4A  26D9               	addwf	fsr2l,f,c
  1132  001B4C  5002               	movf	buffer_count@buffer+1,w,c
  1133  001B4E  22DA               	addwfc	fsr2h,f,c
  1134  001B50  50DF               	movf	indf2,w,c
  1135  001B52  0012               	return	
  1136  001B54  0012               	return		;funcret
  1137  001B56                     __end_of_buffer_count:
  1138                           	opt stack 0
  1139                           tblptru	equ	0xFF8
  1140                           prodh	equ	0xFF4
  1141                           prodl	equ	0xFF3
  1142                           intcon2	equ	0xFF1
  1143                           intcon3	equ	0xFF0
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           plusw1	equ	0xFE3
  1147                           indf2	equ	0xFDF
  1148                           plusw2	equ	0xFDB
  1149                           fsr2h	equ	0xFDA
  1150                           fsr2l	equ	0xFD9
  1151                           status	equ	0xFD8
  1152                           
  1153 ;; *************** function _espi_master_receive *****************
  1154 ;; Defined at:
  1155 ;;		line 174 in file "../TorqueGriper.X/extended_spi.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  buffer          2    7[COMRAM] PTR struct circular_buff
  1158 ;;		 -> main@buffer(34), 
  1159 ;;  timer_start     2    9[COMRAM] PTR FTN(int ,)void 
  1160 ;;		 -> set_timer3(0), 
  1161 ;;  timer           2   11[COMRAM] PTR FTN()unsigned char 
  1162 ;;		 -> timer3_up(1), 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;  value           1   15[COMRAM] unsigned char 
  1165 ;;  received_2      1   14[COMRAM] unsigned char 
  1166 ;;  received_1      1   13[COMRAM] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;		None               void
  1169 ;; Registers used:
  1170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0
  1176 ;;      Params:         6       0
  1177 ;;      Locals:         3       0
  1178 ;;      Temps:          0       0
  1179 ;;      Totals:         9       0
  1180 ;;Total ram usage:        9 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    2
  1183 ;; This function calls:
  1184 ;;		_buffer_empty
  1185 ;;		_buffer_push
  1186 ;;		_buffer_space
  1187 ;;		_decode_data
  1188 ;;		_send_delay
  1189 ;;		_spi_send_get_byte
  1190 ;;		_wait_pulse
  1191 ;; This function is called by:
  1192 ;;		_main
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           	psect	text9
  1197  001EA6                     __ptext9:
  1198                           	opt stack 0
  1199  001EA6                     _espi_master_receive:
  1200                           	opt stack 28
  1201                           
  1202                           ;extended_spi.c: 178: if (buffer_empty(buffer)) {
  1203                           
  1204                           ;incstack = 0
  1205  001EA6  C008  F001         	movff	espi_master_receive@buffer,buffer_empty@buffer
  1206  001EAA  C009  F002         	movff	espi_master_receive@buffer+1,buffer_empty@buffer+1
  1207  001EAE  ECCB  F00D         	call	_buffer_empty	;wreg free
  1208  001EB2  0900               	iorlw	0
  1209  001EB4  B4D8               	btfsc	status,2,c
  1210  001EB6  0012               	return	
  1211                           
  1212                           ;extended_spi.c: 179: spi_send_get_byte(0x20);
  1213  001EB8  0E20               	movlw	32
  1214  001EBA  ECAB  F00D         	call	_spi_send_get_byte
  1215                           
  1216                           ;extended_spi.c: 181: wait_pulse(0x20, timer_start, timer);
  1217  001EBE  C00A  F003         	movff	espi_master_receive@timer_start,wait_pulse@timer_start
  1218  001EC2  C00B  F004         	movff	espi_master_receive@timer_start+1,wait_pulse@timer_start+1
  1219  001EC6  C00C  F005         	movff	espi_master_receive@timer,wait_pulse@timer
  1220  001ECA  C00D  F006         	movff	espi_master_receive@timer+1,wait_pulse@timer+1
  1221  001ECE  0E20               	movlw	32
  1222  001ED0  ECE3  F00E         	call	_wait_pulse
  1223                           
  1224                           ;extended_spi.c: 183: uint8_t received_1;
  1225                           ;extended_spi.c: 184: uint8_t received_2;
  1226                           ;extended_spi.c: 185: uint8_t value;
  1227                           ;extended_spi.c: 187: while (buffer_space(buffer)) {
  1228  001ED4  D02B               	goto	l1278
  1229  001ED6                     l1258:
  1230                           
  1231                           ;extended_spi.c: 188: received_1 = spi_send_get_byte(0xE0);
  1232  001ED6  0EE0               	movlw	224
  1233  001ED8  ECAB  F00D         	call	_spi_send_get_byte
  1234  001EDC  6E0E               	movwf	espi_master_receive@received_1,c
  1235                           
  1236                           ;extended_spi.c: 189: send_delay();
  1237  001EDE  EC90  F00D         	call	_send_delay	;wreg free
  1238                           
  1239                           ;extended_spi.c: 190: if (received_1 == 0x30)
  1240  001EE2  0E30               	movlw	48
  1241  001EE4  180E               	xorwf	espi_master_receive@received_1,w,c
  1242  001EE6  B4D8               	btfsc	status,2,c
  1243  001EE8  0012               	return	
  1244  001EEA  D001               	goto	l1266
  1245                           
  1246                           ;extended_spi.c: 191: return;
  1247  001EEC  0012               	return	
  1248  001EEE                     l1266:
  1249                           
  1250                           ;extended_spi.c: 193: received_2 = spi_send_get_byte(0xE0);
  1251  001EEE  0EE0               	movlw	224
  1252  001EF0  ECAB  F00D         	call	_spi_send_get_byte
  1253  001EF4  6E0F               	movwf	espi_master_receive@received_2,c
  1254                           
  1255                           ;extended_spi.c: 194: send_delay();
  1256  001EF6  EC90  F00D         	call	_send_delay	;wreg free
  1257                           
  1258                           ;extended_spi.c: 195: if (received_2 == 0x30)
  1259  001EFA  0E30               	movlw	48
  1260  001EFC  180F               	xorwf	espi_master_receive@received_2,w,c
  1261  001EFE  B4D8               	btfsc	status,2,c
  1262  001F00  0012               	return	
  1263  001F02  D001               	goto	l1274
  1264                           
  1265                           ;extended_spi.c: 196: return;
  1266  001F04  0012               	return	
  1267  001F06                     l1274:
  1268                           
  1269                           ;extended_spi.c: 198: decode_data(&value, received_1, received_2);
  1270  001F06  0E10               	movlw	low espi_master_receive@value
  1271  001F08  6E01               	movwf	decode_data@data,c
  1272  001F0A  0E00               	movlw	high espi_master_receive@value
  1273  001F0C  6E02               	movwf	decode_data@data+1,c
  1274  001F0E  C00E  F003         	movff	espi_master_receive@received_1,decode_data@byte_1
  1275  001F12  C00F  F004         	movff	espi_master_receive@received_2,decode_data@byte_2
  1276  001F16  ECF5  F00D         	call	_decode_data	;wreg free
  1277                           
  1278                           ;extended_spi.c: 199: buffer_push(buffer, value);
  1279  001F1A  C008  F001         	movff	espi_master_receive@buffer,buffer_push@buffer
  1280  001F1E  C009  F002         	movff	espi_master_receive@buffer+1,buffer_push@buffer+1
  1281  001F22  C010  F003         	movff	espi_master_receive@value,buffer_push@byte
  1282  001F26  ECB0  F00E         	call	_buffer_push	;wreg free
  1283  001F2A  D000               	goto	l1278
  1284  001F2C                     l1278:
  1285  001F2C  C008  F001         	movff	espi_master_receive@buffer,buffer_space@buffer
  1286  001F30  C009  F002         	movff	espi_master_receive@buffer+1,buffer_space@buffer+1
  1287  001F34  ECB5  F00D         	call	_buffer_space	;wreg free
  1288  001F38  0900               	iorlw	0
  1289  001F3A  A4D8               	btfss	status,2,c
  1290  001F3C  D7CC               	goto	l1258
  1291                           
  1292                           ;extended_spi.c: 200: }
  1293                           ;extended_spi.c: 202: spi_send_get_byte(0x30);
  1294  001F3E  0E30               	movlw	48
  1295  001F40  ECAB  F00D         	call	_spi_send_get_byte
  1296                           
  1297                           ;extended_spi.c: 203: send_delay();
  1298  001F44  EC90  F00D         	call	_send_delay	;wreg free
  1299  001F48  0012               	return	
  1300  001F4A  0012               	return		;funcret
  1301  001F4C                     __end_of_espi_master_receive:
  1302                           	opt stack 0
  1303                           tblptru	equ	0xFF8
  1304                           prodh	equ	0xFF4
  1305                           prodl	equ	0xFF3
  1306                           intcon2	equ	0xFF1
  1307                           intcon3	equ	0xFF0
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           plusw1	equ	0xFE3
  1311                           indf2	equ	0xFDF
  1312                           plusw2	equ	0xFDB
  1313                           fsr2h	equ	0xFDA
  1314                           fsr2l	equ	0xFD9
  1315                           status	equ	0xFD8
  1316                           
  1317 ;; *************** function _wait_pulse *****************
  1318 ;; Defined at:
  1319 ;;		line 122 in file "../TorqueGriper.X/extended_spi.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  value           1    wreg     unsigned char 
  1322 ;;  timer_start     2    2[COMRAM] PTR FTN(int ,)void 
  1323 ;;		 -> set_timer3(0), 
  1324 ;;  timer           2    4[COMRAM] PTR FTN()unsigned char 
  1325 ;;		 -> timer3_up(1), 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  value           1    6[COMRAM] unsigned char 
  1328 ;; Return value:  Size  Location     Type
  1329 ;;		None               void
  1330 ;; Registers used:
  1331 ;;		wreg, status,2, pclat, tosl, cstack
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMRAM   BANK0
  1337 ;;      Params:         4       0
  1338 ;;      Locals:         1       0
  1339 ;;      Temps:          0       0
  1340 ;;      Totals:         5       0
  1341 ;;Total ram usage:        5 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; Hardware stack levels required when called:    1
  1344 ;; This function calls:
  1345 ;;		_set_timer3
  1346 ;;		_spi_send_get_byte
  1347 ;;		_timer3_up
  1348 ;; This function is called by:
  1349 ;;		_espi_master_send
  1350 ;;		_espi_master_receive
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           	psect	text10
  1355  001DC6                     __ptext10:
  1356                           	opt stack 0
  1357  001DC6                     _wait_pulse:
  1358                           	opt stack 28
  1359                           
  1360                           ;incstack = 0
  1361                           ;wait_pulse@value stored from wreg
  1362  001DC6  6E07               	movwf	wait_pulse@value,c
  1363                           
  1364                           ;extended_spi.c: 125: (*timer_start)(64335);
  1365  001DC8  0EFB               	movlw	251
  1366  001DCA  6E02               	movwf	set_timer3@value+1,c
  1367  001DCC  0E4F               	movlw	79
  1368  001DCE  6E01               	movwf	set_timer3@value,c
  1369  001DD0  D801               	call	u728
  1370  001DD2  D02D               	goto	l1236
  1371  001DD4                     u728:
  1372  001DD4  0005               	push	
  1373  001DD6  6EFA               	movwf	pclath,c
  1374  001DD8  5003               	movf	wait_pulse@timer_start,w,c
  1375  001DDA  6EFD               	movwf	tosl,c
  1376  001DDC  5004               	movf	wait_pulse@timer_start+1,w,c
  1377  001DDE  6EFE               	movwf	tosh,c
  1378  001DE0  50F8               	movf	tblptru,w,c
  1379  001DE2  6EFF               	movwf	tosu,c
  1380  001DE4  50FA               	movf	pclath,w,c
  1381  001DE6  0012               	return		;indir
  1382  001DE8                     l1230:
  1383                           
  1384                           ;extended_spi.c: 127: if ((*timer)()) {
  1385  001DE8  D801               	call	u738
  1386  001DEA  D00A               	goto	u739
  1387  001DEC                     u738:
  1388  001DEC  0005               	push	
  1389  001DEE  6EFA               	movwf	pclath,c
  1390  001DF0  5005               	movf	wait_pulse@timer,w,c
  1391  001DF2  6EFD               	movwf	tosl,c
  1392  001DF4  5006               	movf	wait_pulse@timer+1,w,c
  1393  001DF6  6EFE               	movwf	tosh,c
  1394  001DF8  50F8               	movf	tblptru,w,c
  1395  001DFA  6EFF               	movwf	tosu,c
  1396  001DFC  50FA               	movf	pclath,w,c
  1397  001DFE  0012               	return		;indir
  1398  001E00                     u739:
  1399  001E00  0900               	iorlw	0
  1400  001E02  B4D8               	btfsc	status,2,c
  1401  001E04  D014               	goto	l1236
  1402                           
  1403                           ;extended_spi.c: 128: spi_send_get_byte(value);
  1404  001E06  5007               	movf	wait_pulse@value,w,c
  1405  001E08  ECAB  F00D         	call	_spi_send_get_byte
  1406                           
  1407                           ;extended_spi.c: 129: (*timer_start)(64335);
  1408  001E0C  0EFB               	movlw	251
  1409  001E0E  6E02               	movwf	set_timer3@value+1,c
  1410  001E10  0E4F               	movlw	79
  1411  001E12  6E01               	movwf	set_timer3@value,c
  1412  001E14  D801               	call	u758
  1413  001E16  D00B               	goto	l1236
  1414  001E18                     u758:
  1415  001E18  0005               	push	
  1416  001E1A  6EFA               	movwf	pclath,c
  1417  001E1C  5003               	movf	wait_pulse@timer_start,w,c
  1418  001E1E  6EFD               	movwf	tosl,c
  1419  001E20  5004               	movf	wait_pulse@timer_start+1,w,c
  1420  001E22  6EFE               	movwf	tosh,c
  1421  001E24  50F8               	movf	tblptru,w,c
  1422  001E26  6EFF               	movwf	tosu,c
  1423  001E28  50FA               	movf	pclath,w,c
  1424  001E2A  0012               	return		;indir
  1425  001E2C  D000               	goto	l1236
  1426  001E2E                     l1236:
  1427  001E2E  A2F0               	btfss	intcon3,1,c	;volatile
  1428  001E30  D7DB               	goto	l1230
  1429                           
  1430                           ;extended_spi.c: 130: }
  1431                           ;extended_spi.c: 131: }
  1432                           ;extended_spi.c: 132: INT2IF = 0;
  1433  001E32  92F0               	bcf	intcon3,1,c	;volatile
  1434  001E34  0012               	return		;funcret
  1435  001E36                     __end_of_wait_pulse:
  1436                           	opt stack 0
  1437                           tosu	equ	0xFFF
  1438                           tosh	equ	0xFFE
  1439                           tosl	equ	0xFFD
  1440                           pclath	equ	0xFFA
  1441                           tblptru	equ	0xFF8
  1442                           prodh	equ	0xFF4
  1443                           prodl	equ	0xFF3
  1444                           intcon2	equ	0xFF1
  1445                           intcon3	equ	0xFF0
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           plusw1	equ	0xFE3
  1449                           indf2	equ	0xFDF
  1450                           plusw2	equ	0xFDB
  1451                           fsr2h	equ	0xFDA
  1452                           fsr2l	equ	0xFD9
  1453                           status	equ	0xFD8
  1454                           
  1455 ;; *************** function _timer3_up *****************
  1456 ;; Defined at:
  1457 ;;		line 22 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;		None
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;		None
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  1    wreg      unsigned char 
  1464 ;; Registers used:
  1465 ;;		wreg
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMRAM   BANK0
  1471 ;;      Params:         0       0
  1472 ;;      Locals:         0       0
  1473 ;;      Temps:          0       0
  1474 ;;      Totals:         0       0
  1475 ;;Total ram usage:        0 bytes
  1476 ;; Hardware stack levels used:    1
  1477 ;; This function calls:
  1478 ;;		Nothing
  1479 ;; This function is called by:
  1480 ;;		_main
  1481 ;;		_wait_pulse
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text11
  1486  001B36                     __ptext11:
  1487                           	opt stack 0
  1488  001B36                     _timer3_up:
  1489                           	opt stack 28
  1490                           
  1491                           ;timers_pic.c: 24: return (PIR2bits.TMR3IF) ? 1 : 0;
  1492                           
  1493                           ;incstack = 0
  1494  001B36  A2A1               	btfss	4001,1,c	;volatile
  1495  001B38  D002               	goto	u30
  1496  001B3A  0E01               	movlw	1
  1497  001B3C  0012               	return	
  1498  001B3E                     u30:
  1499  001B3E  0E00               	movlw	0
  1500  001B40  0012               	return	
  1501  001B42  0012               	return		;funcret
  1502  001B44                     __end_of_timer3_up:
  1503                           	opt stack 0
  1504                           tosu	equ	0xFFF
  1505                           tosh	equ	0xFFE
  1506                           tosl	equ	0xFFD
  1507                           pclath	equ	0xFFA
  1508                           tblptru	equ	0xFF8
  1509                           prodh	equ	0xFF4
  1510                           prodl	equ	0xFF3
  1511                           intcon2	equ	0xFF1
  1512                           intcon3	equ	0xFF0
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           plusw1	equ	0xFE3
  1516                           indf2	equ	0xFDF
  1517                           plusw2	equ	0xFDB
  1518                           fsr2h	equ	0xFDA
  1519                           fsr2l	equ	0xFD9
  1520                           status	equ	0xFD8
  1521                           
  1522 ;; *************** function _spi_send_get_byte *****************
  1523 ;; Defined at:
  1524 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;  byte            1    wreg     unsigned char 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  byte            1    0[COMRAM] unsigned char 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      unsigned char 
  1531 ;; Registers used:
  1532 ;;		wreg, status,2
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0
  1538 ;;      Params:         0       0
  1539 ;;      Locals:         1       0
  1540 ;;      Temps:          0       0
  1541 ;;      Totals:         1       0
  1542 ;;Total ram usage:        1 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; This function calls:
  1545 ;;		Nothing
  1546 ;; This function is called by:
  1547 ;;		_wait_pulse
  1548 ;;		_espi_master_send
  1549 ;;		_espi_master_receive
  1550 ;;		_espi_slave_receive
  1551 ;;		_espi_slave_send
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text12
  1556  001B56                     __ptext12:
  1557                           	opt stack 0
  1558  001B56                     _spi_send_get_byte:
  1559                           	opt stack 28
  1560                           
  1561                           ;incstack = 0
  1562                           ;spi_send_get_byte@byte stored from wreg
  1563  001B56  6E01               	movwf	spi_send_get_byte@byte,c
  1564                           
  1565                           ;spi_pic.c: 35: SSPBUF = byte;
  1566  001B58  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  1567                           
  1568                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  1569  001B5C  D000               	goto	l53
  1570  001B5E                     l53:
  1571  001B5E  A0C7               	btfss	4039,0,c	;volatile
  1572  001B60  D7FE               	goto	l53
  1573                           
  1574                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  1575  001B62  BEC6               	btfsc	4038,7,c	;volatile
  1576                           
  1577                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  1578  001B64  9EC6               	bcf	4038,7,c	;volatile
  1579                           
  1580                           ;spi_pic.c: 39: return SSPBUF;
  1581  001B66  50C9               	movf	4041,w,c	;volatile
  1582  001B68  0012               	return		;funcret
  1583  001B6A                     __end_of_spi_send_get_byte:
  1584                           	opt stack 0
  1585                           tosu	equ	0xFFF
  1586                           tosh	equ	0xFFE
  1587                           tosl	equ	0xFFD
  1588                           pclath	equ	0xFFA
  1589                           tblptru	equ	0xFF8
  1590                           prodh	equ	0xFF4
  1591                           prodl	equ	0xFF3
  1592                           intcon2	equ	0xFF1
  1593                           intcon3	equ	0xFF0
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           plusw1	equ	0xFE3
  1597                           indf2	equ	0xFDF
  1598                           plusw2	equ	0xFDB
  1599                           fsr2h	equ	0xFDA
  1600                           fsr2l	equ	0xFD9
  1601                           status	equ	0xFD8
  1602                           
  1603 ;; *************** function _set_timer3 *****************
  1604 ;; Defined at:
  1605 ;;		line 8 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;  value           2    0[COMRAM] int 
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;		None
  1610 ;; Return value:  Size  Location     Type
  1611 ;;		None               void
  1612 ;; Registers used:
  1613 ;;		None
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0
  1619 ;;      Params:         2       0
  1620 ;;      Locals:         0       0
  1621 ;;      Temps:          0       0
  1622 ;;      Totals:         2       0
  1623 ;;Total ram usage:        2 bytes
  1624 ;; Hardware stack levels used:    1
  1625 ;; This function calls:
  1626 ;;		Nothing
  1627 ;; This function is called by:
  1628 ;;		_main
  1629 ;;		_wait_pulse
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text13
  1634  001B2A                     __ptext13:
  1635                           	opt stack 0
  1636  001B2A                     _set_timer3:
  1637                           	opt stack 28
  1638                           
  1639                           ;timers_pic.c: 10: PIR2bits.TMR3IF = 0;
  1640                           
  1641                           ;incstack = 0
  1642  001B2A  92A1               	bcf	4001,1,c	;volatile
  1643                           
  1644                           ;timers_pic.c: 11: TMR3 = value;
  1645  001B2C  C001  FFB2         	movff	set_timer3@value,4018	;volatile
  1646  001B30  C002  FFB3         	movff	set_timer3@value+1,4019	;volatile
  1647  001B34  0012               	return		;funcret
  1648  001B36                     __end_of_set_timer3:
  1649                           	opt stack 0
  1650                           tosu	equ	0xFFF
  1651                           tosh	equ	0xFFE
  1652                           tosl	equ	0xFFD
  1653                           pclath	equ	0xFFA
  1654                           tblptru	equ	0xFF8
  1655                           prodh	equ	0xFF4
  1656                           prodl	equ	0xFF3
  1657                           intcon2	equ	0xFF1
  1658                           intcon3	equ	0xFF0
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           plusw1	equ	0xFE3
  1662                           indf2	equ	0xFDF
  1663                           plusw2	equ	0xFDB
  1664                           fsr2h	equ	0xFDA
  1665                           fsr2l	equ	0xFD9
  1666                           status	equ	0xFD8
  1667                           
  1668 ;; *************** function _send_delay *****************
  1669 ;; Defined at:
  1670 ;;		line 19 in file "../TorqueGriper.X/extended_spi.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;		None
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;		None
  1675 ;; Return value:  Size  Location     Type
  1676 ;;		None               void
  1677 ;; Registers used:
  1678 ;;		wreg
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0
  1684 ;;      Params:         0       0
  1685 ;;      Locals:         0       0
  1686 ;;      Temps:          0       0
  1687 ;;      Totals:         0       0
  1688 ;;Total ram usage:        0 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_espi_master_send
  1694 ;;		_espi_master_receive
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text14
  1699  001B20                     __ptext14:
  1700                           	opt stack 0
  1701  001B20                     _send_delay:
  1702                           	opt stack 29
  1703                           
  1704                           ;extended_spi.c: 21: _delay((unsigned long)((5)*(16000000/4000000.0)));
  1705                           
  1706                           ;incstack = 0
  1707  001B20  0E06               	movlw	6
  1708  001B22                     u1177:
  1709  001B22  2EE8               	decfsz	wreg,f,c
  1710  001B24  D7FE               	goto	u1177
  1711  001B26  D000               	nop2		;nop
  1712  001B28  0012               	return		;funcret
  1713  001B2A                     __end_of_send_delay:
  1714                           	opt stack 0
  1715                           tosu	equ	0xFFF
  1716                           tosh	equ	0xFFE
  1717                           tosl	equ	0xFFD
  1718                           pclath	equ	0xFFA
  1719                           tblptru	equ	0xFF8
  1720                           prodh	equ	0xFF4
  1721                           prodl	equ	0xFF3
  1722                           intcon2	equ	0xFF1
  1723                           intcon3	equ	0xFF0
  1724                           postinc0	equ	0xFEE
  1725                           wreg	equ	0xFE8
  1726                           plusw1	equ	0xFE3
  1727                           indf2	equ	0xFDF
  1728                           plusw2	equ	0xFDB
  1729                           fsr2h	equ	0xFDA
  1730                           fsr2l	equ	0xFD9
  1731                           status	equ	0xFD8
  1732                           
  1733 ;; *************** function _decode_data *****************
  1734 ;; Defined at:
  1735 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;  data            2    0[COMRAM] PTR unsigned char 
  1738 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  1739 ;;  byte_1          1    2[COMRAM] unsigned char 
  1740 ;;  byte_2          1    3[COMRAM] unsigned char 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;		None
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      char 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0
  1752 ;;      Params:         4       0
  1753 ;;      Locals:         0       0
  1754 ;;      Temps:          1       0
  1755 ;;      Totals:         5       0
  1756 ;;Total ram usage:        5 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_espi_master_receive
  1762 ;;		_espi_slave_receive
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text15
  1767  001BEA                     __ptext15:
  1768                           	opt stack 0
  1769  001BEA                     _decode_data:
  1770                           	opt stack 29
  1771                           
  1772                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  1773                           
  1774                           ;incstack = 0
  1775  001BEA  5003               	movf	decode_data@byte_1,w,c
  1776  001BEC  0BF0               	andlw	240
  1777  001BEE  0AA0               	xorlw	160
  1778  001BF0  A4D8               	btfss	status,2,c
  1779  001BF2  0012               	return	
  1780  001BF4  D002               	goto	l1172
  1781                           
  1782                           ;encoding.c: 15: return -1;
  1783                           ;	Return value of _decode_data is never used
  1784  001BF6  0012               	return	
  1785  001BF8  D008               	goto	l1176
  1786  001BFA                     l1172:
  1787                           
  1788                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  1789  001BFA  5004               	movf	decode_data@byte_2,w,c
  1790  001BFC  0BF0               	andlw	240
  1791  001BFE  0AA0               	xorlw	160
  1792  001C00  A4D8               	btfss	status,2,c
  1793  001C02  0012               	return	
  1794  001C04  D002               	goto	l1176
  1795                           
  1796                           ;encoding.c: 17: return -2;
  1797                           ;	Return value of _decode_data is never used
  1798  001C06  0012               	return	
  1799  001C08  D000               	goto	l1176
  1800  001C0A                     l1176:
  1801                           
  1802                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  1803  001C0A  C004  F005         	movff	decode_data@byte_2,??_decode_data
  1804  001C0E  0E0F               	movlw	15
  1805  001C10  1605               	andwf	??_decode_data,f,c
  1806  001C12  3803               	swapf	decode_data@byte_1,w,c
  1807  001C14  0BF0               	andlw	240
  1808  001C16  1005               	iorwf	??_decode_data,w,c
  1809  001C18  C001  FFD9         	movff	decode_data@data,fsr2l
  1810  001C1C  C002  FFDA         	movff	decode_data@data+1,fsr2h
  1811  001C20  6EDF               	movwf	indf2,c
  1812  001C22  0012               	return	
  1813                           
  1814                           ;encoding.c: 21: return 0;
  1815                           ;	Return value of _decode_data is never used
  1816  001C24  0012               	return		;funcret
  1817  001C26                     __end_of_decode_data:
  1818                           	opt stack 0
  1819                           tosu	equ	0xFFF
  1820                           tosh	equ	0xFFE
  1821                           tosl	equ	0xFFD
  1822                           pclath	equ	0xFFA
  1823                           tblptru	equ	0xFF8
  1824                           prodh	equ	0xFF4
  1825                           prodl	equ	0xFF3
  1826                           intcon2	equ	0xFF1
  1827                           intcon3	equ	0xFF0
  1828                           postinc0	equ	0xFEE
  1829                           wreg	equ	0xFE8
  1830                           plusw1	equ	0xFE3
  1831                           indf2	equ	0xFDF
  1832                           plusw2	equ	0xFDB
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function _buffer_space *****************
  1838 ;; Defined at:
  1839 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1842 ;;		 -> main@buffer(34), 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;		None
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  1    wreg      unsigned char 
  1847 ;; Registers used:
  1848 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0
  1854 ;;      Params:         2       0
  1855 ;;      Locals:         0       0
  1856 ;;      Temps:          0       0
  1857 ;;      Totals:         2       0
  1858 ;;Total ram usage:        2 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; This function calls:
  1861 ;;		Nothing
  1862 ;; This function is called by:
  1863 ;;		_espi_master_receive
  1864 ;;		_espi_slave_receive
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	text16
  1869  001B6A                     __ptext16:
  1870                           	opt stack 0
  1871  001B6A                     _buffer_space:
  1872                           	opt stack 29
  1873                           
  1874                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  1875                           
  1876                           ;incstack = 0
  1877  001B6A  EE20 F001          	lfsr	2,1
  1878  001B6E  5001               	movf	buffer_space@buffer,w,c
  1879  001B70  26D9               	addwf	fsr2l,f,c
  1880  001B72  5002               	movf	buffer_space@buffer+1,w,c
  1881  001B74  22DA               	addwfc	fsr2h,f,c
  1882  001B76  50DF               	movf	indf2,w,c
  1883  001B78  0800               	sublw	0
  1884  001B7A  0F20               	addlw	32
  1885  001B7C  0012               	return	
  1886  001B7E  0012               	return		;funcret
  1887  001B80                     __end_of_buffer_space:
  1888                           	opt stack 0
  1889                           tosu	equ	0xFFF
  1890                           tosh	equ	0xFFE
  1891                           tosl	equ	0xFFD
  1892                           pclath	equ	0xFFA
  1893                           tblptru	equ	0xFF8
  1894                           prodh	equ	0xFF4
  1895                           prodl	equ	0xFF3
  1896                           intcon2	equ	0xFF1
  1897                           intcon3	equ	0xFF0
  1898                           postinc0	equ	0xFEE
  1899                           wreg	equ	0xFE8
  1900                           plusw1	equ	0xFE3
  1901                           indf2	equ	0xFDF
  1902                           plusw2	equ	0xFDB
  1903                           fsr2h	equ	0xFDA
  1904                           fsr2l	equ	0xFD9
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _buffer_push *****************
  1908 ;; Defined at:
  1909 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  1912 ;;		 -> main@buffer(34), 
  1913 ;;  byte            1    2[COMRAM] unsigned char 
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;  current_posi    1    4[COMRAM] unsigned char 
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  1    wreg      unsigned char 
  1918 ;; Registers used:
  1919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0
  1925 ;;      Params:         3       0
  1926 ;;      Locals:         1       0
  1927 ;;      Temps:          1       0
  1928 ;;      Totals:         5       0
  1929 ;;Total ram usage:        5 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_espi_master_receive
  1935 ;;		_espi_slave_receive
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text17
  1940  001D60                     __ptext17:
  1941                           	opt stack 0
  1942  001D60                     _buffer_push:
  1943                           	opt stack 29
  1944                           
  1945                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  1946                           
  1947                           ;incstack = 0
  1948  001D60  EE20 F001          	lfsr	2,1
  1949  001D64  5001               	movf	buffer_push@buffer,w,c
  1950  001D66  26D9               	addwf	fsr2l,f,c
  1951  001D68  5002               	movf	buffer_push@buffer+1,w,c
  1952  001D6A  22DA               	addwfc	fsr2h,f,c
  1953  001D6C  0E20               	movlw	32
  1954  001D6E  18DE               	xorwf	postinc2,w,c
  1955  001D70  B4D8               	btfsc	status,2,c
  1956  001D72  0012               	return	
  1957  001D74  D001               	goto	l1184
  1958                           
  1959                           ;circular_buffer.c: 27: return 0;
  1960                           ;	Return value of _buffer_push is never used
  1961  001D76  0012               	return	
  1962  001D78                     l1184:
  1963                           
  1964                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  1965                           ;circular_buffer.c: 30: & (0x20 - 1);
  1966  001D78  EE20 F001          	lfsr	2,1
  1967  001D7C  5001               	movf	buffer_push@buffer,w,c
  1968  001D7E  26D9               	addwf	fsr2l,f,c
  1969  001D80  5002               	movf	buffer_push@buffer+1,w,c
  1970  001D82  22DA               	addwfc	fsr2h,f,c
  1971  001D84  50DF               	movf	indf2,w,c
  1972  001D86  6E04               	movwf	??_buffer_push& (0+255),c
  1973  001D88  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  1974  001D8C  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  1975  001D90  50DF               	movf	indf2,w,c
  1976  001D92  2404               	addwf	??_buffer_push,w,c
  1977  001D94  0B1F               	andlw	31
  1978  001D96  6E05               	movwf	buffer_push@current_position,c
  1979                           
  1980                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  1981  001D98  5005               	movf	buffer_push@current_position,w,c
  1982  001D9A  0D01               	mullw	1
  1983  001D9C  0E02               	movlw	2
  1984  001D9E  26F3               	addwf	prodl,f,c
  1985  001DA0  0E00               	movlw	0
  1986  001DA2  22F4               	addwfc	prodh,f,c
  1987  001DA4  50F3               	movf	prodl,w,c
  1988  001DA6  2401               	addwf	buffer_push@buffer,w,c
  1989  001DA8  6ED9               	movwf	fsr2l,c
  1990  001DAA  50F4               	movf	prodh,w,c
  1991  001DAC  2002               	addwfc	buffer_push@buffer+1,w,c
  1992  001DAE  6EDA               	movwf	fsr2h,c
  1993  001DB0  C003  FFDF         	movff	buffer_push@byte,indf2
  1994                           
  1995                           ;circular_buffer.c: 32: buffer->count++;
  1996  001DB4  EE20 F001          	lfsr	2,1
  1997  001DB8  5001               	movf	buffer_push@buffer,w,c
  1998  001DBA  26D9               	addwf	fsr2l,f,c
  1999  001DBC  5002               	movf	buffer_push@buffer+1,w,c
  2000  001DBE  22DA               	addwfc	fsr2h,f,c
  2001  001DC0  2ADF               	incf	indf2,f,c
  2002  001DC2  0012               	return	
  2003                           
  2004                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  2005                           ;	Return value of _buffer_push is never used
  2006  001DC4  0012               	return		;funcret
  2007  001DC6                     __end_of_buffer_push:
  2008                           	opt stack 0
  2009                           tosu	equ	0xFFF
  2010                           tosh	equ	0xFFE
  2011                           tosl	equ	0xFFD
  2012                           pclath	equ	0xFFA
  2013                           tblptru	equ	0xFF8
  2014                           prodh	equ	0xFF4
  2015                           prodl	equ	0xFF3
  2016                           intcon2	equ	0xFF1
  2017                           intcon3	equ	0xFF0
  2018                           postinc0	equ	0xFEE
  2019                           wreg	equ	0xFE8
  2020                           plusw1	equ	0xFE3
  2021                           indf2	equ	0xFDF
  2022                           postinc2	equ	0xFDE
  2023                           plusw2	equ	0xFDB
  2024                           fsr2h	equ	0xFDA
  2025                           fsr2l	equ	0xFD9
  2026                           status	equ	0xFD8
  2027                           
  2028 ;; *************** function _buffer_empty *****************
  2029 ;; Defined at:
  2030 ;;		line 14 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2031 ;; Parameters:    Size  Location     Type
  2032 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2033 ;;		 -> main@buffer(34), 
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;		None
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      unsigned char 
  2038 ;; Registers used:
  2039 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0
  2045 ;;      Params:         2       0
  2046 ;;      Locals:         0       0
  2047 ;;      Temps:          0       0
  2048 ;;      Totals:         2       0
  2049 ;;Total ram usage:        2 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; This function calls:
  2052 ;;		Nothing
  2053 ;; This function is called by:
  2054 ;;		_espi_master_receive
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text18
  2059  001B96                     __ptext18:
  2060                           	opt stack 0
  2061  001B96                     _buffer_empty:
  2062                           	opt stack 29
  2063                           
  2064                           ;circular_buffer.c: 16: return (buffer->count == 0) ? 1 : 0;
  2065                           
  2066                           ;incstack = 0
  2067  001B96  EE20 F001          	lfsr	2,1
  2068  001B9A  5001               	movf	buffer_empty@buffer,w,c
  2069  001B9C  26D9               	addwf	fsr2l,f,c
  2070  001B9E  5002               	movf	buffer_empty@buffer+1,w,c
  2071  001BA0  22DA               	addwfc	fsr2h,f,c
  2072  001BA2  50DF               	movf	indf2,w,c
  2073  001BA4  A4D8               	btfss	status,2,c
  2074  001BA6  D002               	goto	u770
  2075  001BA8  0E01               	movlw	1
  2076  001BAA  0012               	return	
  2077  001BAC                     u770:
  2078  001BAC  0E00               	movlw	0
  2079  001BAE  0012               	return	
  2080  001BB0  0012               	return		;funcret
  2081  001BB2                     __end_of_buffer_empty:
  2082                           	opt stack 0
  2083  0000                     tosu	equ	0xFFF
  2084                           tosh	equ	0xFFE
  2085                           tosl	equ	0xFFD
  2086                           pclath	equ	0xFFA
  2087                           tblptru	equ	0xFF8
  2088                           prodh	equ	0xFF4
  2089                           prodl	equ	0xFF3
  2090                           intcon2	equ	0xFF1
  2091                           intcon3	equ	0xFF0
  2092                           postinc0	equ	0xFEE
  2093                           wreg	equ	0xFE8
  2094                           plusw1	equ	0xFE3
  2095                           indf2	equ	0xFDF
  2096                           postinc2	equ	0xFDE
  2097                           plusw2	equ	0xFDB
  2098                           fsr2h	equ	0xFDA
  2099                           fsr2l	equ	0xFD9
  2100                           status	equ	0xFD8
  2101                           tosu	equ	0xFFF
  2102                           tosh	equ	0xFFE
  2103                           tosl	equ	0xFFD
  2104                           pclath	equ	0xFFA
  2105                           tblptru	equ	0xFF8
  2106                           prodh	equ	0xFF4
  2107                           prodl	equ	0xFF3
  2108                           intcon2	equ	0xFF1
  2109                           intcon3	equ	0xFF0
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           plusw1	equ	0xFE3
  2113                           indf2	equ	0xFDF
  2114                           postinc2	equ	0xFDE
  2115                           plusw2	equ	0xFDB
  2116                           fsr2h	equ	0xFDA
  2117                           fsr2l	equ	0xFD9
  2118                           status	equ	0xFD8
  2119                           
  2120                           	psect	text19
  2121  000000                     __ptext19:
  2122                           	opt stack 0
  2123                           tosu	equ	0xFFF
  2124                           tosh	equ	0xFFE
  2125                           tosl	equ	0xFFD
  2126                           pclath	equ	0xFFA
  2127                           tblptru	equ	0xFF8
  2128                           prodh	equ	0xFF4
  2129                           prodl	equ	0xFF3
  2130                           intcon2	equ	0xFF1
  2131                           intcon3	equ	0xFF0
  2132                           postinc0	equ	0xFEE
  2133                           wreg	equ	0xFE8
  2134                           plusw1	equ	0xFE3
  2135                           indf2	equ	0xFDF
  2136                           postinc2	equ	0xFDE
  2137                           plusw2	equ	0xFDB
  2138                           fsr2h	equ	0xFDA
  2139                           fsr2l	equ	0xFD9
  2140                           status	equ	0xFD8
  2141                           
  2142                           	psect	rparam
  2143  0000                     tosu	equ	0xFFF
  2144                           tosh	equ	0xFFE
  2145                           tosl	equ	0xFFD
  2146                           pclath	equ	0xFFA
  2147                           tblptru	equ	0xFF8
  2148                           prodh	equ	0xFF4
  2149                           prodl	equ	0xFF3
  2150                           intcon2	equ	0xFF1
  2151                           intcon3	equ	0xFF0
  2152                           postinc0	equ	0xFEE
  2153                           wreg	equ	0xFE8
  2154                           plusw1	equ	0xFE3
  2155                           indf2	equ	0xFDF
  2156                           postinc2	equ	0xFDE
  2157                           plusw2	equ	0xFDB
  2158                           fsr2h	equ	0xFDA
  2159                           fsr2l	equ	0xFD9
  2160                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     53      88
    BANK0           160      0       0

Pointer List with Targets:

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_empty@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    espi_master_receive@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    espi_master_send@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_send@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    wait_pulse@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    wait_pulse@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 


Critical Paths under _main in COMRAM

    _main->_espi_master_send
    _espi_setup->_setup_spi
    _espi_master_send->_wait_pulse
    _espi_master_receive->_wait_pulse
    _wait_pulse->_set_timer3

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0    4508
                                             19 COMRAM    34    34      0
                _espi_master_receive
                   _espi_master_send
                         _espi_setup
                       _setup_timer3
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _espi_master_send                                    12     6      6    2185
                                              7 COMRAM    12     6      6
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     516
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     267
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     281
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_master_receive                                  9     3      6    2067
                                              7 COMRAM     9     3      6
                       _buffer_empty
                        _buffer_push
                       _buffer_space
                        _decode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _wait_pulse                                           5     1      4     467
                                              2 COMRAM     5     1      4
                         _set_timer3 *
                  _spi_send_get_byte
                          _timer3_up *
 ---------------------------------------------------------------------------------
 (3) _timer3_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _spi_send_get_byte                                    1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _set_timer3                                           2     0      2     108
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _send_delay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     417
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _buffer_empty                                         2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _espi_master_receive
     _buffer_empty
     _buffer_push
     _buffer_space
     _decode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
       _spi_send_get_byte *
       _timer3_up *
   _espi_master_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
       _spi_send_get_byte *
       _timer3_up *
   _espi_setup
     _setup_spi
   _setup_timer3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     35      58       1       92.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      58       5        0.0%
DATA                 0      0      58       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Aug 03 17:07:45 2015

                   _SSPSTATbits 000FC7                              l53 1B5E                              l45 1C5E  
                            l47 1C4A                              l48 1C5A                              u30 1B3E  
                           l120 1BDC                             l122 1BD4                             u728 1DD4  
                           u770 1BAC                             u738 1DEC                             u739 1E00  
                           u758 1E18                             u891 1D18   espi_master_receive@received_1 000E  
 espi_master_receive@received_2 000F                             tosl 000FFD                             wreg 000FE8  
                  __CFG_LVP$OFF 000000                            l1204 1CC2                            l1220 1E4C  
                          l1230 1DE8                            l1314 1FE4                            l1306 1FCC  
                          l1172 1BFA                            l1236 1E2E                            l1316 1FF2  
                          l1184 1D78                            l1176 1C0A                            l1328 1D22  
                          l1274 1F06                            l1266 1EEE                            l1258 1ED6  
                          l1290 1F7C                            l1278 1F2C                            l1296 1F9E  
                          u1177 1B22                            _TMR3 000FB2                            _main 1CFC  
                          fsr2h 000FDA                            indf2 000FDF                            fsr2l 000FD9  
                          prodh 000FF4                            prodl 000FF3                            start 0000  
         spi_send_get_byte@byte 0001                  ??_buffer_count 0003                  ??_buffer_empty 0003  
                 __CFG_FOSC$IRC 000000                  ??_buffer_space 0003                    ___param_bank 000010  
          setup_spi@SSPCON1_reg 0001                           ?_main 0001                           _T3CON 000FB1  
          __size_of_decode_data 003C             _espi_master_receive 1EA6                           pclath 000FFA  
                         plusw1 000FE3                           plusw2 000FDB                           status 000FD8  
          setup_spi@SSPSTAT_reg 0002        __end_of_espi_master_send 2000                buffer_pop@buffer 0001  
               __initialization 1B80                    __end_of_main 1D60            ?_espi_master_receive 0008  
                        ??_main 0014               _spi_send_get_byte 1B56                   __activetblptr 000002  
            ?_spi_send_get_byte 0001               buffer_peek@buffer 0001                 encode_data@data 0006  
           ??_spi_send_get_byte 0001                          _INT2IF 007F81                          _INTCON 000FF2  
                        _SSPBUF 000FC9                 decode_data@data 0001            __size_of_encode_data 0046  
         ??_espi_master_receive 000E            __size_of_buffer_peek 0052            __size_of_buffer_push 0066  
     __end_of_spi_send_get_byte 1B6A                          clear_0 1B86    espi_master_send@byte_to_send 0010  
          __end_of_buffer_count 1B56            __end_of_buffer_empty 1BB2                 set_timer3@value 0001  
                        tblptru 000FF8           setup_timer3@T3CON_reg 0001            __end_of_buffer_space 1B80  
                    __accesstop 0060         __end_of__initialization 1B8C                   ___rparam_used 000001  
                __pcstackCOMRAM 0001              buffer_count@buffer 0001                  buffer_pop@byte 0005  
            buffer_empty@buffer 0001      __size_of_spi_send_get_byte 0014               buffer_push@buffer 0001  
            __size_of_timer3_up 000E              __size_of_setup_spi 003E                      _buffer_pop 1E36  
                       _SSPCON1 000FC6                         _SSPSTAT 000FC7       espi_master_receive@buffer 0008  
             ?_espi_master_send 0008                         __Hparam 0000                         __Lparam 0000  
            ??_espi_master_send 000E                      _espi_setup 1BB2                      _dummy_byte 0058  
                       __pcinit 1B80                       _ANSELbits 000F7E                         __ramtop 0100  
         __size_of_buffer_count 0012           __size_of_buffer_empty 001C                         __ptext0 1CFC  
                       __ptext1 1B18                         __ptext2 1BB2                         __ptext3 1C26  
                       __ptext4 1F4C                         __ptext5 1C64                         __ptext6 1E36  
                       __ptext7 1CAA                         __ptext8 1B44                         __ptext9 1EA6  
         __size_of_buffer_space 0016                   ??_decode_data 0005            end_of_initialization 1B8C  
                    _send_delay 1B20                   __Lmediumconst 0000               __end_of_timer3_up 1B44  
                  _buffer_count 1B44                    _buffer_empty 1B96               __end_of_setup_spi 1C64  
   espi_master_send@timer_start 000A                    _buffer_space 1B6A                      _set_timer3 1B2A  
                       postinc0 000FEE                         postinc2 000FDE                      _wait_pulse 1DC6  
                     _PORTCbits 000F82                   ?_setup_timer3 0001                       _TRISAbits 000F92  
                     _TRISBbits 000F93                       _TRISCbits 000F94                     ?_buffer_pop 0001  
           __end_of_decode_data 1C26                   ??_encode_data 0005     __end_of_espi_master_receive 1F4C  
                    main@buffer 0014                   ??_buffer_peek 0003                   ??_buffer_push 0004  
                   ?_espi_setup 0001                 buffer_peek@byte 0005                  espi_setup@mode 0003  
                ??_setup_timer3 0001             start_initialization 1B80                     ?_send_delay 0001  
            buffer_space@buffer 0001                 buffer_push@byte 0003             __end_of_encode_data 1CAA  
                   ?_set_timer3 0001             __size_of_buffer_pop 0070                     ?_wait_pulse 0003  
           __end_of_buffer_peek 1CFC             __end_of_buffer_push 1DC6                     _decode_data 1BEA  
                   __pbssCOMRAM 0036             __size_of_espi_setup 0038      espi_master_send@received_1 000E  
    espi_master_send@received_2 000F           wait_pulse@timer_start 0003               encode_data@byte_1 0001  
             encode_data@byte_2 0003             __size_of_send_delay 000A       __size_of_espi_master_send 00B4  
           __size_of_set_timer3 000C             __size_of_wait_pulse 0070                        _LATAbits 000F89  
                      _LATCbits 000F8B                     _encode_data 1C64                        _PIE2bits 000FA0  
          __end_of_setup_timer3 1B20                        _PIR2bits 000FA1                     _buffer_peek 1CAA  
                   _buffer_push 1D60                       _timer3_up 1B36                       main@F3971 0036  
                     _setup_spi 1C26  espi_master_receive@timer_start 000A                    ??_buffer_pop 0003  
             decode_data@byte_1 0003               decode_data@byte_2 0004                     _INTCON2bits 000FF1  
                   _INTCON3bits 000FF0                        __Hrparam 0000                        __Lrparam 0000  
                    ?_timer3_up 0001                    ??_espi_setup 0003                 wait_pulse@value 0007  
               wait_pulse@timer 0005              __end_of_buffer_pop 1EA6                      ?_setup_spi 0001  
                    _ANSELHbits 000F7F                        __ptext10 1DC6                        __ptext11 1B36  
                      __ptext12 1B56                        __ptext13 1B2A                        __ptext14 1B20  
                      __ptext15 1BEA                        __ptext16 1B6A                        __ptext17 1D60  
                      __ptext18 1B96                        __ptext19 0000              __end_of_espi_setup 1BEA  
                  ??_send_delay 0001                   __size_of_main 0064                    ??_set_timer3 0003  
  __size_of_espi_master_receive 00A6                    ??_wait_pulse 0007                _espi_master_send 1F4C  
            __end_of_send_delay 1B2A                    ?_decode_data 0001        espi_master_receive@value 0010  
      espi_master_receive@timer 000C              __end_of_set_timer3 1B36           __size_of_setup_timer3 0008  
            __end_of_wait_pulse 1E36                      _OSCCONbits 000FD3                     ??_timer3_up 0001  
                   ??_setup_spi 0002                    _setup_timer3 1B18     buffer_push@current_position 0005  
                   _SSPCON1bits 000FC6                    ?_encode_data 0001          espi_master_send@buffer 0008  
        espi_master_send@byte_1 0012          espi_master_send@byte_2 0013                   ?_buffer_count 0001  
                 ?_buffer_empty 0001           espi_master_send@timer 000C                    ?_buffer_peek 0001  
                 ?_buffer_space 0001                    ?_buffer_push 0001  
