

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Aug 06 14:39:12 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	idataCOMRAM
    48  001626                     __pidataCOMRAM:
    49                           	opt stack 0
    50                           
    51                           ;initializer for _output_value
    52  001626  01                 	db	1
    53  001627  03                 	db	3
    54  001628  02                 	db	2
    55  001629  06                 	db	6
    56  00162A  04                 	db	4
    57  00162B  0C                 	db	12
    58  00162C  08                 	db	8
    59  00162D  09                 	db	9
    60                           
    61                           	psect	idataBANK0
    62  001613                     __pidataBANK0:
    63                           	opt stack 0
    64                           
    65                           ;initializer for main@F4009
    66  001613  55                 	db	85
    67  001614  DD                 	db	221
    68  001615  00                 	db	0
    69  0000                     _TMR0	set	4054
    70  0000                     _TMR1	set	4046
    71  0000                     _TMR3	set	4018
    72  0000                     _ANSELHbits	set	3967
    73  0000                     _ANSELbits	set	3966
    74  0000                     _CCP1CONbits	set	4029
    75  0000                     _CCPR1L	set	4030
    76  0000                     _INTCON	set	4082
    77  0000                     _INTCON2bits	set	4081
    78  0000                     _INTCON3bits	set	4080
    79  0000                     _INTCONbits	set	4082
    80  0000                     _LATAbits	set	3977
    81  0000                     _LATC	set	3979
    82  0000                     _LATCbits	set	3979
    83  0000                     _OSCCONbits	set	4051
    84  0000                     _PIE1bits	set	3997
    85  0000                     _PIE2bits	set	4000
    86  0000                     _PIR1bits	set	3998
    87  0000                     _PIR2bits	set	4001
    88  0000                     _PR2	set	4043
    89  0000                     _PSTRCON	set	4025
    90  0000                     _PSTRCONbits	set	4025
    91  0000                     _SSPBUF	set	4041
    92  0000                     _SSPCON1	set	4038
    93  0000                     _SSPCON1bits	set	4038
    94  0000                     _SSPSTAT	set	4039
    95  0000                     _SSPSTATbits	set	4039
    96  0000                     _T0CON	set	4053
    97  0000                     _T1CON	set	4045
    98  0000                     _T2CONbits	set	4042
    99  0000                     _T3CON	set	4017
   100  0000                     _TRISAbits	set	3986
   101  0000                     _TRISBbits	set	3987
   102  0000                     _TRISCbits	set	3988
   103  0000                     _INT2IF	set	32641
   104                           
   105                           ; #config settings
   106  0000                     
   107                           	psect	cinit
   108  001894                     __pcinit:
   109                           	opt stack 0
   110  001894                     start_initialization:
   111                           	opt stack 0
   112  001894                     __initialization:
   113                           	opt stack 0
   114                           
   115                           ; Clear objects allocated to BANK0 (68 bytes)
   116  001894  EE00  F0AF         	lfsr	0,__pbssBANK0
   117  001898  0E44               	movlw	68
   118  00189A                     clear_0:
   119  00189A  6AEE               	clrf	postinc0,c
   120  00189C  06E8               	decf	wreg,f,c
   121  00189E  E1FD               	bnz	clear_0
   122                           
   123                           ; Clear objects allocated to COMRAM (2 bytes)
   124  0018A0  6A1F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   125  0018A2  6A1E               	clrf	__pbssCOMRAM& (0+255),c
   126                           
   127                           ; Initialize objects allocated to BANK0 (3 bytes)
   128                           ; load TBLPTR registers with __pidataBANK0
   129  0018A4  0E13               	movlw	low __pidataBANK0
   130  0018A6  6EF6               	movwf	tblptrl,c
   131  0018A8  0E16               	movlw	high __pidataBANK0
   132  0018AA  6EF7               	movwf	tblptrh,c
   133  0018AC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   134  0018AE  6EF8               	movwf	tblptru,c
   135  0018B0  0009               	tblrd		*+	;fetch initializer
   136  0018B2  CFF5 F0F3          	movff	tablat,__pdataBANK0
   137  0018B6  0009               	tblrd		*+	;fetch initializer
   138  0018B8  CFF5 F0F4          	movff	tablat,__pdataBANK0+1
   139  0018BC  0009               	tblrd		*+	;fetch initializer
   140  0018BE  CFF5 F0F5          	movff	tablat,__pdataBANK0+2
   141                           
   142                           ; Initialize objects allocated to COMRAM (8 bytes)
   143                           ; load TBLPTR registers with __pidataCOMRAM
   144  0018C2  0E26               	movlw	low __pidataCOMRAM
   145  0018C4  6EF6               	movwf	tblptrl,c
   146  0018C6  0E16               	movlw	high __pidataCOMRAM
   147  0018C8  6EF7               	movwf	tblptrh,c
   148  0018CA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   149  0018CC  6EF8               	movwf	tblptru,c
   150  0018CE  EE00  F016         	lfsr	0,__pdataCOMRAM
   151  0018D2  EE10 F008          	lfsr	1,8
   152  0018D6                     copy_data0:
   153  0018D6  0009               	tblrd		*+
   154  0018D8  CFF5 FFEE          	movff	tablat,postinc0
   155  0018DC  50E5               	movf	postdec1,w,c
   156  0018DE  50E1               	movf	fsr1l,w,c
   157  0018E0  E1FA               	bnz	copy_data0
   158  0018E2                     end_of_initialization:
   159                           	opt stack 0
   160  0018E2                     __end_of__initialization:
   161                           	opt stack 0
   162  0018E2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   163  0018E4  6EF8               	movwf	tblptru,c
   164  0018E6  0100               	movlb	0
   165  0018E8  EFCD  F00E         	goto	_main	;jump to C main() function
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           postinc0	equ	0xFEE
   171                           wreg	equ	0xFE8
   172                           postdec1	equ	0xFE5
   173                           fsr1l	equ	0xFE1
   174                           
   175                           	psect	bssCOMRAM
   176  00001E                     __pbssCOMRAM:
   177                           	opt stack 0
   178  00001E                     _current_state:
   179                           	opt stack 0
   180  00001E                     	ds	1
   181  00001F                     _dummy_byte:
   182                           	opt stack 0
   183  00001F                     	ds	1
   184                           tblptru	equ	0xFF8
   185                           tblptrh	equ	0xFF7
   186                           tblptrl	equ	0xFF6
   187                           tablat	equ	0xFF5
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           postdec1	equ	0xFE5
   191                           fsr1l	equ	0xFE1
   192                           
   193                           	psect	dataCOMRAM
   194  000016                     __pdataCOMRAM:
   195                           	opt stack 0
   196  000016                     _output_value:
   197                           	opt stack 0
   198  000016                     	ds	8
   199                           tblptru	equ	0xFF8
   200                           tblptrh	equ	0xFF7
   201                           tblptrl	equ	0xFF6
   202                           tablat	equ	0xFF5
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           postdec1	equ	0xFE5
   206                           fsr1l	equ	0xFE1
   207                           
   208                           	psect	bssBANK0
   209  0000AF                     __pbssBANK0:
   210                           	opt stack 0
   211  0000AF                     main@F4005:
   212                           	opt stack 0
   213  0000AF                     	ds	34
   214  0000D1                     main@F4007:
   215                           	opt stack 0
   216  0000D1                     	ds	34
   217                           tblptru	equ	0xFF8
   218                           tblptrh	equ	0xFF7
   219                           tblptrl	equ	0xFF6
   220                           tablat	equ	0xFF5
   221                           postinc0	equ	0xFEE
   222                           wreg	equ	0xFE8
   223                           postdec1	equ	0xFE5
   224                           fsr1l	equ	0xFE1
   225                           
   226                           	psect	dataBANK0
   227  0000F3                     __pdataBANK0:
   228                           	opt stack 0
   229  0000F3                     main@F4009:
   230                           	opt stack 0
   231  0000F3                     	ds	3
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           postdec1	equ	0xFE5
   239                           fsr1l	equ	0xFE1
   240                           
   241                           	psect	cstackBANK0
   242  000060                     __pcstackBANK0:
   243                           	opt stack 0
   244  000060                     main@name:
   245                           	opt stack 0
   246                           
   247                           ; 3 bytes @ 0x0
   248  000060                     	ds	3
   249  000063                     main@value:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x3
   253  000063                     	ds	2
   254  000065                     main@message_count:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x5
   258  000065                     	ds	1
   259  000066                     main@right:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x6
   263  000066                     	ds	1
   264  000067                     main@continuous:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x7
   268  000067                     	ds	1
   269  000068                     main@byte_1:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x8
   273  000068                     	ds	1
   274  000069                     main@byte_2:
   275                           	opt stack 0
   276                           
   277                           ; 1 bytes @ 0x9
   278  000069                     	ds	1
   279  00006A                     main@count:
   280                           	opt stack 0
   281                           
   282                           ; 1 bytes @ 0xA
   283  00006A                     	ds	1
   284  00006B                     main@send:
   285                           	opt stack 0
   286                           
   287                           ; 34 bytes @ 0xB
   288  00006B                     	ds	34
   289  00008D                     main@receive:
   290                           	opt stack 0
   291                           
   292                           ; 34 bytes @ 0x2D
   293  00008D                     	ds	34
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           postdec1	equ	0xFE5
   301                           fsr1l	equ	0xFE1
   302                           
   303                           	psect	cstackCOMRAM
   304  000001                     __pcstackCOMRAM:
   305                           	opt stack 0
   306  000001                     ??_step_forward:
   307  000001                     ??_step_backward:
   308  000001                     ?_buffer_pop:
   309                           	opt stack 0
   310  000001                     ?_buffer_peek:
   311                           	opt stack 0
   312  000001                     setup_spi@SSPCON1_reg:
   313                           	opt stack 0
   314  000001                     spi_send_get_byte@byte:
   315                           	opt stack 0
   316  000001                     setup_timer0@T0CON_reg:
   317                           	opt stack 0
   318  000001                     setup_timer3@T3CON_reg:
   319                           	opt stack 0
   320  000001                     selectOutput@toggle:
   321                           	opt stack 0
   322  000001                     buffer_count@buffer:
   323                           	opt stack 0
   324  000001                     buffer_space@buffer:
   325                           	opt stack 0
   326  000001                     buffer_full@buffer:
   327                           	opt stack 0
   328  000001                     buffer_push@buffer:
   329                           	opt stack 0
   330  000001                     buffer_pop@buffer:
   331                           	opt stack 0
   332  000001                     buffer_peek@buffer:
   333                           	opt stack 0
   334  000001                     encode_data@byte_1:
   335                           	opt stack 0
   336  000001                     decode_data@data:
   337                           	opt stack 0
   338  000001                     set_timer0@value:
   339                           	opt stack 0
   340  000001                     set_timer3@value:
   341                           	opt stack 0
   342  000001                     setPulseWidth@width:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x0
   346  000001                     	ds	1
   347  000002                     ??_selectOutput:
   348  000002                     setup_spi@SSPSTAT_reg:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x1
   352  000002                     	ds	1
   353  000003                     ??_buffer_pop:
   354  000003                     ??_setPulseWidth:
   355  000003                     ??_buffer_peek:
   356  000003                     espi_setup@mode:
   357                           	opt stack 0
   358  000003                     buffer_push@byte:
   359                           	opt stack 0
   360  000003                     decode_data@byte_1:
   361                           	opt stack 0
   362  000003                     selectOutput@outputs:
   363                           	opt stack 0
   364  000003                     wait_pulse@timer_start:
   365                           	opt stack 0
   366  000003                     encode_data@byte_2:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x2
   370  000003                     	ds	1
   371  000004                     ??_buffer_push:
   372  000004                     decode_data@byte_2:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x3
   376  000004                     	ds	1
   377  000005                     ??_decode_data:
   378  000005                     ??_encode_data:
   379  000005                     buffer_push@current_position:
   380                           	opt stack 0
   381  000005                     pmwSingleModeSetUp@valuePR2:
   382                           	opt stack 0
   383  000005                     wait_pulse@timer:
   384                           	opt stack 0
   385  000005                     buffer_pop@byte:
   386                           	opt stack 0
   387  000005                     buffer_peek@byte:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x4
   391  000005                     	ds	1
   392  000006                     encode_data@data:
   393                           	opt stack 0
   394  000006                     pmwSingleModeSetUp@scaler:
   395                           	opt stack 0
   396  000006                     load_buffer@buffer:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x5
   400  000006                     	ds	1
   401  000007                     wait_pulse@value:
   402                           	opt stack 0
   403  000007                     pmwSingleModeSetUp@outputs:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x6
   407  000007                     	ds	1
   408  000008                     pmwSingleModeSetUp@polarity:
   409                           	opt stack 0
   410  000008                     load_buffer@str:
   411                           	opt stack 0
   412  000008                     espi_master_send@buffer:
   413                           	opt stack 0
   414  000008                     espi_master_receive@buffer:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x7
   418  000008                     	ds	2
   419  00000A                     load_buffer@size:
   420                           	opt stack 0
   421  00000A                     espi_master_send@timer_start:
   422                           	opt stack 0
   423  00000A                     espi_master_receive@timer_start:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x9
   427  00000A                     	ds	2
   428  00000C                     ??_load_buffer:
   429  00000C                     espi_master_send@timer:
   430                           	opt stack 0
   431  00000C                     espi_master_receive@timer:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0xB
   435  00000C                     	ds	1
   436  00000D                     load_buffer@i:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0xC
   440  00000D                     	ds	1
   441  00000E                     espi_master_send@received_1:
   442                           	opt stack 0
   443  00000E                     espi_master_receive@received_1:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0xD
   447  00000E                     	ds	1
   448  00000F                     espi_master_send@received_2:
   449                           	opt stack 0
   450  00000F                     espi_master_receive@received_2:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0xE
   454  00000F                     	ds	1
   455  000010                     espi_master_receive@value:
   456                           	opt stack 0
   457  000010                     espi_master_send@byte_to_send:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0xF
   461  000010                     	ds	2
   462  000012                     espi_master_send@byte_1:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x11
   466  000012                     	ds	1
   467  000013                     espi_master_send@byte_2:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x12
   471  000013                     	ds	1
   472  000014                     ??_main:
   473                           
   474                           ; 0 bytes @ 0x13
   475  000014                     	ds	2
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           postdec1	equ	0xFE5
   483                           fsr1l	equ	0xFE1
   484                           
   485 ;;
   486 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   487 ;;
   488 ;; *************** function _main *****************
   489 ;; Defined at:
   490 ;;		line 17 in file "main.c"
   491 ;; Parameters:    Size  Location     Type
   492 ;;		None
   493 ;; Auto vars:     Size  Location     Type
   494 ;;  byte_2          1    9[BANK0 ] unsigned char 
   495 ;;  byte_1          1    8[BANK0 ] unsigned char 
   496 ;;  value           2    3[BANK0 ] int 
   497 ;;  message_coun    1    5[BANK0 ] char 
   498 ;;  receive        34   45[BANK0 ] struct circular_buffer
   499 ;;  send           34   11[BANK0 ] struct circular_buffer
   500 ;;  name            3    0[BANK0 ] unsigned char [3]
   501 ;;  count           1   10[BANK0 ] char 
   502 ;;  continuous      1    7[BANK0 ] unsigned char 
   503 ;;  right           1    6[BANK0 ] unsigned char 
   504 ;; Return value:  Size  Location     Type
   505 ;;                  2   42[None  ] int 
   506 ;; Registers used:
   507 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : 0/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMRAM   BANK0
   513 ;;      Params:         0       0
   514 ;;      Locals:         0      79
   515 ;;      Temps:          2       0
   516 ;;      Totals:         2      79
   517 ;;Total ram usage:       81 bytes
   518 ;; Hardware stack levels required when called:    3
   519 ;; This function calls:
   520 ;;		_buffer_count
   521 ;;		_buffer_pop
   522 ;;		_espi_master_receive
   523 ;;		_espi_master_send
   524 ;;		_espi_setup
   525 ;;		_load_buffer
   526 ;;		_pmwSingleModeSetUp
   527 ;;		_selectOutput
   528 ;;		_setPulseWidth
   529 ;;		_set_timer0
   530 ;;		_setup_timer0
   531 ;;		_setup_timer3
   532 ;;		_step_backward
   533 ;;		_step_forward
   534 ;;		_stepper_motor_setup
   535 ;;		_timer0_up
   536 ;; This function is called by:
   537 ;;		Startup code after reset
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541                           	psect	text0
   542  001D9A                     __ptext0:
   543                           	opt stack 0
   544  001D9A                     _main:
   545                           	opt stack 28
   546                           
   547                           ;main.c: 18: OSCCONbits.IRCF = 0x07;
   548                           
   549                           ;incstack = 0
   550  001D9A  88D3               	bsf	4051,4,c	;volatile
   551  001D9C  8AD3               	bsf	4051,5,c	;volatile
   552  001D9E  8CD3               	bsf	4051,6,c	;volatile
   553                           
   554                           ;main.c: 20: espi_setup(0x00);
   555  001DA0  0E00               	movlw	0
   556  001DA2  ECA5  F00B         	call	_espi_setup
   557                           
   558                           ;main.c: 21: setup_timer3(0x80 | 0x00 | 0x01);
   559  001DA6  0E81               	movlw	129
   560  001DA8  EC0F  F00B         	call	_setup_timer3
   561                           
   562                           ;main.c: 22: setup_timer0(0x00 | 0x80);
   563  001DAC  0E80               	movlw	128
   564  001DAE  EC0B  F00B         	call	_setup_timer0
   565                           
   566                           ;main.c: 23: pmwSingleModeSetUp(PACH_PBDH, 254, TMRP_1, 0x01 | 0x02);
   567  001DB2  0EFE               	movlw	254
   568  001DB4  6E05               	movwf	pmwSingleModeSetUp@valuePR2,c
   569  001DB6  0E00               	movlw	0
   570  001DB8  6E06               	movwf	pmwSingleModeSetUp@scaler,c
   571  001DBA  0E03               	movlw	3
   572  001DBC  6E07               	movwf	pmwSingleModeSetUp@outputs,c
   573  001DBE  0E00               	movlw	0
   574  001DC0  EC1F  F00E         	call	_pmwSingleModeSetUp
   575                           
   576                           ;main.c: 24: stepper_motor_setup();
   577  001DC4  EC3F  F00B         	call	_stepper_motor_setup	;wreg free
   578                           
   579                           ;main.c: 26: struct circular_buffer send = {0, 0, {0}};
   580  001DC8  EE20  F0AF         	lfsr	2,main@F4005
   581  001DCC  EE10  F06B         	lfsr	1,main@send
   582  001DD0  0E21               	movlw	33
   583  001DD2                     u1581:
   584  001DD2  CFDB FFE3          	movff	plusw2,plusw1
   585  001DD6  06E8               	decf	wreg,f,c
   586  001DD8  E2FC               	bc	u1581
   587                           
   588                           ;main.c: 27: struct circular_buffer receive = {0, 0, {0}};
   589  001DDA  EE20  F0D1         	lfsr	2,main@F4007
   590  001DDE  EE10  F08D         	lfsr	1,main@receive
   591  001DE2  0E21               	movlw	33
   592  001DE4                     u1591:
   593  001DE4  CFDB FFE3          	movff	plusw2,plusw1
   594  001DE8  06E8               	decf	wreg,f,c
   595  001DEA  E2FC               	bc	u1591
   596                           
   597                           ;main.c: 29: char name[3] = {0x55, 0xDD, 0x00};
   598  001DEC  C0F3  F060         	movff	main@F4009,main@name
   599  001DF0  C0F4  F061         	movff	main@F4009+1,main@name+1
   600  001DF4  C0F5  F062         	movff	main@F4009+2,main@name+2
   601                           
   602                           ;main.c: 30: int8_t count = 0;
   603  001DF8  0E00               	movlw	0
   604  001DFA  0100               	movlb	0	; () banked
   605  001DFC  6F6A               	movwf	main@count& (0+255),b
   606                           
   607                           ; BSR set to: 0
   608                           ;main.c: 31: bool right = 1;
   609  001DFE  0E01               	movlw	1
   610  001E00  0100               	movlb	0	; () banked
   611  001E02  6F66               	movwf	main@right& (0+255),b
   612                           
   613                           ; BSR set to: 0
   614                           ;main.c: 32: bool continuous = 0;
   615  001E04  0E00               	movlw	0
   616  001E06  0100               	movlb	0	; () banked
   617  001E08  6F67               	movwf	main@continuous& (0+255),b
   618                           
   619                           ; BSR set to: 0
   620                           ;main.c: 34: set_timer0(65050);
   621  001E0A  0EFE               	movlw	254
   622  001E0C  6E02               	movwf	set_timer0@value+1,c
   623  001E0E  0E1A               	movlw	26
   624  001E10  6E01               	movwf	set_timer0@value,c
   625  001E12  EC22  F00B         	call	_set_timer0	;wreg free
   626  001E16  D000               	goto	l1949
   627  001E18                     l1949:
   628                           
   629                           ;main.c: 37: espi_master_receive(&receive, &set_timer3, &timer3_up);
   630  001E18  0E8D               	movlw	low main@receive
   631  001E1A  6E08               	movwf	espi_master_receive@buffer,c
   632  001E1C  0E00               	movlw	high main@receive
   633  001E1E  6E09               	movwf	espi_master_receive@buffer+1,c
   634  001E20  0E38               	movlw	low _set_timer3
   635  001E22  6E0A               	movwf	espi_master_receive@timer_start,c
   636  001E24  0E16               	movlw	high _set_timer3
   637  001E26  6E0B               	movwf	espi_master_receive@timer_start+1,c
   638  001E28  0E50               	movlw	low _timer3_up
   639  001E2A  6E0C               	movwf	espi_master_receive@timer,c
   640  001E2C  0E16               	movlw	high _timer3_up
   641  001E2E  6E0D               	movwf	espi_master_receive@timer+1,c
   642  001E30  ECCC  F00D         	call	_espi_master_receive	;wreg free
   643                           
   644                           ;main.c: 38: int16_t value;
   645                           ;main.c: 40: int8_t message_count = 0;
   646  001E34  0E00               	movlw	0
   647  001E36  0100               	movlb	0	; () banked
   648  001E38  6F65               	movwf	main@message_count& (0+255),b
   649                           
   650                           ;main.c: 42: while (buffer_count(&receive) >= 3) {
   651  001E3A  D088               	goto	l1977
   652  001E3C                     l1953:
   653                           
   654                           ;main.c: 43: value = buffer_pop(&receive);
   655  001E3C  0E8D               	movlw	low main@receive
   656  001E3E  6E01               	movwf	buffer_pop@buffer,c
   657  001E40  0E00               	movlw	high main@receive
   658  001E42  6E02               	movwf	buffer_pop@buffer+1,c
   659  001E44  ECAE  F00C         	call	_buffer_pop	;wreg free
   660  001E48  C001  F063         	movff	?_buffer_pop,main@value
   661  001E4C  C002  F064         	movff	?_buffer_pop+1,main@value+1
   662                           
   663                           ;main.c: 44: uint8_t byte_1;
   664                           ;main.c: 45: uint8_t byte_2;
   665                           ;main.c: 47: switch (value) {
   666  001E50  D067               	goto	l1975
   667  001E52                     l1955:
   668                           
   669                           ;main.c: 49: byte_1 = buffer_pop(&receive);
   670  001E52  0E8D               	movlw	low main@receive
   671  001E54  6E01               	movwf	buffer_pop@buffer,c
   672  001E56  0E00               	movlw	high main@receive
   673  001E58  6E02               	movwf	buffer_pop@buffer+1,c
   674  001E5A  ECAE  F00C         	call	_buffer_pop	;wreg free
   675  001E5E  5001               	movf	?_buffer_pop,w,c
   676  001E60  0100               	movlb	0	; () banked
   677  001E62  6F68               	movwf	main@byte_1& (0+255),b
   678                           
   679                           ;main.c: 50: byte_2 = buffer_pop(&receive);
   680  001E64  0E8D               	movlw	low main@receive
   681  001E66  6E01               	movwf	buffer_pop@buffer,c
   682  001E68  0E00               	movlw	high main@receive
   683  001E6A  6E02               	movwf	buffer_pop@buffer+1,c
   684  001E6C  ECAE  F00C         	call	_buffer_pop	;wreg free
   685  001E70  5001               	movf	?_buffer_pop,w,c
   686  001E72  0100               	movlb	0	; () banked
   687  001E74  6F69               	movwf	main@byte_2& (0+255),b
   688                           
   689                           ; BSR set to: 0
   690                           ;main.c: 51: setPulseWidth(byte_1 << 2 | byte_2);
   691  001E76  0100               	movlb	0	; () banked
   692  001E78  5169               	movf	main@byte_2& (0+255),w,b
   693  001E7A  C068  F014         	movff	main@byte_1,??_main
   694  001E7E  6A15               	clrf	(??_main+1)& (0+255),c
   695  001E80  90D8               	bcf	status,0,c
   696  001E82  3614               	rlcf	??_main,f,c
   697  001E84  3615               	rlcf	??_main+1,f,c
   698  001E86  90D8               	bcf	status,0,c
   699  001E88  3614               	rlcf	??_main,f,c
   700  001E8A  3615               	rlcf	??_main+1,f,c
   701  001E8C  1014               	iorwf	??_main,w,c
   702  001E8E  6E01               	movwf	setPulseWidth@width,c
   703  001E90  5015               	movf	??_main+1,w,c
   704  001E92  6E02               	movwf	setPulseWidth@width+1,c
   705  001E94  EC90  F00B         	call	_setPulseWidth	;wreg free
   706                           
   707                           ;main.c: 52: break;
   708  001E98  D059               	goto	l1977
   709  001E9A                     l1959:
   710                           
   711                           ;main.c: 54: byte_1 = buffer_pop(&receive);
   712  001E9A  0E8D               	movlw	low main@receive
   713  001E9C  6E01               	movwf	buffer_pop@buffer,c
   714  001E9E  0E00               	movlw	high main@receive
   715  001EA0  6E02               	movwf	buffer_pop@buffer+1,c
   716  001EA2  ECAE  F00C         	call	_buffer_pop	;wreg free
   717  001EA6  5001               	movf	?_buffer_pop,w,c
   718  001EA8  0100               	movlb	0	; () banked
   719  001EAA  6F68               	movwf	main@byte_1& (0+255),b
   720                           
   721                           ;main.c: 55: byte_2 = buffer_pop(&receive);
   722  001EAC  0E8D               	movlw	low main@receive
   723  001EAE  6E01               	movwf	buffer_pop@buffer,c
   724  001EB0  0E00               	movlw	high main@receive
   725  001EB2  6E02               	movwf	buffer_pop@buffer+1,c
   726  001EB4  ECAE  F00C         	call	_buffer_pop	;wreg free
   727  001EB8  5001               	movf	?_buffer_pop,w,c
   728  001EBA  0100               	movlb	0	; () banked
   729  001EBC  6F69               	movwf	main@byte_2& (0+255),b
   730                           
   731                           ; BSR set to: 0
   732                           ;main.c: 56: selectOutput(byte_1, byte_2);
   733  001EBE  C069  F001         	movff	main@byte_2,selectOutput@toggle
   734  001EC2  0100               	movlb	0	; () banked
   735  001EC4  5168               	movf	main@byte_1& (0+255),w,b
   736  001EC6  EC7B  F00D         	call	_selectOutput
   737                           
   738                           ;main.c: 57: break;
   739  001ECA  D040               	goto	l1977
   740  001ECC                     l1963:
   741                           
   742                           ;main.c: 59: right = buffer_pop(&receive);
   743  001ECC  0E8D               	movlw	low main@receive
   744  001ECE  6E01               	movwf	buffer_pop@buffer,c
   745  001ED0  0E00               	movlw	high main@receive
   746  001ED2  6E02               	movwf	buffer_pop@buffer+1,c
   747  001ED4  ECAE  F00C         	call	_buffer_pop	;wreg free
   748  001ED8  5001               	movf	?_buffer_pop,w,c
   749  001EDA  0100               	movlb	0	; () banked
   750  001EDC  6F66               	movwf	main@right& (0+255),b
   751                           
   752                           ;main.c: 60: count = buffer_pop(&receive);
   753  001EDE  0E8D               	movlw	low main@receive
   754  001EE0  6E01               	movwf	buffer_pop@buffer,c
   755  001EE2  0E00               	movlw	high main@receive
   756  001EE4  6E02               	movwf	buffer_pop@buffer+1,c
   757  001EE6  ECAE  F00C         	call	_buffer_pop	;wreg free
   758  001EEA  5001               	movf	?_buffer_pop,w,c
   759  001EEC  0100               	movlb	0	; () banked
   760  001EEE  6F6A               	movwf	main@count& (0+255),b
   761                           
   762                           ; BSR set to: 0
   763                           ;main.c: 61: continuous = 0;
   764  001EF0  0E00               	movlw	0
   765  001EF2  D013               	goto	L1
   766  001EF4                     l1967:
   767                           
   768                           ;main.c: 64: right = buffer_pop(&receive);
   769  001EF4  0E8D               	movlw	low main@receive
   770  001EF6  6E01               	movwf	buffer_pop@buffer,c
   771  001EF8  0E00               	movlw	high main@receive
   772  001EFA  6E02               	movwf	buffer_pop@buffer+1,c
   773  001EFC  ECAE  F00C         	call	_buffer_pop	;wreg free
   774  001F00  5001               	movf	?_buffer_pop,w,c
   775  001F02  0100               	movlb	0	; () banked
   776  001F04  6F66               	movwf	main@right& (0+255),b
   777                           
   778                           ;main.c: 65: buffer_pop(&receive);
   779  001F06  0E8D               	movlw	low main@receive
   780  001F08  6E01               	movwf	buffer_pop@buffer,c
   781  001F0A  0E00               	movlw	high main@receive
   782  001F0C  6E02               	movwf	buffer_pop@buffer+1,c
   783  001F0E  ECAE  F00C         	call	_buffer_pop	;wreg free
   784                           
   785                           ;main.c: 66: count = 0;
   786  001F12  0E00               	movlw	0
   787  001F14  0100               	movlb	0	; () banked
   788  001F16  6F6A               	movwf	main@count& (0+255),b
   789                           
   790                           ; BSR set to: 0
   791                           ;main.c: 67: continuous = 1;
   792  001F18  0E01               	movlw	1
   793  001F1A                     L1:
   794  001F1A  0100               	movlb	0	; () banked
   795  001F1C  6F67               	movwf	main@continuous& (0+255),b
   796                           
   797                           ; BSR set to: 0
   798                           ;main.c: 69: }
   799                           
   800                           ;main.c: 68: break;
   801  001F1E  D016               	goto	l1977
   802  001F20                     l1975:
   803  001F20  C063  F014         	movff	main@value,??_main
   804  001F24  C064  F015         	movff	main@value+1,??_main+1
   805                           
   806                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   807                           ; Switch size 1, requested type "space"
   808                           ; Number of cases is 1, Range of values is 0 to 0
   809                           ; switch strategies available:
   810                           ; Name         Instructions Cycles
   811                           ; simple_byte            4     3 (average)
   812                           ;	Chosen strategy is simple_byte
   813  001F28  5015               	movf	??_main+1,w,c
   814  001F2A  0A00               	xorlw	0	; case 0
   815  001F2C  A4D8               	btfss	status,2,c
   816  001F2E  D00E               	goto	l1977
   817                           
   818                           ; Switch size 1, requested type "space"
   819                           ; Number of cases is 4, Range of values is 170 to 187
   820                           ; switch strategies available:
   821                           ; Name         Instructions Cycles
   822                           ; simple_byte           13     7 (average)
   823                           ;	Chosen strategy is simple_byte
   824  001F30  5014               	movf	??_main,w,c
   825  001F32  0AAA               	xorlw	170	; case 170
   826  001F34  B4D8               	btfsc	status,2,c
   827  001F36  D7B1               	goto	l1959
   828  001F38  0A06               	xorlw	6	; case 172
   829  001F3A  B4D8               	btfsc	status,2,c
   830  001F3C  D78A               	goto	l1955
   831  001F3E  0A16               	xorlw	22	; case 186
   832  001F40  B4D8               	btfsc	status,2,c
   833  001F42  D7C4               	goto	l1963
   834  001F44  0A01               	xorlw	1	; case 187
   835  001F46  B4D8               	btfsc	status,2,c
   836  001F48  D7D5               	goto	l1967
   837  001F4A  D000               	goto	l1977
   838  001F4C                     l1977:
   839  001F4C  0E8D               	movlw	low main@receive
   840  001F4E  6E01               	movwf	buffer_count@buffer,c
   841  001F50  0E00               	movlw	high main@receive
   842  001F52  6E02               	movwf	buffer_count@buffer+1,c
   843  001F54  EC36  F00B         	call	_buffer_count	;wreg free
   844  001F58  6E14               	movwf	??_main& (0+255),c
   845  001F5A  0E03               	movlw	3
   846  001F5C  6014               	cpfslt	??_main,c
   847  001F5E  D76E               	goto	l1953
   848  001F60  D000               	goto	l1979
   849  001F62                     l1979:
   850                           
   851                           ;main.c: 70: }
   852                           ;main.c: 72: if (timer0_up()) {
   853  001F62  EC2F  F00B         	call	_timer0_up	;wreg free
   854  001F66  0900               	iorlw	0
   855  001F68  B4D8               	btfsc	status,2,c
   856  001F6A  D756               	goto	l1949
   857                           
   858                           ;main.c: 73: if (message_count == 0) {
   859  001F6C  0100               	movlb	0	; () banked
   860  001F6E  5165               	movf	main@message_count& (0+255),w,b
   861  001F70  0100               	movlb	0	; () banked
   862  001F72  A4D8               	btfss	status,2,c
   863  001F74  D01D               	goto	l1987
   864                           
   865                           ; BSR set to: 0
   866                           ;main.c: 74: load_buffer(&send, name, 3);
   867  001F76  0E6B               	movlw	low main@send
   868  001F78  6E06               	movwf	load_buffer@buffer,c
   869  001F7A  0E00               	movlw	high main@send
   870  001F7C  6E07               	movwf	load_buffer@buffer+1,c
   871  001F7E  0E60               	movlw	low main@name
   872  001F80  6E08               	movwf	load_buffer@str,c
   873  001F82  0E00               	movlw	high main@name
   874  001F84  6E09               	movwf	load_buffer@str+1,c
   875  001F86  0E00               	movlw	0
   876  001F88  6E0B               	movwf	load_buffer@size+1,c
   877  001F8A  0E03               	movlw	3
   878  001F8C  6E0A               	movwf	load_buffer@size,c
   879  001F8E  EC2B  F00D         	call	_load_buffer	;wreg free
   880                           
   881                           ;main.c: 75: espi_master_send(&send, &set_timer3, &timer3_up);
   882  001F92  0E6B               	movlw	low main@send
   883  001F94  6E08               	movwf	espi_master_send@buffer,c
   884  001F96  0E00               	movlw	high main@send
   885  001F98  6E09               	movwf	espi_master_send@buffer+1,c
   886  001F9A  0E38               	movlw	low _set_timer3
   887  001F9C  6E0A               	movwf	espi_master_send@timer_start,c
   888  001F9E  0E16               	movlw	high _set_timer3
   889  001FA0  6E0B               	movwf	espi_master_send@timer_start+1,c
   890  001FA2  0E50               	movlw	low _timer3_up
   891  001FA4  6E0C               	movwf	espi_master_send@timer,c
   892  001FA6  0E16               	movlw	high _timer3_up
   893  001FA8  6E0D               	movwf	espi_master_send@timer+1,c
   894  001FAA  EC73  F00E         	call	_espi_master_send	;wreg free
   895  001FAE  D000               	goto	l1987
   896  001FB0                     l1987:
   897                           
   898                           ;main.c: 76: }
   899                           ;main.c: 78: message_count++;
   900  001FB0  0100               	movlb	0	; () banked
   901  001FB2  2B65               	incf	main@message_count& (0+255),f,b
   902                           
   903                           ; BSR set to: 0
   904                           ;main.c: 80: if (count || continuous) {
   905  001FB4  0100               	movlb	0	; () banked
   906  001FB6  516A               	movf	main@count& (0+255),w,b
   907  001FB8  0100               	movlb	0	; () banked
   908  001FBA  A4D8               	btfss	status,2,c
   909  001FBC  D005               	goto	l1993
   910                           
   911                           ; BSR set to: 0
   912  001FBE  0100               	movlb	0	; () banked
   913  001FC0  5167               	movf	main@continuous& (0+255),w,b
   914  001FC2  0100               	movlb	0	; () banked
   915  001FC4  B4D8               	btfsc	status,2,c
   916  001FC6  D013               	goto	l2003
   917  001FC8                     l1993:
   918                           
   919                           ; BSR set to: 0
   920                           ;main.c: 81: if (right)
   921  001FC8  0100               	movlb	0	; () banked
   922  001FCA  5166               	movf	main@right& (0+255),w,b
   923  001FCC  0100               	movlb	0	; () banked
   924  001FCE  B4D8               	btfsc	status,2,c
   925  001FD0  D003               	goto	l1997
   926                           
   927                           ; BSR set to: 0
   928                           ;main.c: 82: step_forward();
   929  001FD2  EC7E  F00B         	call	_step_forward	;wreg free
   930  001FD6  D003               	goto	l1999
   931  001FD8                     l1997:
   932                           
   933                           ;main.c: 83: else
   934                           ;main.c: 84: step_backward();
   935  001FD8  EC6C  F00B         	call	_step_backward	;wreg free
   936  001FDC  D000               	goto	l1999
   937  001FDE                     l1999:
   938                           
   939                           ;main.c: 86: if (count)
   940  001FDE  0100               	movlb	0	; () banked
   941  001FE0  516A               	movf	main@count& (0+255),w,b
   942  001FE2  0100               	movlb	0	; () banked
   943  001FE4  B4D8               	btfsc	status,2,c
   944  001FE6  D003               	goto	l2003
   945                           
   946                           ; BSR set to: 0
   947                           ;main.c: 87: count--;
   948  001FE8  0100               	movlb	0	; () banked
   949  001FEA  076A               	decf	main@count& (0+255),f,b
   950                           
   951                           ; BSR set to: 0
   952  001FEC  D000               	goto	l2003
   953  001FEE                     l2003:
   954                           
   955                           ; BSR set to: 0
   956                           ;main.c: 88: }
   957                           ;main.c: 89: set_timer0(64000);
   958  001FEE  0EFA               	movlw	250
   959  001FF0  6E02               	movwf	set_timer0@value+1,c
   960  001FF2  0E00               	movlw	0
   961  001FF4  6E01               	movwf	set_timer0@value,c
   962  001FF6  EC22  F00B         	call	_set_timer0	;wreg free
   963  001FFA  D70E               	goto	l1949
   964                           
   965                           ;main.c: 90: }
   966                           ;main.c: 91: }
   967                           ;main.c: 93: return 0;
   968                           ;	Return value of _main is never used
   969  001FFC  EF00  F000         	goto	start
   970  002000                     __end_of_main:
   971                           	opt stack 0
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           postinc0	equ	0xFEE
   977                           wreg	equ	0xFE8
   978                           postdec1	equ	0xFE5
   979                           plusw1	equ	0xFE3
   980                           fsr1l	equ	0xFE1
   981                           plusw2	equ	0xFDB
   982                           status	equ	0xFD8
   983                           
   984 ;; *************** function _timer0_up *****************
   985 ;; Defined at:
   986 ;;		line 22 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;		None
   989 ;; Auto vars:     Size  Location     Type
   990 ;;		None
   991 ;; Return value:  Size  Location     Type
   992 ;;                  1    wreg      unsigned char 
   993 ;; Registers used:
   994 ;;		wreg
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0
  1000 ;;      Params:         0       0
  1001 ;;      Locals:         0       0
  1002 ;;      Temps:          0       0
  1003 ;;      Totals:         0       0
  1004 ;;Total ram usage:        0 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; This function calls:
  1007 ;;		Nothing
  1008 ;; This function is called by:
  1009 ;;		_main
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text1
  1014  00165E                     __ptext1:
  1015                           	opt stack 0
  1016  00165E                     _timer0_up:
  1017                           	opt stack 30
  1018                           
  1019                           ;timers_pic.c: 24: return (INTCONbits.TMR0IF) ? 1 : 0;
  1020                           
  1021                           ;incstack = 0
  1022  00165E  A4F2               	btfss	intcon,2,c	;volatile
  1023  001660  D002               	goto	u1480
  1024  001662  0E01               	movlw	1
  1025  001664  0012               	return	
  1026  001666                     u1480:
  1027  001666  0E00               	movlw	0
  1028  001668  0012               	return	
  1029  00166A  0012               	return		;funcret
  1030  00166C                     __end_of_timer0_up:
  1031                           	opt stack 0
  1032                           tblptru	equ	0xFF8
  1033                           tblptrh	equ	0xFF7
  1034                           tblptrl	equ	0xFF6
  1035                           tablat	equ	0xFF5
  1036                           intcon	equ	0xFF2
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           postdec1	equ	0xFE5
  1040                           plusw1	equ	0xFE3
  1041                           fsr1l	equ	0xFE1
  1042                           plusw2	equ	0xFDB
  1043                           status	equ	0xFD8
  1044                           
  1045 ;; *************** function _stepper_motor_setup *****************
  1046 ;; Defined at:
  1047 ;;		line 7 in file "stepper_motor.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;		None
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;		None
  1052 ;; Return value:  Size  Location     Type
  1053 ;;		None               void
  1054 ;; Registers used:
  1055 ;;		None
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0
  1061 ;;      Params:         0       0
  1062 ;;      Locals:         0       0
  1063 ;;      Temps:          0       0
  1064 ;;      Totals:         0       0
  1065 ;;Total ram usage:        0 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		_main
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           	psect	text2
  1075  00167E                     __ptext2:
  1076                           	opt stack 0
  1077  00167E                     _stepper_motor_setup:
  1078                           	opt stack 30
  1079                           
  1080                           ;stepper_motor.c: 9: LATCbits.LATC0 = 0;
  1081                           
  1082                           ;incstack = 0
  1083  00167E  908B               	bcf	3979,0,c	;volatile
  1084                           
  1085                           ;stepper_motor.c: 10: LATCbits.LATC1 = 0;
  1086  001680  928B               	bcf	3979,1,c	;volatile
  1087                           
  1088                           ;stepper_motor.c: 11: LATCbits.LATC2 = 0;
  1089  001682  948B               	bcf	3979,2,c	;volatile
  1090                           
  1091                           ;stepper_motor.c: 12: LATCbits.LATC3 = 0;
  1092  001684  968B               	bcf	3979,3,c	;volatile
  1093                           
  1094                           ;stepper_motor.c: 14: TRISCbits.RC0 = 0;
  1095  001686  9094               	bcf	3988,0,c	;volatile
  1096                           
  1097                           ;stepper_motor.c: 15: TRISCbits.RC1 = 0;
  1098  001688  9294               	bcf	3988,1,c	;volatile
  1099                           
  1100                           ;stepper_motor.c: 16: TRISCbits.RC2 = 0;
  1101  00168A  9494               	bcf	3988,2,c	;volatile
  1102                           
  1103                           ;stepper_motor.c: 17: TRISCbits.RC3 = 0;
  1104  00168C  9694               	bcf	3988,3,c	;volatile
  1105  00168E  0012               	return		;funcret
  1106  001690                     __end_of_stepper_motor_setup:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           intcon	equ	0xFF2
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           postdec1	equ	0xFE5
  1116                           plusw1	equ	0xFE3
  1117                           fsr1l	equ	0xFE1
  1118                           plusw2	equ	0xFDB
  1119                           status	equ	0xFD8
  1120                           
  1121 ;; *************** function _step_forward *****************
  1122 ;; Defined at:
  1123 ;;		line 20 in file "stepper_motor.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;		None               void
  1130 ;; Registers used:
  1131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0
  1137 ;;      Params:         0       0
  1138 ;;      Locals:         0       0
  1139 ;;      Temps:          1       0
  1140 ;;      Totals:         1       0
  1141 ;;Total ram usage:        1 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_main
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           	psect	text3
  1151  0016FC                     __ptext3:
  1152                           	opt stack 0
  1153  0016FC                     _step_forward:
  1154                           	opt stack 30
  1155                           
  1156                           ;stepper_motor.c: 22: current_state++;
  1157                           
  1158                           ;incstack = 0
  1159  0016FC  2A1E               	incf	_current_state,f,c
  1160                           
  1161                           ;stepper_motor.c: 23: current_state &= 0x07;
  1162  0016FE  0E07               	movlw	7
  1163  001700  161E               	andwf	_current_state,f,c
  1164                           
  1165                           ;stepper_motor.c: 25: LATC = (LATC & 0xF0) | output_value[current_state];
  1166  001702  501E               	movf	_current_state,w,c
  1167  001704  0D01               	mullw	1
  1168  001706  0E16               	movlw	low _output_value
  1169  001708  24F3               	addwf	prodl,w,c
  1170  00170A  6ED9               	movwf	fsr2l,c
  1171  00170C  0E00               	movlw	high _output_value
  1172  00170E  20F4               	addwfc	prodh,w,c
  1173  001710  6EDA               	movwf	fsr2h,c
  1174  001712  50DF               	movf	indf2,w,c
  1175  001714  6E01               	movwf	??_step_forward& (0+255),c
  1176  001716  508B               	movf	3979,w,c	;volatile
  1177  001718  0BF0               	andlw	240
  1178  00171A  1001               	iorwf	??_step_forward,w,c
  1179  00171C  6E8B               	movwf	3979,c	;volatile
  1180  00171E  0012               	return		;funcret
  1181  001720                     __end_of_step_forward:
  1182                           	opt stack 0
  1183                           tblptru	equ	0xFF8
  1184                           tblptrh	equ	0xFF7
  1185                           tblptrl	equ	0xFF6
  1186                           tablat	equ	0xFF5
  1187                           prodh	equ	0xFF4
  1188                           prodl	equ	0xFF3
  1189                           intcon	equ	0xFF2
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           postdec1	equ	0xFE5
  1193                           plusw1	equ	0xFE3
  1194                           fsr1l	equ	0xFE1
  1195                           indf2	equ	0xFDF
  1196                           plusw2	equ	0xFDB
  1197                           fsr2h	equ	0xFDA
  1198                           fsr2l	equ	0xFD9
  1199                           status	equ	0xFD8
  1200                           
  1201 ;; *************** function _step_backward *****************
  1202 ;; Defined at:
  1203 ;;		line 28 in file "stepper_motor.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;		None               void
  1210 ;; Registers used:
  1211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0
  1217 ;;      Params:         0       0
  1218 ;;      Locals:         0       0
  1219 ;;      Temps:          1       0
  1220 ;;      Totals:         1       0
  1221 ;;Total ram usage:        1 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; This function calls:
  1224 ;;		Nothing
  1225 ;; This function is called by:
  1226 ;;		_main
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           	psect	text4
  1231  0016D8                     __ptext4:
  1232                           	opt stack 0
  1233  0016D8                     _step_backward:
  1234                           	opt stack 30
  1235                           
  1236                           ;stepper_motor.c: 30: current_state--;
  1237                           
  1238                           ;incstack = 0
  1239  0016D8  061E               	decf	_current_state,f,c
  1240                           
  1241                           ;stepper_motor.c: 31: current_state &= 0x07;
  1242  0016DA  0E07               	movlw	7
  1243  0016DC  161E               	andwf	_current_state,f,c
  1244                           
  1245                           ;stepper_motor.c: 33: LATC = (LATC & 0xF0) | output_value[current_state];
  1246  0016DE  501E               	movf	_current_state,w,c
  1247  0016E0  0D01               	mullw	1
  1248  0016E2  0E16               	movlw	low _output_value
  1249  0016E4  24F3               	addwf	prodl,w,c
  1250  0016E6  6ED9               	movwf	fsr2l,c
  1251  0016E8  0E00               	movlw	high _output_value
  1252  0016EA  20F4               	addwfc	prodh,w,c
  1253  0016EC  6EDA               	movwf	fsr2h,c
  1254  0016EE  50DF               	movf	indf2,w,c
  1255  0016F0  6E01               	movwf	??_step_backward& (0+255),c
  1256  0016F2  508B               	movf	3979,w,c	;volatile
  1257  0016F4  0BF0               	andlw	240
  1258  0016F6  1001               	iorwf	??_step_backward,w,c
  1259  0016F8  6E8B               	movwf	3979,c	;volatile
  1260  0016FA  0012               	return		;funcret
  1261  0016FC                     __end_of_step_backward:
  1262                           	opt stack 0
  1263                           tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           prodh	equ	0xFF4
  1268                           prodl	equ	0xFF3
  1269                           intcon	equ	0xFF2
  1270                           postinc0	equ	0xFEE
  1271                           wreg	equ	0xFE8
  1272                           postdec1	equ	0xFE5
  1273                           plusw1	equ	0xFE3
  1274                           fsr1l	equ	0xFE1
  1275                           indf2	equ	0xFDF
  1276                           plusw2	equ	0xFDB
  1277                           fsr2h	equ	0xFDA
  1278                           fsr2l	equ	0xFD9
  1279                           status	equ	0xFD8
  1280                           
  1281 ;; *************** function _setup_timer3 *****************
  1282 ;; Defined at:
  1283 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  T3CON_reg       1    wreg     unsigned char 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;		None               void
  1290 ;; Registers used:
  1291 ;;		wreg
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0
  1297 ;;      Params:         0       0
  1298 ;;      Locals:         1       0
  1299 ;;      Temps:          0       0
  1300 ;;      Totals:         1       0
  1301 ;;Total ram usage:        1 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; This function calls:
  1304 ;;		Nothing
  1305 ;; This function is called by:
  1306 ;;		_main
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text5
  1311  00161E                     __ptext5:
  1312                           	opt stack 0
  1313  00161E                     _setup_timer3:
  1314                           	opt stack 30
  1315                           
  1316                           ;incstack = 0
  1317                           ;setup_timer3@T3CON_reg stored from wreg
  1318  00161E  6E01               	movwf	setup_timer3@T3CON_reg,c
  1319                           
  1320                           ;timers_pic.c: 57: T3CON = T3CON_reg;
  1321  001620  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
  1322  001624  0012               	return		;funcret
  1323  001626                     __end_of_setup_timer3:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           prodh	equ	0xFF4
  1330                           prodl	equ	0xFF3
  1331                           intcon	equ	0xFF2
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           postdec1	equ	0xFE5
  1335                           plusw1	equ	0xFE3
  1336                           fsr1l	equ	0xFE1
  1337                           indf2	equ	0xFDF
  1338                           plusw2	equ	0xFDB
  1339                           fsr2h	equ	0xFDA
  1340                           fsr2l	equ	0xFD9
  1341                           status	equ	0xFD8
  1342                           
  1343 ;; *************** function _setup_timer0 *****************
  1344 ;; Defined at:
  1345 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  T0CON_reg       1    wreg     unsigned char 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  T0CON_reg       1    0[COMRAM] unsigned char 
  1350 ;; Return value:  Size  Location     Type
  1351 ;;		None               void
  1352 ;; Registers used:
  1353 ;;		wreg
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0
  1359 ;;      Params:         0       0
  1360 ;;      Locals:         1       0
  1361 ;;      Temps:          0       0
  1362 ;;      Totals:         1       0
  1363 ;;Total ram usage:        1 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; This function calls:
  1366 ;;		Nothing
  1367 ;; This function is called by:
  1368 ;;		_main
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           	psect	text6
  1373  001616                     __ptext6:
  1374                           	opt stack 0
  1375  001616                     _setup_timer0:
  1376                           	opt stack 30
  1377                           
  1378                           ;incstack = 0
  1379                           ;setup_timer0@T0CON_reg stored from wreg
  1380  001616  6E01               	movwf	setup_timer0@T0CON_reg,c
  1381                           
  1382                           ;timers_pic.c: 5: T0CON = T0CON_reg;
  1383  001618  C001  FFD5         	movff	setup_timer0@T0CON_reg,4053	;volatile
  1384  00161C  0012               	return		;funcret
  1385  00161E                     __end_of_setup_timer0:
  1386                           	opt stack 0
  1387                           tblptru	equ	0xFF8
  1388                           tblptrh	equ	0xFF7
  1389                           tblptrl	equ	0xFF6
  1390                           tablat	equ	0xFF5
  1391                           prodh	equ	0xFF4
  1392                           prodl	equ	0xFF3
  1393                           intcon	equ	0xFF2
  1394                           postinc0	equ	0xFEE
  1395                           wreg	equ	0xFE8
  1396                           postdec1	equ	0xFE5
  1397                           plusw1	equ	0xFE3
  1398                           fsr1l	equ	0xFE1
  1399                           indf2	equ	0xFDF
  1400                           plusw2	equ	0xFDB
  1401                           fsr2h	equ	0xFDA
  1402                           fsr2l	equ	0xFD9
  1403                           status	equ	0xFD8
  1404                           
  1405 ;; *************** function _set_timer0 *****************
  1406 ;; Defined at:
  1407 ;;		line 8 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  1408 ;; Parameters:    Size  Location     Type
  1409 ;;  value           2    0[COMRAM] int 
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;		None
  1412 ;; Return value:  Size  Location     Type
  1413 ;;		None               void
  1414 ;; Registers used:
  1415 ;;		None
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0
  1421 ;;      Params:         2       0
  1422 ;;      Locals:         0       0
  1423 ;;      Temps:          0       0
  1424 ;;      Totals:         2       0
  1425 ;;Total ram usage:        2 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; This function calls:
  1428 ;;		Nothing
  1429 ;; This function is called by:
  1430 ;;		_main
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text7
  1435  001644                     __ptext7:
  1436                           	opt stack 0
  1437  001644                     _set_timer0:
  1438                           	opt stack 30
  1439                           
  1440                           ;timers_pic.c: 10: INTCONbits.TMR0IF = 0;
  1441                           
  1442                           ;incstack = 0
  1443  001644  94F2               	bcf	intcon,2,c	;volatile
  1444                           
  1445                           ;timers_pic.c: 11: TMR0 = value;
  1446  001646  C001  FFD6         	movff	set_timer0@value,4054	;volatile
  1447  00164A  C002  FFD7         	movff	set_timer0@value+1,4055	;volatile
  1448  00164E  0012               	return		;funcret
  1449  001650                     __end_of_set_timer0:
  1450                           	opt stack 0
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           prodh	equ	0xFF4
  1456                           prodl	equ	0xFF3
  1457                           intcon	equ	0xFF2
  1458                           postinc0	equ	0xFEE
  1459                           wreg	equ	0xFE8
  1460                           postdec1	equ	0xFE5
  1461                           plusw1	equ	0xFE3
  1462                           fsr1l	equ	0xFE1
  1463                           indf2	equ	0xFDF
  1464                           plusw2	equ	0xFDB
  1465                           fsr2h	equ	0xFDA
  1466                           fsr2l	equ	0xFD9
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _selectOutput *****************
  1470 ;; Defined at:
  1471 ;;		line 64 in file "../TorqueGriper.X/pwm.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  outputs         1    wreg     unsigned char 
  1474 ;;  toggle          1    0[COMRAM] unsigned char 
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;  outputs         1    2[COMRAM] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;		None               void
  1479 ;; Registers used:
  1480 ;;		wreg, status,2, status,0
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0
  1486 ;;      Params:         1       0
  1487 ;;      Locals:         1       0
  1488 ;;      Temps:          1       0
  1489 ;;      Totals:         3       0
  1490 ;;Total ram usage:        3 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text8
  1500  001AF6                     __ptext8:
  1501                           	opt stack 0
  1502  001AF6                     _selectOutput:
  1503                           	opt stack 30
  1504                           
  1505                           ;incstack = 0
  1506                           ;selectOutput@outputs stored from wreg
  1507  001AF6  6E03               	movwf	selectOutput@outputs,c
  1508                           
  1509                           ;pwm.c: 66: switch (outputs){
  1510  001AF8  D03D               	goto	l1849
  1511  001AFA                     l1837:
  1512                           
  1513                           ;pwm.c: 68: PSTRCON = 0xF0;
  1514  001AFA  0EF0               	movlw	240
  1515  001AFC  6EB9               	movwf	4025,c	;volatile
  1516                           
  1517                           ;pwm.c: 69: break;
  1518  001AFE  0012               	return	
  1519  001B00                     l1839:
  1520                           
  1521                           ;pwm.c: 71: PSTRCONbits.STRA = (toggle) ? 1 : 0;
  1522  001B00  5001               	movf	selectOutput@toggle,w,c
  1523  001B02  B4D8               	btfsc	status,2,c
  1524  001B04  D003               	goto	u1400
  1525  001B06  6A02               	clrf	??_selectOutput& (0+255),c
  1526  001B08  2A02               	incf	??_selectOutput& (0+255),f,c
  1527  001B0A  D001               	goto	u1418
  1528  001B0C                     u1400:
  1529  001B0C  6A02               	clrf	??_selectOutput& (0+255),c
  1530  001B0E                     u1418:
  1531  001B0E  50B9               	movf	4025,w,c	;volatile
  1532  001B10  1802               	xorwf	??_selectOutput,w,c
  1533  001B12  0BFE               	andlw	-2
  1534  001B14  1802               	xorwf	??_selectOutput,w,c
  1535  001B16  6EB9               	movwf	4025,c	;volatile
  1536                           
  1537                           ;pwm.c: 72: break;
  1538  001B18  0012               	return	
  1539  001B1A                     l1841:
  1540                           
  1541                           ;pwm.c: 74: PSTRCONbits.STRB = (toggle) ? 1 : 0;
  1542  001B1A  5001               	movf	selectOutput@toggle,w,c
  1543  001B1C  B4D8               	btfsc	status,2,c
  1544  001B1E  D003               	goto	u1420
  1545  001B20  6A02               	clrf	??_selectOutput& (0+255),c
  1546  001B22  2A02               	incf	??_selectOutput& (0+255),f,c
  1547  001B24  D001               	goto	u1438
  1548  001B26                     u1420:
  1549  001B26  6A02               	clrf	??_selectOutput& (0+255),c
  1550  001B28                     u1438:
  1551  001B28  4602               	rlncf	??_selectOutput,f,c
  1552  001B2A  50B9               	movf	4025,w,c	;volatile
  1553  001B2C  1802               	xorwf	??_selectOutput,w,c
  1554  001B2E  0BFD               	andlw	-3
  1555  001B30  1802               	xorwf	??_selectOutput,w,c
  1556  001B32  6EB9               	movwf	4025,c	;volatile
  1557                           
  1558                           ;pwm.c: 75: break;
  1559  001B34  0012               	return	
  1560  001B36                     l1843:
  1561                           
  1562                           ;pwm.c: 77: PSTRCONbits.STRC = (toggle) ? 1 : 0;
  1563  001B36  5001               	movf	selectOutput@toggle,w,c
  1564  001B38  B4D8               	btfsc	status,2,c
  1565  001B3A  D003               	goto	u1440
  1566  001B3C  6A02               	clrf	??_selectOutput& (0+255),c
  1567  001B3E  2A02               	incf	??_selectOutput& (0+255),f,c
  1568  001B40  D001               	goto	u1458
  1569  001B42                     u1440:
  1570  001B42  6A02               	clrf	??_selectOutput& (0+255),c
  1571  001B44                     u1458:
  1572  001B44  4602               	rlncf	??_selectOutput,f,c
  1573  001B46  4602               	rlncf	??_selectOutput,f,c
  1574  001B48  50B9               	movf	4025,w,c	;volatile
  1575  001B4A  1802               	xorwf	??_selectOutput,w,c
  1576  001B4C  0BFB               	andlw	-5
  1577  001B4E  1802               	xorwf	??_selectOutput,w,c
  1578  001B50  6EB9               	movwf	4025,c	;volatile
  1579                           
  1580                           ;pwm.c: 78: break;
  1581  001B52  0012               	return	
  1582  001B54                     l1845:
  1583                           
  1584                           ;pwm.c: 80: PSTRCONbits.STRD = (toggle) ? 1 : 0;
  1585  001B54  5001               	movf	selectOutput@toggle,w,c
  1586  001B56  B4D8               	btfsc	status,2,c
  1587  001B58  D003               	goto	u1460
  1588  001B5A  6A02               	clrf	??_selectOutput& (0+255),c
  1589  001B5C  2A02               	incf	??_selectOutput& (0+255),f,c
  1590  001B5E  D001               	goto	u1478
  1591  001B60                     u1460:
  1592  001B60  6A02               	clrf	??_selectOutput& (0+255),c
  1593  001B62                     u1478:
  1594  001B62  4602               	rlncf	??_selectOutput,f,c
  1595  001B64  4602               	rlncf	??_selectOutput,f,c
  1596  001B66  4602               	rlncf	??_selectOutput,f,c
  1597  001B68  50B9               	movf	4025,w,c	;volatile
  1598  001B6A  1802               	xorwf	??_selectOutput,w,c
  1599  001B6C  0BF7               	andlw	-9
  1600  001B6E  1802               	xorwf	??_selectOutput,w,c
  1601  001B70  6EB9               	movwf	4025,c	;volatile
  1602                           
  1603                           ;pwm.c: 82: }
  1604                           
  1605                           ;pwm.c: 81: break;
  1606  001B72  0012               	return	
  1607  001B74                     l1849:
  1608  001B74  5003               	movf	selectOutput@outputs,w,c
  1609                           
  1610                           ; Switch size 1, requested type "space"
  1611                           ; Number of cases is 5, Range of values is 0 to 8
  1612                           ; switch strategies available:
  1613                           ; Name         Instructions Cycles
  1614                           ; simple_byte           16     9 (average)
  1615                           ;	Chosen strategy is simple_byte
  1616  001B76  0A00               	xorlw	0	; case 0
  1617  001B78  B4D8               	btfsc	status,2,c
  1618  001B7A  D7BF               	goto	l1837
  1619  001B7C  0A01               	xorlw	1	; case 1
  1620  001B7E  B4D8               	btfsc	status,2,c
  1621  001B80  D7BF               	goto	l1839
  1622  001B82  0A03               	xorlw	3	; case 2
  1623  001B84  B4D8               	btfsc	status,2,c
  1624  001B86  D7C9               	goto	l1841
  1625  001B88  0A06               	xorlw	6	; case 4
  1626  001B8A  B4D8               	btfsc	status,2,c
  1627  001B8C  D7D4               	goto	l1843
  1628  001B8E  0A0C               	xorlw	12	; case 8
  1629  001B90  A4D8               	btfss	status,2,c
  1630  001B92  0012               	return	
  1631  001B94  D7DF               	goto	l1845
  1632  001B96  0012               	return		;funcret
  1633  001B98                     __end_of_selectOutput:
  1634                           	opt stack 0
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           prodh	equ	0xFF4
  1640                           prodl	equ	0xFF3
  1641                           intcon	equ	0xFF2
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           postdec1	equ	0xFE5
  1645                           plusw1	equ	0xFE3
  1646                           fsr1l	equ	0xFE1
  1647                           indf2	equ	0xFDF
  1648                           plusw2	equ	0xFDB
  1649                           fsr2h	equ	0xFDA
  1650                           fsr2l	equ	0xFD9
  1651                           status	equ	0xFD8
  1652                           
  1653 ;; *************** function _pmwSingleModeSetUp *****************
  1654 ;; Defined at:
  1655 ;;		line 3 in file "../TorqueGriper.X/pwm.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  polarity        1    wreg     enum E3665
  1658 ;;  valuePR2        1    4[COMRAM] unsigned char 
  1659 ;;  scaler          1    5[COMRAM] enum E3671
  1660 ;;  outputs         1    6[COMRAM] unsigned char 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  polarity        1    7[COMRAM] enum E3665
  1663 ;; Return value:  Size  Location     Type
  1664 ;;		None               void
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, status,0, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0
  1672 ;;      Params:         3       0
  1673 ;;      Locals:         1       0
  1674 ;;      Temps:          0       0
  1675 ;;      Totals:         4       0
  1676 ;;Total ram usage:        4 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    1
  1679 ;; This function calls:
  1680 ;;		_setPulseWidth
  1681 ;; This function is called by:
  1682 ;;		_main
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           	psect	text9
  1687  001C3E                     __ptext9:
  1688                           	opt stack 0
  1689  001C3E                     _pmwSingleModeSetUp:
  1690                           	opt stack 29
  1691                           
  1692                           ;incstack = 0
  1693                           ;pmwSingleModeSetUp@polarity stored from wreg
  1694  001C3E  6E08               	movwf	pmwSingleModeSetUp@polarity,c
  1695                           
  1696                           ;pwm.c: 6: T2CONbits.TMR2ON = 1;
  1697  001C40  84CA               	bsf	4042,2,c	;volatile
  1698                           
  1699                           ;pwm.c: 8: switch (scaler) {
  1700  001C42  D009               	goto	l1775
  1701  001C44                     l1769:
  1702                           
  1703                           ;pwm.c: 10: T2CONbits.T2CKPS = 0x00;
  1704  001C44  0EFC               	movlw	-4
  1705  001C46  16CA               	andwf	4042,f,c	;volatile
  1706                           
  1707                           ;pwm.c: 11: break;
  1708  001C48  D011               	goto	l1777
  1709                           
  1710                           ;pwm.c: 12: case TMRP_4:
  1711  001C4A  D000               	goto	l1773
  1712  001C4C                     l1773:
  1713                           
  1714                           ;pwm.c: 16: T2CONbits.T2CKPS = 0x11;
  1715  001C4C  50CA               	movf	4042,w,c	;volatile
  1716  001C4E  0BFC               	andlw	-4
  1717  001C50  0901               	iorlw	1
  1718  001C52  6ECA               	movwf	4042,c	;volatile
  1719                           
  1720                           ;pwm.c: 17: }
  1721  001C54  D00B               	goto	l1777
  1722  001C56                     l1775:
  1723  001C56  5006               	movf	pmwSingleModeSetUp@scaler,w,c
  1724                           
  1725                           ; Switch size 1, requested type "space"
  1726                           ; Number of cases is 3, Range of values is 0 to 2
  1727                           ; switch strategies available:
  1728                           ; Name         Instructions Cycles
  1729                           ; simple_byte           10     6 (average)
  1730                           ;	Chosen strategy is simple_byte
  1731  001C58  0A00               	xorlw	0	; case 0
  1732  001C5A  B4D8               	btfsc	status,2,c
  1733  001C5C  D7F3               	goto	l1769
  1734  001C5E  0A01               	xorlw	1	; case 1
  1735  001C60  B4D8               	btfsc	status,2,c
  1736  001C62  D7F4               	goto	l1773
  1737  001C64  0A03               	xorlw	3	; case 2
  1738  001C66  B4D8               	btfsc	status,2,c
  1739  001C68  D7F1               	goto	l1773
  1740  001C6A  D000               	goto	l1777
  1741  001C6C                     l1777:
  1742                           
  1743                           ;pwm.c: 19: CCP1CONbits.P1M = 0x00;
  1744  001C6C  0E3F               	movlw	-193
  1745  001C6E  16BD               	andwf	4029,f,c	;volatile
  1746                           
  1747                           ;pwm.c: 21: switch (polarity) {
  1748  001C70  D012               	goto	l1785
  1749  001C72                     l1779:
  1750                           
  1751                           ;pwm.c: 23: CCP1CONbits.CCP1M = 0b1100;
  1752  001C72  50BD               	movf	4029,w,c	;volatile
  1753  001C74  0BF0               	andlw	-16
  1754  001C76  090C               	iorlw	12
  1755  001C78  D007               	goto	L3
  1756  001C7A                     l1781:
  1757                           
  1758                           ;pwm.c: 26: CCP1CONbits.CCP1M = 0b1101;
  1759  001C7A  50BD               	movf	4029,w,c	;volatile
  1760  001C7C  0BF0               	andlw	-16
  1761  001C7E  090D               	iorlw	13
  1762  001C80  D003               	goto	L3
  1763  001C82                     l1783:
  1764                           
  1765                           ;pwm.c: 29: CCP1CONbits.CCP1M = 0b1110;
  1766  001C82  50BD               	movf	4029,w,c	;volatile
  1767  001C84  0BF0               	andlw	-16
  1768  001C86  090E               	iorlw	14
  1769  001C88                     L3:
  1770  001C88  6EBD               	movwf	4029,c	;volatile
  1771                           
  1772                           ;pwm.c: 30: break;
  1773  001C8A  D012               	goto	l413
  1774  001C8C                     l416:
  1775                           
  1776                           ;pwm.c: 32: CCP1CONbits.CCP1M = 0b1111;
  1777  001C8C  80BD               	bsf	4029,0,c	;volatile
  1778  001C8E  82BD               	bsf	4029,1,c	;volatile
  1779  001C90  84BD               	bsf	4029,2,c	;volatile
  1780  001C92  86BD               	bsf	4029,3,c	;volatile
  1781                           
  1782                           ;pwm.c: 33: }
  1783  001C94  D00D               	goto	l413
  1784  001C96                     l1785:
  1785  001C96  5008               	movf	pmwSingleModeSetUp@polarity,w,c
  1786                           
  1787                           ; Switch size 1, requested type "space"
  1788                           ; Number of cases is 4, Range of values is 0 to 3
  1789                           ; switch strategies available:
  1790                           ; Name         Instructions Cycles
  1791                           ; simple_byte           13     7 (average)
  1792                           ;	Chosen strategy is simple_byte
  1793  001C98  0A00               	xorlw	0	; case 0
  1794  001C9A  B4D8               	btfsc	status,2,c
  1795  001C9C  D7EA               	goto	l1779
  1796  001C9E  0A01               	xorlw	1	; case 1
  1797  001CA0  B4D8               	btfsc	status,2,c
  1798  001CA2  D7EB               	goto	l1781
  1799  001CA4  0A03               	xorlw	3	; case 2
  1800  001CA6  B4D8               	btfsc	status,2,c
  1801  001CA8  D7EC               	goto	l1783
  1802  001CAA  0A01               	xorlw	1	; case 3
  1803  001CAC  B4D8               	btfsc	status,2,c
  1804  001CAE  D7EE               	goto	l416
  1805  001CB0                     l413:
  1806                           
  1807                           ;pwm.c: 35: PSTRCONbits.STRSYNC = 1;
  1808  001CB0  88B9               	bsf	4025,4,c	;volatile
  1809                           
  1810                           ;pwm.c: 37: if (outputs & 0x01) {
  1811  001CB2  A007               	btfss	pmwSingleModeSetUp@outputs,0,c
  1812  001CB4  D002               	goto	l417
  1813                           
  1814                           ;pwm.c: 38: LATCbits.LATC5 = 0;
  1815  001CB6  9A8B               	bcf	3979,5,c	;volatile
  1816                           
  1817                           ;pwm.c: 39: TRISCbits.RC5 = 0;
  1818  001CB8  9A94               	bcf	3988,5,c	;volatile
  1819  001CBA                     l417:
  1820                           
  1821                           ;pwm.c: 40: }
  1822                           ;pwm.c: 41: if (outputs & 0x02) {
  1823  001CBA  A207               	btfss	pmwSingleModeSetUp@outputs,1,c
  1824  001CBC  D002               	goto	l418
  1825                           
  1826                           ;pwm.c: 42: LATCbits.LATC4 = 0;
  1827  001CBE  988B               	bcf	3979,4,c	;volatile
  1828                           
  1829                           ;pwm.c: 43: TRISCbits.RC4 = 0;
  1830  001CC0  9894               	bcf	3988,4,c	;volatile
  1831  001CC2                     l418:
  1832                           
  1833                           ;pwm.c: 44: }
  1834                           ;pwm.c: 45: if (outputs & 0x04) {
  1835  001CC2  A407               	btfss	pmwSingleModeSetUp@outputs,2,c
  1836  001CC4  D002               	goto	l419
  1837                           
  1838                           ;pwm.c: 46: LATCbits.LATC3 = 0;
  1839  001CC6  968B               	bcf	3979,3,c	;volatile
  1840                           
  1841                           ;pwm.c: 47: TRISCbits.RC3 = 0;
  1842  001CC8  9694               	bcf	3988,3,c	;volatile
  1843  001CCA                     l419:
  1844                           
  1845                           ;pwm.c: 48: }
  1846                           ;pwm.c: 49: if (outputs & 0x08) {
  1847  001CCA  A607               	btfss	pmwSingleModeSetUp@outputs,3,c
  1848  001CCC  D003               	goto	l1795
  1849                           
  1850                           ;pwm.c: 50: LATCbits.LATC2 = 0;
  1851  001CCE  948B               	bcf	3979,2,c	;volatile
  1852                           
  1853                           ;pwm.c: 51: TRISCbits.RC2 = 0;
  1854  001CD0  9494               	bcf	3988,2,c	;volatile
  1855  001CD2  D000               	goto	l1795
  1856  001CD4                     l1795:
  1857                           
  1858                           ;pwm.c: 52: }
  1859                           ;pwm.c: 54: setPulseWidth(0);
  1860  001CD4  0E00               	movlw	0
  1861  001CD6  6E02               	movwf	setPulseWidth@width+1,c
  1862  001CD8  0E00               	movlw	0
  1863  001CDA  6E01               	movwf	setPulseWidth@width,c
  1864  001CDC  EC90  F00B         	call	_setPulseWidth	;wreg free
  1865                           
  1866                           ;pwm.c: 55: PR2 = valuePR2;
  1867  001CE0  C005  FFCB         	movff	pmwSingleModeSetUp@valuePR2,4043	;volatile
  1868  001CE4  0012               	return		;funcret
  1869  001CE6                     __end_of_pmwSingleModeSetUp:
  1870                           	opt stack 0
  1871                           tblptru	equ	0xFF8
  1872                           tblptrh	equ	0xFF7
  1873                           tblptrl	equ	0xFF6
  1874                           tablat	equ	0xFF5
  1875                           prodh	equ	0xFF4
  1876                           prodl	equ	0xFF3
  1877                           intcon	equ	0xFF2
  1878                           postinc0	equ	0xFEE
  1879                           wreg	equ	0xFE8
  1880                           postdec1	equ	0xFE5
  1881                           plusw1	equ	0xFE3
  1882                           fsr1l	equ	0xFE1
  1883                           indf2	equ	0xFDF
  1884                           plusw2	equ	0xFDB
  1885                           fsr2h	equ	0xFDA
  1886                           fsr2l	equ	0xFD9
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function _setPulseWidth *****************
  1890 ;; Defined at:
  1891 ;;		line 58 in file "../TorqueGriper.X/pwm.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;  width           2    0[COMRAM] unsigned int 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;		None               void
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0
  1905 ;;      Params:         2       0
  1906 ;;      Locals:         0       0
  1907 ;;      Temps:          2       0
  1908 ;;      Totals:         4       0
  1909 ;;Total ram usage:        4 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_main
  1915 ;;		_pmwSingleModeSetUp
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text10
  1920  001720                     __ptext10:
  1921                           	opt stack 0
  1922  001720                     _setPulseWidth:
  1923                           	opt stack 30
  1924                           
  1925                           ;pwm.c: 60: CCP1CONbits.DC1B = width;
  1926                           
  1927                           ;incstack = 0
  1928  001720  C001  F003         	movff	setPulseWidth@width,??_setPulseWidth
  1929  001724  3A03               	swapf	??_setPulseWidth,f,c
  1930  001726  50BD               	movf	4029,w,c	;volatile
  1931  001728  1803               	xorwf	??_setPulseWidth,w,c
  1932  00172A  0BCF               	andlw	-49
  1933  00172C  1803               	xorwf	??_setPulseWidth,w,c
  1934  00172E  6EBD               	movwf	4029,c	;volatile
  1935                           
  1936                           ;pwm.c: 61: CCPR1L = width >> 2;
  1937  001730  C001  F003         	movff	setPulseWidth@width,??_setPulseWidth
  1938  001734  C002  F004         	movff	setPulseWidth@width+1,??_setPulseWidth+1
  1939  001738  90D8               	bcf	status,0,c
  1940  00173A  3204               	rrcf	??_setPulseWidth+1,f,c
  1941  00173C  3203               	rrcf	??_setPulseWidth,f,c
  1942  00173E  90D8               	bcf	status,0,c
  1943  001740  3204               	rrcf	??_setPulseWidth+1,f,c
  1944  001742  3203               	rrcf	??_setPulseWidth,f,c
  1945  001744  5003               	movf	??_setPulseWidth,w,c
  1946  001746  6EBE               	movwf	4030,c	;volatile
  1947  001748  0012               	return		;funcret
  1948  00174A                     __end_of_setPulseWidth:
  1949                           	opt stack 0
  1950                           tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           prodh	equ	0xFF4
  1955                           prodl	equ	0xFF3
  1956                           intcon	equ	0xFF2
  1957                           postinc0	equ	0xFEE
  1958                           wreg	equ	0xFE8
  1959                           postdec1	equ	0xFE5
  1960                           plusw1	equ	0xFE3
  1961                           fsr1l	equ	0xFE1
  1962                           indf2	equ	0xFDF
  1963                           plusw2	equ	0xFDB
  1964                           fsr2h	equ	0xFDA
  1965                           fsr2l	equ	0xFD9
  1966                           status	equ	0xFD8
  1967                           
  1968 ;; *************** function _load_buffer *****************
  1969 ;; Defined at:
  1970 ;;		line 96 in file "main.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  buffer          2    5[COMRAM] PTR struct circular_buff
  1973 ;;		 -> main@send(34), 
  1974 ;;  str             2    7[COMRAM] PTR unsigned char 
  1975 ;;		 -> main@name(3), 
  1976 ;;  size            2    9[COMRAM] int 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  i               2   12[COMRAM] int 
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  1    wreg      unsigned char 
  1981 ;; Registers used:
  1982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0
  1988 ;;      Params:         6       0
  1989 ;;      Locals:         2       0
  1990 ;;      Temps:          1       0
  1991 ;;      Totals:         9       0
  1992 ;;Total ram usage:        9 bytes
  1993 ;; Hardware stack levels used:    1
  1994 ;; Hardware stack levels required when called:    1
  1995 ;; This function calls:
  1996 ;;		_buffer_push
  1997 ;; This function is called by:
  1998 ;;		_main
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text11
  2003  001A56                     __ptext11:
  2004                           	opt stack 0
  2005  001A56                     _load_buffer:
  2006                           	opt stack 29
  2007                           
  2008                           ;main.c: 98: int i;
  2009                           ;main.c: 99: if (size < 0) {
  2010                           
  2011                           ;incstack = 0
  2012  001A56  AE0B               	btfss	load_buffer@size+1,7,c
  2013  001A58  D026               	goto	l1867
  2014                           
  2015                           ;main.c: 100: for (i = 0; str[i] != 0; i++) {
  2016  001A5A  0E00               	movlw	0
  2017  001A5C  6E0E               	movwf	load_buffer@i+1,c
  2018  001A5E  0E00               	movlw	0
  2019  001A60  6E0D               	movwf	load_buffer@i,c
  2020  001A62  D016               	goto	l1865
  2021  001A64                     l1859:
  2022                           
  2023                           ;main.c: 101: if (buffer_push(buffer, str[i]))
  2024  001A64  C006  F001         	movff	load_buffer@buffer,buffer_push@buffer
  2025  001A68  C007  F002         	movff	load_buffer@buffer+1,buffer_push@buffer+1
  2026  001A6C  500D               	movf	load_buffer@i,w,c
  2027  001A6E  2408               	addwf	load_buffer@str,w,c
  2028  001A70  6ED9               	movwf	fsr2l,c
  2029  001A72  500E               	movf	load_buffer@i+1,w,c
  2030  001A74  2009               	addwfc	load_buffer@str+1,w,c
  2031  001A76  6EDA               	movwf	fsr2h,c
  2032  001A78  50DF               	movf	indf2,w,c
  2033  001A7A  6E03               	movwf	buffer_push@byte,c
  2034  001A7C  ECEB  F00C         	call	_buffer_push	;wreg free
  2035  001A80  0900               	iorlw	0
  2036  001A82  A4D8               	btfss	status,2,c
  2037  001A84  0012               	return	
  2038  001A86  D001               	goto	l1863
  2039                           
  2040                           ;main.c: 102: return 0;
  2041                           ;	Return value of _load_buffer is never used
  2042  001A88  0012               	return	
  2043  001A8A                     l1863:
  2044  001A8A  4A0D               	infsnz	load_buffer@i,f,c
  2045  001A8C  2A0E               	incf	load_buffer@i+1,f,c
  2046  001A8E  D000               	goto	l1865
  2047  001A90                     l1865:
  2048  001A90  500D               	movf	load_buffer@i,w,c
  2049  001A92  2408               	addwf	load_buffer@str,w,c
  2050  001A94  6ED9               	movwf	fsr2l,c
  2051  001A96  500E               	movf	load_buffer@i+1,w,c
  2052  001A98  2009               	addwfc	load_buffer@str+1,w,c
  2053  001A9A  6EDA               	movwf	fsr2h,c
  2054  001A9C  50DF               	movf	indf2,w,c
  2055  001A9E  B4D8               	btfsc	status,2,c
  2056  001AA0  0012               	return	
  2057  001AA2  D7E0               	goto	l1859
  2058                           
  2059                           ;main.c: 103: }
  2060                           ;main.c: 104: } else {
  2061  001AA4  0012               	return	
  2062  001AA6                     l1867:
  2063                           
  2064                           ;main.c: 105: for (i = 0; i < size; i++) {
  2065  001AA6  0E00               	movlw	0
  2066  001AA8  6E0E               	movwf	load_buffer@i+1,c
  2067  001AAA  0E00               	movlw	0
  2068  001AAC  6E0D               	movwf	load_buffer@i,c
  2069  001AAE  D016               	goto	l1875
  2070  001AB0                     l1869:
  2071                           
  2072                           ;main.c: 106: if (buffer_push(buffer, str[i]))
  2073  001AB0  C006  F001         	movff	load_buffer@buffer,buffer_push@buffer
  2074  001AB4  C007  F002         	movff	load_buffer@buffer+1,buffer_push@buffer+1
  2075  001AB8  500D               	movf	load_buffer@i,w,c
  2076  001ABA  2408               	addwf	load_buffer@str,w,c
  2077  001ABC  6ED9               	movwf	fsr2l,c
  2078  001ABE  500E               	movf	load_buffer@i+1,w,c
  2079  001AC0  2009               	addwfc	load_buffer@str+1,w,c
  2080  001AC2  6EDA               	movwf	fsr2h,c
  2081  001AC4  50DF               	movf	indf2,w,c
  2082  001AC6  6E03               	movwf	buffer_push@byte,c
  2083  001AC8  ECEB  F00C         	call	_buffer_push	;wreg free
  2084  001ACC  0900               	iorlw	0
  2085  001ACE  A4D8               	btfss	status,2,c
  2086  001AD0  0012               	return	
  2087  001AD2  D001               	goto	l1873
  2088                           
  2089                           ;main.c: 107: return 0;
  2090                           ;	Return value of _load_buffer is never used
  2091  001AD4  0012               	return	
  2092  001AD6                     l1873:
  2093  001AD6  4A0D               	infsnz	load_buffer@i,f,c
  2094  001AD8  2A0E               	incf	load_buffer@i+1,f,c
  2095  001ADA  D000               	goto	l1875
  2096  001ADC                     l1875:
  2097  001ADC  500A               	movf	load_buffer@size,w,c
  2098  001ADE  5C0D               	subwf	load_buffer@i,w,c
  2099  001AE0  500E               	movf	load_buffer@i+1,w,c
  2100  001AE2  0A80               	xorlw	128
  2101  001AE4  6E0C               	movwf	??_load_buffer& (0+255),c
  2102  001AE6  500B               	movf	load_buffer@size+1,w,c
  2103  001AE8  0A80               	xorlw	128
  2104  001AEA  580C               	subwfb	??_load_buffer& (0+255),w,c
  2105  001AEC  B0D8               	btfsc	status,0,c
  2106  001AEE  0012               	return	
  2107  001AF0  D7DF               	goto	l1869
  2108  001AF2  0012               	return	
  2109                           
  2110                           ;main.c: 108: }
  2111                           ;main.c: 109: }
  2112                           ;main.c: 111: return 1;
  2113                           ;	Return value of _load_buffer is never used
  2114  001AF4  0012               	return		;funcret
  2115  001AF6                     __end_of_load_buffer:
  2116                           	opt stack 0
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           postdec1	equ	0xFE5
  2127                           plusw1	equ	0xFE3
  2128                           fsr1l	equ	0xFE1
  2129                           indf2	equ	0xFDF
  2130                           plusw2	equ	0xFDB
  2131                           fsr2h	equ	0xFDA
  2132                           fsr2l	equ	0xFD9
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _espi_setup *****************
  2136 ;; Defined at:
  2137 ;;		line 27 in file "../TorqueGriper.X/extended_spi.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  mode            1    wreg     unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  mode            1    2[COMRAM] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;		None               void
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0
  2151 ;;      Params:         0       0
  2152 ;;      Locals:         1       0
  2153 ;;      Temps:          0       0
  2154 ;;      Totals:         1       0
  2155 ;;Total ram usage:        1 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    1
  2158 ;; This function calls:
  2159 ;;		_setup_spi
  2160 ;; This function is called by:
  2161 ;;		_main
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text12
  2166  00174A                     __ptext12:
  2167                           	opt stack 0
  2168  00174A                     _espi_setup:
  2169                           	opt stack 29
  2170                           
  2171                           ;incstack = 0
  2172                           ;espi_setup@mode stored from wreg
  2173  00174A  6E03               	movwf	espi_setup@mode,c
  2174                           
  2175                           ;extended_spi.c: 29: setup_spi(0, 0x20 | 0x10 | mode);
  2176  00174C  5003               	movf	espi_setup@mode,w,c
  2177  00174E  0930               	iorlw	48
  2178  001750  6E01               	movwf	setup_spi@SSPCON1_reg,c
  2179  001752  0E00               	movlw	0
  2180  001754  ECDF  F00B         	call	_setup_spi
  2181                           
  2182                           ;extended_spi.c: 31: ANSELbits.ANS2 = 0;
  2183  001758  947E               	bcf	3966,2,c	;volatile
  2184                           
  2185                           ;extended_spi.c: 32: ANSELHbits.ANS8 = 0;
  2186  00175A  907F               	bcf	3967,0,c	;volatile
  2187                           
  2188                           ;extended_spi.c: 34: if (mode == 0x04 || mode == 0x05) {
  2189  00175C  0E04               	movlw	4
  2190  00175E  1803               	xorwf	espi_setup@mode,w,c
  2191  001760  B4D8               	btfsc	status,2,c
  2192  001762  D004               	goto	l225
  2193  001764  0E05               	movlw	5
  2194  001766  1803               	xorwf	espi_setup@mode,w,c
  2195  001768  A4D8               	btfss	status,2,c
  2196  00176A  D004               	goto	l223
  2197  00176C                     l225:
  2198                           
  2199                           ;extended_spi.c: 35: TRISAbits.RA2 = 0;
  2200  00176C  9492               	bcf	3986,2,c	;volatile
  2201                           
  2202                           ;extended_spi.c: 36: LATAbits.LATA2 = 0;
  2203  00176E  9489               	bcf	3977,2,c	;volatile
  2204                           
  2205                           ;extended_spi.c: 37: TRISCbits.RC6 = 1;
  2206  001770  8C94               	bsf	3988,6,c	;volatile
  2207                           
  2208                           ;extended_spi.c: 38: } else {
  2209  001772  0012               	return	
  2210  001774                     l223:
  2211                           
  2212                           ;extended_spi.c: 39: TRISAbits.RA2 = 1;
  2213  001774  8492               	bsf	3986,2,c	;volatile
  2214                           
  2215                           ;extended_spi.c: 40: TRISCbits.RC6 = 0;
  2216  001776  9C94               	bcf	3988,6,c	;volatile
  2217                           
  2218                           ;extended_spi.c: 41: LATCbits.LATC6 = 0;
  2219  001778  9C8B               	bcf	3979,6,c	;volatile
  2220                           
  2221                           ;extended_spi.c: 42: INTCON2bits.INTEDG2 = 1;
  2222  00177A  88F1               	bsf	intcon2,4,c	;volatile
  2223                           
  2224                           ;extended_spi.c: 43: INTCON3bits.INT2E = 1;
  2225  00177C  88F0               	bsf	intcon3,4,c	;volatile
  2226  00177E  0012               	return	
  2227  001780  0012               	return		;funcret
  2228  001782                     __end_of_espi_setup:
  2229                           	opt stack 0
  2230                           tblptru	equ	0xFF8
  2231                           tblptrh	equ	0xFF7
  2232                           tblptrl	equ	0xFF6
  2233                           tablat	equ	0xFF5
  2234                           prodh	equ	0xFF4
  2235                           prodl	equ	0xFF3
  2236                           intcon	equ	0xFF2
  2237                           intcon2	equ	0xFF1
  2238                           intcon3	equ	0xFF0
  2239                           postinc0	equ	0xFEE
  2240                           wreg	equ	0xFE8
  2241                           postdec1	equ	0xFE5
  2242                           plusw1	equ	0xFE3
  2243                           fsr1l	equ	0xFE1
  2244                           indf2	equ	0xFDF
  2245                           plusw2	equ	0xFDB
  2246                           fsr2h	equ	0xFDA
  2247                           fsr2l	equ	0xFD9
  2248                           status	equ	0xFD8
  2249                           
  2250 ;; *************** function _setup_spi *****************
  2251 ;; Defined at:
  2252 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  SSPSTAT_reg     1    wreg     unsigned char 
  2255 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;		None               void
  2260 ;; Registers used:
  2261 ;;		wreg, status,2, status,0
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0
  2267 ;;      Params:         1       0
  2268 ;;      Locals:         1       0
  2269 ;;      Temps:          0       0
  2270 ;;      Totals:         2       0
  2271 ;;Total ram usage:        2 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_espi_setup
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text13
  2281  0017BE                     __ptext13:
  2282                           	opt stack 0
  2283  0017BE                     _setup_spi:
  2284                           	opt stack 29
  2285                           
  2286                           ;incstack = 0
  2287                           ;setup_spi@SSPSTAT_reg stored from wreg
  2288  0017BE  6E02               	movwf	setup_spi@SSPSTAT_reg,c
  2289                           
  2290                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
  2291  0017C0  9E94               	bcf	3988,7,c	;volatile
  2292                           
  2293                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
  2294  0017C2  947F               	bcf	3967,2,c	;volatile
  2295                           
  2296                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
  2297  0017C4  8893               	bsf	3987,4,c	;volatile
  2298                           
  2299                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
  2300  0017C6  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
  2301                           
  2302                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
  2303  0017CA  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
  2304                           
  2305                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
  2306  0017CE  50C6               	movf	4038,w,c	;volatile
  2307  0017D0  0B0F               	andlw	15
  2308  0017D2  0A05               	xorlw	5
  2309  0017D4  B4D8               	btfsc	status,2,c
  2310  0017D6  D005               	goto	l107
  2311  0017D8  50C6               	movf	4038,w,c	;volatile
  2312  0017DA  0B0F               	andlw	15
  2313  0017DC  0A04               	xorlw	4
  2314  0017DE  A4D8               	btfss	status,2,c
  2315  0017E0  D00A               	goto	l105
  2316  0017E2                     l107:
  2317                           
  2318                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
  2319  0017E2  8C93               	bsf	3987,6,c	;volatile
  2320                           
  2321                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
  2322  0017E4  50C6               	movf	4038,w,c	;volatile
  2323  0017E6  0B0F               	andlw	15
  2324  0017E8  0A04               	xorlw	4
  2325  0017EA  A4D8               	btfss	status,2,c
  2326  0017EC  D002               	goto	l108
  2327                           
  2328                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
  2329  0017EE  907F               	bcf	3967,0,c	;volatile
  2330                           
  2331                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
  2332  0017F0  8C94               	bsf	3988,6,c	;volatile
  2333  0017F2                     l108:
  2334                           
  2335                           ;spi_pic.c: 26: }
  2336                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
  2337  0017F2  9EC7               	bcf	4039,7,c	;volatile
  2338                           
  2339                           ;spi_pic.c: 28: } else {
  2340  0017F4  0012               	return	
  2341  0017F6                     l105:
  2342                           
  2343                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
  2344  0017F6  9C93               	bcf	3987,6,c	;volatile
  2345  0017F8  0012               	return	
  2346  0017FA  0012               	return		;funcret
  2347  0017FC                     __end_of_setup_spi:
  2348                           	opt stack 0
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           prodh	equ	0xFF4
  2354                           prodl	equ	0xFF3
  2355                           intcon	equ	0xFF2
  2356                           intcon2	equ	0xFF1
  2357                           intcon3	equ	0xFF0
  2358                           postinc0	equ	0xFEE
  2359                           wreg	equ	0xFE8
  2360                           postdec1	equ	0xFE5
  2361                           plusw1	equ	0xFE3
  2362                           fsr1l	equ	0xFE1
  2363                           indf2	equ	0xFDF
  2364                           plusw2	equ	0xFDB
  2365                           fsr2h	equ	0xFDA
  2366                           fsr2l	equ	0xFD9
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _espi_master_send *****************
  2370 ;; Defined at:
  2371 ;;		line 138 in file "../TorqueGriper.X/extended_spi.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  buffer          2    7[COMRAM] PTR struct circular_buff
  2374 ;;		 -> main@send(34), 
  2375 ;;  timer_start     2    9[COMRAM] PTR FTN(int ,)void 
  2376 ;;		 -> set_timer3(0), 
  2377 ;;  timer           2   11[COMRAM] PTR FTN()unsigned char 
  2378 ;;		 -> timer3_up(1), 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  byte_to_send    2   15[COMRAM] unsigned int 
  2381 ;;  byte_2          1   18[COMRAM] unsigned char 
  2382 ;;  byte_1          1   17[COMRAM] unsigned char 
  2383 ;;  received_2      1   14[COMRAM] unsigned char 
  2384 ;;  received_1      1   13[COMRAM] unsigned char 
  2385 ;; Return value:  Size  Location     Type
  2386 ;;		None               void
  2387 ;; Registers used:
  2388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0
  2394 ;;      Params:         6       0
  2395 ;;      Locals:         6       0
  2396 ;;      Temps:          0       0
  2397 ;;      Totals:        12       0
  2398 ;;Total ram usage:       12 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    2
  2401 ;; This function calls:
  2402 ;;		_buffer_count
  2403 ;;		_buffer_peek
  2404 ;;		_buffer_pop
  2405 ;;		_encode_data
  2406 ;;		_send_delay
  2407 ;;		_spi_send_get_byte
  2408 ;;		_wait_pulse
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text14
  2415  001CE6                     __ptext14:
  2416                           	opt stack 0
  2417  001CE6                     _espi_master_send:
  2418                           	opt stack 28
  2419                           
  2420                           ;extended_spi.c: 142: if (buffer_count(buffer)) {
  2421                           
  2422                           ;incstack = 0
  2423  001CE6  C008  F001         	movff	espi_master_send@buffer,buffer_count@buffer
  2424  001CEA  C009  F002         	movff	espi_master_send@buffer+1,buffer_count@buffer+1
  2425  001CEE  EC36  F00B         	call	_buffer_count	;wreg free
  2426  001CF2  0900               	iorlw	0
  2427  001CF4  B4D8               	btfsc	status,2,c
  2428  001CF6  0012               	return	
  2429                           
  2430                           ;extended_spi.c: 143: spi_send_get_byte(0x10);
  2431  001CF8  0E10               	movlw	16
  2432  001CFA  EC48  F00B         	call	_spi_send_get_byte
  2433                           
  2434                           ;extended_spi.c: 145: wait_pulse(0x10, timer_start, timer);
  2435  001CFE  C00A  F003         	movff	espi_master_send@timer_start,wait_pulse@timer_start
  2436  001D02  C00B  F004         	movff	espi_master_send@timer_start+1,wait_pulse@timer_start+1
  2437  001D06  C00C  F005         	movff	espi_master_send@timer,wait_pulse@timer
  2438  001D0A  C00D  F006         	movff	espi_master_send@timer+1,wait_pulse@timer+1
  2439  001D0E  0E10               	movlw	16
  2440  001D10  EC76  F00C         	call	_wait_pulse
  2441  001D14  D000               	goto	l1883
  2442  001D16                     l1883:
  2443                           
  2444                           ;extended_spi.c: 154: byte_to_send = buffer_peek(buffer);
  2445  001D16  C008  F001         	movff	espi_master_send@buffer,buffer_peek@buffer
  2446  001D1A  C009  F002         	movff	espi_master_send@buffer+1,buffer_peek@buffer+1
  2447  001D1E  EC21  F00C         	call	_buffer_peek	;wreg free
  2448  001D22  C001  F010         	movff	?_buffer_peek,espi_master_send@byte_to_send
  2449  001D26  C002  F011         	movff	?_buffer_peek+1,espi_master_send@byte_to_send+1
  2450                           
  2451                           ;extended_spi.c: 155: if (byte_to_send == -1)
  2452  001D2A  2810               	incf	espi_master_send@byte_to_send,w,c
  2453  001D2C  E105               	bnz	l1889
  2454  001D2E  2811               	incf	espi_master_send@byte_to_send+1,w,c
  2455  001D30  B4D8               	btfsc	status,2,c
  2456  001D32  D02C               	goto	l1909
  2457  001D34  D001               	goto	l1889
  2458                           
  2459                           ;extended_spi.c: 156: break;
  2460  001D36  D02A               	goto	l1909
  2461  001D38                     l1889:
  2462                           
  2463                           ;extended_spi.c: 157: encode_data(byte_to_send, &byte_1, &byte_2);
  2464  001D38  0E12               	movlw	low espi_master_send@byte_1
  2465  001D3A  6E01               	movwf	encode_data@byte_1,c
  2466  001D3C  0E00               	movlw	high espi_master_send@byte_1
  2467  001D3E  6E02               	movwf	encode_data@byte_1+1,c
  2468  001D40  0E13               	movlw	low espi_master_send@byte_2
  2469  001D42  6E03               	movwf	encode_data@byte_2,c
  2470  001D44  0E00               	movlw	high espi_master_send@byte_2
  2471  001D46  6E04               	movwf	encode_data@byte_2+1,c
  2472  001D48  5010               	movf	espi_master_send@byte_to_send,w,c
  2473  001D4A  ECFE  F00B         	call	_encode_data
  2474                           
  2475                           ;extended_spi.c: 159: received_1 = spi_send_get_byte(byte_1);
  2476  001D4E  5012               	movf	espi_master_send@byte_1,w,c
  2477  001D50  EC48  F00B         	call	_spi_send_get_byte
  2478  001D54  6E0E               	movwf	espi_master_send@received_1,c
  2479                           
  2480                           ;extended_spi.c: 160: send_delay();
  2481  001D56  EC17  F00B         	call	_send_delay	;wreg free
  2482                           
  2483                           ;extended_spi.c: 161: if (received_1 == 0x30)
  2484  001D5A  0E30               	movlw	48
  2485  001D5C  180E               	xorwf	espi_master_send@received_1,w,c
  2486  001D5E  B4D8               	btfsc	status,2,c
  2487  001D60  0012               	return	
  2488  001D62  D001               	goto	l1899
  2489                           
  2490                           ;extended_spi.c: 162: return;
  2491  001D64  0012               	return	
  2492  001D66                     l1899:
  2493                           
  2494                           ;extended_spi.c: 164: received_2 = spi_send_get_byte(byte_2);
  2495  001D66  5013               	movf	espi_master_send@byte_2,w,c
  2496  001D68  EC48  F00B         	call	_spi_send_get_byte
  2497  001D6C  6E0F               	movwf	espi_master_send@received_2,c
  2498                           
  2499                           ;extended_spi.c: 165: send_delay();
  2500  001D6E  EC17  F00B         	call	_send_delay	;wreg free
  2501                           
  2502                           ;extended_spi.c: 166: if (received_2 == 0x30)
  2503  001D72  0E30               	movlw	48
  2504  001D74  180F               	xorwf	espi_master_send@received_2,w,c
  2505  001D76  B4D8               	btfsc	status,2,c
  2506  001D78  0012               	return	
  2507  001D7A  D001               	goto	l1907
  2508                           
  2509                           ;extended_spi.c: 167: return;
  2510  001D7C  0012               	return	
  2511  001D7E                     l1907:
  2512                           
  2513                           ;extended_spi.c: 169: buffer_pop(buffer);
  2514  001D7E  C008  F001         	movff	espi_master_send@buffer,buffer_pop@buffer
  2515  001D82  C009  F002         	movff	espi_master_send@buffer+1,buffer_pop@buffer+1
  2516  001D86  ECAE  F00C         	call	_buffer_pop	;wreg free
  2517  001D8A  D7C5               	goto	l1883
  2518  001D8C                     l1909:
  2519                           
  2520                           ;extended_spi.c: 170: }
  2521                           ;extended_spi.c: 172: spi_send_get_byte(0x30);
  2522  001D8C  0E30               	movlw	48
  2523  001D8E  EC48  F00B         	call	_spi_send_get_byte
  2524                           
  2525                           ;extended_spi.c: 173: send_delay();
  2526  001D92  EC17  F00B         	call	_send_delay	;wreg free
  2527  001D96  0012               	return	
  2528  001D98  0012               	return		;funcret
  2529  001D9A                     __end_of_espi_master_send:
  2530                           	opt stack 0
  2531                           tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           prodh	equ	0xFF4
  2536                           prodl	equ	0xFF3
  2537                           intcon	equ	0xFF2
  2538                           intcon2	equ	0xFF1
  2539                           intcon3	equ	0xFF0
  2540                           postinc0	equ	0xFEE
  2541                           wreg	equ	0xFE8
  2542                           postdec1	equ	0xFE5
  2543                           plusw1	equ	0xFE3
  2544                           fsr1l	equ	0xFE1
  2545                           indf2	equ	0xFDF
  2546                           plusw2	equ	0xFDB
  2547                           fsr2h	equ	0xFDA
  2548                           fsr2l	equ	0xFD9
  2549                           status	equ	0xFD8
  2550                           
  2551 ;; *************** function _encode_data *****************
  2552 ;; Defined at:
  2553 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  data            1    wreg     unsigned char 
  2556 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
  2557 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
  2558 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
  2559 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  data            1    5[COMRAM] unsigned char 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;		None               void
  2564 ;; Registers used:
  2565 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0
  2571 ;;      Params:         4       0
  2572 ;;      Locals:         1       0
  2573 ;;      Temps:          1       0
  2574 ;;      Totals:         6       0
  2575 ;;Total ram usage:        6 bytes
  2576 ;; Hardware stack levels used:    1
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_espi_master_send
  2581 ;;		_espi_slave_send
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585                           	psect	text15
  2586  0017FC                     __ptext15:
  2587                           	opt stack 0
  2588  0017FC                     _encode_data:
  2589                           	opt stack 29
  2590                           
  2591                           ;incstack = 0
  2592                           ;encode_data@data stored from wreg
  2593  0017FC  6E06               	movwf	encode_data@data,c
  2594                           
  2595                           ;encoding.c: 5: *byte_1 = 0xA0;
  2596  0017FE  C001  FFD9         	movff	encode_data@byte_1,fsr2l
  2597  001802  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
  2598  001806  0EA0               	movlw	160
  2599  001808  6EDF               	movwf	indf2,c
  2600                           
  2601                           ;encoding.c: 6: *byte_2 = 0xA0;
  2602  00180A  C003  FFD9         	movff	encode_data@byte_2,fsr2l
  2603  00180E  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
  2604  001812  0EA0               	movlw	160
  2605  001814  6EDF               	movwf	indf2,c
  2606                           
  2607                           ;encoding.c: 8: *byte_1 |= data >> 4;
  2608  001816  C006  F005         	movff	encode_data@data,??_encode_data
  2609  00181A  3A05               	swapf	??_encode_data,f,c
  2610  00181C  0E0F               	movlw	15
  2611  00181E  1605               	andwf	??_encode_data,f,c
  2612  001820  C001  FFD9         	movff	encode_data@byte_1,fsr2l
  2613  001824  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
  2614  001828  5005               	movf	??_encode_data,w,c
  2615  00182A  12DF               	iorwf	indf2,f,c
  2616                           
  2617                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
  2618  00182C  C006  F005         	movff	encode_data@data,??_encode_data
  2619  001830  0E0F               	movlw	15
  2620  001832  1605               	andwf	??_encode_data,f,c
  2621  001834  C003  FFD9         	movff	encode_data@byte_2,fsr2l
  2622  001838  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
  2623  00183C  5005               	movf	??_encode_data,w,c
  2624  00183E  12DF               	iorwf	indf2,f,c
  2625  001840  0012               	return		;funcret
  2626  001842                     __end_of_encode_data:
  2627                           	opt stack 0
  2628                           tblptru	equ	0xFF8
  2629                           tblptrh	equ	0xFF7
  2630                           tblptrl	equ	0xFF6
  2631                           tablat	equ	0xFF5
  2632                           prodh	equ	0xFF4
  2633                           prodl	equ	0xFF3
  2634                           intcon	equ	0xFF2
  2635                           intcon2	equ	0xFF1
  2636                           intcon3	equ	0xFF0
  2637                           postinc0	equ	0xFEE
  2638                           wreg	equ	0xFE8
  2639                           postdec1	equ	0xFE5
  2640                           plusw1	equ	0xFE3
  2641                           fsr1l	equ	0xFE1
  2642                           indf2	equ	0xFDF
  2643                           plusw2	equ	0xFDB
  2644                           fsr2h	equ	0xFDA
  2645                           fsr2l	equ	0xFD9
  2646                           status	equ	0xFD8
  2647                           
  2648 ;; *************** function _buffer_pop *****************
  2649 ;; Defined at:
  2650 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2653 ;;		 -> main@receive(34), main@send(34), 
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;  byte            2    4[COMRAM] int 
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  2    0[COMRAM] int 
  2658 ;; Registers used:
  2659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMRAM   BANK0
  2665 ;;      Params:         2       0
  2666 ;;      Locals:         2       0
  2667 ;;      Temps:          2       0
  2668 ;;      Totals:         6       0
  2669 ;;Total ram usage:        6 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_main
  2675 ;;		_espi_master_send
  2676 ;;		_espi_slave_send
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text16
  2681  00195C                     __ptext16:
  2682                           	opt stack 0
  2683  00195C                     _buffer_pop:
  2684                           	opt stack 29
  2685                           
  2686                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
  2687                           
  2688                           ;incstack = 0
  2689  00195C  EE20 F001          	lfsr	2,1
  2690  001960  5001               	movf	buffer_pop@buffer,w,c
  2691  001962  26D9               	addwf	fsr2l,f,c
  2692  001964  5002               	movf	buffer_pop@buffer+1,w,c
  2693  001966  22DA               	addwfc	fsr2h,f,c
  2694  001968  50DF               	movf	indf2,w,c
  2695  00196A  A4D8               	btfss	status,2,c
  2696  00196C  D003               	goto	l1657
  2697                           
  2698                           ;circular_buffer.c: 40: return -1;
  2699  00196E  6801               	setf	?_buffer_pop,c
  2700  001970  6802               	setf	?_buffer_pop+1,c
  2701  001972  0012               	return	
  2702  001974                     l1657:
  2703                           
  2704                           ;circular_buffer.c: 41: }
  2705                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2706  001974  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2707  001978  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2708  00197C  50DF               	movf	indf2,w,c
  2709  00197E  6E03               	movwf	??_buffer_pop& (0+255),c
  2710  001980  5003               	movf	??_buffer_pop,w,c
  2711  001982  0D01               	mullw	1
  2712  001984  0E02               	movlw	2
  2713  001986  26F3               	addwf	prodl,f,c
  2714  001988  0E00               	movlw	0
  2715  00198A  22F4               	addwfc	prodh,f,c
  2716  00198C  50F3               	movf	prodl,w,c
  2717  00198E  2401               	addwf	buffer_pop@buffer,w,c
  2718  001990  6ED9               	movwf	fsr2l,c
  2719  001992  50F4               	movf	prodh,w,c
  2720  001994  2002               	addwfc	buffer_pop@buffer+1,w,c
  2721  001996  6EDA               	movwf	fsr2h,c
  2722  001998  50DF               	movf	indf2,w,c
  2723  00199A  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  2724  00199C  5004               	movf	??_buffer_pop+1,w,c
  2725  00199E  6E05               	movwf	buffer_pop@byte,c
  2726  0019A0  6A06               	clrf	buffer_pop@byte+1,c
  2727                           
  2728                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  2729  0019A2  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2730  0019A6  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2731  0019AA  50DF               	movf	indf2,w,c
  2732  0019AC  6E03               	movwf	??_buffer_pop& (0+255),c
  2733  0019AE  2803               	incf	??_buffer_pop,w,c
  2734  0019B0  0B1F               	andlw	31
  2735  0019B2  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2736  0019B6  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2737  0019BA  6EDF               	movwf	indf2,c
  2738                           
  2739                           ;circular_buffer.c: 45: buffer->count--;
  2740  0019BC  EE20 F001          	lfsr	2,1
  2741  0019C0  5001               	movf	buffer_pop@buffer,w,c
  2742  0019C2  26D9               	addwf	fsr2l,f,c
  2743  0019C4  5002               	movf	buffer_pop@buffer+1,w,c
  2744  0019C6  22DA               	addwfc	fsr2h,f,c
  2745  0019C8  06DF               	decf	indf2,f,c
  2746                           
  2747                           ;circular_buffer.c: 47: return byte;
  2748  0019CA  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  2749  0019CE  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  2750  0019D2  0012               	return	
  2751  0019D4  0012               	return		;funcret
  2752  0019D6                     __end_of_buffer_pop:
  2753                           	opt stack 0
  2754                           tblptru	equ	0xFF8
  2755                           tblptrh	equ	0xFF7
  2756                           tblptrl	equ	0xFF6
  2757                           tablat	equ	0xFF5
  2758                           prodh	equ	0xFF4
  2759                           prodl	equ	0xFF3
  2760                           intcon	equ	0xFF2
  2761                           intcon2	equ	0xFF1
  2762                           intcon3	equ	0xFF0
  2763                           postinc0	equ	0xFEE
  2764                           wreg	equ	0xFE8
  2765                           postdec1	equ	0xFE5
  2766                           plusw1	equ	0xFE3
  2767                           fsr1l	equ	0xFE1
  2768                           indf2	equ	0xFDF
  2769                           plusw2	equ	0xFDB
  2770                           fsr2h	equ	0xFDA
  2771                           fsr2l	equ	0xFD9
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function _buffer_peek *****************
  2775 ;; Defined at:
  2776 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2779 ;;		 -> main@send(34), 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  byte            2    4[COMRAM] int 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  2    0[COMRAM] int 
  2784 ;; Registers used:
  2785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0
  2791 ;;      Params:         2       0
  2792 ;;      Locals:         2       0
  2793 ;;      Temps:          2       0
  2794 ;;      Totals:         6       0
  2795 ;;Total ram usage:        6 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_espi_master_send
  2801 ;;		_espi_slave_send
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text17
  2806  001842                     __ptext17:
  2807                           	opt stack 0
  2808  001842                     _buffer_peek:
  2809                           	opt stack 29
  2810                           
  2811                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
  2812                           
  2813                           ;incstack = 0
  2814  001842  EE20 F001          	lfsr	2,1
  2815  001846  5001               	movf	buffer_peek@buffer,w,c
  2816  001848  26D9               	addwf	fsr2l,f,c
  2817  00184A  5002               	movf	buffer_peek@buffer+1,w,c
  2818  00184C  22DA               	addwfc	fsr2h,f,c
  2819  00184E  50DF               	movf	indf2,w,c
  2820  001850  A4D8               	btfss	status,2,c
  2821  001852  D003               	goto	l1727
  2822                           
  2823                           ;circular_buffer.c: 58: return -1;
  2824  001854  6801               	setf	?_buffer_peek,c
  2825  001856  6802               	setf	?_buffer_peek+1,c
  2826  001858  0012               	return	
  2827  00185A                     l1727:
  2828                           
  2829                           ;circular_buffer.c: 59: }
  2830                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2831  00185A  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
  2832  00185E  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
  2833  001862  50DF               	movf	indf2,w,c
  2834  001864  6E03               	movwf	??_buffer_peek& (0+255),c
  2835  001866  5003               	movf	??_buffer_peek,w,c
  2836  001868  0D01               	mullw	1
  2837  00186A  0E02               	movlw	2
  2838  00186C  26F3               	addwf	prodl,f,c
  2839  00186E  0E00               	movlw	0
  2840  001870  22F4               	addwfc	prodh,f,c
  2841  001872  50F3               	movf	prodl,w,c
  2842  001874  2401               	addwf	buffer_peek@buffer,w,c
  2843  001876  6ED9               	movwf	fsr2l,c
  2844  001878  50F4               	movf	prodh,w,c
  2845  00187A  2002               	addwfc	buffer_peek@buffer+1,w,c
  2846  00187C  6EDA               	movwf	fsr2h,c
  2847  00187E  50DF               	movf	indf2,w,c
  2848  001880  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
  2849  001882  5004               	movf	??_buffer_peek+1,w,c
  2850  001884  6E05               	movwf	buffer_peek@byte,c
  2851  001886  6A06               	clrf	buffer_peek@byte+1,c
  2852                           
  2853                           ;circular_buffer.c: 63: return byte;
  2854  001888  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
  2855  00188C  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
  2856  001890  0012               	return	
  2857  001892  0012               	return		;funcret
  2858  001894                     __end_of_buffer_peek:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           prodh	equ	0xFF4
  2865                           prodl	equ	0xFF3
  2866                           intcon	equ	0xFF2
  2867                           intcon2	equ	0xFF1
  2868                           intcon3	equ	0xFF0
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           postdec1	equ	0xFE5
  2872                           plusw1	equ	0xFE3
  2873                           fsr1l	equ	0xFE1
  2874                           indf2	equ	0xFDF
  2875                           plusw2	equ	0xFDB
  2876                           fsr2h	equ	0xFDA
  2877                           fsr2l	equ	0xFD9
  2878                           status	equ	0xFD8
  2879                           
  2880 ;; *************** function _buffer_count *****************
  2881 ;; Defined at:
  2882 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2885 ;;		 -> main@receive(34), main@send(34), 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      unsigned char 
  2890 ;; Registers used:
  2891 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0
  2897 ;;      Params:         2       0
  2898 ;;      Locals:         0       0
  2899 ;;      Temps:          0       0
  2900 ;;      Totals:         2       0
  2901 ;;Total ram usage:        2 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; This function calls:
  2904 ;;		Nothing
  2905 ;; This function is called by:
  2906 ;;		_main
  2907 ;;		_espi_master_send
  2908 ;;		_espi_slave_send
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text18
  2913  00166C                     __ptext18:
  2914                           	opt stack 0
  2915  00166C                     _buffer_count:
  2916                           	opt stack 29
  2917                           
  2918                           ;circular_buffer.c: 6: return buffer->count;
  2919                           
  2920                           ;incstack = 0
  2921  00166C  EE20 F001          	lfsr	2,1
  2922  001670  5001               	movf	buffer_count@buffer,w,c
  2923  001672  26D9               	addwf	fsr2l,f,c
  2924  001674  5002               	movf	buffer_count@buffer+1,w,c
  2925  001676  22DA               	addwfc	fsr2h,f,c
  2926  001678  50DF               	movf	indf2,w,c
  2927  00167A  0012               	return	
  2928  00167C  0012               	return		;funcret
  2929  00167E                     __end_of_buffer_count:
  2930                           	opt stack 0
  2931                           tblptru	equ	0xFF8
  2932                           tblptrh	equ	0xFF7
  2933                           tblptrl	equ	0xFF6
  2934                           tablat	equ	0xFF5
  2935                           prodh	equ	0xFF4
  2936                           prodl	equ	0xFF3
  2937                           intcon	equ	0xFF2
  2938                           intcon2	equ	0xFF1
  2939                           intcon3	equ	0xFF0
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           plusw1	equ	0xFE3
  2944                           fsr1l	equ	0xFE1
  2945                           indf2	equ	0xFDF
  2946                           plusw2	equ	0xFDB
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _espi_master_receive *****************
  2952 ;; Defined at:
  2953 ;;		line 177 in file "../TorqueGriper.X/extended_spi.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  buffer          2    7[COMRAM] PTR struct circular_buff
  2956 ;;		 -> main@receive(34), 
  2957 ;;  timer_start     2    9[COMRAM] PTR FTN(int ,)void 
  2958 ;;		 -> set_timer3(0), 
  2959 ;;  timer           2   11[COMRAM] PTR FTN()unsigned char 
  2960 ;;		 -> timer3_up(1), 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  value           1   15[COMRAM] unsigned char 
  2963 ;;  received_2      1   14[COMRAM] unsigned char 
  2964 ;;  received_1      1   13[COMRAM] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;		None               void
  2967 ;; Registers used:
  2968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0
  2974 ;;      Params:         6       0
  2975 ;;      Locals:         3       0
  2976 ;;      Temps:          0       0
  2977 ;;      Totals:         9       0
  2978 ;;Total ram usage:        9 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    2
  2981 ;; This function calls:
  2982 ;;		_buffer_full
  2983 ;;		_buffer_push
  2984 ;;		_buffer_space
  2985 ;;		_decode_data
  2986 ;;		_send_delay
  2987 ;;		_spi_send_get_byte
  2988 ;;		_wait_pulse
  2989 ;; This function is called by:
  2990 ;;		_main
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text19
  2995  001B98                     __ptext19:
  2996                           	opt stack 0
  2997  001B98                     _espi_master_receive:
  2998                           	opt stack 28
  2999                           
  3000                           ;extended_spi.c: 181: if (!buffer_full(buffer)) {
  3001                           
  3002                           ;incstack = 0
  3003  001B98  C008  F001         	movff	espi_master_receive@buffer,buffer_full@buffer
  3004  001B9C  C009  F002         	movff	espi_master_receive@buffer+1,buffer_full@buffer+1
  3005  001BA0  EC5D  F00B         	call	_buffer_full	;wreg free
  3006  001BA4  0900               	iorlw	0
  3007  001BA6  A4D8               	btfss	status,2,c
  3008  001BA8  0012               	return	
  3009                           
  3010                           ;extended_spi.c: 182: spi_send_get_byte(0x20);
  3011  001BAA  0E20               	movlw	32
  3012  001BAC  EC48  F00B         	call	_spi_send_get_byte
  3013                           
  3014                           ;extended_spi.c: 184: wait_pulse(0x20, timer_start, timer);
  3015  001BB0  C00A  F003         	movff	espi_master_receive@timer_start,wait_pulse@timer_start
  3016  001BB4  C00B  F004         	movff	espi_master_receive@timer_start+1,wait_pulse@timer_start+1
  3017  001BB8  C00C  F005         	movff	espi_master_receive@timer,wait_pulse@timer
  3018  001BBC  C00D  F006         	movff	espi_master_receive@timer+1,wait_pulse@timer+1
  3019  001BC0  0E20               	movlw	32
  3020  001BC2  EC76  F00C         	call	_wait_pulse
  3021                           
  3022                           ;extended_spi.c: 186: uint8_t received_1;
  3023                           ;extended_spi.c: 187: uint8_t received_2;
  3024                           ;extended_spi.c: 188: uint8_t value;
  3025                           ;extended_spi.c: 190: while (buffer_space(buffer)) {
  3026  001BC6  D02B               	goto	l1829
  3027  001BC8                     l1809:
  3028                           
  3029                           ;extended_spi.c: 191: received_1 = spi_send_get_byte(0xE0);
  3030  001BC8  0EE0               	movlw	224
  3031  001BCA  EC48  F00B         	call	_spi_send_get_byte
  3032  001BCE  6E0E               	movwf	espi_master_receive@received_1,c
  3033                           
  3034                           ;extended_spi.c: 192: send_delay();
  3035  001BD0  EC17  F00B         	call	_send_delay	;wreg free
  3036                           
  3037                           ;extended_spi.c: 193: if (received_1 == 0x30)
  3038  001BD4  0E30               	movlw	48
  3039  001BD6  180E               	xorwf	espi_master_receive@received_1,w,c
  3040  001BD8  B4D8               	btfsc	status,2,c
  3041  001BDA  0012               	return	
  3042  001BDC  D001               	goto	l1817
  3043                           
  3044                           ;extended_spi.c: 194: return;
  3045  001BDE  0012               	return	
  3046  001BE0                     l1817:
  3047                           
  3048                           ;extended_spi.c: 196: received_2 = spi_send_get_byte(0xE0);
  3049  001BE0  0EE0               	movlw	224
  3050  001BE2  EC48  F00B         	call	_spi_send_get_byte
  3051  001BE6  6E0F               	movwf	espi_master_receive@received_2,c
  3052                           
  3053                           ;extended_spi.c: 197: send_delay();
  3054  001BE8  EC17  F00B         	call	_send_delay	;wreg free
  3055                           
  3056                           ;extended_spi.c: 198: if (received_2 == 0x30)
  3057  001BEC  0E30               	movlw	48
  3058  001BEE  180F               	xorwf	espi_master_receive@received_2,w,c
  3059  001BF0  B4D8               	btfsc	status,2,c
  3060  001BF2  0012               	return	
  3061  001BF4  D001               	goto	l1825
  3062                           
  3063                           ;extended_spi.c: 199: return;
  3064  001BF6  0012               	return	
  3065  001BF8                     l1825:
  3066                           
  3067                           ;extended_spi.c: 201: decode_data(&value, received_1, received_2);
  3068  001BF8  0E10               	movlw	low espi_master_receive@value
  3069  001BFA  6E01               	movwf	decode_data@data,c
  3070  001BFC  0E00               	movlw	high espi_master_receive@value
  3071  001BFE  6E02               	movwf	decode_data@data+1,c
  3072  001C00  C00E  F003         	movff	espi_master_receive@received_1,decode_data@byte_1
  3073  001C04  C00F  F004         	movff	espi_master_receive@received_2,decode_data@byte_2
  3074  001C08  ECC1  F00B         	call	_decode_data	;wreg free
  3075                           
  3076                           ;extended_spi.c: 202: buffer_push(buffer, value);
  3077  001C0C  C008  F001         	movff	espi_master_receive@buffer,buffer_push@buffer
  3078  001C10  C009  F002         	movff	espi_master_receive@buffer+1,buffer_push@buffer+1
  3079  001C14  C010  F003         	movff	espi_master_receive@value,buffer_push@byte
  3080  001C18  ECEB  F00C         	call	_buffer_push	;wreg free
  3081  001C1C  D000               	goto	l1829
  3082  001C1E                     l1829:
  3083  001C1E  C008  F001         	movff	espi_master_receive@buffer,buffer_space@buffer
  3084  001C22  C009  F002         	movff	espi_master_receive@buffer+1,buffer_space@buffer+1
  3085  001C26  EC52  F00B         	call	_buffer_space	;wreg free
  3086  001C2A  0900               	iorlw	0
  3087  001C2C  A4D8               	btfss	status,2,c
  3088  001C2E  D7CC               	goto	l1809
  3089                           
  3090                           ;extended_spi.c: 203: }
  3091                           ;extended_spi.c: 205: spi_send_get_byte(0x30);
  3092  001C30  0E30               	movlw	48
  3093  001C32  EC48  F00B         	call	_spi_send_get_byte
  3094                           
  3095                           ;extended_spi.c: 206: send_delay();
  3096  001C36  EC17  F00B         	call	_send_delay	;wreg free
  3097  001C3A  0012               	return	
  3098  001C3C  0012               	return		;funcret
  3099  001C3E                     __end_of_espi_master_receive:
  3100                           	opt stack 0
  3101                           tblptru	equ	0xFF8
  3102                           tblptrh	equ	0xFF7
  3103                           tblptrl	equ	0xFF6
  3104                           tablat	equ	0xFF5
  3105                           prodh	equ	0xFF4
  3106                           prodl	equ	0xFF3
  3107                           intcon	equ	0xFF2
  3108                           intcon2	equ	0xFF1
  3109                           intcon3	equ	0xFF0
  3110                           postinc0	equ	0xFEE
  3111                           wreg	equ	0xFE8
  3112                           postdec1	equ	0xFE5
  3113                           plusw1	equ	0xFE3
  3114                           fsr1l	equ	0xFE1
  3115                           indf2	equ	0xFDF
  3116                           plusw2	equ	0xFDB
  3117                           fsr2h	equ	0xFDA
  3118                           fsr2l	equ	0xFD9
  3119                           status	equ	0xFD8
  3120                           
  3121 ;; *************** function _wait_pulse *****************
  3122 ;; Defined at:
  3123 ;;		line 125 in file "../TorqueGriper.X/extended_spi.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;  value           1    wreg     unsigned char 
  3126 ;;  timer_start     2    2[COMRAM] PTR FTN(int ,)void 
  3127 ;;		 -> set_timer3(0), 
  3128 ;;  timer           2    4[COMRAM] PTR FTN()unsigned char 
  3129 ;;		 -> timer3_up(1), 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  value           1    6[COMRAM] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;		None               void
  3134 ;; Registers used:
  3135 ;;		wreg, status,2, pclat, tosl, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0
  3141 ;;      Params:         4       0
  3142 ;;      Locals:         1       0
  3143 ;;      Temps:          0       0
  3144 ;;      Totals:         5       0
  3145 ;;Total ram usage:        5 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    1
  3148 ;; This function calls:
  3149 ;;		_set_timer3
  3150 ;;		_spi_send_get_byte
  3151 ;;		_timer3_up
  3152 ;; This function is called by:
  3153 ;;		_espi_master_send
  3154 ;;		_espi_master_receive
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text20
  3159  0018EC                     __ptext20:
  3160                           	opt stack 0
  3161  0018EC                     _wait_pulse:
  3162                           	opt stack 28
  3163                           
  3164                           ;incstack = 0
  3165                           ;wait_pulse@value stored from wreg
  3166  0018EC  6E07               	movwf	wait_pulse@value,c
  3167                           
  3168                           ;extended_spi.c: 128: (*timer_start)(54335);
  3169  0018EE  0ED4               	movlw	212
  3170  0018F0  6E02               	movwf	set_timer3@value+1,c
  3171  0018F2  0E3F               	movlw	63
  3172  0018F4  6E01               	movwf	set_timer3@value,c
  3173  0018F6  D801               	call	u1238
  3174  0018F8  D02D               	goto	l1747
  3175  0018FA                     u1238:
  3176  0018FA  0005               	push	
  3177  0018FC  6EFA               	movwf	pclath,c
  3178  0018FE  5003               	movf	wait_pulse@timer_start,w,c
  3179  001900  6EFD               	movwf	tosl,c
  3180  001902  5004               	movf	wait_pulse@timer_start+1,w,c
  3181  001904  6EFE               	movwf	tosh,c
  3182  001906  50F8               	movf	tblptru,w,c
  3183  001908  6EFF               	movwf	tosu,c
  3184  00190A  50FA               	movf	pclath,w,c
  3185  00190C  0012               	return		;indir
  3186  00190E                     l1741:
  3187                           
  3188                           ;extended_spi.c: 130: if ((*timer)()) {
  3189  00190E  D801               	call	u1248
  3190  001910  D00A               	goto	u1249
  3191  001912                     u1248:
  3192  001912  0005               	push	
  3193  001914  6EFA               	movwf	pclath,c
  3194  001916  5005               	movf	wait_pulse@timer,w,c
  3195  001918  6EFD               	movwf	tosl,c
  3196  00191A  5006               	movf	wait_pulse@timer+1,w,c
  3197  00191C  6EFE               	movwf	tosh,c
  3198  00191E  50F8               	movf	tblptru,w,c
  3199  001920  6EFF               	movwf	tosu,c
  3200  001922  50FA               	movf	pclath,w,c
  3201  001924  0012               	return		;indir
  3202  001926                     u1249:
  3203  001926  0900               	iorlw	0
  3204  001928  B4D8               	btfsc	status,2,c
  3205  00192A  D014               	goto	l1747
  3206                           
  3207                           ;extended_spi.c: 131: spi_send_get_byte(value);
  3208  00192C  5007               	movf	wait_pulse@value,w,c
  3209  00192E  EC48  F00B         	call	_spi_send_get_byte
  3210                           
  3211                           ;extended_spi.c: 132: (*timer_start)(54335);
  3212  001932  0ED4               	movlw	212
  3213  001934  6E02               	movwf	set_timer3@value+1,c
  3214  001936  0E3F               	movlw	63
  3215  001938  6E01               	movwf	set_timer3@value,c
  3216  00193A  D801               	call	u1268
  3217  00193C  D00B               	goto	l1747
  3218  00193E                     u1268:
  3219  00193E  0005               	push	
  3220  001940  6EFA               	movwf	pclath,c
  3221  001942  5003               	movf	wait_pulse@timer_start,w,c
  3222  001944  6EFD               	movwf	tosl,c
  3223  001946  5004               	movf	wait_pulse@timer_start+1,w,c
  3224  001948  6EFE               	movwf	tosh,c
  3225  00194A  50F8               	movf	tblptru,w,c
  3226  00194C  6EFF               	movwf	tosu,c
  3227  00194E  50FA               	movf	pclath,w,c
  3228  001950  0012               	return		;indir
  3229  001952  D000               	goto	l1747
  3230  001954                     l1747:
  3231  001954  A2F0               	btfss	intcon3,1,c	;volatile
  3232  001956  D7DB               	goto	l1741
  3233                           
  3234                           ;extended_spi.c: 133: }
  3235                           ;extended_spi.c: 134: }
  3236                           ;extended_spi.c: 135: INT2IF = 0;
  3237  001958  92F0               	bcf	intcon3,1,c	;volatile
  3238  00195A  0012               	return		;funcret
  3239  00195C                     __end_of_wait_pulse:
  3240                           	opt stack 0
  3241                           tosu	equ	0xFFF
  3242                           tosh	equ	0xFFE
  3243                           tosl	equ	0xFFD
  3244                           pclath	equ	0xFFA
  3245                           tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           prodh	equ	0xFF4
  3250                           prodl	equ	0xFF3
  3251                           intcon	equ	0xFF2
  3252                           intcon2	equ	0xFF1
  3253                           intcon3	equ	0xFF0
  3254                           postinc0	equ	0xFEE
  3255                           wreg	equ	0xFE8
  3256                           postdec1	equ	0xFE5
  3257                           plusw1	equ	0xFE3
  3258                           fsr1l	equ	0xFE1
  3259                           indf2	equ	0xFDF
  3260                           plusw2	equ	0xFDB
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function _timer3_up *****************
  3266 ;; Defined at:
  3267 ;;		line 74 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  1    wreg      unsigned char 
  3274 ;; Registers used:
  3275 ;;		wreg
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0
  3281 ;;      Params:         0       0
  3282 ;;      Locals:         0       0
  3283 ;;      Temps:          0       0
  3284 ;;      Totals:         0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; This function calls:
  3288 ;;		Nothing
  3289 ;; This function is called by:
  3290 ;;		_main
  3291 ;;		_wait_pulse
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text21
  3296  001650                     __ptext21:
  3297                           	opt stack 0
  3298  001650                     _timer3_up:
  3299                           	opt stack 28
  3300                           
  3301                           ;timers_pic.c: 76: return (PIR2bits.TMR3IF) ? 1 : 0;
  3302                           
  3303                           ;incstack = 0
  3304  001650  A2A1               	btfss	4001,1,c	;volatile
  3305  001652  D002               	goto	u1120
  3306  001654  0E01               	movlw	1
  3307  001656  0012               	return	
  3308  001658                     u1120:
  3309  001658  0E00               	movlw	0
  3310  00165A  0012               	return	
  3311  00165C  0012               	return		;funcret
  3312  00165E                     __end_of_timer3_up:
  3313                           	opt stack 0
  3314                           tosu	equ	0xFFF
  3315                           tosh	equ	0xFFE
  3316                           tosl	equ	0xFFD
  3317                           pclath	equ	0xFFA
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           prodh	equ	0xFF4
  3323                           prodl	equ	0xFF3
  3324                           intcon	equ	0xFF2
  3325                           intcon2	equ	0xFF1
  3326                           intcon3	equ	0xFF0
  3327                           postinc0	equ	0xFEE
  3328                           wreg	equ	0xFE8
  3329                           postdec1	equ	0xFE5
  3330                           plusw1	equ	0xFE3
  3331                           fsr1l	equ	0xFE1
  3332                           indf2	equ	0xFDF
  3333                           plusw2	equ	0xFDB
  3334                           fsr2h	equ	0xFDA
  3335                           fsr2l	equ	0xFD9
  3336                           status	equ	0xFD8
  3337                           
  3338 ;; *************** function _spi_send_get_byte *****************
  3339 ;; Defined at:
  3340 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;  byte            1    wreg     unsigned char 
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;  byte            1    0[COMRAM] unsigned char 
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      unsigned char 
  3347 ;; Registers used:
  3348 ;;		wreg, status,2
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMRAM   BANK0
  3354 ;;      Params:         0       0
  3355 ;;      Locals:         1       0
  3356 ;;      Temps:          0       0
  3357 ;;      Totals:         1       0
  3358 ;;Total ram usage:        1 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; This function calls:
  3361 ;;		Nothing
  3362 ;; This function is called by:
  3363 ;;		_wait_pulse
  3364 ;;		_espi_master_send
  3365 ;;		_espi_master_receive
  3366 ;;		_spi_send_data
  3367 ;;		_spi_master_get_data
  3368 ;;		_espi_slave_receive
  3369 ;;		_espi_slave_send
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text22
  3374  001690                     __ptext22:
  3375                           	opt stack 0
  3376  001690                     _spi_send_get_byte:
  3377                           	opt stack 28
  3378                           
  3379                           ;incstack = 0
  3380                           ;spi_send_get_byte@byte stored from wreg
  3381  001690  6E01               	movwf	spi_send_get_byte@byte,c
  3382                           
  3383                           ;spi_pic.c: 35: SSPBUF = byte;
  3384  001692  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  3385                           
  3386                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  3387  001696  D000               	goto	l113
  3388  001698                     l113:
  3389  001698  A0C7               	btfss	4039,0,c	;volatile
  3390  00169A  D7FE               	goto	l113
  3391                           
  3392                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  3393  00169C  BEC6               	btfsc	4038,7,c	;volatile
  3394                           
  3395                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  3396  00169E  9EC6               	bcf	4038,7,c	;volatile
  3397                           
  3398                           ;spi_pic.c: 39: return SSPBUF;
  3399  0016A0  50C9               	movf	4041,w,c	;volatile
  3400  0016A2  0012               	return		;funcret
  3401  0016A4                     __end_of_spi_send_get_byte:
  3402                           	opt stack 0
  3403                           tosu	equ	0xFFF
  3404                           tosh	equ	0xFFE
  3405                           tosl	equ	0xFFD
  3406                           pclath	equ	0xFFA
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           tblptrl	equ	0xFF6
  3410                           tablat	equ	0xFF5
  3411                           prodh	equ	0xFF4
  3412                           prodl	equ	0xFF3
  3413                           intcon	equ	0xFF2
  3414                           intcon2	equ	0xFF1
  3415                           intcon3	equ	0xFF0
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           postdec1	equ	0xFE5
  3419                           plusw1	equ	0xFE3
  3420                           fsr1l	equ	0xFE1
  3421                           indf2	equ	0xFDF
  3422                           plusw2	equ	0xFDB
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function _set_timer3 *****************
  3428 ;; Defined at:
  3429 ;;		line 60 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;  value           2    0[COMRAM] int 
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;		None               void
  3436 ;; Registers used:
  3437 ;;		None
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0
  3443 ;;      Params:         2       0
  3444 ;;      Locals:         0       0
  3445 ;;      Temps:          0       0
  3446 ;;      Totals:         2       0
  3447 ;;Total ram usage:        2 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; This function calls:
  3450 ;;		Nothing
  3451 ;; This function is called by:
  3452 ;;		_main
  3453 ;;		_wait_pulse
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text23
  3458  001638                     __ptext23:
  3459                           	opt stack 0
  3460  001638                     _set_timer3:
  3461                           	opt stack 28
  3462                           
  3463                           ;timers_pic.c: 62: PIR2bits.TMR3IF = 0;
  3464                           
  3465                           ;incstack = 0
  3466  001638  92A1               	bcf	4001,1,c	;volatile
  3467                           
  3468                           ;timers_pic.c: 63: TMR3 = value;
  3469  00163A  C001  FFB2         	movff	set_timer3@value,4018	;volatile
  3470  00163E  C002  FFB3         	movff	set_timer3@value+1,4019	;volatile
  3471  001642  0012               	return		;funcret
  3472  001644                     __end_of_set_timer3:
  3473                           	opt stack 0
  3474                           tosu	equ	0xFFF
  3475                           tosh	equ	0xFFE
  3476                           tosl	equ	0xFFD
  3477                           pclath	equ	0xFFA
  3478                           tblptru	equ	0xFF8
  3479                           tblptrh	equ	0xFF7
  3480                           tblptrl	equ	0xFF6
  3481                           tablat	equ	0xFF5
  3482                           prodh	equ	0xFF4
  3483                           prodl	equ	0xFF3
  3484                           intcon	equ	0xFF2
  3485                           intcon2	equ	0xFF1
  3486                           intcon3	equ	0xFF0
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           postdec1	equ	0xFE5
  3490                           plusw1	equ	0xFE3
  3491                           fsr1l	equ	0xFE1
  3492                           indf2	equ	0xFDF
  3493                           plusw2	equ	0xFDB
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function _send_delay *****************
  3499 ;; Defined at:
  3500 ;;		line 22 in file "../TorqueGriper.X/extended_spi.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;		None
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;		None
  3505 ;; Return value:  Size  Location     Type
  3506 ;;		None               void
  3507 ;; Registers used:
  3508 ;;		wreg
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0
  3514 ;;      Params:         0       0
  3515 ;;      Locals:         0       0
  3516 ;;      Temps:          0       0
  3517 ;;      Totals:         0       0
  3518 ;;Total ram usage:        0 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; This function calls:
  3521 ;;		Nothing
  3522 ;; This function is called by:
  3523 ;;		_espi_master_send
  3524 ;;		_espi_master_receive
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text24
  3529  00162E                     __ptext24:
  3530                           	opt stack 0
  3531  00162E                     _send_delay:
  3532                           	opt stack 29
  3533                           
  3534                           ;extended_spi.c: 24: _delay((unsigned long)((5)*(16000000/4000000.0)));
  3535                           
  3536                           ;incstack = 0
  3537  00162E  0E06               	movlw	6
  3538  001630                     u2037:
  3539  001630  2EE8               	decfsz	wreg,f,c
  3540  001632  D7FE               	goto	u2037
  3541  001634  D000               	nop2		;nop
  3542  001636  0012               	return		;funcret
  3543  001638                     __end_of_send_delay:
  3544                           	opt stack 0
  3545                           tosu	equ	0xFFF
  3546                           tosh	equ	0xFFE
  3547                           tosl	equ	0xFFD
  3548                           pclath	equ	0xFFA
  3549                           tblptru	equ	0xFF8
  3550                           tblptrh	equ	0xFF7
  3551                           tblptrl	equ	0xFF6
  3552                           tablat	equ	0xFF5
  3553                           prodh	equ	0xFF4
  3554                           prodl	equ	0xFF3
  3555                           intcon	equ	0xFF2
  3556                           intcon2	equ	0xFF1
  3557                           intcon3	equ	0xFF0
  3558                           postinc0	equ	0xFEE
  3559                           wreg	equ	0xFE8
  3560                           postdec1	equ	0xFE5
  3561                           plusw1	equ	0xFE3
  3562                           fsr1l	equ	0xFE1
  3563                           indf2	equ	0xFDF
  3564                           plusw2	equ	0xFDB
  3565                           fsr2h	equ	0xFDA
  3566                           fsr2l	equ	0xFD9
  3567                           status	equ	0xFD8
  3568                           
  3569 ;; *************** function _decode_data *****************
  3570 ;; Defined at:
  3571 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  data            2    0[COMRAM] PTR unsigned char 
  3574 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  3575 ;;  byte_1          1    2[COMRAM] unsigned char 
  3576 ;;  byte_2          1    3[COMRAM] unsigned char 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      char 
  3581 ;; Registers used:
  3582 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0
  3588 ;;      Params:         4       0
  3589 ;;      Locals:         0       0
  3590 ;;      Temps:          1       0
  3591 ;;      Totals:         5       0
  3592 ;;Total ram usage:        5 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; This function calls:
  3595 ;;		Nothing
  3596 ;; This function is called by:
  3597 ;;		_espi_master_receive
  3598 ;;		_espi_slave_receive
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           	psect	text25
  3603  001782                     __ptext25:
  3604                           	opt stack 0
  3605  001782                     _decode_data:
  3606                           	opt stack 29
  3607                           
  3608                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  3609                           
  3610                           ;incstack = 0
  3611  001782  5003               	movf	decode_data@byte_1,w,c
  3612  001784  0BF0               	andlw	240
  3613  001786  0AA0               	xorlw	160
  3614  001788  A4D8               	btfss	status,2,c
  3615  00178A  0012               	return	
  3616  00178C  D002               	goto	l1711
  3617                           
  3618                           ;encoding.c: 15: return -1;
  3619                           ;	Return value of _decode_data is never used
  3620  00178E  0012               	return	
  3621  001790  D008               	goto	l1715
  3622  001792                     l1711:
  3623                           
  3624                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  3625  001792  5004               	movf	decode_data@byte_2,w,c
  3626  001794  0BF0               	andlw	240
  3627  001796  0AA0               	xorlw	160
  3628  001798  A4D8               	btfss	status,2,c
  3629  00179A  0012               	return	
  3630  00179C  D002               	goto	l1715
  3631                           
  3632                           ;encoding.c: 17: return -2;
  3633                           ;	Return value of _decode_data is never used
  3634  00179E  0012               	return	
  3635  0017A0  D000               	goto	l1715
  3636  0017A2                     l1715:
  3637                           
  3638                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  3639  0017A2  C004  F005         	movff	decode_data@byte_2,??_decode_data
  3640  0017A6  0E0F               	movlw	15
  3641  0017A8  1605               	andwf	??_decode_data,f,c
  3642  0017AA  3803               	swapf	decode_data@byte_1,w,c
  3643  0017AC  0BF0               	andlw	240
  3644  0017AE  1005               	iorwf	??_decode_data,w,c
  3645  0017B0  C001  FFD9         	movff	decode_data@data,fsr2l
  3646  0017B4  C002  FFDA         	movff	decode_data@data+1,fsr2h
  3647  0017B8  6EDF               	movwf	indf2,c
  3648  0017BA  0012               	return	
  3649                           
  3650                           ;encoding.c: 21: return 0;
  3651                           ;	Return value of _decode_data is never used
  3652  0017BC  0012               	return		;funcret
  3653  0017BE                     __end_of_decode_data:
  3654                           	opt stack 0
  3655                           tosu	equ	0xFFF
  3656                           tosh	equ	0xFFE
  3657                           tosl	equ	0xFFD
  3658                           pclath	equ	0xFFA
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodh	equ	0xFF4
  3664                           prodl	equ	0xFF3
  3665                           intcon	equ	0xFF2
  3666                           intcon2	equ	0xFF1
  3667                           intcon3	equ	0xFF0
  3668                           postinc0	equ	0xFEE
  3669                           wreg	equ	0xFE8
  3670                           postdec1	equ	0xFE5
  3671                           plusw1	equ	0xFE3
  3672                           fsr1l	equ	0xFE1
  3673                           indf2	equ	0xFDF
  3674                           plusw2	equ	0xFDB
  3675                           fsr2h	equ	0xFDA
  3676                           fsr2l	equ	0xFD9
  3677                           status	equ	0xFD8
  3678                           
  3679 ;; *************** function _buffer_space *****************
  3680 ;; Defined at:
  3681 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3684 ;;		 -> main@receive(34), 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;		None
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      unsigned char 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0
  3696 ;;      Params:         2       0
  3697 ;;      Locals:         0       0
  3698 ;;      Temps:          0       0
  3699 ;;      Totals:         2       0
  3700 ;;Total ram usage:        2 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_espi_master_receive
  3706 ;;		_espi_slave_receive
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text26
  3711  0016A4                     __ptext26:
  3712                           	opt stack 0
  3713  0016A4                     _buffer_space:
  3714                           	opt stack 29
  3715                           
  3716                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  3717                           
  3718                           ;incstack = 0
  3719  0016A4  EE20 F001          	lfsr	2,1
  3720  0016A8  5001               	movf	buffer_space@buffer,w,c
  3721  0016AA  26D9               	addwf	fsr2l,f,c
  3722  0016AC  5002               	movf	buffer_space@buffer+1,w,c
  3723  0016AE  22DA               	addwfc	fsr2h,f,c
  3724  0016B0  50DF               	movf	indf2,w,c
  3725  0016B2  0800               	sublw	0
  3726  0016B4  0F20               	addlw	32
  3727  0016B6  0012               	return	
  3728  0016B8  0012               	return		;funcret
  3729  0016BA                     __end_of_buffer_space:
  3730                           	opt stack 0
  3731                           tosu	equ	0xFFF
  3732                           tosh	equ	0xFFE
  3733                           tosl	equ	0xFFD
  3734                           pclath	equ	0xFFA
  3735                           tblptru	equ	0xFF8
  3736                           tblptrh	equ	0xFF7
  3737                           tblptrl	equ	0xFF6
  3738                           tablat	equ	0xFF5
  3739                           prodh	equ	0xFF4
  3740                           prodl	equ	0xFF3
  3741                           intcon	equ	0xFF2
  3742                           intcon2	equ	0xFF1
  3743                           intcon3	equ	0xFF0
  3744                           postinc0	equ	0xFEE
  3745                           wreg	equ	0xFE8
  3746                           postdec1	equ	0xFE5
  3747                           plusw1	equ	0xFE3
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           plusw2	equ	0xFDB
  3751                           fsr2h	equ	0xFDA
  3752                           fsr2l	equ	0xFD9
  3753                           status	equ	0xFD8
  3754                           
  3755 ;; *************** function _buffer_push *****************
  3756 ;; Defined at:
  3757 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  3760 ;;		 -> main@receive(34), main@send(34), 
  3761 ;;  byte            1    2[COMRAM] unsigned char 
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;  current_posi    1    4[COMRAM] unsigned char 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  1    wreg      unsigned char 
  3766 ;; Registers used:
  3767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0
  3773 ;;      Params:         3       0
  3774 ;;      Locals:         1       0
  3775 ;;      Temps:          1       0
  3776 ;;      Totals:         5       0
  3777 ;;Total ram usage:        5 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; This function calls:
  3780 ;;		Nothing
  3781 ;; This function is called by:
  3782 ;;		_load_buffer
  3783 ;;		_espi_master_receive
  3784 ;;		_espi_slave_receive
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text27
  3789  0019D6                     __ptext27:
  3790                           	opt stack 0
  3791  0019D6                     _buffer_push:
  3792                           	opt stack 29
  3793                           
  3794                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  3795                           
  3796                           ;incstack = 0
  3797  0019D6  EE20 F001          	lfsr	2,1
  3798  0019DA  5001               	movf	buffer_push@buffer,w,c
  3799  0019DC  26D9               	addwf	fsr2l,f,c
  3800  0019DE  5002               	movf	buffer_push@buffer+1,w,c
  3801  0019E0  22DA               	addwfc	fsr2h,f,c
  3802  0019E2  0E20               	movlw	32
  3803  0019E4  18DE               	xorwf	postinc2,w,c
  3804  0019E6  A4D8               	btfss	status,2,c
  3805  0019E8  D002               	goto	l1679
  3806                           
  3807                           ;circular_buffer.c: 27: return 0;
  3808  0019EA  0E00               	movlw	0
  3809  0019EC  0012               	return	
  3810  0019EE                     l1679:
  3811                           
  3812                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  3813                           ;circular_buffer.c: 30: & (0x20 - 1);
  3814  0019EE  EE20 F001          	lfsr	2,1
  3815  0019F2  5001               	movf	buffer_push@buffer,w,c
  3816  0019F4  26D9               	addwf	fsr2l,f,c
  3817  0019F6  5002               	movf	buffer_push@buffer+1,w,c
  3818  0019F8  22DA               	addwfc	fsr2h,f,c
  3819  0019FA  50DF               	movf	indf2,w,c
  3820  0019FC  6E04               	movwf	??_buffer_push& (0+255),c
  3821  0019FE  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  3822  001A02  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  3823  001A06  50DF               	movf	indf2,w,c
  3824  001A08  2404               	addwf	??_buffer_push,w,c
  3825  001A0A  0B1F               	andlw	31
  3826  001A0C  6E05               	movwf	buffer_push@current_position,c
  3827                           
  3828                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  3829  001A0E  5005               	movf	buffer_push@current_position,w,c
  3830  001A10  0D01               	mullw	1
  3831  001A12  0E02               	movlw	2
  3832  001A14  26F3               	addwf	prodl,f,c
  3833  001A16  0E00               	movlw	0
  3834  001A18  22F4               	addwfc	prodh,f,c
  3835  001A1A  50F3               	movf	prodl,w,c
  3836  001A1C  2401               	addwf	buffer_push@buffer,w,c
  3837  001A1E  6ED9               	movwf	fsr2l,c
  3838  001A20  50F4               	movf	prodh,w,c
  3839  001A22  2002               	addwfc	buffer_push@buffer+1,w,c
  3840  001A24  6EDA               	movwf	fsr2h,c
  3841  001A26  C003  FFDF         	movff	buffer_push@byte,indf2
  3842                           
  3843                           ;circular_buffer.c: 32: buffer->count++;
  3844  001A2A  EE20 F001          	lfsr	2,1
  3845  001A2E  5001               	movf	buffer_push@buffer,w,c
  3846  001A30  26D9               	addwf	fsr2l,f,c
  3847  001A32  5002               	movf	buffer_push@buffer+1,w,c
  3848  001A34  22DA               	addwfc	fsr2h,f,c
  3849  001A36  2ADF               	incf	indf2,f,c
  3850                           
  3851                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  3852  001A38  EE20 F001          	lfsr	2,1
  3853  001A3C  5001               	movf	buffer_push@buffer,w,c
  3854  001A3E  26D9               	addwf	fsr2l,f,c
  3855  001A40  5002               	movf	buffer_push@buffer+1,w,c
  3856  001A42  22DA               	addwfc	fsr2h,f,c
  3857  001A44  0E20               	movlw	32
  3858  001A46  18DE               	xorwf	postinc2,w,c
  3859  001A48  A4D8               	btfss	status,2,c
  3860  001A4A  D002               	goto	u1150
  3861  001A4C  0E01               	movlw	1
  3862  001A4E  0012               	return	
  3863  001A50                     u1150:
  3864  001A50  0E00               	movlw	0
  3865  001A52  0012               	return	
  3866  001A54  0012               	return		;funcret
  3867  001A56                     __end_of_buffer_push:
  3868                           	opt stack 0
  3869                           tosu	equ	0xFFF
  3870                           tosh	equ	0xFFE
  3871                           tosl	equ	0xFFD
  3872                           pclath	equ	0xFFA
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           prodh	equ	0xFF4
  3878                           prodl	equ	0xFF3
  3879                           intcon	equ	0xFF2
  3880                           intcon2	equ	0xFF1
  3881                           intcon3	equ	0xFF0
  3882                           postinc0	equ	0xFEE
  3883                           wreg	equ	0xFE8
  3884                           postdec1	equ	0xFE5
  3885                           plusw1	equ	0xFE3
  3886                           fsr1l	equ	0xFE1
  3887                           indf2	equ	0xFDF
  3888                           postinc2	equ	0xFDE
  3889                           plusw2	equ	0xFDB
  3890                           fsr2h	equ	0xFDA
  3891                           fsr2l	equ	0xFD9
  3892                           status	equ	0xFD8
  3893                           
  3894 ;; *************** function _buffer_full *****************
  3895 ;; Defined at:
  3896 ;;		line 19 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3899 ;;		 -> main@receive(34), 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      unsigned char 
  3904 ;; Registers used:
  3905 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0
  3911 ;;      Params:         2       0
  3912 ;;      Locals:         0       0
  3913 ;;      Temps:          1       0
  3914 ;;      Totals:         3       0
  3915 ;;Total ram usage:        3 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; This function calls:
  3918 ;;		Nothing
  3919 ;; This function is called by:
  3920 ;;		_espi_master_receive
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text28
  3925  0016BA                     __ptext28:
  3926                           	opt stack 0
  3927  0016BA                     _buffer_full:
  3928                           	opt stack 29
  3929                           
  3930                           ;circular_buffer.c: 21: return (buffer->count == 0x20) ? 1 : 0;
  3931                           
  3932                           ;incstack = 0
  3933  0016BA  EE20 F001          	lfsr	2,1
  3934  0016BE  5001               	movf	buffer_full@buffer,w,c
  3935  0016C0  26D9               	addwf	fsr2l,f,c
  3936  0016C2  5002               	movf	buffer_full@buffer+1,w,c
  3937  0016C4  22DA               	addwfc	fsr2h,f,c
  3938  0016C6  0E20               	movlw	32
  3939  0016C8  18DE               	xorwf	postinc2,w,c
  3940  0016CA  A4D8               	btfss	status,2,c
  3941  0016CC  D002               	goto	u1280
  3942  0016CE  0E01               	movlw	1
  3943  0016D0  0012               	return	
  3944  0016D2                     u1280:
  3945  0016D2  0E00               	movlw	0
  3946  0016D4  0012               	return	
  3947  0016D6  0012               	return		;funcret
  3948  0016D8                     __end_of_buffer_full:
  3949                           	opt stack 0
  3950  0000                     tosu	equ	0xFFF
  3951                           tosh	equ	0xFFE
  3952                           tosl	equ	0xFFD
  3953                           pclath	equ	0xFFA
  3954                           tblptru	equ	0xFF8
  3955                           tblptrh	equ	0xFF7
  3956                           tblptrl	equ	0xFF6
  3957                           tablat	equ	0xFF5
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           intcon2	equ	0xFF1
  3962                           intcon3	equ	0xFF0
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postdec1	equ	0xFE5
  3966                           plusw1	equ	0xFE3
  3967                           fsr1l	equ	0xFE1
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           plusw2	equ	0xFDB
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           tosu	equ	0xFFF
  3975                           tosh	equ	0xFFE
  3976                           tosl	equ	0xFFD
  3977                           pclath	equ	0xFFA
  3978                           tblptru	equ	0xFF8
  3979                           tblptrh	equ	0xFF7
  3980                           tblptrl	equ	0xFF6
  3981                           tablat	equ	0xFF5
  3982                           prodh	equ	0xFF4
  3983                           prodl	equ	0xFF3
  3984                           intcon	equ	0xFF2
  3985                           intcon2	equ	0xFF1
  3986                           intcon3	equ	0xFF0
  3987                           postinc0	equ	0xFEE
  3988                           wreg	equ	0xFE8
  3989                           postdec1	equ	0xFE5
  3990                           plusw1	equ	0xFE3
  3991                           fsr1l	equ	0xFE1
  3992                           indf2	equ	0xFDF
  3993                           postinc2	equ	0xFDE
  3994                           plusw2	equ	0xFDB
  3995                           fsr2h	equ	0xFDA
  3996                           fsr2l	equ	0xFD9
  3997                           status	equ	0xFD8
  3998                           
  3999                           	psect	text29
  4000  000000                     __ptext29:
  4001                           	opt stack 0
  4002                           tosu	equ	0xFFF
  4003                           tosh	equ	0xFFE
  4004                           tosl	equ	0xFFD
  4005                           pclath	equ	0xFFA
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           prodh	equ	0xFF4
  4011                           prodl	equ	0xFF3
  4012                           intcon	equ	0xFF2
  4013                           intcon2	equ	0xFF1
  4014                           intcon3	equ	0xFF0
  4015                           postinc0	equ	0xFEE
  4016                           wreg	equ	0xFE8
  4017                           postdec1	equ	0xFE5
  4018                           plusw1	equ	0xFE3
  4019                           fsr1l	equ	0xFE1
  4020                           indf2	equ	0xFDF
  4021                           postinc2	equ	0xFDE
  4022                           plusw2	equ	0xFDB
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           
  4027                           	psect	rparam
  4028  0000                     tosu	equ	0xFFF
  4029                           tosh	equ	0xFFE
  4030                           tosl	equ	0xFFD
  4031                           pclath	equ	0xFFA
  4032                           tblptru	equ	0xFF8
  4033                           tblptrh	equ	0xFF7
  4034                           tblptrl	equ	0xFF6
  4035                           tablat	equ	0xFF5
  4036                           prodh	equ	0xFF4
  4037                           prodl	equ	0xFF3
  4038                           intcon	equ	0xFF2
  4039                           intcon2	equ	0xFF1
  4040                           intcon3	equ	0xFF0
  4041                           postinc0	equ	0xFEE
  4042                           wreg	equ	0xFE8
  4043                           postdec1	equ	0xFE5
  4044                           plusw1	equ	0xFE3
  4045                           fsr1l	equ	0xFE1
  4046                           indf2	equ	0xFDF
  4047                           postinc2	equ	0xFDE
  4048                           plusw2	equ	0xFDB
  4049                           fsr2h	equ	0xFDA
  4050                           fsr2l	equ	0xFD9
  4051                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     21      31
    BANK0           160     79     150

Pointer List with Targets:

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    buffer_full@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    espi_master_receive@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    espi_master_send@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_send@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 

    wait_pulse@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    wait_pulse@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    load_buffer@str	PTR unsigned char  size(2) Largest target is 3
		 -> main@name(BANK0[3]), 

    load_buffer@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 


Critical Paths under _main in COMRAM

    _main->_espi_master_send
    _pmwSingleModeSetUp->_setPulseWidth
    _load_buffer->_buffer_push
    _espi_setup->_setup_spi
    _espi_master_send->_wait_pulse
    _espi_master_receive->_wait_pulse
    _wait_pulse->_set_timer3

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                81    81      0    9232
                                             19 COMRAM     2     2      0
                                              0 BANK0     79    79      0
                       _buffer_count
                         _buffer_pop
                _espi_master_receive
                   _espi_master_send
                         _espi_setup
                        _load_buffer
                 _pmwSingleModeSetUp
                       _selectOutput
                      _setPulseWidth
                         _set_timer0
                       _setup_timer0
                       _setup_timer3
                      _step_backward
                       _step_forward
                _stepper_motor_setup
                          _timer0_up
 ---------------------------------------------------------------------------------
 (1) _timer0_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stepper_motor_setup                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _step_forward                                         1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _step_backward                                        1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _set_timer0                                           2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _selectOutput                                         3     2      1     174
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _pmwSingleModeSetUp                                   4     1      3     518
                                              4 COMRAM     4     1      3
                      _setPulseWidth
 ---------------------------------------------------------------------------------
 (1) _setPulseWidth                                        4     2      2     172
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _load_buffer                                          9     3      6    1127
                                              5 COMRAM     9     3      6
                        _buffer_push
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _espi_master_send                                    12     6      6    2855
                                              7 COMRAM    12     6      6
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     516
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     859
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     281
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     214
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_master_receive                                  9     3      6    2353
                                              7 COMRAM     9     3      6
                        _buffer_full
                        _buffer_push
                       _buffer_space
                        _decode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _wait_pulse                                           5     1      4     474
                                              2 COMRAM     5     1      4
                         _set_timer3 *
                  _spi_send_get_byte
                          _timer3_up *
 ---------------------------------------------------------------------------------
 (3) _timer3_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _spi_send_get_byte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _set_timer3                                           2     0      2     108
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _send_delay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     689
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _buffer_full                                          3     1      2      86
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buffer_count
   _buffer_pop
   _espi_master_receive
     _buffer_full
     _buffer_push
     _buffer_space
     _decode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
       _spi_send_get_byte *
       _timer3_up *
   _espi_master_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
       _spi_send_get_byte *
       _timer3_up *
   _espi_setup
     _setup_spi
   _load_buffer
     _buffer_push
   _pmwSingleModeSetUp
     _setPulseWidth
   _selectOutput
   _setPulseWidth
   _set_timer0
   _setup_timer0
   _setup_timer3
   _step_backward
   _step_forward
   _stepper_motor_setup
   _timer0_up

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     4F      96       4       93.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     15      1F       1       32.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B5       5        0.0%
DATA                 0      0      B5       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Aug 06 14:39:12 2015

           ?_pmwSingleModeSetUp 0005                     _SSPSTATbits 000FC7                             l113 1698  
                           l105 17F6                             l107 17E2                             l108 17F2  
                           l223 1774                             l225 176C                             l413 1CB0  
                           l416 1C8C                             l417 1CBA                             l418 1CC2  
                           l419 1CCA                             _PR2 000FCB   espi_master_receive@received_1 000E  
 espi_master_receive@received_2 000F                             prod 000FF3                             tosl 000FFD  
                           wreg 000FE8            ??_pmwSingleModeSetUp 0008                    __CFG_LVP$OFF 000000  
                          l2003 1FEE                            l1711 1792                            l1715 17A2  
                          l1741 190E                            l1727 185A                            l1825 1BF8  
                          l1817 1BE0                            l1809 1BC8                            l1657 1974  
                          l1841 1B1A                            l1747 1954                            l1907 1D7E  
                          l1843 1B36                            l1829 1C1E                            l1909 1D8C  
                          l1781 1C7A                            l1773 1C4C                            l1845 1B54  
                          l1837 1AFA                            l1679 19EE                            l1863 1A8A  
                          l1783 1C82                            l1775 1C56                            l1839 1B00  
                          l1873 1AD6                            l1865 1A90                            l1785 1C96  
                          l1777 1C6C                            l1769 1C44                            l1849 1B74  
                          l1953 1E3C                            l1883 1D16                            l1875 1ADC  
                          l1859 1A64                            l1867 1AA6                            l1795 1CD4  
                          l1779 1C72                            l1963 1ECC                            l1955 1E52  
                          l1869 1AB0                            l1949 1E18                            l1967 1EF4  
                          l1959 1E9A                            l1975 1F20                            l1889 1D38  
                          l1993 1FC8                            l1977 1F4C                            l1899 1D66  
                          l1987 1FB0                            l1979 1F62                            l1997 1FD8  
                          l1999 1FDE                            u1120 1658                            u1150 1A50  
                          u1400 1B0C                            u1420 1B26                            u2037 1630  
                          u1238 18FA                            _LATC 000F8B                            u1280 16D2  
                          u1248 1912                            u1440 1B42                            u1249 1926  
                          u1418 1B0E                            u1268 193E                            u1460 1B60  
                          u1438 1B28                            u1480 1666                            u1458 1B44  
                          u1581 1DD2                            u1478 1B62                    _step_forward 16FC  
                          u1591 1DE4                            _TMR0 000FD6                            _TMR1 000FCE  
                          _TMR3 000FB2                     main@receive 008D                            _main 1D9A  
                          fsr2h 000FDA                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9                   _step_backward 16D8                            prodh 000FF4  
                          prodl 000FF3                            start 0000           spi_send_get_byte@byte 0001  
                ??_buffer_count 0003                   __CFG_FOSC$IRC 000000                  ??_buffer_space 0003  
                  ___param_bank 000010            setup_spi@SSPCON1_reg 0001                    ?_load_buffer 0006  
                         ?_main 0001                           _T0CON 000FD5                           _T1CON 000FCD  
                         _T3CON 000FB1            __size_of_decode_data 003C                    _output_value 0016  
           _espi_master_receive 1B98                           pclath 000FFA                           tablat 000FF5  
                         plusw1 000FE3                           plusw2 000FDB                           status 000FD8  
          setup_spi@SSPSTAT_reg 0002                  ?_step_backward 0001        __end_of_espi_master_send 1D9A  
              buffer_pop@buffer 0001                 __initialization 1894                    __end_of_main 2000  
          ?_espi_master_receive 0008             selectOutput@outputs 0003                          ??_main 0014  
             _spi_send_get_byte 1690                   __activetblptr 000002               main@message_count 0065  
            ?_spi_send_get_byte 0001               buffer_full@buffer 0001               buffer_peek@buffer 0001  
               encode_data@data 0006                          _CCPR1L 000FBE           setup_timer0@T0CON_reg 0001  
           ??_spi_send_get_byte 0001                          _INT2IF 007F81                  __CFG_WDTEN$OFF 000000  
                        _INTCON 000FF2                          _SSPBUF 000FC9           __end_of_setPulseWidth 174A  
               decode_data@data 0001       pmwSingleModeSetUp@outputs 0007            __size_of_encode_data 0046  
               load_buffer@size 000A           ??_espi_master_receive 000E            __size_of_buffer_full 001E  
          __size_of_buffer_peek 0052            __size_of_buffer_push 0080       __end_of_spi_send_get_byte 16A4  
                        clear_0 189A    espi_master_send@byte_to_send 0010                    __pdataCOMRAM 0016  
               set_timer0@value 0001            __end_of_buffer_count 167E                 set_timer3@value 0001  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
         setup_timer3@T3CON_reg 0001            __end_of_buffer_space 16BA     __end_of_stepper_motor_setup 1690  
               ??_step_backward 0001                      __accesstop 0060         __end_of__initialization 18E2  
                 ___rparam_used 000001                  __pcstackCOMRAM 0001                    __pidataBANK0 1613  
            buffer_count@buffer 0001                  buffer_pop@byte 0005            __size_of_load_buffer 00A0  
      pmwSingleModeSetUp@scaler 0006                      __pbssBANK0 00AF                   _current_state 001E  
                 ?_selectOutput 0001      __size_of_spi_send_get_byte 0014                  main@continuous 0067  
             buffer_push@buffer 0001              __size_of_timer0_up 000E              __size_of_timer3_up 000E  
            __size_of_setup_spi 003E                      _buffer_pop 195C     __size_of_pmwSingleModeSetUp 00A8  
                       _PSTRCON 000FB9                         _SSPCON1 000FC6                         _SSPSTAT 000FC7  
     espi_master_receive@buffer 0008               ?_espi_master_send 0008                         __Hparam 0000  
                       __Lparam 0000                    load_buffer@i 000D              ??_espi_master_send 000E  
                ??_selectOutput 0002                      _espi_setup 174A                      _dummy_byte 001F  
                       __pcinit 1894                       _ANSELbits 000F7E                         __ramtop 0100  
         __size_of_buffer_count 0012                         __ptext0 1D9A                         __ptext1 165E  
                       __ptext2 167E                         __ptext3 16FC                         __ptext4 16D8  
                       __ptext5 161E                         __ptext6 1616                         __ptext7 1644  
                       __ptext8 1AF6                         __ptext9 1C3E           __size_of_buffer_space 0016  
                     _T2CONbits 000FCA                   ??_decode_data 0005            end_of_initialization 18E2  
                    _send_delay 162E                   __Lmediumconst 0000               __end_of_timer0_up 166C  
             __end_of_timer3_up 165E                    _buffer_count 166C               __end_of_setup_spi 17FC  
   espi_master_send@timer_start 000A                    _buffer_space 16A4                      _set_timer0 1644  
                    _set_timer3 1638                         postdec1 000FE5                         postinc0 000FEE  
                       postinc2 000FDE                      _wait_pulse 18EC                   ?_setup_timer0 0001  
                 ?_setup_timer3 0001                       _TRISAbits 000F92                       _TRISBbits 000F93  
                     _TRISCbits 000F94                     ?_buffer_pop 0001             __end_of_decode_data 17BE  
                 ??_encode_data 0005                     _CCP1CONbits 000FBD     __end_of_espi_master_receive 1C3E  
                    main@byte_1 0068                      main@byte_2 0069                   ??_buffer_full 0003  
                 ??_buffer_peek 0003                   ??_buffer_push 0004                     ?_espi_setup 0001  
               buffer_peek@byte 0005                   __pidataCOMRAM 1626                  espi_setup@mode 0003  
                ??_setup_timer0 0001                  ??_setup_timer3 0001          __size_of_setPulseWidth 002A  
           start_initialization 1894              selectOutput@toggle 0001                   ?_step_forward 0001  
          __end_of_selectOutput 1B98                     ?_send_delay 0001              buffer_space@buffer 0001  
         __end_of_step_backward 16FC    __size_of_stepper_motor_setup 0012                 buffer_push@byte 0003  
                load_buffer@str 0008                     ?_set_timer0 0001             __end_of_encode_data 1842  
                   ?_set_timer3 0001             __size_of_buffer_pop 007A                     __pdataBANK0 00F3  
                   ?_wait_pulse 0003                   ??_load_buffer 000C             __end_of_buffer_full 16D8  
           __end_of_buffer_peek 1894             __end_of_buffer_push 1A56                     _decode_data 1782  
                   __pbssCOMRAM 001E                   __pcstackBANK0 0060                  ??_step_forward 0001  
           __size_of_espi_setup 0038                   _setPulseWidth 1720      espi_master_send@received_1 000E  
    espi_master_send@received_2 000F           wait_pulse@timer_start 0003               encode_data@byte_1 0001  
             encode_data@byte_2 0003             __size_of_send_delay 000A       __size_of_espi_master_send 00B4  
    __end_of_pmwSingleModeSetUp 1CE6             __end_of_load_buffer 1AF6             __size_of_set_timer0 000C  
           __size_of_set_timer3 000C             __size_of_wait_pulse 0070                        _LATAbits 000F89  
                      _LATCbits 000F8B                     _encode_data 17FC                  ?_setPulseWidth 0001  
                      _PIE1bits 000F9D                        _PIE2bits 000FA0            __end_of_setup_timer0 161E  
          __end_of_setup_timer3 1626                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
                   _buffer_full 16BA                     _buffer_peek 1842                     _buffer_push 19D6  
                     _timer0_up 165E                       _timer3_up 1650                       main@F4005 00AF  
                     main@F4007 00D1                       main@F4009 00F3                       _setup_spi 17BE  
                     main@count 006A           __size_of_selectOutput 00A2                       main@right 0066  
                     main@value 0063  espi_master_receive@timer_start 000A                    ??_buffer_pop 0003  
             decode_data@byte_1 0003               decode_data@byte_2 0004                     _INTCON2bits 000FF1  
                   _INTCON3bits 000FF0                       copy_data0 18D6               load_buffer@buffer 0006  
                      __Hrparam 0000                        __Lrparam 0000                      ?_timer0_up 0001  
                    ?_timer3_up 0001                    ??_espi_setup 0003                 wait_pulse@value 0007  
               wait_pulse@timer 0005              __end_of_buffer_pop 19D6            __end_of_step_forward 1720  
                  _selectOutput 1AF6                      ?_setup_spi 0001                     _load_buffer 1A56  
           _stepper_motor_setup 167E                      _ANSELHbits 000F7F                        __ptext10 1720  
                      __ptext11 1A56                        __ptext20 18EC                        __ptext12 174A  
                      __ptext21 1650                        __ptext13 17BE                        __ptext22 1690  
                      __ptext14 1CE6                        __ptext23 1638                        __ptext15 17FC  
                      __ptext24 162E                        __ptext16 195C                        __ptext25 1782  
                      __ptext17 1842                        __ptext26 16A4                        __ptext18 166C  
                      __ptext27 19D6                        __ptext19 1B98                        __ptext28 16BA  
                      __ptext29 0000              __end_of_espi_setup 1782                    ??_send_delay 0001  
               ??_setPulseWidth 0003            ?_stepper_motor_setup 0001                   __size_of_main 0266  
                  ??_set_timer0 0003                    ??_set_timer3 0003    __size_of_espi_master_receive 00A6  
                  ??_wait_pulse 0007                        main@name 0060                        main@send 006B  
              _espi_master_send 1CE6              __end_of_send_delay 1638                      _INTCONbits 000FF2  
                  ?_decode_data 0001        espi_master_receive@value 0010        espi_master_receive@timer 000C  
            __end_of_set_timer0 1650              __end_of_set_timer3 1644           __size_of_setup_timer0 0008  
         __size_of_setup_timer3 0008           ??_stepper_motor_setup 0001              __end_of_wait_pulse 195C  
                    _OSCCONbits 000FD3                     ??_timer0_up 0001                     ??_timer3_up 0001  
                   ??_setup_spi 0002              setPulseWidth@width 0001          __size_of_step_backward 0024  
                   _PSTRCONbits 000FB9                    _setup_timer0 1616                    _setup_timer3 161E  
    pmwSingleModeSetUp@valuePR2 0005     buffer_push@current_position 0005                     _SSPCON1bits 000FC6  
    pmwSingleModeSetUp@polarity 0008              _pmwSingleModeSetUp 1C3E                    ?_encode_data 0001  
        espi_master_send@buffer 0008          espi_master_send@byte_1 0012          espi_master_send@byte_2 0013  
         __size_of_step_forward 0024                   ?_buffer_count 0001           espi_master_send@timer 000C  
                  ?_buffer_full 0001                    ?_buffer_peek 0001                   ?_buffer_space 0001  
                  ?_buffer_push 0001  
