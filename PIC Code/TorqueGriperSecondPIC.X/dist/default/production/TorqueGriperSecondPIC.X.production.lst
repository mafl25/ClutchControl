

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Jul 31 21:53:33 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    28  0000                     
    29 ;; Function _timer3_up is unused but had its address taken
    30  0000                     _TMR3	set	4018
    31  0000                     _ANSELHbits	set	3967
    32  0000                     _ANSELbits	set	3966
    33  0000                     _INTCON	set	4082
    34  0000                     _INTCON2bits	set	4081
    35  0000                     _INTCON3bits	set	4080
    36  0000                     _LATAbits	set	3977
    37  0000                     _LATCbits	set	3979
    38  0000                     _OSCCONbits	set	4051
    39  0000                     _PIE2bits	set	4000
    40  0000                     _PIR2bits	set	4001
    41  0000                     _PORTCbits	set	3970
    42  0000                     _SSPBUF	set	4041
    43  0000                     _SSPCON1	set	4038
    44  0000                     _SSPCON1bits	set	4038
    45  0000                     _SSPSTAT	set	4039
    46  0000                     _SSPSTATbits	set	4039
    47  0000                     _T3CON	set	4017
    48  0000                     _TRISAbits	set	3986
    49  0000                     _TRISBbits	set	3987
    50  0000                     _TRISCbits	set	3988
    51  0000                     _INT2IF	set	32641
    52                           
    53 ;;
    54 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    55 ;;
    56 ;; *************** function _main *****************
    57 ;; Defined at:
    58 ;;		line 11 in file "main.c"
    59 ;; Parameters:    Size  Location     Type
    60 ;;		None
    61 ;; Auto vars:     Size  Location     Type
    62 ;;  buffer         34   18[COMRAM] struct circular_buffer
    63 ;; Return value:  Size  Location     Type
    64 ;;                  2   16[None  ] int 
    65 ;; Registers used:
    66 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
    67 ;; Tracked objects:
    68 ;;		On entry : 0/0
    69 ;;		On exit  : 0/0
    70 ;;		Unchanged: 0/0
    71 ;; Data sizes:     COMRAM   BANK0
    72 ;;      Params:         0       0
    73 ;;      Locals:        34       0
    74 ;;      Temps:          0       0
    75 ;;      Totals:        34       0
    76 ;;Total ram usage:       34 bytes
    77 ;; Hardware stack levels required when called:    3
    78 ;; This function calls:
    79 ;;		_espi_master_receive
    80 ;;		_espi_master_send
    81 ;;		_espi_setup
    82 ;;		_setup_timer3
    83 ;; This function is called by:
    84 ;;		Startup code after reset
    85 ;; This function uses a non-reentrant model
    86 ;;
    87                           
    88                           	psect	text0
    89  001D4A                     __ptext0:
    90                           	opt stack 0
    91  001D4A                     _main:
    92                           	opt stack 28
    93                           
    94                           ;main.c: 12: OSCCONbits.IRCF = 0x07;
    95                           
    96                           ;incstack = 0
    97  001D4A  88D3               	bsf	4051,4,c	;volatile
    98  001D4C  8AD3               	bsf	4051,5,c	;volatile
    99  001D4E  8CD3               	bsf	4051,6,c	;volatile
   100                           
   101                           ;main.c: 14: espi_setup(0x00);
   102  001D50  0E00               	movlw	0
   103  001D52  EC02  F00E         	call	_espi_setup
   104                           
   105                           ;main.c: 15: setup_timer3(0x80 | 0x00 | 0x01);
   106  001D56  0E81               	movlw	129
   107  001D58  ECAD  F00D         	call	_setup_timer3
   108                           
   109                           ;main.c: 17: struct circular_buffer buffer = {0, 0, {0}};
   110  001D5C  EE20  F035         	lfsr	2,main@F3973
   111  001D60  EE10  F013         	lfsr	1,main@buffer
   112  001D64  0E21               	movlw	33
   113  001D66                     u721:
   114  001D66  CFDB FFE3          	movff	plusw2,plusw1
   115  001D6A  06E8               	decf	wreg,f,c
   116  001D6C  E2FC               	bc	u721
   117  001D6E  D000               	goto	l1309
   118  001D70                     l1309:
   119                           
   120                           ;main.c: 22: espi_master_receive(&buffer, &set_timer3, &timer3_up);
   121  001D70  0E13               	movlw	low main@buffer
   122  001D72  6E07               	movwf	espi_master_receive@buffer,c
   123  001D74  0E00               	movlw	high main@buffer
   124  001D76  6E08               	movwf	espi_master_receive@buffer+1,c
   125  001D78  0E62               	movlw	low _set_timer3
   126  001D7A  6E09               	movwf	espi_master_receive@timer_start,c
   127  001D7C  0E1B               	movlw	high _set_timer3
   128  001D7E  6E0A               	movwf	espi_master_receive@timer_start+1,c
   129  001D80  0E00               	movlw	0
   130  001D82  6E0B               	movwf	espi_master_receive@timer,c
   131  001D84  0E00               	movlw	0
   132  001D86  6E0C               	movwf	espi_master_receive@timer+1,c
   133  001D88  EC14  F00F         	call	_espi_master_receive	;wreg free
   134                           
   135                           ;main.c: 23: espi_master_send(&buffer, &set_timer3, &timer3_up);
   136  001D8C  0E13               	movlw	low main@buffer
   137  001D8E  6E07               	movwf	espi_master_send@buffer,c
   138  001D90  0E00               	movlw	high main@buffer
   139  001D92  6E08               	movwf	espi_master_send@buffer+1,c
   140  001D94  0E62               	movlw	low _set_timer3
   141  001D96  6E09               	movwf	espi_master_send@timer_start,c
   142  001D98  0E1B               	movlw	high _set_timer3
   143  001D9A  6E0A               	movwf	espi_master_send@timer_start+1,c
   144  001D9C  0E00               	movlw	0
   145  001D9E  6E0B               	movwf	espi_master_send@timer,c
   146  001DA0  0E00               	movlw	0
   147  001DA2  6E0C               	movwf	espi_master_send@timer+1,c
   148  001DA4  EC85  F00F         	call	_espi_master_send	;wreg free
   149  001DA8  D7E3               	goto	l1309
   150                           
   151                           ;main.c: 25: }
   152                           ;main.c: 27: return 0;
   153                           ;	Return value of _main is never used
   154  001DAA  EF00  F000         	goto	start
   155  001DAE                     __end_of_main:
   156                           	opt stack 0
   157                           wreg	equ	0xFE8
   158                           plusw1	equ	0xFE3
   159                           plusw2	equ	0xFDB
   160                           
   161                           	psect	cinit
   162  001BAA                     __pcinit:
   163                           	opt stack 0
   164  001BAA                     start_initialization:
   165                           	opt stack 0
   166  001BAA                     __initialization:
   167                           	opt stack 0
   168                           
   169                           ; Clear objects allocated to COMRAM (35 bytes)
   170  001BAA  EE00  F035         	lfsr	0,__pbssCOMRAM
   171  001BAE  0E23               	movlw	35
   172  001BB0                     clear_0:
   173  001BB0  6AEE               	clrf	postinc0,c
   174  001BB2  06E8               	decf	wreg,f,c
   175  001BB4  E1FD               	bnz	clear_0
   176  001BB6                     end_of_initialization:
   177                           	opt stack 0
   178  001BB6                     __end_of__initialization:
   179                           	opt stack 0
   180  001BB6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   181  001BB8  6EF8               	movwf	tblptru,c
   182  001BBA  0100               	movlb	0
   183  001BBC  EFA5  F00E         	goto	_main	;jump to C main() function
   184                           tblptru	equ	0xFF8
   185                           postinc0	equ	0xFEE
   186                           wreg	equ	0xFE8
   187                           plusw1	equ	0xFE3
   188                           plusw2	equ	0xFDB
   189                           
   190                           	psect	bssCOMRAM
   191  000035                     __pbssCOMRAM:
   192                           	opt stack 0
   193  000035                     main@F3973:
   194                           	opt stack 0
   195  000035                     	ds	34
   196  000057                     _dummy_byte:
   197                           	opt stack 0
   198  000057                     	ds	1
   199                           tblptru	equ	0xFF8
   200                           postinc0	equ	0xFEE
   201                           wreg	equ	0xFE8
   202                           plusw1	equ	0xFE3
   203                           plusw2	equ	0xFDB
   204                           
   205                           	psect	cstackCOMRAM
   206  000001                     __pcstackCOMRAM:
   207                           	opt stack 0
   208  000001                     ?_buffer_pop:
   209                           	opt stack 0
   210  000001                     setup_spi@SSPCON1_reg:
   211                           	opt stack 0
   212  000001                     spi_send_get_byte@byte:
   213                           	opt stack 0
   214  000001                     setup_timer3@T3CON_reg:
   215                           	opt stack 0
   216  000001                     buffer_count@buffer:
   217                           	opt stack 0
   218  000001                     buffer_space@buffer:
   219                           	opt stack 0
   220  000001                     buffer_empty@buffer:
   221                           	opt stack 0
   222  000001                     buffer_push@buffer:
   223                           	opt stack 0
   224  000001                     buffer_pop@buffer:
   225                           	opt stack 0
   226  000001                     encode_data@byte_1:
   227                           	opt stack 0
   228  000001                     decode_data@data:
   229                           	opt stack 0
   230  000001                     set_timer3@value:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x0
   234  000001                     	ds	1
   235  000002                     setup_spi@SSPSTAT_reg:
   236                           	opt stack 0
   237                           
   238                           ; 1 bytes @ 0x1
   239  000002                     	ds	1
   240  000003                     ??_buffer_pop:
   241  000003                     espi_setup@mode:
   242                           	opt stack 0
   243  000003                     buffer_push@byte:
   244                           	opt stack 0
   245  000003                     decode_data@byte_1:
   246                           	opt stack 0
   247  000003                     wait_pulse@timer_start:
   248                           	opt stack 0
   249  000003                     encode_data@byte_2:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x2
   253  000003                     	ds	1
   254  000004                     ??_buffer_push:
   255  000004                     decode_data@byte_2:
   256                           	opt stack 0
   257                           
   258                           ; 1 bytes @ 0x3
   259  000004                     	ds	1
   260  000005                     ??_decode_data:
   261  000005                     ??_encode_data:
   262  000005                     buffer_push@current_position:
   263                           	opt stack 0
   264  000005                     wait_pulse@timer:
   265                           	opt stack 0
   266  000005                     buffer_pop@byte:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x4
   270  000005                     	ds	1
   271  000006                     encode_data@data:
   272                           	opt stack 0
   273                           
   274                           ; 1 bytes @ 0x5
   275  000006                     	ds	1
   276  000007                     espi_master_send@buffer:
   277                           	opt stack 0
   278  000007                     espi_master_receive@buffer:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x6
   282  000007                     	ds	2
   283  000009                     espi_master_send@timer_start:
   284                           	opt stack 0
   285  000009                     espi_master_receive@timer_start:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x8
   289  000009                     	ds	2
   290  00000B                     espi_master_send@timer:
   291                           	opt stack 0
   292  00000B                     espi_master_receive@timer:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0xA
   296  00000B                     	ds	2
   297  00000D                     ??_espi_master_receive:
   298  00000D                     espi_master_send@received_1:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0xC
   302  00000D                     	ds	1
   303  00000E                     espi_master_send@received_2:
   304                           	opt stack 0
   305  00000E                     espi_master_receive@value:
   306                           	opt stack 0
   307                           
   308                           ; 1 bytes @ 0xD
   309  00000E                     	ds	1
   310  00000F                     espi_master_receive@received_1:
   311                           	opt stack 0
   312  00000F                     espi_master_send@byte_to_send:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0xE
   316  00000F                     	ds	1
   317  000010                     espi_master_receive@received_2:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0xF
   321  000010                     	ds	1
   322  000011                     espi_master_send@byte_1:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x10
   326  000011                     	ds	1
   327  000012                     espi_master_send@byte_2:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x11
   331  000012                     	ds	1
   332  000013                     main@buffer:
   333                           	opt stack 0
   334                           
   335                           ; 34 bytes @ 0x12
   336  000013                     	ds	34
   337                           tblptru	equ	0xFF8
   338                           postinc0	equ	0xFEE
   339                           wreg	equ	0xFE8
   340                           plusw1	equ	0xFE3
   341                           plusw2	equ	0xFDB
   342                           
   343 ;; *************** function _setup_timer3 *****************
   344 ;; Defined at:
   345 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;  T3CON_reg       1    wreg     unsigned char 
   348 ;; Auto vars:     Size  Location     Type
   349 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   350 ;; Return value:  Size  Location     Type
   351 ;;		None               void
   352 ;; Registers used:
   353 ;;		wreg
   354 ;; Tracked objects:
   355 ;;		On entry : 0/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMRAM   BANK0
   359 ;;      Params:         0       0
   360 ;;      Locals:         1       0
   361 ;;      Temps:          0       0
   362 ;;      Totals:         1       0
   363 ;;Total ram usage:        1 bytes
   364 ;; Hardware stack levels used:    1
   365 ;; This function calls:
   366 ;;		Nothing
   367 ;; This function is called by:
   368 ;;		_main
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372                           	psect	text1
   373  001B5A                     __ptext1:
   374                           	opt stack 0
   375  001B5A                     _setup_timer3:
   376                           	opt stack 30
   377                           
   378                           ;incstack = 0
   379                           ;setup_timer3@T3CON_reg stored from wreg
   380  001B5A  6E01               	movwf	setup_timer3@T3CON_reg,c
   381                           
   382                           ;timers_pic.c: 5: T3CON = T3CON_reg;
   383  001B5C  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   384  001B60  0012               	return		;funcret
   385  001B62                     __end_of_setup_timer3:
   386                           	opt stack 0
   387                           tblptru	equ	0xFF8
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           plusw1	equ	0xFE3
   391                           plusw2	equ	0xFDB
   392                           
   393 ;; *************** function _espi_setup *****************
   394 ;; Defined at:
   395 ;;		line 24 in file "../TorqueGriper.X/extended_spi.c"
   396 ;; Parameters:    Size  Location     Type
   397 ;;  mode            1    wreg     unsigned char 
   398 ;; Auto vars:     Size  Location     Type
   399 ;;  mode            1    2[COMRAM] unsigned char 
   400 ;; Return value:  Size  Location     Type
   401 ;;		None               void
   402 ;; Registers used:
   403 ;;		wreg, status,2, status,0, cstack
   404 ;; Tracked objects:
   405 ;;		On entry : 0/0
   406 ;;		On exit  : 0/0
   407 ;;		Unchanged: 0/0
   408 ;; Data sizes:     COMRAM   BANK0
   409 ;;      Params:         0       0
   410 ;;      Locals:         1       0
   411 ;;      Temps:          0       0
   412 ;;      Totals:         1       0
   413 ;;Total ram usage:        1 bytes
   414 ;; Hardware stack levels used:    1
   415 ;; Hardware stack levels required when called:    1
   416 ;; This function calls:
   417 ;;		_setup_spi
   418 ;; This function is called by:
   419 ;;		_main
   420 ;; This function uses a non-reentrant model
   421 ;;
   422                           
   423                           	psect	text2
   424  001C04                     __ptext2:
   425                           	opt stack 0
   426  001C04                     _espi_setup:
   427                           	opt stack 29
   428                           
   429                           ;incstack = 0
   430                           ;espi_setup@mode stored from wreg
   431  001C04  6E03               	movwf	espi_setup@mode,c
   432                           
   433                           ;extended_spi.c: 26: setup_spi(0, 0x20 | 0x10 | mode);
   434  001C06  5003               	movf	espi_setup@mode,w,c
   435  001C08  0930               	iorlw	48
   436  001C0A  6E01               	movwf	setup_spi@SSPCON1_reg,c
   437  001C0C  0E00               	movlw	0
   438  001C0E  EC3C  F00E         	call	_setup_spi
   439                           
   440                           ;extended_spi.c: 28: ANSELbits.ANS2 = 0;
   441  001C12  947E               	bcf	3966,2,c	;volatile
   442                           
   443                           ;extended_spi.c: 29: ANSELHbits.ANS8 = 0;
   444  001C14  907F               	bcf	3967,0,c	;volatile
   445                           
   446                           ;extended_spi.c: 31: if (mode == 0x04 || mode == 0x05) {
   447  001C16  0E04               	movlw	4
   448  001C18  1803               	xorwf	espi_setup@mode,w,c
   449  001C1A  B4D8               	btfsc	status,2,c
   450  001C1C  D004               	goto	l120
   451  001C1E  0E05               	movlw	5
   452  001C20  1803               	xorwf	espi_setup@mode,w,c
   453  001C22  A4D8               	btfss	status,2,c
   454  001C24  D004               	goto	l118
   455  001C26                     l120:
   456                           
   457                           ;extended_spi.c: 32: TRISAbits.RA2 = 0;
   458  001C26  9492               	bcf	3986,2,c	;volatile
   459                           
   460                           ;extended_spi.c: 33: LATAbits.LATA2 = 0;
   461  001C28  9489               	bcf	3977,2,c	;volatile
   462                           
   463                           ;extended_spi.c: 34: TRISCbits.RC6 = 1;
   464  001C2A  8C94               	bsf	3988,6,c	;volatile
   465                           
   466                           ;extended_spi.c: 35: } else {
   467  001C2C  0012               	return	
   468  001C2E                     l118:
   469                           
   470                           ;extended_spi.c: 36: TRISAbits.RA2 = 1;
   471  001C2E  8492               	bsf	3986,2,c	;volatile
   472                           
   473                           ;extended_spi.c: 37: TRISCbits.RC6 = 0;
   474  001C30  9C94               	bcf	3988,6,c	;volatile
   475                           
   476                           ;extended_spi.c: 38: LATCbits.LATC6 = 0;
   477  001C32  9C8B               	bcf	3979,6,c	;volatile
   478                           
   479                           ;extended_spi.c: 39: INTCON2bits.INTEDG2 = 1;
   480  001C34  88F1               	bsf	intcon2,4,c	;volatile
   481                           
   482                           ;extended_spi.c: 40: INTCON3bits.INT2E = 1;
   483  001C36  88F0               	bsf	intcon3,4,c	;volatile
   484  001C38  0012               	return	
   485  001C3A  0012               	return		;funcret
   486  001C3C                     __end_of_espi_setup:
   487                           	opt stack 0
   488                           tblptru	equ	0xFF8
   489                           intcon2	equ	0xFF1
   490                           intcon3	equ	0xFF0
   491                           postinc0	equ	0xFEE
   492                           wreg	equ	0xFE8
   493                           plusw1	equ	0xFE3
   494                           plusw2	equ	0xFDB
   495                           status	equ	0xFD8
   496                           
   497 ;; *************** function _setup_spi *****************
   498 ;; Defined at:
   499 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;  SSPSTAT_reg     1    wreg     unsigned char 
   502 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
   503 ;; Auto vars:     Size  Location     Type
   504 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
   505 ;; Return value:  Size  Location     Type
   506 ;;		None               void
   507 ;; Registers used:
   508 ;;		wreg, status,2, status,0
   509 ;; Tracked objects:
   510 ;;		On entry : 0/0
   511 ;;		On exit  : 0/0
   512 ;;		Unchanged: 0/0
   513 ;; Data sizes:     COMRAM   BANK0
   514 ;;      Params:         1       0
   515 ;;      Locals:         1       0
   516 ;;      Temps:          0       0
   517 ;;      Totals:         2       0
   518 ;;Total ram usage:        2 bytes
   519 ;; Hardware stack levels used:    1
   520 ;; This function calls:
   521 ;;		Nothing
   522 ;; This function is called by:
   523 ;;		_espi_setup
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527                           	psect	text3
   528  001C78                     __ptext3:
   529                           	opt stack 0
   530  001C78                     _setup_spi:
   531                           	opt stack 29
   532                           
   533                           ;incstack = 0
   534                           ;setup_spi@SSPSTAT_reg stored from wreg
   535  001C78  6E02               	movwf	setup_spi@SSPSTAT_reg,c
   536                           
   537                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
   538  001C7A  9E94               	bcf	3988,7,c	;volatile
   539                           
   540                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
   541  001C7C  947F               	bcf	3967,2,c	;volatile
   542                           
   543                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
   544  001C7E  8893               	bsf	3987,4,c	;volatile
   545                           
   546                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
   547  001C80  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
   548                           
   549                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
   550  001C84  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
   551                           
   552                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
   553  001C88  50C6               	movf	4038,w,c	;volatile
   554  001C8A  0B0F               	andlw	15
   555  001C8C  0A05               	xorlw	5
   556  001C8E  B4D8               	btfsc	status,2,c
   557  001C90  D005               	goto	l47
   558  001C92  50C6               	movf	4038,w,c	;volatile
   559  001C94  0B0F               	andlw	15
   560  001C96  0A04               	xorlw	4
   561  001C98  A4D8               	btfss	status,2,c
   562  001C9A  D00A               	goto	l45
   563  001C9C                     l47:
   564                           
   565                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
   566  001C9C  8C93               	bsf	3987,6,c	;volatile
   567                           
   568                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
   569  001C9E  50C6               	movf	4038,w,c	;volatile
   570  001CA0  0B0F               	andlw	15
   571  001CA2  0A04               	xorlw	4
   572  001CA4  A4D8               	btfss	status,2,c
   573  001CA6  D002               	goto	l48
   574                           
   575                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
   576  001CA8  907F               	bcf	3967,0,c	;volatile
   577                           
   578                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
   579  001CAA  8C94               	bsf	3988,6,c	;volatile
   580  001CAC                     l48:
   581                           
   582                           ;spi_pic.c: 26: }
   583                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
   584  001CAC  9EC7               	bcf	4039,7,c	;volatile
   585                           
   586                           ;spi_pic.c: 28: } else {
   587  001CAE  0012               	return	
   588  001CB0                     l45:
   589                           
   590                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
   591  001CB0  9C93               	bcf	3987,6,c	;volatile
   592  001CB2  0012               	return	
   593  001CB4  0012               	return		;funcret
   594  001CB6                     __end_of_setup_spi:
   595                           	opt stack 0
   596                           tblptru	equ	0xFF8
   597                           intcon2	equ	0xFF1
   598                           intcon3	equ	0xFF0
   599                           postinc0	equ	0xFEE
   600                           wreg	equ	0xFE8
   601                           plusw1	equ	0xFE3
   602                           plusw2	equ	0xFDB
   603                           status	equ	0xFD8
   604                           
   605 ;; *************** function _espi_master_send *****************
   606 ;; Defined at:
   607 ;;		line 119 in file "../TorqueGriper.X/extended_spi.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
   610 ;;		 -> main@buffer(34), 
   611 ;;  timer_start     2    8[COMRAM] PTR FTN(int ,)void 
   612 ;;		 -> set_timer3(0), 
   613 ;;  timer           2   10[COMRAM] PTR FTN()unsigned char 
   614 ;;		 -> timer3_up(1), 
   615 ;; Auto vars:     Size  Location     Type
   616 ;;  byte_to_send    2   14[COMRAM] unsigned int 
   617 ;;  byte_2          1   17[COMRAM] unsigned char 
   618 ;;  byte_1          1   16[COMRAM] unsigned char 
   619 ;;  received_2      1   13[COMRAM] unsigned char 
   620 ;;  received_1      1   12[COMRAM] unsigned char 
   621 ;; Return value:  Size  Location     Type
   622 ;;                  2    6[COMRAM] int 
   623 ;; Registers used:
   624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMRAM   BANK0
   630 ;;      Params:         6       0
   631 ;;      Locals:         6       0
   632 ;;      Temps:          0       0
   633 ;;      Totals:        12       0
   634 ;;Total ram usage:       12 bytes
   635 ;; Hardware stack levels used:    1
   636 ;; Hardware stack levels required when called:    2
   637 ;; This function calls:
   638 ;;		_buffer_count
   639 ;;		_buffer_pop
   640 ;;		_encode_data
   641 ;;		_send_delay
   642 ;;		_spi_send_get_byte
   643 ;;		_wait_pulse
   644 ;; This function is called by:
   645 ;;		_main
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           	psect	text4
   650  001F0A                     __ptext4:
   651                           	opt stack 0
   652  001F0A                     _espi_master_send:
   653                           	opt stack 28
   654                           
   655                           ;extended_spi.c: 123: if (buffer_count(buffer)) {
   656                           
   657                           ;incstack = 0
   658  001F0A  C007  F001         	movff	espi_master_send@buffer,buffer_count@buffer
   659  001F0E  C008  F002         	movff	espi_master_send@buffer+1,buffer_count@buffer+1
   660  001F12  ECB7  F00D         	call	_buffer_count	;wreg free
   661  001F16  0900               	iorlw	0
   662  001F18  B4D8               	btfsc	status,2,c
   663  001F1A  0012               	return	
   664                           
   665                           ;extended_spi.c: 124: spi_send_get_byte(0x10);
   666  001F1C  0E10               	movlw	16
   667  001F1E  ECC0  F00D         	call	_spi_send_get_byte
   668                           
   669                           ;extended_spi.c: 126: wait_pulse(0x10, timer_start, timer);
   670  001F22  C009  F003         	movff	espi_master_send@timer_start,wait_pulse@timer_start
   671  001F26  C00A  F004         	movff	espi_master_send@timer_start+1,wait_pulse@timer_start+1
   672  001F2A  C00B  F005         	movff	espi_master_send@timer,wait_pulse@timer
   673  001F2E  C00C  F006         	movff	espi_master_send@timer+1,wait_pulse@timer+1
   674  001F32  0E10               	movlw	16
   675  001F34  ECEE  F00D         	call	_wait_pulse
   676                           
   677                           ;extended_spi.c: 128: uint16_t byte_to_send = buffer_pop(buffer);
   678  001F38  C007  F001         	movff	espi_master_send@buffer,buffer_pop@buffer
   679  001F3C  C008  F002         	movff	espi_master_send@buffer+1,buffer_pop@buffer+1
   680  001F40  ECD7  F00E         	call	_buffer_pop	;wreg free
   681  001F44  C001  F00F         	movff	?_buffer_pop,espi_master_send@byte_to_send
   682  001F48  C002  F010         	movff	?_buffer_pop+1,espi_master_send@byte_to_send+1
   683                           
   684                           ;extended_spi.c: 129: uint8_t byte_1;
   685                           ;extended_spi.c: 130: uint8_t byte_2;
   686                           ;extended_spi.c: 131: encode_data(byte_to_send, &byte_1, &byte_2);
   687  001F4C  0E11               	movlw	low espi_master_send@byte_1
   688  001F4E  6E01               	movwf	encode_data@byte_1,c
   689  001F50  0E00               	movlw	high espi_master_send@byte_1
   690  001F52  6E02               	movwf	encode_data@byte_1+1,c
   691  001F54  0E12               	movlw	low espi_master_send@byte_2
   692  001F56  6E03               	movwf	encode_data@byte_2,c
   693  001F58  0E00               	movlw	high espi_master_send@byte_2
   694  001F5A  6E04               	movwf	encode_data@byte_2+1,c
   695  001F5C  500F               	movf	espi_master_send@byte_to_send,w,c
   696  001F5E  EC5B  F00E         	call	_encode_data
   697                           
   698                           ;extended_spi.c: 133: uint8_t received_1 = spi_send_get_byte(byte_1);
   699  001F62  5011               	movf	espi_master_send@byte_1,w,c
   700  001F64  ECC0  F00D         	call	_spi_send_get_byte
   701  001F68  6E0D               	movwf	espi_master_send@received_1,c
   702                           
   703                           ;extended_spi.c: 134: send_delay();
   704  001F6A  ECAA  F00D         	call	_send_delay	;wreg free
   705                           
   706                           ;extended_spi.c: 135: uint8_t received_2 = spi_send_get_byte(byte_2);
   707  001F6E  5012               	movf	espi_master_send@byte_2,w,c
   708  001F70  ECC0  F00D         	call	_spi_send_get_byte
   709  001F74  6E0E               	movwf	espi_master_send@received_2,c
   710                           
   711                           ;extended_spi.c: 136: send_delay();
   712  001F76  ECAA  F00D         	call	_send_delay	;wreg free
   713                           
   714                           ;extended_spi.c: 138: while (received_1 != 0x30 && received_2 != 0x30) {
   715  001F7A  D029               	goto	l1287
   716  001F7C                     l1271:
   717                           
   718                           ;extended_spi.c: 139: byte_to_send = buffer_pop(buffer);
   719  001F7C  C007  F001         	movff	espi_master_send@buffer,buffer_pop@buffer
   720  001F80  C008  F002         	movff	espi_master_send@buffer+1,buffer_pop@buffer+1
   721  001F84  ECD7  F00E         	call	_buffer_pop	;wreg free
   722  001F88  C001  F00F         	movff	?_buffer_pop,espi_master_send@byte_to_send
   723  001F8C  C002  F010         	movff	?_buffer_pop+1,espi_master_send@byte_to_send+1
   724                           
   725                           ;extended_spi.c: 140: if (byte_to_send == -1)
   726  001F90  280F               	incf	espi_master_send@byte_to_send,w,c
   727  001F92  E105               	bnz	l1277
   728  001F94  2810               	incf	espi_master_send@byte_to_send+1,w,c
   729  001F96  B4D8               	btfsc	status,2,c
   730  001F98  D024               	goto	l1291
   731  001F9A  D001               	goto	l1277
   732                           
   733                           ;extended_spi.c: 141: break;
   734  001F9C  D022               	goto	l1291
   735  001F9E                     l1277:
   736                           
   737                           ;extended_spi.c: 142: encode_data(byte_to_send, &byte_1, &byte_2);
   738  001F9E  0E11               	movlw	low espi_master_send@byte_1
   739  001FA0  6E01               	movwf	encode_data@byte_1,c
   740  001FA2  0E00               	movlw	high espi_master_send@byte_1
   741  001FA4  6E02               	movwf	encode_data@byte_1+1,c
   742  001FA6  0E12               	movlw	low espi_master_send@byte_2
   743  001FA8  6E03               	movwf	encode_data@byte_2,c
   744  001FAA  0E00               	movlw	high espi_master_send@byte_2
   745  001FAC  6E04               	movwf	encode_data@byte_2+1,c
   746  001FAE  500F               	movf	espi_master_send@byte_to_send,w,c
   747  001FB0  EC5B  F00E         	call	_encode_data
   748                           
   749                           ;extended_spi.c: 143: received_1 = spi_send_get_byte(byte_1);
   750  001FB4  5011               	movf	espi_master_send@byte_1,w,c
   751  001FB6  ECC0  F00D         	call	_spi_send_get_byte
   752  001FBA  6E0D               	movwf	espi_master_send@received_1,c
   753                           
   754                           ;extended_spi.c: 144: send_delay();
   755  001FBC  ECAA  F00D         	call	_send_delay	;wreg free
   756                           
   757                           ;extended_spi.c: 145: received_2 = spi_send_get_byte(byte_2);
   758  001FC0  5012               	movf	espi_master_send@byte_2,w,c
   759  001FC2  ECC0  F00D         	call	_spi_send_get_byte
   760  001FC6  6E0E               	movwf	espi_master_send@received_2,c
   761                           
   762                           ;extended_spi.c: 146: send_delay();
   763  001FC8  ECAA  F00D         	call	_send_delay	;wreg free
   764  001FCC  D000               	goto	l1287
   765  001FCE                     l1287:
   766  001FCE  0E30               	movlw	48
   767  001FD0  180D               	xorwf	espi_master_send@received_1,w,c
   768  001FD2  B4D8               	btfsc	status,2,c
   769  001FD4  D006               	goto	l1291
   770  001FD6  0E30               	movlw	48
   771  001FD8  180E               	xorwf	espi_master_send@received_2,w,c
   772  001FDA  B4D8               	btfsc	status,2,c
   773  001FDC  D002               	goto	l1291
   774  001FDE  D7CE               	goto	l1271
   775  001FE0  D000               	goto	l1291
   776  001FE2                     l1291:
   777                           
   778                           ;extended_spi.c: 147: }
   779                           ;extended_spi.c: 149: if (received_1 != 0x30 && received_2 != 0x30) {
   780  001FE2  0E30               	movlw	48
   781  001FE4  180D               	xorwf	espi_master_send@received_1,w,c
   782  001FE6  B4D8               	btfsc	status,2,c
   783  001FE8  0012               	return	
   784  001FEA  0E30               	movlw	48
   785  001FEC  180E               	xorwf	espi_master_send@received_2,w,c
   786  001FEE  B4D8               	btfsc	status,2,c
   787  001FF0  0012               	return	
   788                           
   789                           ;extended_spi.c: 150: spi_send_get_byte(0x30);
   790  001FF2  0E30               	movlw	48
   791  001FF4  ECC0  F00D         	call	_spi_send_get_byte
   792                           
   793                           ;extended_spi.c: 151: send_delay();
   794  001FF8  ECAA  F00D         	call	_send_delay	;wreg free
   795  001FFC  0012               	return	
   796                           
   797                           ;extended_spi.c: 152: }
   798                           ;extended_spi.c: 153: }
   799                           ;extended_spi.c: 155: return 0;
   800                           ;	Return value of _espi_master_send is never used
   801  001FFE  0012               	return		;funcret
   802  002000                     __end_of_espi_master_send:
   803                           	opt stack 0
   804                           tblptru	equ	0xFF8
   805                           intcon2	equ	0xFF1
   806                           intcon3	equ	0xFF0
   807                           postinc0	equ	0xFEE
   808                           wreg	equ	0xFE8
   809                           plusw1	equ	0xFE3
   810                           plusw2	equ	0xFDB
   811                           status	equ	0xFD8
   812                           
   813 ;; *************** function _encode_data *****************
   814 ;; Defined at:
   815 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;  data            1    wreg     unsigned char 
   818 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
   819 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
   820 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
   821 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  data            1    5[COMRAM] unsigned char 
   824 ;; Return value:  Size  Location     Type
   825 ;;		None               void
   826 ;; Registers used:
   827 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMRAM   BANK0
   833 ;;      Params:         4       0
   834 ;;      Locals:         1       0
   835 ;;      Temps:          1       0
   836 ;;      Totals:         6       0
   837 ;;Total ram usage:        6 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; This function calls:
   840 ;;		Nothing
   841 ;; This function is called by:
   842 ;;		_espi_master_send
   843 ;;		_espi_slave_send
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           	psect	text5
   848  001CB6                     __ptext5:
   849                           	opt stack 0
   850  001CB6                     _encode_data:
   851                           	opt stack 29
   852                           
   853                           ;incstack = 0
   854                           ;encode_data@data stored from wreg
   855  001CB6  6E06               	movwf	encode_data@data,c
   856                           
   857                           ;encoding.c: 5: *byte_1 = 0xA0;
   858  001CB8  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   859  001CBC  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   860  001CC0  0EA0               	movlw	160
   861  001CC2  6EDF               	movwf	indf2,c
   862                           
   863                           ;encoding.c: 6: *byte_2 = 0xA0;
   864  001CC4  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   865  001CC8  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   866  001CCC  0EA0               	movlw	160
   867  001CCE  6EDF               	movwf	indf2,c
   868                           
   869                           ;encoding.c: 8: *byte_1 |= data >> 4;
   870  001CD0  C006  F005         	movff	encode_data@data,??_encode_data
   871  001CD4  3A05               	swapf	??_encode_data,f,c
   872  001CD6  0E0F               	movlw	15
   873  001CD8  1605               	andwf	??_encode_data,f,c
   874  001CDA  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   875  001CDE  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   876  001CE2  5005               	movf	??_encode_data,w,c
   877  001CE4  12DF               	iorwf	indf2,f,c
   878                           
   879                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
   880  001CE6  C006  F005         	movff	encode_data@data,??_encode_data
   881  001CEA  0E0F               	movlw	15
   882  001CEC  1605               	andwf	??_encode_data,f,c
   883  001CEE  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   884  001CF2  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   885  001CF6  5005               	movf	??_encode_data,w,c
   886  001CF8  12DF               	iorwf	indf2,f,c
   887  001CFA  0012               	return		;funcret
   888  001CFC                     __end_of_encode_data:
   889                           	opt stack 0
   890                           tblptru	equ	0xFF8
   891                           intcon2	equ	0xFF1
   892                           intcon3	equ	0xFF0
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           plusw1	equ	0xFE3
   896                           indf2	equ	0xFDF
   897                           plusw2	equ	0xFDB
   898                           fsr2h	equ	0xFDA
   899                           fsr2l	equ	0xFD9
   900                           status	equ	0xFD8
   901                           
   902 ;; *************** function _buffer_pop *****************
   903 ;; Defined at:
   904 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
   907 ;;		 -> main@buffer(34), 
   908 ;; Auto vars:     Size  Location     Type
   909 ;;  byte            2    4[COMRAM] int 
   910 ;; Return value:  Size  Location     Type
   911 ;;                  2    0[COMRAM] int 
   912 ;; Registers used:
   913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0
   919 ;;      Params:         2       0
   920 ;;      Locals:         2       0
   921 ;;      Temps:          2       0
   922 ;;      Totals:         6       0
   923 ;;Total ram usage:        6 bytes
   924 ;; Hardware stack levels used:    1
   925 ;; This function calls:
   926 ;;		Nothing
   927 ;; This function is called by:
   928 ;;		_espi_master_send
   929 ;;		_espi_slave_send
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           	psect	text6
   934  001DAE                     __ptext6:
   935                           	opt stack 0
   936  001DAE                     _buffer_pop:
   937                           	opt stack 29
   938                           
   939                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
   940                           
   941                           ;incstack = 0
   942  001DAE  EE20 F001          	lfsr	2,1
   943  001DB2  5001               	movf	buffer_pop@buffer,w,c
   944  001DB4  26D9               	addwf	fsr2l,f,c
   945  001DB6  5002               	movf	buffer_pop@buffer+1,w,c
   946  001DB8  22DA               	addwfc	fsr2h,f,c
   947  001DBA  50DF               	movf	indf2,w,c
   948  001DBC  A4D8               	btfss	status,2,c
   949  001DBE  D003               	goto	l1169
   950                           
   951                           ;circular_buffer.c: 40: return -1;
   952  001DC0  6801               	setf	?_buffer_pop,c
   953  001DC2  6802               	setf	?_buffer_pop+1,c
   954  001DC4  0012               	return	
   955  001DC6                     l1169:
   956                           
   957                           ;circular_buffer.c: 41: }
   958                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
   959  001DC6  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
   960  001DCA  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   961  001DCE  50DF               	movf	indf2,w,c
   962  001DD0  6E03               	movwf	??_buffer_pop& (0+255),c
   963  001DD2  5003               	movf	??_buffer_pop,w,c
   964  001DD4  0D01               	mullw	1
   965  001DD6  0E02               	movlw	2
   966  001DD8  26F3               	addwf	prodl,f,c
   967  001DDA  0E00               	movlw	0
   968  001DDC  22F4               	addwfc	prodh,f,c
   969  001DDE  50F3               	movf	prodl,w,c
   970  001DE0  2401               	addwf	buffer_pop@buffer,w,c
   971  001DE2  6ED9               	movwf	fsr2l,c
   972  001DE4  50F4               	movf	prodh,w,c
   973  001DE6  2002               	addwfc	buffer_pop@buffer+1,w,c
   974  001DE8  6EDA               	movwf	fsr2h,c
   975  001DEA  50DF               	movf	indf2,w,c
   976  001DEC  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
   977  001DEE  5004               	movf	??_buffer_pop+1,w,c
   978  001DF0  6E05               	movwf	buffer_pop@byte,c
   979  001DF2  6A06               	clrf	buffer_pop@byte+1,c
   980                           
   981                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
   982  001DF4  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
   983  001DF8  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   984  001DFC  50DF               	movf	indf2,w,c
   985  001DFE  6E03               	movwf	??_buffer_pop& (0+255),c
   986  001E00  2803               	incf	??_buffer_pop,w,c
   987  001E02  0B1F               	andlw	31
   988  001E04  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
   989  001E08  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   990  001E0C  6EDF               	movwf	indf2,c
   991                           
   992                           ;circular_buffer.c: 45: buffer->count--;
   993  001E0E  EE20 F001          	lfsr	2,1
   994  001E12  5001               	movf	buffer_pop@buffer,w,c
   995  001E14  26D9               	addwf	fsr2l,f,c
   996  001E16  5002               	movf	buffer_pop@buffer+1,w,c
   997  001E18  22DA               	addwfc	fsr2h,f,c
   998  001E1A  06DF               	decf	indf2,f,c
   999                           
  1000                           ;circular_buffer.c: 47: return byte;
  1001  001E1C  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  1002  001E20  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  1003  001E24  0012               	return	
  1004  001E26  0012               	return		;funcret
  1005  001E28                     __end_of_buffer_pop:
  1006                           	opt stack 0
  1007                           tblptru	equ	0xFF8
  1008                           prodh	equ	0xFF4
  1009                           prodl	equ	0xFF3
  1010                           intcon2	equ	0xFF1
  1011                           intcon3	equ	0xFF0
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           plusw1	equ	0xFE3
  1015                           indf2	equ	0xFDF
  1016                           plusw2	equ	0xFDB
  1017                           fsr2h	equ	0xFDA
  1018                           fsr2l	equ	0xFD9
  1019                           status	equ	0xFD8
  1020                           
  1021 ;; *************** function _buffer_count *****************
  1022 ;; Defined at:
  1023 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1026 ;;		 -> main@buffer(34), 
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;		None
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      unsigned char 
  1031 ;; Registers used:
  1032 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMRAM   BANK0
  1038 ;;      Params:         2       0
  1039 ;;      Locals:         0       0
  1040 ;;      Temps:          0       0
  1041 ;;      Totals:         2       0
  1042 ;;Total ram usage:        2 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; This function calls:
  1045 ;;		Nothing
  1046 ;; This function is called by:
  1047 ;;		_espi_master_send
  1048 ;;		_espi_slave_send
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           	psect	text7
  1053  001B6E                     __ptext7:
  1054                           	opt stack 0
  1055  001B6E                     _buffer_count:
  1056                           	opt stack 29
  1057                           
  1058                           ;circular_buffer.c: 6: return buffer->count;
  1059                           
  1060                           ;incstack = 0
  1061  001B6E  EE20 F001          	lfsr	2,1
  1062  001B72  5001               	movf	buffer_count@buffer,w,c
  1063  001B74  26D9               	addwf	fsr2l,f,c
  1064  001B76  5002               	movf	buffer_count@buffer+1,w,c
  1065  001B78  22DA               	addwfc	fsr2h,f,c
  1066  001B7A  50DF               	movf	indf2,w,c
  1067  001B7C  0012               	return	
  1068  001B7E  0012               	return		;funcret
  1069  001B80                     __end_of_buffer_count:
  1070                           	opt stack 0
  1071                           tblptru	equ	0xFF8
  1072                           prodh	equ	0xFF4
  1073                           prodl	equ	0xFF3
  1074                           intcon2	equ	0xFF1
  1075                           intcon3	equ	0xFF0
  1076                           postinc0	equ	0xFEE
  1077                           wreg	equ	0xFE8
  1078                           plusw1	equ	0xFE3
  1079                           indf2	equ	0xFDF
  1080                           plusw2	equ	0xFDB
  1081                           fsr2h	equ	0xFDA
  1082                           fsr2l	equ	0xFD9
  1083                           status	equ	0xFD8
  1084                           
  1085 ;; *************** function _espi_master_receive *****************
  1086 ;; Defined at:
  1087 ;;		line 158 in file "../TorqueGriper.X/extended_spi.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  1090 ;;		 -> main@buffer(34), 
  1091 ;;  timer_start     2    8[COMRAM] PTR FTN(int ,)void 
  1092 ;;		 -> set_timer3(0), 
  1093 ;;  timer           2   10[COMRAM] PTR FTN()unsigned char 
  1094 ;;		 -> timer3_up(1), 
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;  value           1   13[COMRAM] unsigned char 
  1097 ;;  received_2      1   15[COMRAM] unsigned char 
  1098 ;;  received_1      1   14[COMRAM] unsigned char 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  2    6[COMRAM] int 
  1101 ;; Registers used:
  1102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0
  1108 ;;      Params:         6       0
  1109 ;;      Locals:         3       0
  1110 ;;      Temps:          1       0
  1111 ;;      Totals:        10       0
  1112 ;;Total ram usage:       10 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    2
  1115 ;; This function calls:
  1116 ;;		_buffer_empty
  1117 ;;		_buffer_push
  1118 ;;		_buffer_space
  1119 ;;		_decode_data
  1120 ;;		_send_delay
  1121 ;;		_spi_send_get_byte
  1122 ;;		_wait_pulse
  1123 ;; This function is called by:
  1124 ;;		_main
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           	psect	text8
  1129  001E28                     __ptext8:
  1130                           	opt stack 0
  1131  001E28                     _espi_master_receive:
  1132                           	opt stack 28
  1133                           
  1134                           ;extended_spi.c: 162: if (buffer_empty(buffer)) {
  1135                           
  1136                           ;incstack = 0
  1137  001E28  C007  F001         	movff	espi_master_receive@buffer,buffer_empty@buffer
  1138  001E2C  C008  F002         	movff	espi_master_receive@buffer+1,buffer_empty@buffer+1
  1139  001E30  ECE0  F00D         	call	_buffer_empty	;wreg free
  1140  001E34  0900               	iorlw	0
  1141  001E36  B4D8               	btfsc	status,2,c
  1142  001E38  0012               	return	
  1143                           
  1144                           ;extended_spi.c: 163: spi_send_get_byte(0x20);
  1145  001E3A  0E20               	movlw	32
  1146  001E3C  ECC0  F00D         	call	_spi_send_get_byte
  1147                           
  1148                           ;extended_spi.c: 165: wait_pulse(0x20, timer_start, timer);
  1149  001E40  C009  F003         	movff	espi_master_receive@timer_start,wait_pulse@timer_start
  1150  001E44  C00A  F004         	movff	espi_master_receive@timer_start+1,wait_pulse@timer_start+1
  1151  001E48  C00B  F005         	movff	espi_master_receive@timer,wait_pulse@timer
  1152  001E4C  C00C  F006         	movff	espi_master_receive@timer+1,wait_pulse@timer+1
  1153  001E50  0E20               	movlw	32
  1154  001E52  ECEE  F00D         	call	_wait_pulse
  1155                           
  1156                           ;extended_spi.c: 167: uint8_t received_1 = spi_send_get_byte(0xE0);
  1157  001E56  0EE0               	movlw	224
  1158  001E58  ECC0  F00D         	call	_spi_send_get_byte
  1159  001E5C  6E0F               	movwf	espi_master_receive@received_1,c
  1160                           
  1161                           ;extended_spi.c: 168: send_delay();
  1162  001E5E  ECAA  F00D         	call	_send_delay	;wreg free
  1163                           
  1164                           ;extended_spi.c: 169: uint8_t received_2 = spi_send_get_byte(0xE0);
  1165  001E62  0EE0               	movlw	224
  1166  001E64  ECC0  F00D         	call	_spi_send_get_byte
  1167  001E68  6E10               	movwf	espi_master_receive@received_2,c
  1168                           
  1169                           ;extended_spi.c: 170: send_delay();
  1170  001E6A  ECAA  F00D         	call	_send_delay	;wreg free
  1171                           
  1172                           ;extended_spi.c: 171: if (received_1 != 0x30 && received_2 != 0x30) {
  1173  001E6E  0E30               	movlw	48
  1174  001E70  180F               	xorwf	espi_master_receive@received_1,w,c
  1175  001E72  B4D8               	btfsc	status,2,c
  1176  001E74  0012               	return	
  1177  001E76  0E30               	movlw	48
  1178  001E78  1810               	xorwf	espi_master_receive@received_2,w,c
  1179  001E7A  B4D8               	btfsc	status,2,c
  1180  001E7C  0012               	return	
  1181                           
  1182                           ;extended_spi.c: 172: uint8_t value;
  1183                           ;extended_spi.c: 173: while (buffer_space(buffer) > 5) {
  1184  001E7E  D02B               	goto	l1241
  1185  001E80                     l1221:
  1186                           
  1187                           ;extended_spi.c: 174: decode_data(&value, received_1, received_2);
  1188  001E80  0E0E               	movlw	low espi_master_receive@value
  1189  001E82  6E01               	movwf	decode_data@data,c
  1190  001E84  0E00               	movlw	high espi_master_receive@value
  1191  001E86  6E02               	movwf	decode_data@data+1,c
  1192  001E88  C00F  F003         	movff	espi_master_receive@received_1,decode_data@byte_1
  1193  001E8C  C010  F004         	movff	espi_master_receive@received_2,decode_data@byte_2
  1194  001E90  EC1E  F00E         	call	_decode_data	;wreg free
  1195                           
  1196                           ;extended_spi.c: 175: buffer_push(buffer, value);
  1197  001E94  C007  F001         	movff	espi_master_receive@buffer,buffer_push@buffer
  1198  001E98  C008  F002         	movff	espi_master_receive@buffer+1,buffer_push@buffer+1
  1199  001E9C  C00E  F003         	movff	espi_master_receive@value,buffer_push@byte
  1200  001EA0  EC7E  F00E         	call	_buffer_push	;wreg free
  1201                           
  1202                           ;extended_spi.c: 177: received_1 = spi_send_get_byte(0xE0);
  1203  001EA4  0EE0               	movlw	224
  1204  001EA6  ECC0  F00D         	call	_spi_send_get_byte
  1205  001EAA  6E0F               	movwf	espi_master_receive@received_1,c
  1206                           
  1207                           ;extended_spi.c: 178: if (received_1 == 0x30)
  1208  001EAC  0E30               	movlw	48
  1209  001EAE  180F               	xorwf	espi_master_receive@received_1,w,c
  1210  001EB0  B4D8               	btfsc	status,2,c
  1211  001EB2  D01C               	goto	l1243
  1212  001EB4  D001               	goto	l1231
  1213                           
  1214                           ;extended_spi.c: 179: break;
  1215  001EB6  D01A               	goto	l1243
  1216  001EB8                     l1231:
  1217                           
  1218                           ;extended_spi.c: 180: send_delay();
  1219  001EB8  ECAA  F00D         	call	_send_delay	;wreg free
  1220                           
  1221                           ;extended_spi.c: 181: received_2 = spi_send_get_byte(0xE0);
  1222  001EBC  0EE0               	movlw	224
  1223  001EBE  ECC0  F00D         	call	_spi_send_get_byte
  1224  001EC2  6E10               	movwf	espi_master_receive@received_2,c
  1225                           
  1226                           ;extended_spi.c: 182: if (received_2 == 0x30)
  1227  001EC4  0E30               	movlw	48
  1228  001EC6  1810               	xorwf	espi_master_receive@received_2,w,c
  1229  001EC8  B4D8               	btfsc	status,2,c
  1230  001ECA  D010               	goto	l1243
  1231  001ECC  D001               	goto	l1239
  1232                           
  1233                           ;extended_spi.c: 183: break;
  1234  001ECE  D00E               	goto	l1243
  1235  001ED0                     l1239:
  1236                           
  1237                           ;extended_spi.c: 184: send_delay();
  1238  001ED0  ECAA  F00D         	call	_send_delay	;wreg free
  1239  001ED4  D000               	goto	l1241
  1240  001ED6                     l1241:
  1241  001ED6  C007  F001         	movff	espi_master_receive@buffer,buffer_space@buffer
  1242  001EDA  C008  F002         	movff	espi_master_receive@buffer+1,buffer_space@buffer+1
  1243  001EDE  ECCA  F00D         	call	_buffer_space	;wreg free
  1244  001EE2  6E0D               	movwf	??_espi_master_receive& (0+255),c
  1245  001EE4  0E06               	movlw	6
  1246  001EE6  600D               	cpfslt	??_espi_master_receive,c
  1247  001EE8  D7CB               	goto	l1221
  1248  001EEA  D000               	goto	l1243
  1249  001EEC                     l1243:
  1250                           
  1251                           ;extended_spi.c: 185: }
  1252                           ;extended_spi.c: 187: if (received_1 != 0x30 && received_2 != 0x30) {
  1253  001EEC  0E30               	movlw	48
  1254  001EEE  180F               	xorwf	espi_master_receive@received_1,w,c
  1255  001EF0  B4D8               	btfsc	status,2,c
  1256  001EF2  0012               	return	
  1257  001EF4  0E30               	movlw	48
  1258  001EF6  1810               	xorwf	espi_master_receive@received_2,w,c
  1259  001EF8  B4D8               	btfsc	status,2,c
  1260  001EFA  0012               	return	
  1261                           
  1262                           ;extended_spi.c: 188: spi_send_get_byte(0x30);
  1263  001EFC  0E30               	movlw	48
  1264  001EFE  ECC0  F00D         	call	_spi_send_get_byte
  1265                           
  1266                           ;extended_spi.c: 189: send_delay();
  1267  001F02  ECAA  F00D         	call	_send_delay	;wreg free
  1268  001F06  0012               	return	
  1269                           
  1270                           ;extended_spi.c: 190: }
  1271                           ;extended_spi.c: 191: }
  1272                           ;extended_spi.c: 192: }
  1273                           ;extended_spi.c: 194: return 0;
  1274                           ;	Return value of _espi_master_receive is never used
  1275  001F08  0012               	return		;funcret
  1276  001F0A                     __end_of_espi_master_receive:
  1277                           	opt stack 0
  1278                           tblptru	equ	0xFF8
  1279                           prodh	equ	0xFF4
  1280                           prodl	equ	0xFF3
  1281                           intcon2	equ	0xFF1
  1282                           intcon3	equ	0xFF0
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           plusw1	equ	0xFE3
  1286                           indf2	equ	0xFDF
  1287                           plusw2	equ	0xFDB
  1288                           fsr2h	equ	0xFDA
  1289                           fsr2l	equ	0xFD9
  1290                           status	equ	0xFD8
  1291                           
  1292 ;; *************** function _wait_pulse *****************
  1293 ;; Defined at:
  1294 ;;		line 106 in file "../TorqueGriper.X/extended_spi.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  value           1    wreg     unsigned char 
  1297 ;;  timer_start     2    2[COMRAM] PTR FTN(int ,)void 
  1298 ;;		 -> set_timer3(0), 
  1299 ;;  timer           2    4[COMRAM] PTR FTN()unsigned char 
  1300 ;;		 -> timer3_up(1), 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  value           1    0[COMRAM] unsigned char 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;		None               void
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, pclat, tosl, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0
  1312 ;;      Params:         4       0
  1313 ;;      Locals:         0       0
  1314 ;;      Temps:          0       0
  1315 ;;      Totals:         4       0
  1316 ;;Total ram usage:        4 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    1
  1319 ;; This function calls:
  1320 ;;		_set_timer3
  1321 ;; This function is called by:
  1322 ;;		_espi_master_send
  1323 ;;		_espi_master_receive
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text9
  1328  001BDC                     __ptext9:
  1329                           	opt stack 0
  1330  001BDC                     _wait_pulse:
  1331                           	opt stack 28
  1332                           
  1333                           ;extended_spi.c: 109: (*timer_start)(63535);
  1334                           
  1335                           ;incstack = 0
  1336  001BDC  0EF8               	movlw	248
  1337  001BDE  6E02               	movwf	set_timer3@value+1,c
  1338  001BE0  0E2F               	movlw	47
  1339  001BE2  6E01               	movwf	set_timer3@value,c
  1340  001BE4  D801               	call	u528
  1341  001BE6  D00A               	goto	l147
  1342  001BE8                     u528:
  1343  001BE8  0005               	push	
  1344  001BEA  6EFA               	movwf	pclath,c
  1345  001BEC  5003               	movf	wait_pulse@timer_start,w,c
  1346  001BEE  6EFD               	movwf	tosl,c
  1347  001BF0  5004               	movf	wait_pulse@timer_start+1,w,c
  1348  001BF2  6EFE               	movwf	tosh,c
  1349  001BF4  50F8               	movf	tblptru,w,c
  1350  001BF6  6EFF               	movwf	tosu,c
  1351  001BF8  50FA               	movf	pclath,w,c
  1352  001BFA  0012               	return		;indir
  1353  001BFC                     l147:
  1354  001BFC  A2F0               	btfss	intcon3,1,c	;volatile
  1355  001BFE  D7FE               	goto	l147
  1356                           
  1357                           ;extended_spi.c: 115: }
  1358                           ;extended_spi.c: 116: INT2IF = 0;
  1359  001C00  92F0               	bcf	intcon3,1,c	;volatile
  1360  001C02  0012               	return		;funcret
  1361  001C04                     __end_of_wait_pulse:
  1362                           	opt stack 0
  1363                           tosu	equ	0xFFF
  1364                           tosh	equ	0xFFE
  1365                           tosl	equ	0xFFD
  1366                           pclath	equ	0xFFA
  1367                           tblptru	equ	0xFF8
  1368                           prodh	equ	0xFF4
  1369                           prodl	equ	0xFF3
  1370                           intcon2	equ	0xFF1
  1371                           intcon3	equ	0xFF0
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           plusw1	equ	0xFE3
  1375                           indf2	equ	0xFDF
  1376                           plusw2	equ	0xFDB
  1377                           fsr2h	equ	0xFDA
  1378                           fsr2l	equ	0xFD9
  1379                           status	equ	0xFD8
  1380                           
  1381 ;; *************** function _set_timer3 *****************
  1382 ;; Defined at:
  1383 ;;		line 8 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;  value           2    0[COMRAM] int 
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;		None               void
  1390 ;; Registers used:
  1391 ;;		None
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0
  1397 ;;      Params:         2       0
  1398 ;;      Locals:         0       0
  1399 ;;      Temps:          0       0
  1400 ;;      Totals:         2       0
  1401 ;;Total ram usage:        2 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; This function calls:
  1404 ;;		Nothing
  1405 ;; This function is called by:
  1406 ;;		_main
  1407 ;;		_wait_pulse
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text10
  1412  001B62                     __ptext10:
  1413                           	opt stack 0
  1414  001B62                     _set_timer3:
  1415                           	opt stack 28
  1416                           
  1417                           ;timers_pic.c: 10: PIR2bits.TMR3IF = 0;
  1418                           
  1419                           ;incstack = 0
  1420  001B62  92A1               	bcf	4001,1,c	;volatile
  1421                           
  1422                           ;timers_pic.c: 11: TMR3 = value;
  1423  001B64  C001  FFB2         	movff	set_timer3@value,4018	;volatile
  1424  001B68  C002  FFB3         	movff	set_timer3@value+1,4019	;volatile
  1425  001B6C  0012               	return		;funcret
  1426  001B6E                     __end_of_set_timer3:
  1427                           	opt stack 0
  1428                           tosu	equ	0xFFF
  1429                           tosh	equ	0xFFE
  1430                           tosl	equ	0xFFD
  1431                           pclath	equ	0xFFA
  1432                           tblptru	equ	0xFF8
  1433                           prodh	equ	0xFF4
  1434                           prodl	equ	0xFF3
  1435                           intcon2	equ	0xFF1
  1436                           intcon3	equ	0xFF0
  1437                           postinc0	equ	0xFEE
  1438                           wreg	equ	0xFE8
  1439                           plusw1	equ	0xFE3
  1440                           indf2	equ	0xFDF
  1441                           plusw2	equ	0xFDB
  1442                           fsr2h	equ	0xFDA
  1443                           fsr2l	equ	0xFD9
  1444                           status	equ	0xFD8
  1445                           
  1446 ;; *************** function _spi_send_get_byte *****************
  1447 ;; Defined at:
  1448 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;  byte            1    wreg     unsigned char 
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;  byte            1    0[COMRAM] unsigned char 
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      unsigned char 
  1455 ;; Registers used:
  1456 ;;		wreg, status,2
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0
  1462 ;;      Params:         0       0
  1463 ;;      Locals:         1       0
  1464 ;;      Temps:          0       0
  1465 ;;      Totals:         1       0
  1466 ;;Total ram usage:        1 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; This function calls:
  1469 ;;		Nothing
  1470 ;; This function is called by:
  1471 ;;		_espi_master_send
  1472 ;;		_espi_master_receive
  1473 ;;		_espi_slave_receive
  1474 ;;		_espi_slave_send
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	text11
  1479  001B80                     __ptext11:
  1480                           	opt stack 0
  1481  001B80                     _spi_send_get_byte:
  1482                           	opt stack 29
  1483                           
  1484                           ;incstack = 0
  1485                           ;spi_send_get_byte@byte stored from wreg
  1486  001B80  6E01               	movwf	spi_send_get_byte@byte,c
  1487                           
  1488                           ;spi_pic.c: 35: SSPBUF = byte;
  1489  001B82  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  1490                           
  1491                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  1492  001B86  D000               	goto	l53
  1493  001B88                     l53:
  1494  001B88  A0C7               	btfss	4039,0,c	;volatile
  1495  001B8A  D7FE               	goto	l53
  1496                           
  1497                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  1498  001B8C  BEC6               	btfsc	4038,7,c	;volatile
  1499                           
  1500                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  1501  001B8E  9EC6               	bcf	4038,7,c	;volatile
  1502                           
  1503                           ;spi_pic.c: 39: return SSPBUF;
  1504  001B90  50C9               	movf	4041,w,c	;volatile
  1505  001B92  0012               	return		;funcret
  1506  001B94                     __end_of_spi_send_get_byte:
  1507                           	opt stack 0
  1508                           tosu	equ	0xFFF
  1509                           tosh	equ	0xFFE
  1510                           tosl	equ	0xFFD
  1511                           pclath	equ	0xFFA
  1512                           tblptru	equ	0xFF8
  1513                           prodh	equ	0xFF4
  1514                           prodl	equ	0xFF3
  1515                           intcon2	equ	0xFF1
  1516                           intcon3	equ	0xFF0
  1517                           postinc0	equ	0xFEE
  1518                           wreg	equ	0xFE8
  1519                           plusw1	equ	0xFE3
  1520                           indf2	equ	0xFDF
  1521                           plusw2	equ	0xFDB
  1522                           fsr2h	equ	0xFDA
  1523                           fsr2l	equ	0xFD9
  1524                           status	equ	0xFD8
  1525                           
  1526 ;; *************** function _send_delay *****************
  1527 ;; Defined at:
  1528 ;;		line 19 in file "../TorqueGriper.X/extended_spi.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;		None
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;		None
  1533 ;; Return value:  Size  Location     Type
  1534 ;;		None               void
  1535 ;; Registers used:
  1536 ;;		None
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0
  1542 ;;      Params:         0       0
  1543 ;;      Locals:         0       0
  1544 ;;      Temps:          0       0
  1545 ;;      Totals:         0       0
  1546 ;;Total ram usage:        0 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; This function calls:
  1549 ;;		Nothing
  1550 ;; This function is called by:
  1551 ;;		_espi_master_send
  1552 ;;		_espi_master_receive
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text12
  1557  001B54                     __ptext12:
  1558                           	opt stack 0
  1559  001B54                     _send_delay:
  1560                           	opt stack 29
  1561                           
  1562                           ;extended_spi.c: 21: _delay((unsigned long)((1)*(16000000/4000000.0)));
  1563                           
  1564                           ;incstack = 0
  1565  001B54  D000               	nop2		;2 cycle nop
  1566  001B56  D000               	nop2		;2 cycle nop
  1567  001B58  0012               	return		;funcret
  1568  001B5A                     __end_of_send_delay:
  1569                           	opt stack 0
  1570                           tosu	equ	0xFFF
  1571                           tosh	equ	0xFFE
  1572                           tosl	equ	0xFFD
  1573                           pclath	equ	0xFFA
  1574                           tblptru	equ	0xFF8
  1575                           prodh	equ	0xFF4
  1576                           prodl	equ	0xFF3
  1577                           intcon2	equ	0xFF1
  1578                           intcon3	equ	0xFF0
  1579                           postinc0	equ	0xFEE
  1580                           wreg	equ	0xFE8
  1581                           plusw1	equ	0xFE3
  1582                           indf2	equ	0xFDF
  1583                           plusw2	equ	0xFDB
  1584                           fsr2h	equ	0xFDA
  1585                           fsr2l	equ	0xFD9
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _decode_data *****************
  1589 ;; Defined at:
  1590 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  data            2    0[COMRAM] PTR unsigned char 
  1593 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  1594 ;;  byte_1          1    2[COMRAM] unsigned char 
  1595 ;;  byte_2          1    3[COMRAM] unsigned char 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      char 
  1600 ;; Registers used:
  1601 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMRAM   BANK0
  1607 ;;      Params:         4       0
  1608 ;;      Locals:         0       0
  1609 ;;      Temps:          1       0
  1610 ;;      Totals:         5       0
  1611 ;;Total ram usage:        5 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_espi_master_receive
  1617 ;;		_espi_slave_receive
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text13
  1622  001C3C                     __ptext13:
  1623                           	opt stack 0
  1624  001C3C                     _decode_data:
  1625                           	opt stack 29
  1626                           
  1627                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  1628                           
  1629                           ;incstack = 0
  1630  001C3C  5003               	movf	decode_data@byte_1,w,c
  1631  001C3E  0BF0               	andlw	240
  1632  001C40  0AA0               	xorlw	160
  1633  001C42  A4D8               	btfss	status,2,c
  1634  001C44  0012               	return	
  1635  001C46  D002               	goto	l1137
  1636                           
  1637                           ;encoding.c: 15: return -1;
  1638                           ;	Return value of _decode_data is never used
  1639  001C48  0012               	return	
  1640  001C4A  D008               	goto	l1141
  1641  001C4C                     l1137:
  1642                           
  1643                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  1644  001C4C  5004               	movf	decode_data@byte_2,w,c
  1645  001C4E  0BF0               	andlw	240
  1646  001C50  0AA0               	xorlw	160
  1647  001C52  A4D8               	btfss	status,2,c
  1648  001C54  0012               	return	
  1649  001C56  D002               	goto	l1141
  1650                           
  1651                           ;encoding.c: 17: return -2;
  1652                           ;	Return value of _decode_data is never used
  1653  001C58  0012               	return	
  1654  001C5A  D000               	goto	l1141
  1655  001C5C                     l1141:
  1656                           
  1657                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  1658  001C5C  C004  F005         	movff	decode_data@byte_2,??_decode_data
  1659  001C60  0E0F               	movlw	15
  1660  001C62  1605               	andwf	??_decode_data,f,c
  1661  001C64  3803               	swapf	decode_data@byte_1,w,c
  1662  001C66  0BF0               	andlw	240
  1663  001C68  1005               	iorwf	??_decode_data,w,c
  1664  001C6A  C001  FFD9         	movff	decode_data@data,fsr2l
  1665  001C6E  C002  FFDA         	movff	decode_data@data+1,fsr2h
  1666  001C72  6EDF               	movwf	indf2,c
  1667  001C74  0012               	return	
  1668                           
  1669                           ;encoding.c: 21: return 0;
  1670                           ;	Return value of _decode_data is never used
  1671  001C76  0012               	return		;funcret
  1672  001C78                     __end_of_decode_data:
  1673                           	opt stack 0
  1674                           tosu	equ	0xFFF
  1675                           tosh	equ	0xFFE
  1676                           tosl	equ	0xFFD
  1677                           pclath	equ	0xFFA
  1678                           tblptru	equ	0xFF8
  1679                           prodh	equ	0xFF4
  1680                           prodl	equ	0xFF3
  1681                           intcon2	equ	0xFF1
  1682                           intcon3	equ	0xFF0
  1683                           postinc0	equ	0xFEE
  1684                           wreg	equ	0xFE8
  1685                           plusw1	equ	0xFE3
  1686                           indf2	equ	0xFDF
  1687                           plusw2	equ	0xFDB
  1688                           fsr2h	equ	0xFDA
  1689                           fsr2l	equ	0xFD9
  1690                           status	equ	0xFD8
  1691                           
  1692 ;; *************** function _buffer_space *****************
  1693 ;; Defined at:
  1694 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1697 ;;		 -> main@buffer(34), 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      unsigned char 
  1702 ;; Registers used:
  1703 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0
  1709 ;;      Params:         2       0
  1710 ;;      Locals:         0       0
  1711 ;;      Temps:          0       0
  1712 ;;      Totals:         2       0
  1713 ;;Total ram usage:        2 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; This function calls:
  1716 ;;		Nothing
  1717 ;; This function is called by:
  1718 ;;		_espi_master_receive
  1719 ;;		_espi_slave_receive
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text14
  1724  001B94                     __ptext14:
  1725                           	opt stack 0
  1726  001B94                     _buffer_space:
  1727                           	opt stack 29
  1728                           
  1729                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  1730                           
  1731                           ;incstack = 0
  1732  001B94  EE20 F001          	lfsr	2,1
  1733  001B98  5001               	movf	buffer_space@buffer,w,c
  1734  001B9A  26D9               	addwf	fsr2l,f,c
  1735  001B9C  5002               	movf	buffer_space@buffer+1,w,c
  1736  001B9E  22DA               	addwfc	fsr2h,f,c
  1737  001BA0  50DF               	movf	indf2,w,c
  1738  001BA2  0800               	sublw	0
  1739  001BA4  0F20               	addlw	32
  1740  001BA6  0012               	return	
  1741  001BA8  0012               	return		;funcret
  1742  001BAA                     __end_of_buffer_space:
  1743                           	opt stack 0
  1744                           tosu	equ	0xFFF
  1745                           tosh	equ	0xFFE
  1746                           tosl	equ	0xFFD
  1747                           pclath	equ	0xFFA
  1748                           tblptru	equ	0xFF8
  1749                           prodh	equ	0xFF4
  1750                           prodl	equ	0xFF3
  1751                           intcon2	equ	0xFF1
  1752                           intcon3	equ	0xFF0
  1753                           postinc0	equ	0xFEE
  1754                           wreg	equ	0xFE8
  1755                           plusw1	equ	0xFE3
  1756                           indf2	equ	0xFDF
  1757                           plusw2	equ	0xFDB
  1758                           fsr2h	equ	0xFDA
  1759                           fsr2l	equ	0xFD9
  1760                           status	equ	0xFD8
  1761                           
  1762 ;; *************** function _buffer_push *****************
  1763 ;; Defined at:
  1764 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  1767 ;;		 -> main@buffer(34), 
  1768 ;;  byte            1    2[COMRAM] unsigned char 
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;  current_posi    1    4[COMRAM] unsigned char 
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      unsigned char 
  1773 ;; Registers used:
  1774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0
  1780 ;;      Params:         3       0
  1781 ;;      Locals:         1       0
  1782 ;;      Temps:          1       0
  1783 ;;      Totals:         5       0
  1784 ;;Total ram usage:        5 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; This function calls:
  1787 ;;		Nothing
  1788 ;; This function is called by:
  1789 ;;		_espi_master_receive
  1790 ;;		_espi_slave_receive
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text15
  1795  001CFC                     __ptext15:
  1796                           	opt stack 0
  1797  001CFC                     _buffer_push:
  1798                           	opt stack 29
  1799                           
  1800                           ;circular_buffer.c: 26: uint8_t current_position = (buffer->position + buffer->count)
  1801                           ;circular_buffer.c: 27: & (0x20 - 1);
  1802                           
  1803                           ;incstack = 0
  1804  001CFC  EE20 F001          	lfsr	2,1
  1805  001D00  5001               	movf	buffer_push@buffer,w,c
  1806  001D02  26D9               	addwf	fsr2l,f,c
  1807  001D04  5002               	movf	buffer_push@buffer+1,w,c
  1808  001D06  22DA               	addwfc	fsr2h,f,c
  1809  001D08  50DF               	movf	indf2,w,c
  1810  001D0A  6E04               	movwf	??_buffer_push& (0+255),c
  1811  001D0C  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  1812  001D10  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  1813  001D14  50DF               	movf	indf2,w,c
  1814  001D16  2404               	addwf	??_buffer_push,w,c
  1815  001D18  0B1F               	andlw	31
  1816  001D1A  6E05               	movwf	buffer_push@current_position,c
  1817                           
  1818                           ;circular_buffer.c: 28: buffer->data[current_position] = byte;
  1819  001D1C  5005               	movf	buffer_push@current_position,w,c
  1820  001D1E  0D01               	mullw	1
  1821  001D20  0E02               	movlw	2
  1822  001D22  26F3               	addwf	prodl,f,c
  1823  001D24  0E00               	movlw	0
  1824  001D26  22F4               	addwfc	prodh,f,c
  1825  001D28  50F3               	movf	prodl,w,c
  1826  001D2A  2401               	addwf	buffer_push@buffer,w,c
  1827  001D2C  6ED9               	movwf	fsr2l,c
  1828  001D2E  50F4               	movf	prodh,w,c
  1829  001D30  2002               	addwfc	buffer_push@buffer+1,w,c
  1830  001D32  6EDA               	movwf	fsr2h,c
  1831  001D34  C003  FFDF         	movff	buffer_push@byte,indf2
  1832                           
  1833                           ;circular_buffer.c: 29: buffer->count++;
  1834  001D38  EE20 F001          	lfsr	2,1
  1835  001D3C  5001               	movf	buffer_push@buffer,w,c
  1836  001D3E  26D9               	addwf	fsr2l,f,c
  1837  001D40  5002               	movf	buffer_push@buffer+1,w,c
  1838  001D42  22DA               	addwfc	fsr2h,f,c
  1839  001D44  2ADF               	incf	indf2,f,c
  1840                           
  1841                           ;circular_buffer.c: 33: else
  1842                           ;circular_buffer.c: 34: return 1;
  1843                           ;	Return value of _buffer_push is never used
  1844                           
  1845                           ;circular_buffer.c: 32: return 0;
  1846                           ;	Return value of _buffer_push is never used
  1847  001D46  0012               	return	
  1848  001D48  0012               	return		;funcret
  1849  001D4A                     __end_of_buffer_push:
  1850                           	opt stack 0
  1851                           tosu	equ	0xFFF
  1852                           tosh	equ	0xFFE
  1853                           tosl	equ	0xFFD
  1854                           pclath	equ	0xFFA
  1855                           tblptru	equ	0xFF8
  1856                           prodh	equ	0xFF4
  1857                           prodl	equ	0xFF3
  1858                           intcon2	equ	0xFF1
  1859                           intcon3	equ	0xFF0
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           plusw1	equ	0xFE3
  1863                           indf2	equ	0xFDF
  1864                           plusw2	equ	0xFDB
  1865                           fsr2h	equ	0xFDA
  1866                           fsr2l	equ	0xFD9
  1867                           status	equ	0xFD8
  1868                           
  1869 ;; *************** function _buffer_empty *****************
  1870 ;; Defined at:
  1871 ;;		line 14 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1874 ;;		 -> main@buffer(34), 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      unsigned char 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0
  1886 ;;      Params:         2       0
  1887 ;;      Locals:         0       0
  1888 ;;      Temps:          0       0
  1889 ;;      Totals:         2       0
  1890 ;;Total ram usage:        2 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; This function calls:
  1893 ;;		Nothing
  1894 ;; This function is called by:
  1895 ;;		_espi_master_receive
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text16
  1900  001BC0                     __ptext16:
  1901                           	opt stack 0
  1902  001BC0                     _buffer_empty:
  1903                           	opt stack 29
  1904                           
  1905                           ;circular_buffer.c: 16: return (buffer->count == 0) ? 1 : 0;
  1906                           
  1907                           ;incstack = 0
  1908  001BC0  EE20 F001          	lfsr	2,1
  1909  001BC4  5001               	movf	buffer_empty@buffer,w,c
  1910  001BC6  26D9               	addwf	fsr2l,f,c
  1911  001BC8  5002               	movf	buffer_empty@buffer+1,w,c
  1912  001BCA  22DA               	addwfc	fsr2h,f,c
  1913  001BCC  50DF               	movf	indf2,w,c
  1914  001BCE  A4D8               	btfss	status,2,c
  1915  001BD0  D002               	goto	u540
  1916  001BD2  0E01               	movlw	1
  1917  001BD4  0012               	return	
  1918  001BD6                     u540:
  1919  001BD6  0E00               	movlw	0
  1920  001BD8  0012               	return	
  1921  001BDA  0012               	return		;funcret
  1922  001BDC                     __end_of_buffer_empty:
  1923                           	opt stack 0
  1924  0000                     tosu	equ	0xFFF
  1925                           tosh	equ	0xFFE
  1926                           tosl	equ	0xFFD
  1927                           pclath	equ	0xFFA
  1928                           tblptru	equ	0xFF8
  1929                           prodh	equ	0xFF4
  1930                           prodl	equ	0xFF3
  1931                           intcon2	equ	0xFF1
  1932                           intcon3	equ	0xFF0
  1933                           postinc0	equ	0xFEE
  1934                           wreg	equ	0xFE8
  1935                           plusw1	equ	0xFE3
  1936                           indf2	equ	0xFDF
  1937                           plusw2	equ	0xFDB
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           tosu	equ	0xFFF
  1942                           tosh	equ	0xFFE
  1943                           tosl	equ	0xFFD
  1944                           pclath	equ	0xFFA
  1945                           tblptru	equ	0xFF8
  1946                           prodh	equ	0xFF4
  1947                           prodl	equ	0xFF3
  1948                           intcon2	equ	0xFF1
  1949                           intcon3	equ	0xFF0
  1950                           postinc0	equ	0xFEE
  1951                           wreg	equ	0xFE8
  1952                           plusw1	equ	0xFE3
  1953                           indf2	equ	0xFDF
  1954                           plusw2	equ	0xFDB
  1955                           fsr2h	equ	0xFDA
  1956                           fsr2l	equ	0xFD9
  1957                           status	equ	0xFD8
  1958                           
  1959                           	psect	text17
  1960  000000                     __ptext17:
  1961                           	opt stack 0
  1962                           tosu	equ	0xFFF
  1963                           tosh	equ	0xFFE
  1964                           tosl	equ	0xFFD
  1965                           pclath	equ	0xFFA
  1966                           tblptru	equ	0xFF8
  1967                           prodh	equ	0xFF4
  1968                           prodl	equ	0xFF3
  1969                           intcon2	equ	0xFF1
  1970                           intcon3	equ	0xFF0
  1971                           postinc0	equ	0xFEE
  1972                           wreg	equ	0xFE8
  1973                           plusw1	equ	0xFE3
  1974                           indf2	equ	0xFDF
  1975                           plusw2	equ	0xFDB
  1976                           fsr2h	equ	0xFDA
  1977                           fsr2l	equ	0xFD9
  1978                           status	equ	0xFD8
  1979                           
  1980                           	psect	rparam
  1981  0000                     tosu	equ	0xFFF
  1982                           tosh	equ	0xFFE
  1983                           tosl	equ	0xFFD
  1984                           pclath	equ	0xFFA
  1985                           tblptru	equ	0xFF8
  1986                           prodh	equ	0xFF4
  1987                           prodl	equ	0xFF3
  1988                           intcon2	equ	0xFF1
  1989                           intcon3	equ	0xFF0
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           plusw1	equ	0xFE3
  1993                           indf2	equ	0xFDF
  1994                           plusw2	equ	0xFDB
  1995                           fsr2h	equ	0xFDA
  1996                           fsr2l	equ	0xFD9
  1997                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      87
    BANK0           160      0       0

Pointer List with Targets:

    wait_pulse@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_empty@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    espi_master_receive@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    espi_master_send@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_send@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    wait_pulse@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 


Critical Paths under _main in COMRAM

    _main->_espi_master_send
    _espi_setup->_setup_spi
    _espi_master_send->_buffer_pop
    _espi_master_send->_encode_data
    _espi_master_send->_wait_pulse
    _espi_master_receive->_wait_pulse
    _wait_pulse->_set_timer3

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0    4489
                                             18 COMRAM    34    34      0
                _espi_master_receive
                   _espi_master_send
                         _espi_setup
                       _setup_timer3
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _espi_master_send                                    12     6      6    2209
                                              6 COMRAM    12     6      6
                       _buffer_count
                         _buffer_pop
                        _encode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     644
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     411
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_master_receive                                 10     4      6    2027
                                              6 COMRAM    10     4      6
                       _buffer_empty
                        _buffer_push
                       _buffer_space
                        _decode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _wait_pulse                                           5     1      4     343
                                              2 COMRAM     4     0      4
                         _set_timer3 *
 ---------------------------------------------------------------------------------
 (3) _set_timer3                                           2     0      2      65
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _spi_send_get_byte                                    1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _send_delay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     411
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _buffer_empty                                         2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _espi_master_receive
     _buffer_empty
     _buffer_push
     _buffer_space
     _decode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
   _espi_master_send
     _buffer_count
     _buffer_pop
     _encode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
   _espi_setup
     _setup_spi
   _setup_timer3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      57       1       91.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      57       5        0.0%
DATA                 0      0      57       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Jul 31 21:53:33 2015

                   _SSPSTATbits 000FC7                              l53 1B88                              l45 1CB0  
                            l47 1C9C                              l48 1CAC                             l120 1C26  
                           l118 1C2E                             l147 1BFC                             u540 1BD6  
                           u528 1BE8                             u721 1D66   espi_master_receive@received_1 000F  
 espi_master_receive@received_2 0010                             tosl 000FFD                             wreg 000FE8  
                  __CFG_LVP$OFF 000000                            l1141 1C5C                            l1221 1E80  
                          l1231 1EB8                            l1137 1C4C                            l1241 1ED6  
                          l1243 1EEC                            l1309 1D70                            l1239 1ED0  
                          l1271 1F7C                            l1169 1DC6                            l1291 1FE2  
                          l1277 1F9E                            l1287 1FCE                            _TMR3 000FB2  
                          _main 1D4A                            fsr2h 000FDA                            indf2 000FDF  
                          fsr2l 000FD9                            prodh 000FF4                            prodl 000FF3  
                          start 0000           spi_send_get_byte@byte 0001                  ??_buffer_count 0003  
                ??_buffer_empty 0003                   __CFG_FOSC$IRC 000000                  ??_buffer_space 0003  
                  ___param_bank 000010            setup_spi@SSPCON1_reg 0001                           ?_main 0001  
                         _T3CON 000FB1            __size_of_decode_data 003C             _espi_master_receive 1E28  
                         pclath 000FFA                           plusw1 000FE3                           plusw2 000FDB  
                         status 000FD8            setup_spi@SSPSTAT_reg 0002        __end_of_espi_master_send 2000  
              buffer_pop@buffer 0001                 __initialization 1BAA                    __end_of_main 1DAE  
          ?_espi_master_receive 0007                          ??_main 0013               _spi_send_get_byte 1B80  
                 __activetblptr 000002              ?_spi_send_get_byte 0001                 encode_data@data 0006  
           ??_spi_send_get_byte 0001                          _INT2IF 007F81                          _INTCON 000FF2  
                        _SSPBUF 000FC9                 decode_data@data 0001            __size_of_encode_data 0046  
         ??_espi_master_receive 000D            __size_of_buffer_push 004E       __end_of_spi_send_get_byte 1B94  
                        clear_0 1BB0    espi_master_send@byte_to_send 000F            __end_of_buffer_count 1B80  
          __end_of_buffer_empty 1BDC                 set_timer3@value 0001                          tblptru 000FF8  
         setup_timer3@T3CON_reg 0001            __end_of_buffer_space 1BAA                      __accesstop 0060  
       __end_of__initialization 1BB6                   ___rparam_used 000001                  __pcstackCOMRAM 0001  
            buffer_count@buffer 0001                  buffer_pop@byte 0005              buffer_empty@buffer 0001  
    __size_of_spi_send_get_byte 0014               buffer_push@buffer 0001              __size_of_setup_spi 003E  
                    _buffer_pop 1DAE                         _SSPCON1 000FC6                         _SSPSTAT 000FC7  
     espi_master_receive@buffer 0007               ?_espi_master_send 0007                         __Hparam 0000  
                       __Lparam 0000              ??_espi_master_send 000D                      _espi_setup 1C04  
                    _dummy_byte 0057                         __pcinit 1BAA                       _ANSELbits 000F7E  
                       __ramtop 0100           __size_of_buffer_count 0012           __size_of_buffer_empty 001C  
                       __ptext0 1D4A                         __ptext1 1B5A                         __ptext2 1C04  
                       __ptext3 1C78                         __ptext4 1F0A                         __ptext5 1CB6  
                       __ptext6 1DAE                         __ptext7 1B6E                         __ptext8 1E28  
                       __ptext9 1BDC           __size_of_buffer_space 0016                   ??_decode_data 0005  
          end_of_initialization 1BB6                      _send_delay 1B54                   __Lmediumconst 0000  
                  _buffer_count 1B6E                    _buffer_empty 1BC0               __end_of_setup_spi 1CB6  
   espi_master_send@timer_start 0009                    _buffer_space 1B94                      _set_timer3 1B62  
                       postinc0 000FEE                      _wait_pulse 1BDC                       _PORTCbits 000F82  
                 ?_setup_timer3 0001                       _TRISAbits 000F92                       _TRISBbits 000F93  
                     _TRISCbits 000F94                     ?_buffer_pop 0001             __end_of_decode_data 1C78  
                 ??_encode_data 0005     __end_of_espi_master_receive 1F0A                      main@buffer 0013  
                 ??_buffer_push 0004                     ?_espi_setup 0001                  espi_setup@mode 0003  
                ??_setup_timer3 0001             start_initialization 1BAA                     ?_send_delay 0001  
            buffer_space@buffer 0001                 buffer_push@byte 0003             __end_of_encode_data 1CFC  
                   ?_set_timer3 0001             __size_of_buffer_pop 007A                     ?_wait_pulse 0003  
           __end_of_buffer_push 1D4A                     _decode_data 1C3C                     __pbssCOMRAM 0035  
           __size_of_espi_setup 0038      espi_master_send@received_1 000D      espi_master_send@received_2 000E  
         wait_pulse@timer_start 0003               encode_data@byte_1 0001               encode_data@byte_2 0003  
           __size_of_send_delay 0006       __size_of_espi_master_send 00F6             __size_of_set_timer3 000C  
           __size_of_wait_pulse 0028                        _LATAbits 000F89                        _LATCbits 000F8B  
                   _encode_data 1CB6                        _PIE2bits 000FA0            __end_of_setup_timer3 1B62  
                      _PIR2bits 000FA1                     _buffer_push 1CFC                       _timer3_up 000000  
                     main@F3973 0035                       _setup_spi 1C78  espi_master_receive@timer_start 0009  
                  ??_buffer_pop 0003               decode_data@byte_1 0003               decode_data@byte_2 0004  
                   _INTCON2bits 000FF1                     _INTCON3bits 000FF0                        __Hrparam 0000  
                      __Lrparam 0000                    ??_espi_setup 0003                 wait_pulse@value 0001  
               wait_pulse@timer 0005              __end_of_buffer_pop 1E28                      ?_setup_spi 0001  
                    _ANSELHbits 000F7F                        __ptext10 1B62                        __ptext11 1B80  
                      __ptext12 1B54                        __ptext13 1C3C                        __ptext14 1B94  
                      __ptext15 1CFC                        __ptext16 1BC0                        __ptext17 0000  
            __end_of_espi_setup 1C3C                    ??_send_delay 0001                   __size_of_main 0064  
                  ??_set_timer3 0003    __size_of_espi_master_receive 00E2                    ??_wait_pulse 0007  
              _espi_master_send 1F0A              __end_of_send_delay 1B5A                    ?_decode_data 0001  
      espi_master_receive@value 000E        espi_master_receive@timer 000B              __end_of_set_timer3 1B6E  
         __size_of_setup_timer3 0008              __end_of_wait_pulse 1C04                      _OSCCONbits 000FD3  
                   ??_setup_spi 0002                    _setup_timer3 1B5A     buffer_push@current_position 0005  
                   _SSPCON1bits 000FC6                    ?_encode_data 0001          espi_master_send@buffer 0007  
        espi_master_send@byte_1 0011          espi_master_send@byte_2 0012                   ?_buffer_count 0001  
                 ?_buffer_empty 0001           espi_master_send@timer 000B                   ?_buffer_space 0001  
                  ?_buffer_push 0001  
