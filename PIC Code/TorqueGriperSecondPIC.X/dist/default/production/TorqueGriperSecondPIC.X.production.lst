

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Aug 03 13:24:51 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    29  0000                     
    30 ;; Function _timer3_up is unused but had its address taken
    31  0000                     _TMR3	set	4018
    32  0000                     _ANSELHbits	set	3967
    33  0000                     _ANSELbits	set	3966
    34  0000                     _INTCON	set	4082
    35  0000                     _INTCON2bits	set	4081
    36  0000                     _INTCON3bits	set	4080
    37  0000                     _LATAbits	set	3977
    38  0000                     _LATCbits	set	3979
    39  0000                     _OSCCONbits	set	4051
    40  0000                     _PIE2bits	set	4000
    41  0000                     _PIR2bits	set	4001
    42  0000                     _PORTCbits	set	3970
    43  0000                     _SSPBUF	set	4041
    44  0000                     _SSPCON1	set	4038
    45  0000                     _SSPCON1bits	set	4038
    46  0000                     _SSPSTAT	set	4039
    47  0000                     _SSPSTATbits	set	4039
    48  0000                     _T3CON	set	4017
    49  0000                     _TRISAbits	set	3986
    50  0000                     _TRISBbits	set	3987
    51  0000                     _TRISCbits	set	3988
    52  0000                     _INT2IF	set	32641
    53                           
    54 ;;
    55 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    56 ;;
    57 ;; *************** function _main *****************
    58 ;; Defined at:
    59 ;;		line 11 in file "main.c"
    60 ;; Parameters:    Size  Location     Type
    61 ;;		None
    62 ;; Auto vars:     Size  Location     Type
    63 ;;  buffer         34   18[COMRAM] struct circular_buffer
    64 ;; Return value:  Size  Location     Type
    65 ;;                  2   16[None  ] int 
    66 ;; Registers used:
    67 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
    68 ;; Tracked objects:
    69 ;;		On entry : 0/0
    70 ;;		On exit  : 0/0
    71 ;;		Unchanged: 0/0
    72 ;; Data sizes:     COMRAM   BANK0
    73 ;;      Params:         0       0
    74 ;;      Locals:        34       0
    75 ;;      Temps:          0       0
    76 ;;      Totals:        34       0
    77 ;;Total ram usage:       34 bytes
    78 ;; Hardware stack levels required when called:    3
    79 ;; This function calls:
    80 ;;		_espi_master_receive
    81 ;;		_espi_master_send
    82 ;;		_espi_setup
    83 ;;		_setup_timer3
    84 ;; This function is called by:
    85 ;;		Startup code after reset
    86 ;; This function uses a non-reentrant model
    87 ;;
    88                           
    89                           	psect	text0
    90  001CF2                     __ptext0:
    91                           	opt stack 0
    92  001CF2                     _main:
    93                           	opt stack 28
    94                           
    95                           ;main.c: 12: OSCCONbits.IRCF = 0x07;
    96                           
    97                           ;incstack = 0
    98  001CF2  88D3               	bsf	4051,4,c	;volatile
    99  001CF4  8AD3               	bsf	4051,5,c	;volatile
   100  001CF6  8CD3               	bsf	4051,6,c	;volatile
   101                           
   102                           ;main.c: 14: espi_setup(0x00);
   103  001CF8  0E00               	movlw	0
   104  001CFA  ECD4  F00D         	call	_espi_setup
   105                           
   106                           ;main.c: 15: setup_timer3(0x80 | 0x00 | 0x01);
   107  001CFE  0E81               	movlw	129
   108  001D00  EC7A  F00D         	call	_setup_timer3
   109                           
   110                           ;main.c: 17: struct circular_buffer buffer = {0, 0, {0}};
   111  001D04  EE20  F035         	lfsr	2,main@F3971
   112  001D08  EE10  F013         	lfsr	1,main@buffer
   113  001D0C  0E21               	movlw	33
   114  001D0E                     u801:
   115  001D0E  CFDB FFE3          	movff	plusw2,plusw1
   116  001D12  06E8               	decf	wreg,f,c
   117  001D14  E2FC               	bc	u801
   118  001D16  D000               	goto	l1343
   119  001D18                     l1343:
   120                           
   121                           ;main.c: 22: espi_master_receive(&buffer, &set_timer3, &timer3_up);
   122  001D18  0E13               	movlw	low main@buffer
   123  001D1A  6E07               	movwf	espi_master_receive@buffer,c
   124  001D1C  0E00               	movlw	high main@buffer
   125  001D1E  6E08               	movwf	espi_master_receive@buffer+1,c
   126  001D20  0E06               	movlw	low _set_timer3
   127  001D22  6E09               	movwf	espi_master_receive@timer_start,c
   128  001D24  0E1B               	movlw	high _set_timer3
   129  001D26  6E0A               	movwf	espi_master_receive@timer_start+1,c
   130  001D28  0E00               	movlw	0
   131  001D2A  6E0B               	movwf	espi_master_receive@timer,c
   132  001D2C  0E00               	movlw	0
   133  001D2E  6E0C               	movwf	espi_master_receive@timer+1,c
   134  001D30  EC16  F00F         	call	_espi_master_receive	;wreg free
   135                           
   136                           ;main.c: 23: espi_master_send(&buffer, &set_timer3, &timer3_up);
   137  001D34  0E13               	movlw	low main@buffer
   138  001D36  6E07               	movwf	espi_master_send@buffer,c
   139  001D38  0E00               	movlw	high main@buffer
   140  001D3A  6E08               	movwf	espi_master_send@buffer+1,c
   141  001D3C  0E06               	movlw	low _set_timer3
   142  001D3E  6E09               	movwf	espi_master_send@timer_start,c
   143  001D40  0E1B               	movlw	high _set_timer3
   144  001D42  6E0A               	movwf	espi_master_send@timer_start+1,c
   145  001D44  0E00               	movlw	0
   146  001D46  6E0B               	movwf	espi_master_send@timer,c
   147  001D48  0E00               	movlw	0
   148  001D4A  6E0C               	movwf	espi_master_send@timer+1,c
   149  001D4C  EC73  F00F         	call	_espi_master_send	;wreg free
   150  001D50  D7E3               	goto	l1343
   151                           
   152                           ;main.c: 25: }
   153                           ;main.c: 27: return 0;
   154                           ;	Return value of _main is never used
   155  001D52  EF00  F000         	goto	start
   156  001D56                     __end_of_main:
   157                           	opt stack 0
   158                           wreg	equ	0xFE8
   159                           plusw1	equ	0xFE3
   160                           plusw2	equ	0xFDB
   161                           
   162                           	psect	cinit
   163  001B4E                     __pcinit:
   164                           	opt stack 0
   165  001B4E                     start_initialization:
   166                           	opt stack 0
   167  001B4E                     __initialization:
   168                           	opt stack 0
   169                           
   170                           ; Clear objects allocated to COMRAM (35 bytes)
   171  001B4E  EE00  F035         	lfsr	0,__pbssCOMRAM
   172  001B52  0E23               	movlw	35
   173  001B54                     clear_0:
   174  001B54  6AEE               	clrf	postinc0,c
   175  001B56  06E8               	decf	wreg,f,c
   176  001B58  E1FD               	bnz	clear_0
   177  001B5A                     end_of_initialization:
   178                           	opt stack 0
   179  001B5A                     __end_of__initialization:
   180                           	opt stack 0
   181  001B5A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   182  001B5C  6EF8               	movwf	tblptru,c
   183  001B5E  0100               	movlb	0
   184  001B60  EF79  F00E         	goto	_main	;jump to C main() function
   185                           tblptru	equ	0xFF8
   186                           postinc0	equ	0xFEE
   187                           wreg	equ	0xFE8
   188                           plusw1	equ	0xFE3
   189                           plusw2	equ	0xFDB
   190                           
   191                           	psect	bssCOMRAM
   192  000035                     __pbssCOMRAM:
   193                           	opt stack 0
   194  000035                     main@F3971:
   195                           	opt stack 0
   196  000035                     	ds	34
   197  000057                     _dummy_byte:
   198                           	opt stack 0
   199  000057                     	ds	1
   200                           tblptru	equ	0xFF8
   201                           postinc0	equ	0xFEE
   202                           wreg	equ	0xFE8
   203                           plusw1	equ	0xFE3
   204                           plusw2	equ	0xFDB
   205                           
   206                           	psect	cstackCOMRAM
   207  000001                     __pcstackCOMRAM:
   208                           	opt stack 0
   209  000001                     ?_buffer_peek:
   210                           	opt stack 0
   211  000001                     setup_spi@SSPCON1_reg:
   212                           	opt stack 0
   213  000001                     spi_send_get_byte@byte:
   214                           	opt stack 0
   215  000001                     setup_timer3@T3CON_reg:
   216                           	opt stack 0
   217  000001                     buffer_count@buffer:
   218                           	opt stack 0
   219  000001                     buffer_space@buffer:
   220                           	opt stack 0
   221  000001                     buffer_empty@buffer:
   222                           	opt stack 0
   223  000001                     buffer_push@buffer:
   224                           	opt stack 0
   225  000001                     buffer_pop@buffer:
   226                           	opt stack 0
   227  000001                     buffer_peek@buffer:
   228                           	opt stack 0
   229  000001                     encode_data@byte_1:
   230                           	opt stack 0
   231  000001                     decode_data@data:
   232                           	opt stack 0
   233  000001                     set_timer3@value:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x0
   237  000001                     	ds	1
   238  000002                     setup_spi@SSPSTAT_reg:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0x1
   242  000002                     	ds	1
   243  000003                     ??_buffer_peek:
   244  000003                     ??_buffer_pop:
   245  000003                     espi_setup@mode:
   246                           	opt stack 0
   247  000003                     buffer_push@byte:
   248                           	opt stack 0
   249  000003                     decode_data@byte_1:
   250                           	opt stack 0
   251  000003                     wait_pulse@timer_start:
   252                           	opt stack 0
   253  000003                     encode_data@byte_2:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x2
   257  000003                     	ds	1
   258  000004                     ??_buffer_push:
   259  000004                     decode_data@byte_2:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x3
   263  000004                     	ds	1
   264  000005                     ??_decode_data:
   265  000005                     ??_encode_data:
   266  000005                     buffer_push@current_position:
   267                           	opt stack 0
   268  000005                     wait_pulse@timer:
   269                           	opt stack 0
   270  000005                     buffer_pop@byte:
   271                           	opt stack 0
   272  000005                     buffer_peek@byte:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x4
   276  000005                     	ds	1
   277  000006                     encode_data@data:
   278                           	opt stack 0
   279                           
   280                           ; 1 bytes @ 0x5
   281  000006                     	ds	1
   282  000007                     espi_master_send@buffer:
   283                           	opt stack 0
   284  000007                     espi_master_receive@buffer:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x6
   288  000007                     	ds	2
   289  000009                     espi_master_send@timer_start:
   290                           	opt stack 0
   291  000009                     espi_master_receive@timer_start:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x8
   295  000009                     	ds	2
   296  00000B                     espi_master_send@timer:
   297                           	opt stack 0
   298  00000B                     espi_master_receive@timer:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0xA
   302  00000B                     	ds	2
   303  00000D                     ??_espi_master_receive:
   304  00000D                     espi_master_send@byte_to_send:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0xC
   308  00000D                     	ds	1
   309  00000E                     espi_master_receive@value:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0xD
   313  00000E                     	ds	1
   314  00000F                     espi_master_send@received_1:
   315                           	opt stack 0
   316  00000F                     espi_master_receive@received_1:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0xE
   320  00000F                     	ds	1
   321  000010                     espi_master_send@received_2:
   322                           	opt stack 0
   323  000010                     espi_master_receive@received_2:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0xF
   327  000010                     	ds	1
   328  000011                     espi_master_send@byte_1:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x10
   332  000011                     	ds	1
   333  000012                     espi_master_send@byte_2:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x11
   337  000012                     	ds	1
   338  000013                     main@buffer:
   339                           	opt stack 0
   340                           
   341                           ; 34 bytes @ 0x12
   342  000013                     	ds	34
   343                           tblptru	equ	0xFF8
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           plusw1	equ	0xFE3
   347                           plusw2	equ	0xFDB
   348                           
   349 ;; *************** function _setup_timer3 *****************
   350 ;; Defined at:
   351 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;  T3CON_reg       1    wreg     unsigned char 
   354 ;; Auto vars:     Size  Location     Type
   355 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   356 ;; Return value:  Size  Location     Type
   357 ;;		None               void
   358 ;; Registers used:
   359 ;;		wreg
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMRAM   BANK0
   365 ;;      Params:         0       0
   366 ;;      Locals:         1       0
   367 ;;      Temps:          0       0
   368 ;;      Totals:         1       0
   369 ;;Total ram usage:        1 bytes
   370 ;; Hardware stack levels used:    1
   371 ;; This function calls:
   372 ;;		Nothing
   373 ;; This function is called by:
   374 ;;		_main
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378                           	psect	text1
   379  001AF4                     __ptext1:
   380                           	opt stack 0
   381  001AF4                     _setup_timer3:
   382                           	opt stack 30
   383                           
   384                           ;incstack = 0
   385                           ;setup_timer3@T3CON_reg stored from wreg
   386  001AF4  6E01               	movwf	setup_timer3@T3CON_reg,c
   387                           
   388                           ;timers_pic.c: 5: T3CON = T3CON_reg;
   389  001AF6  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   390  001AFA  0012               	return		;funcret
   391  001AFC                     __end_of_setup_timer3:
   392                           	opt stack 0
   393                           tblptru	equ	0xFF8
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           plusw1	equ	0xFE3
   397                           plusw2	equ	0xFDB
   398                           
   399 ;; *************** function _espi_setup *****************
   400 ;; Defined at:
   401 ;;		line 24 in file "../TorqueGriper.X/extended_spi.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;  mode            1    wreg     unsigned char 
   404 ;; Auto vars:     Size  Location     Type
   405 ;;  mode            1    2[COMRAM] unsigned char 
   406 ;; Return value:  Size  Location     Type
   407 ;;		None               void
   408 ;; Registers used:
   409 ;;		wreg, status,2, status,0, cstack
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMRAM   BANK0
   415 ;;      Params:         0       0
   416 ;;      Locals:         1       0
   417 ;;      Temps:          0       0
   418 ;;      Totals:         1       0
   419 ;;Total ram usage:        1 bytes
   420 ;; Hardware stack levels used:    1
   421 ;; Hardware stack levels required when called:    1
   422 ;; This function calls:
   423 ;;		_setup_spi
   424 ;; This function is called by:
   425 ;;		_main
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           	psect	text2
   430  001BA8                     __ptext2:
   431                           	opt stack 0
   432  001BA8                     _espi_setup:
   433                           	opt stack 29
   434                           
   435                           ;incstack = 0
   436                           ;espi_setup@mode stored from wreg
   437  001BA8  6E03               	movwf	espi_setup@mode,c
   438                           
   439                           ;extended_spi.c: 26: setup_spi(0, 0x20 | 0x10 | mode);
   440  001BAA  5003               	movf	espi_setup@mode,w,c
   441  001BAC  0930               	iorlw	48
   442  001BAE  6E01               	movwf	setup_spi@SSPCON1_reg,c
   443  001BB0  0E00               	movlw	0
   444  001BB2  EC0E  F00E         	call	_setup_spi
   445                           
   446                           ;extended_spi.c: 28: ANSELbits.ANS2 = 0;
   447  001BB6  947E               	bcf	3966,2,c	;volatile
   448                           
   449                           ;extended_spi.c: 29: ANSELHbits.ANS8 = 0;
   450  001BB8  907F               	bcf	3967,0,c	;volatile
   451                           
   452                           ;extended_spi.c: 31: if (mode == 0x04 || mode == 0x05) {
   453  001BBA  0E04               	movlw	4
   454  001BBC  1803               	xorwf	espi_setup@mode,w,c
   455  001BBE  B4D8               	btfsc	status,2,c
   456  001BC0  D004               	goto	l124
   457  001BC2  0E05               	movlw	5
   458  001BC4  1803               	xorwf	espi_setup@mode,w,c
   459  001BC6  A4D8               	btfss	status,2,c
   460  001BC8  D004               	goto	l122
   461  001BCA                     l124:
   462                           
   463                           ;extended_spi.c: 32: TRISAbits.RA2 = 0;
   464  001BCA  9492               	bcf	3986,2,c	;volatile
   465                           
   466                           ;extended_spi.c: 33: LATAbits.LATA2 = 0;
   467  001BCC  9489               	bcf	3977,2,c	;volatile
   468                           
   469                           ;extended_spi.c: 34: TRISCbits.RC6 = 1;
   470  001BCE  8C94               	bsf	3988,6,c	;volatile
   471                           
   472                           ;extended_spi.c: 35: } else {
   473  001BD0  0012               	return	
   474  001BD2                     l122:
   475                           
   476                           ;extended_spi.c: 36: TRISAbits.RA2 = 1;
   477  001BD2  8492               	bsf	3986,2,c	;volatile
   478                           
   479                           ;extended_spi.c: 37: TRISCbits.RC6 = 0;
   480  001BD4  9C94               	bcf	3988,6,c	;volatile
   481                           
   482                           ;extended_spi.c: 38: LATCbits.LATC6 = 0;
   483  001BD6  9C8B               	bcf	3979,6,c	;volatile
   484                           
   485                           ;extended_spi.c: 39: INTCON2bits.INTEDG2 = 1;
   486  001BD8  88F1               	bsf	intcon2,4,c	;volatile
   487                           
   488                           ;extended_spi.c: 40: INTCON3bits.INT2E = 1;
   489  001BDA  88F0               	bsf	intcon3,4,c	;volatile
   490  001BDC  0012               	return	
   491  001BDE  0012               	return		;funcret
   492  001BE0                     __end_of_espi_setup:
   493                           	opt stack 0
   494                           tblptru	equ	0xFF8
   495                           intcon2	equ	0xFF1
   496                           intcon3	equ	0xFF0
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           plusw1	equ	0xFE3
   500                           plusw2	equ	0xFDB
   501                           status	equ	0xFD8
   502                           
   503 ;; *************** function _setup_spi *****************
   504 ;; Defined at:
   505 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;  SSPSTAT_reg     1    wreg     unsigned char 
   508 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
   509 ;; Auto vars:     Size  Location     Type
   510 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
   511 ;; Return value:  Size  Location     Type
   512 ;;		None               void
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0
   520 ;;      Params:         1       0
   521 ;;      Locals:         1       0
   522 ;;      Temps:          0       0
   523 ;;      Totals:         2       0
   524 ;;Total ram usage:        2 bytes
   525 ;; Hardware stack levels used:    1
   526 ;; This function calls:
   527 ;;		Nothing
   528 ;; This function is called by:
   529 ;;		_espi_setup
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text3
   534  001C1C                     __ptext3:
   535                           	opt stack 0
   536  001C1C                     _setup_spi:
   537                           	opt stack 29
   538                           
   539                           ;incstack = 0
   540                           ;setup_spi@SSPSTAT_reg stored from wreg
   541  001C1C  6E02               	movwf	setup_spi@SSPSTAT_reg,c
   542                           
   543                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
   544  001C1E  9E94               	bcf	3988,7,c	;volatile
   545                           
   546                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
   547  001C20  947F               	bcf	3967,2,c	;volatile
   548                           
   549                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
   550  001C22  8893               	bsf	3987,4,c	;volatile
   551                           
   552                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
   553  001C24  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
   554                           
   555                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
   556  001C28  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
   557                           
   558                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
   559  001C2C  50C6               	movf	4038,w,c	;volatile
   560  001C2E  0B0F               	andlw	15
   561  001C30  0A05               	xorlw	5
   562  001C32  B4D8               	btfsc	status,2,c
   563  001C34  D005               	goto	l47
   564  001C36  50C6               	movf	4038,w,c	;volatile
   565  001C38  0B0F               	andlw	15
   566  001C3A  0A04               	xorlw	4
   567  001C3C  A4D8               	btfss	status,2,c
   568  001C3E  D00A               	goto	l45
   569  001C40                     l47:
   570                           
   571                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
   572  001C40  8C93               	bsf	3987,6,c	;volatile
   573                           
   574                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
   575  001C42  50C6               	movf	4038,w,c	;volatile
   576  001C44  0B0F               	andlw	15
   577  001C46  0A04               	xorlw	4
   578  001C48  A4D8               	btfss	status,2,c
   579  001C4A  D002               	goto	l48
   580                           
   581                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
   582  001C4C  907F               	bcf	3967,0,c	;volatile
   583                           
   584                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
   585  001C4E  8C94               	bsf	3988,6,c	;volatile
   586  001C50                     l48:
   587                           
   588                           ;spi_pic.c: 26: }
   589                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
   590  001C50  9EC7               	bcf	4039,7,c	;volatile
   591                           
   592                           ;spi_pic.c: 28: } else {
   593  001C52  0012               	return	
   594  001C54                     l45:
   595                           
   596                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
   597  001C54  9C93               	bcf	3987,6,c	;volatile
   598  001C56  0012               	return	
   599  001C58  0012               	return		;funcret
   600  001C5A                     __end_of_setup_spi:
   601                           	opt stack 0
   602                           tblptru	equ	0xFF8
   603                           intcon2	equ	0xFF1
   604                           intcon3	equ	0xFF0
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           plusw1	equ	0xFE3
   608                           plusw2	equ	0xFDB
   609                           status	equ	0xFD8
   610                           
   611 ;; *************** function _espi_master_send *****************
   612 ;; Defined at:
   613 ;;		line 127 in file "../TorqueGriper.X/extended_spi.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
   616 ;;		 -> main@buffer(34), 
   617 ;;  timer_start     2    8[COMRAM] PTR FTN(int ,)void 
   618 ;;		 -> set_timer3(0), 
   619 ;;  timer           2   10[COMRAM] PTR FTN()unsigned char 
   620 ;;		 -> timer3_up(1), 
   621 ;; Auto vars:     Size  Location     Type
   622 ;;  byte_to_send    2   12[COMRAM] unsigned int 
   623 ;;  byte_2          1   17[COMRAM] unsigned char 
   624 ;;  byte_1          1   16[COMRAM] unsigned char 
   625 ;;  received_2      1   15[COMRAM] unsigned char 
   626 ;;  received_1      1   14[COMRAM] unsigned char 
   627 ;; Return value:  Size  Location     Type
   628 ;;                  2    6[COMRAM] int 
   629 ;; Registers used:
   630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMRAM   BANK0
   636 ;;      Params:         6       0
   637 ;;      Locals:         6       0
   638 ;;      Temps:          0       0
   639 ;;      Totals:        12       0
   640 ;;Total ram usage:       12 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; Hardware stack levels required when called:    2
   643 ;; This function calls:
   644 ;;		_buffer_count
   645 ;;		_buffer_peek
   646 ;;		_buffer_pop
   647 ;;		_encode_data
   648 ;;		_send_delay
   649 ;;		_spi_send_get_byte
   650 ;;		_wait_pulse
   651 ;; This function is called by:
   652 ;;		_main
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           	psect	text4
   657  001EE6                     __ptext4:
   658                           	opt stack 0
   659  001EE6                     _espi_master_send:
   660                           	opt stack 28
   661                           
   662                           ;extended_spi.c: 131: if (buffer_count(buffer)) {
   663                           
   664                           ;incstack = 0
   665  001EE6  C007  F001         	movff	espi_master_send@buffer,buffer_count@buffer
   666  001EEA  C008  F002         	movff	espi_master_send@buffer+1,buffer_count@buffer+1
   667  001EEE  EC89  F00D         	call	_buffer_count	;wreg free
   668  001EF2  0900               	iorlw	0
   669  001EF4  B4D8               	btfsc	status,2,c
   670  001EF6  0012               	return	
   671                           
   672                           ;extended_spi.c: 132: spi_send_get_byte(0x10);
   673  001EF8  0E10               	movlw	16
   674  001EFA  EC92  F00D         	call	_spi_send_get_byte
   675                           
   676                           ;extended_spi.c: 134: wait_pulse(0x10, timer_start, timer);
   677  001EFE  C009  F003         	movff	espi_master_send@timer_start,wait_pulse@timer_start
   678  001F02  C00A  F004         	movff	espi_master_send@timer_start+1,wait_pulse@timer_start+1
   679  001F06  C00B  F005         	movff	espi_master_send@timer,wait_pulse@timer
   680  001F0A  C00C  F006         	movff	espi_master_send@timer+1,wait_pulse@timer+1
   681  001F0E  0E10               	movlw	16
   682  001F10  ECC0  F00D         	call	_wait_pulse
   683                           
   684                           ;extended_spi.c: 136: uint16_t byte_to_send = buffer_peek(buffer);
   685  001F14  C007  F001         	movff	espi_master_send@buffer,buffer_peek@buffer
   686  001F18  C008  F002         	movff	espi_master_send@buffer+1,buffer_peek@buffer+1
   687  001F1C  EC50  F00E         	call	_buffer_peek	;wreg free
   688  001F20  C001  F00D         	movff	?_buffer_peek,espi_master_send@byte_to_send
   689  001F24  C002  F00E         	movff	?_buffer_peek+1,espi_master_send@byte_to_send+1
   690                           
   691                           ;extended_spi.c: 137: uint8_t byte_1;
   692                           ;extended_spi.c: 138: uint8_t byte_2;
   693                           ;extended_spi.c: 139: encode_data(byte_to_send, &byte_1, &byte_2);
   694  001F28  0E11               	movlw	low espi_master_send@byte_1
   695  001F2A  6E01               	movwf	encode_data@byte_1,c
   696  001F2C  0E00               	movlw	high espi_master_send@byte_1
   697  001F2E  6E02               	movwf	encode_data@byte_1+1,c
   698  001F30  0E12               	movlw	low espi_master_send@byte_2
   699  001F32  6E03               	movwf	encode_data@byte_2,c
   700  001F34  0E00               	movlw	high espi_master_send@byte_2
   701  001F36  6E04               	movwf	encode_data@byte_2+1,c
   702  001F38  500D               	movf	espi_master_send@byte_to_send,w,c
   703  001F3A  EC2D  F00E         	call	_encode_data
   704                           
   705                           ;extended_spi.c: 141: uint8_t received_1 = spi_send_get_byte(byte_1);
   706  001F3E  5011               	movf	espi_master_send@byte_1,w,c
   707  001F40  EC92  F00D         	call	_spi_send_get_byte
   708  001F44  6E0F               	movwf	espi_master_send@received_1,c
   709                           
   710                           ;extended_spi.c: 142: send_delay();
   711  001F46  EC7E  F00D         	call	_send_delay	;wreg free
   712                           
   713                           ;extended_spi.c: 143: uint8_t received_2 = spi_send_get_byte(byte_2);
   714  001F4A  5012               	movf	espi_master_send@byte_2,w,c
   715  001F4C  EC92  F00D         	call	_spi_send_get_byte
   716  001F50  6E10               	movwf	espi_master_send@received_2,c
   717                           
   718                           ;extended_spi.c: 144: send_delay();
   719  001F52  EC7E  F00D         	call	_send_delay	;wreg free
   720                           
   721                           ;extended_spi.c: 146: while (received_1 != 0x30 && received_2 != 0x30) {
   722  001F56  D03B               	goto	l1321
   723  001F58                     l1297:
   724                           
   725                           ;extended_spi.c: 147: buffer_pop(buffer);
   726  001F58  C007  F001         	movff	espi_master_send@buffer,buffer_pop@buffer
   727  001F5C  C008  F002         	movff	espi_master_send@buffer+1,buffer_pop@buffer+1
   728  001F60  ECDE  F00E         	call	_buffer_pop	;wreg free
   729                           
   730                           ;extended_spi.c: 148: byte_to_send = buffer_peek(buffer);
   731  001F64  C007  F001         	movff	espi_master_send@buffer,buffer_peek@buffer
   732  001F68  C008  F002         	movff	espi_master_send@buffer+1,buffer_peek@buffer+1
   733  001F6C  EC50  F00E         	call	_buffer_peek	;wreg free
   734  001F70  C001  F00D         	movff	?_buffer_peek,espi_master_send@byte_to_send
   735  001F74  C002  F00E         	movff	?_buffer_peek+1,espi_master_send@byte_to_send+1
   736                           
   737                           ;extended_spi.c: 149: if (byte_to_send == -1)
   738  001F78  280D               	incf	espi_master_send@byte_to_send,w,c
   739  001F7A  E105               	bnz	l1303
   740  001F7C  280E               	incf	espi_master_send@byte_to_send+1,w,c
   741  001F7E  B4D8               	btfsc	status,2,c
   742  001F80  D030               	goto	l1325
   743  001F82  D001               	goto	l1303
   744                           
   745                           ;extended_spi.c: 150: break;
   746  001F84  D02E               	goto	l1325
   747  001F86                     l1303:
   748                           
   749                           ;extended_spi.c: 152: encode_data(byte_to_send, &byte_1, &byte_2);
   750  001F86  0E11               	movlw	low espi_master_send@byte_1
   751  001F88  6E01               	movwf	encode_data@byte_1,c
   752  001F8A  0E00               	movlw	high espi_master_send@byte_1
   753  001F8C  6E02               	movwf	encode_data@byte_1+1,c
   754  001F8E  0E12               	movlw	low espi_master_send@byte_2
   755  001F90  6E03               	movwf	encode_data@byte_2,c
   756  001F92  0E00               	movlw	high espi_master_send@byte_2
   757  001F94  6E04               	movwf	encode_data@byte_2+1,c
   758  001F96  500D               	movf	espi_master_send@byte_to_send,w,c
   759  001F98  EC2D  F00E         	call	_encode_data
   760                           
   761                           ;extended_spi.c: 154: received_1 = spi_send_get_byte(byte_1);
   762  001F9C  5011               	movf	espi_master_send@byte_1,w,c
   763  001F9E  EC92  F00D         	call	_spi_send_get_byte
   764  001FA2  6E0F               	movwf	espi_master_send@received_1,c
   765                           
   766                           ;extended_spi.c: 155: send_delay();
   767  001FA4  EC7E  F00D         	call	_send_delay	;wreg free
   768                           
   769                           ;extended_spi.c: 156: if (received_1 == 0x30)
   770  001FA8  0E30               	movlw	48
   771  001FAA  180F               	xorwf	espi_master_send@received_1,w,c
   772  001FAC  B4D8               	btfsc	status,2,c
   773  001FAE  D019               	goto	l1325
   774  001FB0  D001               	goto	l1313
   775                           
   776                           ;extended_spi.c: 157: break;
   777  001FB2  D017               	goto	l1325
   778  001FB4                     l1313:
   779                           
   780                           ;extended_spi.c: 158: received_2 = spi_send_get_byte(byte_2);
   781  001FB4  5012               	movf	espi_master_send@byte_2,w,c
   782  001FB6  EC92  F00D         	call	_spi_send_get_byte
   783  001FBA  6E10               	movwf	espi_master_send@received_2,c
   784                           
   785                           ;extended_spi.c: 159: send_delay();
   786  001FBC  EC7E  F00D         	call	_send_delay	;wreg free
   787                           
   788                           ;extended_spi.c: 160: if (received_2 == 0x30)
   789  001FC0  0E30               	movlw	48
   790  001FC2  1810               	xorwf	espi_master_send@received_2,w,c
   791  001FC4  B4D8               	btfsc	status,2,c
   792  001FC6  D00D               	goto	l1325
   793  001FC8  D002               	goto	l1321
   794                           
   795                           ;extended_spi.c: 161: break;
   796  001FCA  D00B               	goto	l1325
   797  001FCC  D000               	goto	l1321
   798  001FCE                     l1321:
   799  001FCE  0E30               	movlw	48
   800  001FD0  180F               	xorwf	espi_master_send@received_1,w,c
   801  001FD2  B4D8               	btfsc	status,2,c
   802  001FD4  D006               	goto	l1325
   803  001FD6  0E30               	movlw	48
   804  001FD8  1810               	xorwf	espi_master_send@received_2,w,c
   805  001FDA  B4D8               	btfsc	status,2,c
   806  001FDC  D002               	goto	l1325
   807  001FDE  D7BC               	goto	l1297
   808  001FE0  D000               	goto	l1325
   809  001FE2                     l1325:
   810                           
   811                           ;extended_spi.c: 162: }
   812                           ;extended_spi.c: 164: if (received_1 != 0x30 && received_2 != 0x30) {
   813  001FE2  0E30               	movlw	48
   814  001FE4  180F               	xorwf	espi_master_send@received_1,w,c
   815  001FE6  B4D8               	btfsc	status,2,c
   816  001FE8  0012               	return	
   817  001FEA  0E30               	movlw	48
   818  001FEC  1810               	xorwf	espi_master_send@received_2,w,c
   819  001FEE  B4D8               	btfsc	status,2,c
   820  001FF0  0012               	return	
   821                           
   822                           ;extended_spi.c: 165: spi_send_get_byte(0x30);
   823  001FF2  0E30               	movlw	48
   824  001FF4  EC92  F00D         	call	_spi_send_get_byte
   825                           
   826                           ;extended_spi.c: 166: send_delay();
   827  001FF8  EC7E  F00D         	call	_send_delay	;wreg free
   828  001FFC  0012               	return	
   829                           
   830                           ;extended_spi.c: 167: }
   831                           ;extended_spi.c: 168: }
   832                           ;extended_spi.c: 170: return 0;
   833                           ;	Return value of _espi_master_send is never used
   834  001FFE  0012               	return		;funcret
   835  002000                     __end_of_espi_master_send:
   836                           	opt stack 0
   837                           tblptru	equ	0xFF8
   838                           intcon2	equ	0xFF1
   839                           intcon3	equ	0xFF0
   840                           postinc0	equ	0xFEE
   841                           wreg	equ	0xFE8
   842                           plusw1	equ	0xFE3
   843                           plusw2	equ	0xFDB
   844                           status	equ	0xFD8
   845                           
   846 ;; *************** function _encode_data *****************
   847 ;; Defined at:
   848 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;  data            1    wreg     unsigned char 
   851 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
   852 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
   853 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
   854 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  data            1    5[COMRAM] unsigned char 
   857 ;; Return value:  Size  Location     Type
   858 ;;		None               void
   859 ;; Registers used:
   860 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0
   866 ;;      Params:         4       0
   867 ;;      Locals:         1       0
   868 ;;      Temps:          1       0
   869 ;;      Totals:         6       0
   870 ;;Total ram usage:        6 bytes
   871 ;; Hardware stack levels used:    1
   872 ;; This function calls:
   873 ;;		Nothing
   874 ;; This function is called by:
   875 ;;		_espi_master_send
   876 ;;		_espi_slave_send
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text5
   881  001C5A                     __ptext5:
   882                           	opt stack 0
   883  001C5A                     _encode_data:
   884                           	opt stack 29
   885                           
   886                           ;incstack = 0
   887                           ;encode_data@data stored from wreg
   888  001C5A  6E06               	movwf	encode_data@data,c
   889                           
   890                           ;encoding.c: 5: *byte_1 = 0xA0;
   891  001C5C  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   892  001C60  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   893  001C64  0EA0               	movlw	160
   894  001C66  6EDF               	movwf	indf2,c
   895                           
   896                           ;encoding.c: 6: *byte_2 = 0xA0;
   897  001C68  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   898  001C6C  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   899  001C70  0EA0               	movlw	160
   900  001C72  6EDF               	movwf	indf2,c
   901                           
   902                           ;encoding.c: 8: *byte_1 |= data >> 4;
   903  001C74  C006  F005         	movff	encode_data@data,??_encode_data
   904  001C78  3A05               	swapf	??_encode_data,f,c
   905  001C7A  0E0F               	movlw	15
   906  001C7C  1605               	andwf	??_encode_data,f,c
   907  001C7E  C001  FFD9         	movff	encode_data@byte_1,fsr2l
   908  001C82  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
   909  001C86  5005               	movf	??_encode_data,w,c
   910  001C88  12DF               	iorwf	indf2,f,c
   911                           
   912                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
   913  001C8A  C006  F005         	movff	encode_data@data,??_encode_data
   914  001C8E  0E0F               	movlw	15
   915  001C90  1605               	andwf	??_encode_data,f,c
   916  001C92  C003  FFD9         	movff	encode_data@byte_2,fsr2l
   917  001C96  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
   918  001C9A  5005               	movf	??_encode_data,w,c
   919  001C9C  12DF               	iorwf	indf2,f,c
   920  001C9E  0012               	return		;funcret
   921  001CA0                     __end_of_encode_data:
   922                           	opt stack 0
   923                           tblptru	equ	0xFF8
   924                           intcon2	equ	0xFF1
   925                           intcon3	equ	0xFF0
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           plusw1	equ	0xFE3
   929                           indf2	equ	0xFDF
   930                           plusw2	equ	0xFDB
   931                           fsr2h	equ	0xFDA
   932                           fsr2l	equ	0xFD9
   933                           status	equ	0xFD8
   934                           
   935 ;; *************** function _buffer_pop *****************
   936 ;; Defined at:
   937 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
   940 ;;		 -> main@buffer(34), 
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  byte            2    4[COMRAM] int 
   943 ;; Return value:  Size  Location     Type
   944 ;;                  2    0[COMRAM] int 
   945 ;; Registers used:
   946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0
   952 ;;      Params:         2       0
   953 ;;      Locals:         2       0
   954 ;;      Temps:          2       0
   955 ;;      Totals:         6       0
   956 ;;Total ram usage:        6 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; This function calls:
   959 ;;		Nothing
   960 ;; This function is called by:
   961 ;;		_espi_master_send
   962 ;;		_espi_slave_send
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text6
   967  001DBC                     __ptext6:
   968                           	opt stack 0
   969  001DBC                     _buffer_pop:
   970                           	opt stack 29
   971                           
   972                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
   973                           
   974                           ;incstack = 0
   975  001DBC  EE20 F001          	lfsr	2,1
   976  001DC0  5001               	movf	buffer_pop@buffer,w,c
   977  001DC2  26D9               	addwf	fsr2l,f,c
   978  001DC4  5002               	movf	buffer_pop@buffer+1,w,c
   979  001DC6  22DA               	addwfc	fsr2h,f,c
   980  001DC8  50DF               	movf	indf2,w,c
   981  001DCA  B4D8               	btfsc	status,2,c
   982  001DCC  0012               	return	
   983  001DCE  D001               	goto	l1217
   984                           
   985                           ;circular_buffer.c: 40: return -1;
   986                           ;	Return value of _buffer_pop is never used
   987  001DD0  0012               	return	
   988  001DD2                     l1217:
   989                           
   990                           ;circular_buffer.c: 41: }
   991                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
   992  001DD2  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
   993  001DD6  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
   994  001DDA  50DF               	movf	indf2,w,c
   995  001DDC  6E03               	movwf	??_buffer_pop& (0+255),c
   996  001DDE  5003               	movf	??_buffer_pop,w,c
   997  001DE0  0D01               	mullw	1
   998  001DE2  0E02               	movlw	2
   999  001DE4  26F3               	addwf	prodl,f,c
  1000  001DE6  0E00               	movlw	0
  1001  001DE8  22F4               	addwfc	prodh,f,c
  1002  001DEA  50F3               	movf	prodl,w,c
  1003  001DEC  2401               	addwf	buffer_pop@buffer,w,c
  1004  001DEE  6ED9               	movwf	fsr2l,c
  1005  001DF0  50F4               	movf	prodh,w,c
  1006  001DF2  2002               	addwfc	buffer_pop@buffer+1,w,c
  1007  001DF4  6EDA               	movwf	fsr2h,c
  1008  001DF6  50DF               	movf	indf2,w,c
  1009  001DF8  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  1010  001DFA  5004               	movf	??_buffer_pop+1,w,c
  1011  001DFC  6E05               	movwf	buffer_pop@byte,c
  1012  001DFE  6A06               	clrf	buffer_pop@byte+1,c
  1013                           
  1014                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  1015  001E00  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  1016  001E04  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  1017  001E08  50DF               	movf	indf2,w,c
  1018  001E0A  6E03               	movwf	??_buffer_pop& (0+255),c
  1019  001E0C  2803               	incf	??_buffer_pop,w,c
  1020  001E0E  0B1F               	andlw	31
  1021  001E10  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  1022  001E14  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  1023  001E18  6EDF               	movwf	indf2,c
  1024                           
  1025                           ;circular_buffer.c: 45: buffer->count--;
  1026  001E1A  EE20 F001          	lfsr	2,1
  1027  001E1E  5001               	movf	buffer_pop@buffer,w,c
  1028  001E20  26D9               	addwf	fsr2l,f,c
  1029  001E22  5002               	movf	buffer_pop@buffer+1,w,c
  1030  001E24  22DA               	addwfc	fsr2h,f,c
  1031  001E26  06DF               	decf	indf2,f,c
  1032  001E28  0012               	return	
  1033                           
  1034                           ;circular_buffer.c: 47: return byte;
  1035                           ;	Return value of _buffer_pop is never used
  1036  001E2A  0012               	return		;funcret
  1037  001E2C                     __end_of_buffer_pop:
  1038                           	opt stack 0
  1039                           tblptru	equ	0xFF8
  1040                           prodh	equ	0xFF4
  1041                           prodl	equ	0xFF3
  1042                           intcon2	equ	0xFF1
  1043                           intcon3	equ	0xFF0
  1044                           postinc0	equ	0xFEE
  1045                           wreg	equ	0xFE8
  1046                           plusw1	equ	0xFE3
  1047                           indf2	equ	0xFDF
  1048                           plusw2	equ	0xFDB
  1049                           fsr2h	equ	0xFDA
  1050                           fsr2l	equ	0xFD9
  1051                           status	equ	0xFD8
  1052                           
  1053 ;; *************** function _buffer_peek *****************
  1054 ;; Defined at:
  1055 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1058 ;;		 -> main@buffer(34), 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  byte            2    4[COMRAM] int 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  2    0[COMRAM] unsigned int 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0
  1070 ;;      Params:         2       0
  1071 ;;      Locals:         2       0
  1072 ;;      Temps:          2       0
  1073 ;;      Totals:         6       0
  1074 ;;Total ram usage:        6 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_espi_master_send
  1080 ;;		_espi_slave_send
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text7
  1085  001CA0                     __ptext7:
  1086                           	opt stack 0
  1087  001CA0                     _buffer_peek:
  1088                           	opt stack 29
  1089                           
  1090                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
  1091                           
  1092                           ;incstack = 0
  1093  001CA0  EE20 F001          	lfsr	2,1
  1094  001CA4  5001               	movf	buffer_peek@buffer,w,c
  1095  001CA6  26D9               	addwf	fsr2l,f,c
  1096  001CA8  5002               	movf	buffer_peek@buffer+1,w,c
  1097  001CAA  22DA               	addwfc	fsr2h,f,c
  1098  001CAC  50DF               	movf	indf2,w,c
  1099  001CAE  A4D8               	btfss	status,2,c
  1100  001CB0  D003               	goto	l1201
  1101                           
  1102                           ;circular_buffer.c: 58: return -1;
  1103  001CB2  6801               	setf	?_buffer_peek,c
  1104  001CB4  6802               	setf	?_buffer_peek+1,c
  1105  001CB6  0012               	return	
  1106  001CB8                     l1201:
  1107                           
  1108                           ;circular_buffer.c: 59: }
  1109                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  1110  001CB8  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
  1111  001CBC  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
  1112  001CC0  50DF               	movf	indf2,w,c
  1113  001CC2  6E03               	movwf	??_buffer_peek& (0+255),c
  1114  001CC4  5003               	movf	??_buffer_peek,w,c
  1115  001CC6  0D01               	mullw	1
  1116  001CC8  0E02               	movlw	2
  1117  001CCA  26F3               	addwf	prodl,f,c
  1118  001CCC  0E00               	movlw	0
  1119  001CCE  22F4               	addwfc	prodh,f,c
  1120  001CD0  50F3               	movf	prodl,w,c
  1121  001CD2  2401               	addwf	buffer_peek@buffer,w,c
  1122  001CD4  6ED9               	movwf	fsr2l,c
  1123  001CD6  50F4               	movf	prodh,w,c
  1124  001CD8  2002               	addwfc	buffer_peek@buffer+1,w,c
  1125  001CDA  6EDA               	movwf	fsr2h,c
  1126  001CDC  50DF               	movf	indf2,w,c
  1127  001CDE  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
  1128  001CE0  5004               	movf	??_buffer_peek+1,w,c
  1129  001CE2  6E05               	movwf	buffer_peek@byte,c
  1130  001CE4  6A06               	clrf	buffer_peek@byte+1,c
  1131                           
  1132                           ;circular_buffer.c: 63: return byte;
  1133  001CE6  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
  1134  001CEA  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
  1135  001CEE  0012               	return	
  1136  001CF0  0012               	return		;funcret
  1137  001CF2                     __end_of_buffer_peek:
  1138                           	opt stack 0
  1139                           tblptru	equ	0xFF8
  1140                           prodh	equ	0xFF4
  1141                           prodl	equ	0xFF3
  1142                           intcon2	equ	0xFF1
  1143                           intcon3	equ	0xFF0
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           plusw1	equ	0xFE3
  1147                           indf2	equ	0xFDF
  1148                           plusw2	equ	0xFDB
  1149                           fsr2h	equ	0xFDA
  1150                           fsr2l	equ	0xFD9
  1151                           status	equ	0xFD8
  1152                           
  1153 ;; *************** function _buffer_count *****************
  1154 ;; Defined at:
  1155 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1158 ;;		 -> main@buffer(34), 
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;		None
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      unsigned char 
  1163 ;; Registers used:
  1164 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0
  1170 ;;      Params:         2       0
  1171 ;;      Locals:         0       0
  1172 ;;      Temps:          0       0
  1173 ;;      Totals:         2       0
  1174 ;;Total ram usage:        2 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; This function calls:
  1177 ;;		Nothing
  1178 ;; This function is called by:
  1179 ;;		_espi_master_send
  1180 ;;		_espi_slave_send
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text8
  1185  001B12                     __ptext8:
  1186                           	opt stack 0
  1187  001B12                     _buffer_count:
  1188                           	opt stack 29
  1189                           
  1190                           ;circular_buffer.c: 6: return buffer->count;
  1191                           
  1192                           ;incstack = 0
  1193  001B12  EE20 F001          	lfsr	2,1
  1194  001B16  5001               	movf	buffer_count@buffer,w,c
  1195  001B18  26D9               	addwf	fsr2l,f,c
  1196  001B1A  5002               	movf	buffer_count@buffer+1,w,c
  1197  001B1C  22DA               	addwfc	fsr2h,f,c
  1198  001B1E  50DF               	movf	indf2,w,c
  1199  001B20  0012               	return	
  1200  001B22  0012               	return		;funcret
  1201  001B24                     __end_of_buffer_count:
  1202                           	opt stack 0
  1203                           tblptru	equ	0xFF8
  1204                           prodh	equ	0xFF4
  1205                           prodl	equ	0xFF3
  1206                           intcon2	equ	0xFF1
  1207                           intcon3	equ	0xFF0
  1208                           postinc0	equ	0xFEE
  1209                           wreg	equ	0xFE8
  1210                           plusw1	equ	0xFE3
  1211                           indf2	equ	0xFDF
  1212                           plusw2	equ	0xFDB
  1213                           fsr2h	equ	0xFDA
  1214                           fsr2l	equ	0xFD9
  1215                           status	equ	0xFD8
  1216                           
  1217 ;; *************** function _espi_master_receive *****************
  1218 ;; Defined at:
  1219 ;;		line 173 in file "../TorqueGriper.X/extended_spi.c"
  1220 ;; Parameters:    Size  Location     Type
  1221 ;;  buffer          2    6[COMRAM] PTR struct circular_buff
  1222 ;;		 -> main@buffer(34), 
  1223 ;;  timer_start     2    8[COMRAM] PTR FTN(int ,)void 
  1224 ;;		 -> set_timer3(0), 
  1225 ;;  timer           2   10[COMRAM] PTR FTN()unsigned char 
  1226 ;;		 -> timer3_up(1), 
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  received_2      1   15[COMRAM] unsigned char 
  1229 ;;  received_1      1   14[COMRAM] unsigned char 
  1230 ;;  value           1   13[COMRAM] unsigned char 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  2    6[COMRAM] int 
  1233 ;; Registers used:
  1234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0
  1240 ;;      Params:         6       0
  1241 ;;      Locals:         3       0
  1242 ;;      Temps:          1       0
  1243 ;;      Totals:        10       0
  1244 ;;Total ram usage:       10 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    2
  1247 ;; This function calls:
  1248 ;;		_buffer_empty
  1249 ;;		_buffer_push
  1250 ;;		_buffer_space
  1251 ;;		_decode_data
  1252 ;;		_send_delay
  1253 ;;		_spi_send_get_byte
  1254 ;;		_wait_pulse
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           	psect	text9
  1261  001E2C                     __ptext9:
  1262                           	opt stack 0
  1263  001E2C                     _espi_master_receive:
  1264                           	opt stack 28
  1265                           
  1266                           ;extended_spi.c: 177: if (buffer_empty(buffer)) {
  1267                           
  1268                           ;incstack = 0
  1269  001E2C  C007  F001         	movff	espi_master_receive@buffer,buffer_empty@buffer
  1270  001E30  C008  F002         	movff	espi_master_receive@buffer+1,buffer_empty@buffer+1
  1271  001E34  ECB2  F00D         	call	_buffer_empty	;wreg free
  1272  001E38  0900               	iorlw	0
  1273  001E3A  B4D8               	btfsc	status,2,c
  1274  001E3C  0012               	return	
  1275                           
  1276                           ;extended_spi.c: 178: spi_send_get_byte(0x20);
  1277  001E3E  0E20               	movlw	32
  1278  001E40  EC92  F00D         	call	_spi_send_get_byte
  1279                           
  1280                           ;extended_spi.c: 180: wait_pulse(0x20, timer_start, timer);
  1281  001E44  C009  F003         	movff	espi_master_receive@timer_start,wait_pulse@timer_start
  1282  001E48  C00A  F004         	movff	espi_master_receive@timer_start+1,wait_pulse@timer_start+1
  1283  001E4C  C00B  F005         	movff	espi_master_receive@timer,wait_pulse@timer
  1284  001E50  C00C  F006         	movff	espi_master_receive@timer+1,wait_pulse@timer+1
  1285  001E54  0E20               	movlw	32
  1286  001E56  ECC0  F00D         	call	_wait_pulse
  1287                           
  1288                           ;extended_spi.c: 182: uint8_t received_1;
  1289                           ;extended_spi.c: 183: uint8_t received_2;
  1290                           ;extended_spi.c: 184: uint8_t value;
  1291                           ;extended_spi.c: 185: while (buffer_space(buffer) > 30) {
  1292  001E5A  D02B               	goto	l1267
  1293  001E5C                     l1247:
  1294                           
  1295                           ;extended_spi.c: 186: received_1 = spi_send_get_byte(0xE0);
  1296  001E5C  0EE0               	movlw	224
  1297  001E5E  EC92  F00D         	call	_spi_send_get_byte
  1298  001E62  6E0F               	movwf	espi_master_receive@received_1,c
  1299                           
  1300                           ;extended_spi.c: 187: if (received_1 == 0x30)
  1301  001E64  0E30               	movlw	48
  1302  001E66  180F               	xorwf	espi_master_receive@received_1,w,c
  1303  001E68  B4D8               	btfsc	status,2,c
  1304  001E6A  D02E               	goto	l1269
  1305  001E6C  D001               	goto	l1253
  1306                           
  1307                           ;extended_spi.c: 188: break;
  1308  001E6E  D02C               	goto	l1269
  1309  001E70                     l1253:
  1310                           
  1311                           ;extended_spi.c: 189: send_delay();
  1312  001E70  EC7E  F00D         	call	_send_delay	;wreg free
  1313                           
  1314                           ;extended_spi.c: 190: received_2 = spi_send_get_byte(0xE0);
  1315  001E74  0EE0               	movlw	224
  1316  001E76  EC92  F00D         	call	_spi_send_get_byte
  1317  001E7A  6E10               	movwf	espi_master_receive@received_2,c
  1318                           
  1319                           ;extended_spi.c: 191: if (received_2 == 0x30)
  1320  001E7C  0E30               	movlw	48
  1321  001E7E  1810               	xorwf	espi_master_receive@received_2,w,c
  1322  001E80  B4D8               	btfsc	status,2,c
  1323  001E82  D022               	goto	l1269
  1324  001E84  D001               	goto	l1261
  1325                           
  1326                           ;extended_spi.c: 192: break;
  1327  001E86  D020               	goto	l1269
  1328  001E88                     l1261:
  1329                           
  1330                           ;extended_spi.c: 193: send_delay();
  1331  001E88  EC7E  F00D         	call	_send_delay	;wreg free
  1332                           
  1333                           ;extended_spi.c: 195: decode_data(&value, received_1, received_2);
  1334  001E8C  0E0E               	movlw	low espi_master_receive@value
  1335  001E8E  6E01               	movwf	decode_data@data,c
  1336  001E90  0E00               	movlw	high espi_master_receive@value
  1337  001E92  6E02               	movwf	decode_data@data+1,c
  1338  001E94  C00F  F003         	movff	espi_master_receive@received_1,decode_data@byte_1
  1339  001E98  C010  F004         	movff	espi_master_receive@received_2,decode_data@byte_2
  1340  001E9C  ECF0  F00D         	call	_decode_data	;wreg free
  1341                           
  1342                           ;extended_spi.c: 196: buffer_push(buffer, value);
  1343  001EA0  C007  F001         	movff	espi_master_receive@buffer,buffer_push@buffer
  1344  001EA4  C008  F002         	movff	espi_master_receive@buffer+1,buffer_push@buffer+1
  1345  001EA8  C00E  F003         	movff	espi_master_receive@value,buffer_push@byte
  1346  001EAC  ECAB  F00E         	call	_buffer_push	;wreg free
  1347  001EB0  D000               	goto	l1267
  1348  001EB2                     l1267:
  1349  001EB2  C007  F001         	movff	espi_master_receive@buffer,buffer_space@buffer
  1350  001EB6  C008  F002         	movff	espi_master_receive@buffer+1,buffer_space@buffer+1
  1351  001EBA  EC9C  F00D         	call	_buffer_space	;wreg free
  1352  001EBE  6E0D               	movwf	??_espi_master_receive& (0+255),c
  1353  001EC0  0E1F               	movlw	31
  1354  001EC2  600D               	cpfslt	??_espi_master_receive,c
  1355  001EC4  D7CB               	goto	l1247
  1356  001EC6  D000               	goto	l1269
  1357  001EC8                     l1269:
  1358                           
  1359                           ;extended_spi.c: 197: }
  1360                           ;extended_spi.c: 199: if (received_1 != 0x30 && received_2 != 0x30) {
  1361  001EC8  0E30               	movlw	48
  1362  001ECA  180F               	xorwf	espi_master_receive@received_1,w,c
  1363  001ECC  B4D8               	btfsc	status,2,c
  1364  001ECE  0012               	return	
  1365  001ED0  0E30               	movlw	48
  1366  001ED2  1810               	xorwf	espi_master_receive@received_2,w,c
  1367  001ED4  B4D8               	btfsc	status,2,c
  1368  001ED6  0012               	return	
  1369                           
  1370                           ;extended_spi.c: 200: spi_send_get_byte(0x30);
  1371  001ED8  0E30               	movlw	48
  1372  001EDA  EC92  F00D         	call	_spi_send_get_byte
  1373                           
  1374                           ;extended_spi.c: 201: send_delay();
  1375  001EDE  EC7E  F00D         	call	_send_delay	;wreg free
  1376  001EE2  0012               	return	
  1377                           
  1378                           ;extended_spi.c: 202: }
  1379                           ;extended_spi.c: 203: }
  1380                           ;extended_spi.c: 205: return 0;
  1381                           ;	Return value of _espi_master_receive is never used
  1382  001EE4  0012               	return		;funcret
  1383  001EE6                     __end_of_espi_master_receive:
  1384                           	opt stack 0
  1385                           tblptru	equ	0xFF8
  1386                           prodh	equ	0xFF4
  1387                           prodl	equ	0xFF3
  1388                           intcon2	equ	0xFF1
  1389                           intcon3	equ	0xFF0
  1390                           postinc0	equ	0xFEE
  1391                           wreg	equ	0xFE8
  1392                           plusw1	equ	0xFE3
  1393                           indf2	equ	0xFDF
  1394                           plusw2	equ	0xFDB
  1395                           fsr2h	equ	0xFDA
  1396                           fsr2l	equ	0xFD9
  1397                           status	equ	0xFD8
  1398                           
  1399 ;; *************** function _wait_pulse *****************
  1400 ;; Defined at:
  1401 ;;		line 114 in file "../TorqueGriper.X/extended_spi.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  value           1    wreg     unsigned char 
  1404 ;;  timer_start     2    2[COMRAM] PTR FTN(int ,)void 
  1405 ;;		 -> set_timer3(0), 
  1406 ;;  timer           2    4[COMRAM] PTR FTN()unsigned char 
  1407 ;;		 -> timer3_up(1), 
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;  value           1    0[COMRAM] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;		None               void
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, pclat, tosl, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0
  1419 ;;      Params:         4       0
  1420 ;;      Locals:         0       0
  1421 ;;      Temps:          0       0
  1422 ;;      Totals:         4       0
  1423 ;;Total ram usage:        4 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    1
  1426 ;; This function calls:
  1427 ;;		_set_timer3
  1428 ;; This function is called by:
  1429 ;;		_espi_master_send
  1430 ;;		_espi_master_receive
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text10
  1435  001B80                     __ptext10:
  1436                           	opt stack 0
  1437  001B80                     _wait_pulse:
  1438                           	opt stack 28
  1439                           
  1440                           ;extended_spi.c: 117: (*timer_start)(63535);
  1441                           
  1442                           ;incstack = 0
  1443  001B80  0EF8               	movlw	248
  1444  001B82  6E02               	movwf	set_timer3@value+1,c
  1445  001B84  0E2F               	movlw	47
  1446  001B86  6E01               	movwf	set_timer3@value,c
  1447  001B88  D801               	call	u608
  1448  001B8A  D00A               	goto	l154
  1449  001B8C                     u608:
  1450  001B8C  0005               	push	
  1451  001B8E  6EFA               	movwf	pclath,c
  1452  001B90  5003               	movf	wait_pulse@timer_start,w,c
  1453  001B92  6EFD               	movwf	tosl,c
  1454  001B94  5004               	movf	wait_pulse@timer_start+1,w,c
  1455  001B96  6EFE               	movwf	tosh,c
  1456  001B98  50F8               	movf	tblptru,w,c
  1457  001B9A  6EFF               	movwf	tosu,c
  1458  001B9C  50FA               	movf	pclath,w,c
  1459  001B9E  0012               	return		;indir
  1460  001BA0                     l154:
  1461  001BA0  A2F0               	btfss	intcon3,1,c	;volatile
  1462  001BA2  D7FE               	goto	l154
  1463                           
  1464                           ;extended_spi.c: 123: }
  1465                           ;extended_spi.c: 124: INT2IF = 0;
  1466  001BA4  92F0               	bcf	intcon3,1,c	;volatile
  1467  001BA6  0012               	return		;funcret
  1468  001BA8                     __end_of_wait_pulse:
  1469                           	opt stack 0
  1470                           tosu	equ	0xFFF
  1471                           tosh	equ	0xFFE
  1472                           tosl	equ	0xFFD
  1473                           pclath	equ	0xFFA
  1474                           tblptru	equ	0xFF8
  1475                           prodh	equ	0xFF4
  1476                           prodl	equ	0xFF3
  1477                           intcon2	equ	0xFF1
  1478                           intcon3	equ	0xFF0
  1479                           postinc0	equ	0xFEE
  1480                           wreg	equ	0xFE8
  1481                           plusw1	equ	0xFE3
  1482                           indf2	equ	0xFDF
  1483                           plusw2	equ	0xFDB
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _set_timer3 *****************
  1489 ;; Defined at:
  1490 ;;		line 8 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  value           2    0[COMRAM] int 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;		None               void
  1497 ;; Registers used:
  1498 ;;		None
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0
  1504 ;;      Params:         2       0
  1505 ;;      Locals:         0       0
  1506 ;;      Temps:          0       0
  1507 ;;      Totals:         2       0
  1508 ;;Total ram usage:        2 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;;		_wait_pulse
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text11
  1519  001B06                     __ptext11:
  1520                           	opt stack 0
  1521  001B06                     _set_timer3:
  1522                           	opt stack 28
  1523                           
  1524                           ;timers_pic.c: 10: PIR2bits.TMR3IF = 0;
  1525                           
  1526                           ;incstack = 0
  1527  001B06  92A1               	bcf	4001,1,c	;volatile
  1528                           
  1529                           ;timers_pic.c: 11: TMR3 = value;
  1530  001B08  C001  FFB2         	movff	set_timer3@value,4018	;volatile
  1531  001B0C  C002  FFB3         	movff	set_timer3@value+1,4019	;volatile
  1532  001B10  0012               	return		;funcret
  1533  001B12                     __end_of_set_timer3:
  1534                           	opt stack 0
  1535                           tosu	equ	0xFFF
  1536                           tosh	equ	0xFFE
  1537                           tosl	equ	0xFFD
  1538                           pclath	equ	0xFFA
  1539                           tblptru	equ	0xFF8
  1540                           prodh	equ	0xFF4
  1541                           prodl	equ	0xFF3
  1542                           intcon2	equ	0xFF1
  1543                           intcon3	equ	0xFF0
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           plusw1	equ	0xFE3
  1547                           indf2	equ	0xFDF
  1548                           plusw2	equ	0xFDB
  1549                           fsr2h	equ	0xFDA
  1550                           fsr2l	equ	0xFD9
  1551                           status	equ	0xFD8
  1552                           
  1553 ;; *************** function _spi_send_get_byte *****************
  1554 ;; Defined at:
  1555 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;  byte            1    wreg     unsigned char 
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;  byte            1    0[COMRAM] unsigned char 
  1560 ;; Return value:  Size  Location     Type
  1561 ;;                  1    wreg      unsigned char 
  1562 ;; Registers used:
  1563 ;;		wreg, status,2
  1564 ;; Tracked objects:
  1565 ;;		On entry : 0/0
  1566 ;;		On exit  : 0/0
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMRAM   BANK0
  1569 ;;      Params:         0       0
  1570 ;;      Locals:         1       0
  1571 ;;      Temps:          0       0
  1572 ;;      Totals:         1       0
  1573 ;;Total ram usage:        1 bytes
  1574 ;; Hardware stack levels used:    1
  1575 ;; This function calls:
  1576 ;;		Nothing
  1577 ;; This function is called by:
  1578 ;;		_espi_master_send
  1579 ;;		_espi_master_receive
  1580 ;;		_espi_slave_receive
  1581 ;;		_espi_slave_send
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text12
  1586  001B24                     __ptext12:
  1587                           	opt stack 0
  1588  001B24                     _spi_send_get_byte:
  1589                           	opt stack 29
  1590                           
  1591                           ;incstack = 0
  1592                           ;spi_send_get_byte@byte stored from wreg
  1593  001B24  6E01               	movwf	spi_send_get_byte@byte,c
  1594                           
  1595                           ;spi_pic.c: 35: SSPBUF = byte;
  1596  001B26  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  1597                           
  1598                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  1599  001B2A  D000               	goto	l53
  1600  001B2C                     l53:
  1601  001B2C  A0C7               	btfss	4039,0,c	;volatile
  1602  001B2E  D7FE               	goto	l53
  1603                           
  1604                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  1605  001B30  BEC6               	btfsc	4038,7,c	;volatile
  1606                           
  1607                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  1608  001B32  9EC6               	bcf	4038,7,c	;volatile
  1609                           
  1610                           ;spi_pic.c: 39: return SSPBUF;
  1611  001B34  50C9               	movf	4041,w,c	;volatile
  1612  001B36  0012               	return		;funcret
  1613  001B38                     __end_of_spi_send_get_byte:
  1614                           	opt stack 0
  1615                           tosu	equ	0xFFF
  1616                           tosh	equ	0xFFE
  1617                           tosl	equ	0xFFD
  1618                           pclath	equ	0xFFA
  1619                           tblptru	equ	0xFF8
  1620                           prodh	equ	0xFF4
  1621                           prodl	equ	0xFF3
  1622                           intcon2	equ	0xFF1
  1623                           intcon3	equ	0xFF0
  1624                           postinc0	equ	0xFEE
  1625                           wreg	equ	0xFE8
  1626                           plusw1	equ	0xFE3
  1627                           indf2	equ	0xFDF
  1628                           plusw2	equ	0xFDB
  1629                           fsr2h	equ	0xFDA
  1630                           fsr2l	equ	0xFD9
  1631                           status	equ	0xFD8
  1632                           
  1633 ;; *************** function _send_delay *****************
  1634 ;; Defined at:
  1635 ;;		line 19 in file "../TorqueGriper.X/extended_spi.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;		None
  1640 ;; Return value:  Size  Location     Type
  1641 ;;		None               void
  1642 ;; Registers used:
  1643 ;;		wreg
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMRAM   BANK0
  1649 ;;      Params:         0       0
  1650 ;;      Locals:         0       0
  1651 ;;      Temps:          0       0
  1652 ;;      Totals:         0       0
  1653 ;;Total ram usage:        0 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; This function calls:
  1656 ;;		Nothing
  1657 ;; This function is called by:
  1658 ;;		_espi_master_send
  1659 ;;		_espi_master_receive
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text13
  1664  001AFC                     __ptext13:
  1665                           	opt stack 0
  1666  001AFC                     _send_delay:
  1667                           	opt stack 29
  1668                           
  1669                           ;extended_spi.c: 21: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1670                           
  1671                           ;incstack = 0
  1672  001AFC  0E85               	movlw	133
  1673  001AFE                     u947:
  1674  001AFE  2EE8               	decfsz	wreg,f,c
  1675  001B00  D7FE               	goto	u947
  1676  001B02  F000               	nop	
  1677  001B04  0012               	return		;funcret
  1678  001B06                     __end_of_send_delay:
  1679                           	opt stack 0
  1680                           tosu	equ	0xFFF
  1681                           tosh	equ	0xFFE
  1682                           tosl	equ	0xFFD
  1683                           pclath	equ	0xFFA
  1684                           tblptru	equ	0xFF8
  1685                           prodh	equ	0xFF4
  1686                           prodl	equ	0xFF3
  1687                           intcon2	equ	0xFF1
  1688                           intcon3	equ	0xFF0
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           plusw1	equ	0xFE3
  1692                           indf2	equ	0xFDF
  1693                           plusw2	equ	0xFDB
  1694                           fsr2h	equ	0xFDA
  1695                           fsr2l	equ	0xFD9
  1696                           status	equ	0xFD8
  1697                           
  1698 ;; *************** function _decode_data *****************
  1699 ;; Defined at:
  1700 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  data            2    0[COMRAM] PTR unsigned char 
  1703 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  1704 ;;  byte_1          1    2[COMRAM] unsigned char 
  1705 ;;  byte_2          1    3[COMRAM] unsigned char 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;		None
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      char 
  1710 ;; Registers used:
  1711 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMRAM   BANK0
  1717 ;;      Params:         4       0
  1718 ;;      Locals:         0       0
  1719 ;;      Temps:          1       0
  1720 ;;      Totals:         5       0
  1721 ;;Total ram usage:        5 bytes
  1722 ;; Hardware stack levels used:    1
  1723 ;; This function calls:
  1724 ;;		Nothing
  1725 ;; This function is called by:
  1726 ;;		_espi_master_receive
  1727 ;;		_espi_slave_receive
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text14
  1732  001BE0                     __ptext14:
  1733                           	opt stack 0
  1734  001BE0                     _decode_data:
  1735                           	opt stack 29
  1736                           
  1737                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  1738                           
  1739                           ;incstack = 0
  1740  001BE0  5003               	movf	decode_data@byte_1,w,c
  1741  001BE2  0BF0               	andlw	240
  1742  001BE4  0AA0               	xorlw	160
  1743  001BE6  A4D8               	btfss	status,2,c
  1744  001BE8  0012               	return	
  1745  001BEA  D002               	goto	l1169
  1746                           
  1747                           ;encoding.c: 15: return -1;
  1748                           ;	Return value of _decode_data is never used
  1749  001BEC  0012               	return	
  1750  001BEE  D008               	goto	l1173
  1751  001BF0                     l1169:
  1752                           
  1753                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  1754  001BF0  5004               	movf	decode_data@byte_2,w,c
  1755  001BF2  0BF0               	andlw	240
  1756  001BF4  0AA0               	xorlw	160
  1757  001BF6  A4D8               	btfss	status,2,c
  1758  001BF8  0012               	return	
  1759  001BFA  D002               	goto	l1173
  1760                           
  1761                           ;encoding.c: 17: return -2;
  1762                           ;	Return value of _decode_data is never used
  1763  001BFC  0012               	return	
  1764  001BFE  D000               	goto	l1173
  1765  001C00                     l1173:
  1766                           
  1767                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  1768  001C00  C004  F005         	movff	decode_data@byte_2,??_decode_data
  1769  001C04  0E0F               	movlw	15
  1770  001C06  1605               	andwf	??_decode_data,f,c
  1771  001C08  3803               	swapf	decode_data@byte_1,w,c
  1772  001C0A  0BF0               	andlw	240
  1773  001C0C  1005               	iorwf	??_decode_data,w,c
  1774  001C0E  C001  FFD9         	movff	decode_data@data,fsr2l
  1775  001C12  C002  FFDA         	movff	decode_data@data+1,fsr2h
  1776  001C16  6EDF               	movwf	indf2,c
  1777  001C18  0012               	return	
  1778                           
  1779                           ;encoding.c: 21: return 0;
  1780                           ;	Return value of _decode_data is never used
  1781  001C1A  0012               	return		;funcret
  1782  001C1C                     __end_of_decode_data:
  1783                           	opt stack 0
  1784                           tosu	equ	0xFFF
  1785                           tosh	equ	0xFFE
  1786                           tosl	equ	0xFFD
  1787                           pclath	equ	0xFFA
  1788                           tblptru	equ	0xFF8
  1789                           prodh	equ	0xFF4
  1790                           prodl	equ	0xFF3
  1791                           intcon2	equ	0xFF1
  1792                           intcon3	equ	0xFF0
  1793                           postinc0	equ	0xFEE
  1794                           wreg	equ	0xFE8
  1795                           plusw1	equ	0xFE3
  1796                           indf2	equ	0xFDF
  1797                           plusw2	equ	0xFDB
  1798                           fsr2h	equ	0xFDA
  1799                           fsr2l	equ	0xFD9
  1800                           status	equ	0xFD8
  1801                           
  1802 ;; *************** function _buffer_space *****************
  1803 ;; Defined at:
  1804 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1807 ;;		 -> main@buffer(34), 
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;		None
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  1    wreg      unsigned char 
  1812 ;; Registers used:
  1813 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0
  1819 ;;      Params:         2       0
  1820 ;;      Locals:         0       0
  1821 ;;      Temps:          0       0
  1822 ;;      Totals:         2       0
  1823 ;;Total ram usage:        2 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; This function calls:
  1826 ;;		Nothing
  1827 ;; This function is called by:
  1828 ;;		_espi_master_receive
  1829 ;;		_espi_slave_receive
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           	psect	text15
  1834  001B38                     __ptext15:
  1835                           	opt stack 0
  1836  001B38                     _buffer_space:
  1837                           	opt stack 29
  1838                           
  1839                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  1840                           
  1841                           ;incstack = 0
  1842  001B38  EE20 F001          	lfsr	2,1
  1843  001B3C  5001               	movf	buffer_space@buffer,w,c
  1844  001B3E  26D9               	addwf	fsr2l,f,c
  1845  001B40  5002               	movf	buffer_space@buffer+1,w,c
  1846  001B42  22DA               	addwfc	fsr2h,f,c
  1847  001B44  50DF               	movf	indf2,w,c
  1848  001B46  0800               	sublw	0
  1849  001B48  0F20               	addlw	32
  1850  001B4A  0012               	return	
  1851  001B4C  0012               	return		;funcret
  1852  001B4E                     __end_of_buffer_space:
  1853                           	opt stack 0
  1854                           tosu	equ	0xFFF
  1855                           tosh	equ	0xFFE
  1856                           tosl	equ	0xFFD
  1857                           pclath	equ	0xFFA
  1858                           tblptru	equ	0xFF8
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           intcon2	equ	0xFF1
  1862                           intcon3	equ	0xFF0
  1863                           postinc0	equ	0xFEE
  1864                           wreg	equ	0xFE8
  1865                           plusw1	equ	0xFE3
  1866                           indf2	equ	0xFDF
  1867                           plusw2	equ	0xFDB
  1868                           fsr2h	equ	0xFDA
  1869                           fsr2l	equ	0xFD9
  1870                           status	equ	0xFD8
  1871                           
  1872 ;; *************** function _buffer_push *****************
  1873 ;; Defined at:
  1874 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  1877 ;;		 -> main@buffer(34), 
  1878 ;;  byte            1    2[COMRAM] unsigned char 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;  current_posi    1    4[COMRAM] unsigned char 
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      unsigned char 
  1883 ;; Registers used:
  1884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0
  1890 ;;      Params:         3       0
  1891 ;;      Locals:         1       0
  1892 ;;      Temps:          1       0
  1893 ;;      Totals:         5       0
  1894 ;;Total ram usage:        5 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		_espi_master_receive
  1900 ;;		_espi_slave_receive
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text16
  1905  001D56                     __ptext16:
  1906                           	opt stack 0
  1907  001D56                     _buffer_push:
  1908                           	opt stack 29
  1909                           
  1910                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  1911                           
  1912                           ;incstack = 0
  1913  001D56  EE20 F001          	lfsr	2,1
  1914  001D5A  5001               	movf	buffer_push@buffer,w,c
  1915  001D5C  26D9               	addwf	fsr2l,f,c
  1916  001D5E  5002               	movf	buffer_push@buffer+1,w,c
  1917  001D60  22DA               	addwfc	fsr2h,f,c
  1918  001D62  0E20               	movlw	32
  1919  001D64  18DE               	xorwf	postinc2,w,c
  1920  001D66  B4D8               	btfsc	status,2,c
  1921  001D68  0012               	return	
  1922  001D6A  D001               	goto	l1181
  1923                           
  1924                           ;circular_buffer.c: 27: return 0;
  1925                           ;	Return value of _buffer_push is never used
  1926  001D6C  0012               	return	
  1927  001D6E                     l1181:
  1928                           
  1929                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  1930                           ;circular_buffer.c: 30: & (0x20 - 1);
  1931  001D6E  EE20 F001          	lfsr	2,1
  1932  001D72  5001               	movf	buffer_push@buffer,w,c
  1933  001D74  26D9               	addwf	fsr2l,f,c
  1934  001D76  5002               	movf	buffer_push@buffer+1,w,c
  1935  001D78  22DA               	addwfc	fsr2h,f,c
  1936  001D7A  50DF               	movf	indf2,w,c
  1937  001D7C  6E04               	movwf	??_buffer_push& (0+255),c
  1938  001D7E  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  1939  001D82  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  1940  001D86  50DF               	movf	indf2,w,c
  1941  001D88  2404               	addwf	??_buffer_push,w,c
  1942  001D8A  0B1F               	andlw	31
  1943  001D8C  6E05               	movwf	buffer_push@current_position,c
  1944                           
  1945                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  1946  001D8E  5005               	movf	buffer_push@current_position,w,c
  1947  001D90  0D01               	mullw	1
  1948  001D92  0E02               	movlw	2
  1949  001D94  26F3               	addwf	prodl,f,c
  1950  001D96  0E00               	movlw	0
  1951  001D98  22F4               	addwfc	prodh,f,c
  1952  001D9A  50F3               	movf	prodl,w,c
  1953  001D9C  2401               	addwf	buffer_push@buffer,w,c
  1954  001D9E  6ED9               	movwf	fsr2l,c
  1955  001DA0  50F4               	movf	prodh,w,c
  1956  001DA2  2002               	addwfc	buffer_push@buffer+1,w,c
  1957  001DA4  6EDA               	movwf	fsr2h,c
  1958  001DA6  C003  FFDF         	movff	buffer_push@byte,indf2
  1959                           
  1960                           ;circular_buffer.c: 32: buffer->count++;
  1961  001DAA  EE20 F001          	lfsr	2,1
  1962  001DAE  5001               	movf	buffer_push@buffer,w,c
  1963  001DB0  26D9               	addwf	fsr2l,f,c
  1964  001DB2  5002               	movf	buffer_push@buffer+1,w,c
  1965  001DB4  22DA               	addwfc	fsr2h,f,c
  1966  001DB6  2ADF               	incf	indf2,f,c
  1967  001DB8  0012               	return	
  1968                           
  1969                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  1970                           ;	Return value of _buffer_push is never used
  1971  001DBA  0012               	return		;funcret
  1972  001DBC                     __end_of_buffer_push:
  1973                           	opt stack 0
  1974                           tosu	equ	0xFFF
  1975                           tosh	equ	0xFFE
  1976                           tosl	equ	0xFFD
  1977                           pclath	equ	0xFFA
  1978                           tblptru	equ	0xFF8
  1979                           prodh	equ	0xFF4
  1980                           prodl	equ	0xFF3
  1981                           intcon2	equ	0xFF1
  1982                           intcon3	equ	0xFF0
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           plusw1	equ	0xFE3
  1986                           indf2	equ	0xFDF
  1987                           postinc2	equ	0xFDE
  1988                           plusw2	equ	0xFDB
  1989                           fsr2h	equ	0xFDA
  1990                           fsr2l	equ	0xFD9
  1991                           status	equ	0xFD8
  1992                           
  1993 ;; *************** function _buffer_empty *****************
  1994 ;; Defined at:
  1995 ;;		line 14 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  buffer          2    0[COMRAM] PTR const struct circula
  1998 ;;		 -> main@buffer(34), 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      unsigned char 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0
  2010 ;;      Params:         2       0
  2011 ;;      Locals:         0       0
  2012 ;;      Temps:          0       0
  2013 ;;      Totals:         2       0
  2014 ;;Total ram usage:        2 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; This function calls:
  2017 ;;		Nothing
  2018 ;; This function is called by:
  2019 ;;		_espi_master_receive
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           	psect	text17
  2024  001B64                     __ptext17:
  2025                           	opt stack 0
  2026  001B64                     _buffer_empty:
  2027                           	opt stack 29
  2028                           
  2029                           ;circular_buffer.c: 16: return (buffer->count == 0) ? 1 : 0;
  2030                           
  2031                           ;incstack = 0
  2032  001B64  EE20 F001          	lfsr	2,1
  2033  001B68  5001               	movf	buffer_empty@buffer,w,c
  2034  001B6A  26D9               	addwf	fsr2l,f,c
  2035  001B6C  5002               	movf	buffer_empty@buffer+1,w,c
  2036  001B6E  22DA               	addwfc	fsr2h,f,c
  2037  001B70  50DF               	movf	indf2,w,c
  2038  001B72  A4D8               	btfss	status,2,c
  2039  001B74  D002               	goto	u620
  2040  001B76  0E01               	movlw	1
  2041  001B78  0012               	return	
  2042  001B7A                     u620:
  2043  001B7A  0E00               	movlw	0
  2044  001B7C  0012               	return	
  2045  001B7E  0012               	return		;funcret
  2046  001B80                     __end_of_buffer_empty:
  2047                           	opt stack 0
  2048  0000                     tosu	equ	0xFFF
  2049                           tosh	equ	0xFFE
  2050                           tosl	equ	0xFFD
  2051                           pclath	equ	0xFFA
  2052                           tblptru	equ	0xFF8
  2053                           prodh	equ	0xFF4
  2054                           prodl	equ	0xFF3
  2055                           intcon2	equ	0xFF1
  2056                           intcon3	equ	0xFF0
  2057                           postinc0	equ	0xFEE
  2058                           wreg	equ	0xFE8
  2059                           plusw1	equ	0xFE3
  2060                           indf2	equ	0xFDF
  2061                           postinc2	equ	0xFDE
  2062                           plusw2	equ	0xFDB
  2063                           fsr2h	equ	0xFDA
  2064                           fsr2l	equ	0xFD9
  2065                           status	equ	0xFD8
  2066                           tosu	equ	0xFFF
  2067                           tosh	equ	0xFFE
  2068                           tosl	equ	0xFFD
  2069                           pclath	equ	0xFFA
  2070                           tblptru	equ	0xFF8
  2071                           prodh	equ	0xFF4
  2072                           prodl	equ	0xFF3
  2073                           intcon2	equ	0xFF1
  2074                           intcon3	equ	0xFF0
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           plusw1	equ	0xFE3
  2078                           indf2	equ	0xFDF
  2079                           postinc2	equ	0xFDE
  2080                           plusw2	equ	0xFDB
  2081                           fsr2h	equ	0xFDA
  2082                           fsr2l	equ	0xFD9
  2083                           status	equ	0xFD8
  2084                           
  2085                           	psect	text18
  2086  000000                     __ptext18:
  2087                           	opt stack 0
  2088                           tosu	equ	0xFFF
  2089                           tosh	equ	0xFFE
  2090                           tosl	equ	0xFFD
  2091                           pclath	equ	0xFFA
  2092                           tblptru	equ	0xFF8
  2093                           prodh	equ	0xFF4
  2094                           prodl	equ	0xFF3
  2095                           intcon2	equ	0xFF1
  2096                           intcon3	equ	0xFF0
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           plusw1	equ	0xFE3
  2100                           indf2	equ	0xFDF
  2101                           postinc2	equ	0xFDE
  2102                           plusw2	equ	0xFDB
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107                           	psect	rparam
  2108  0000                     tosu	equ	0xFFF
  2109                           tosh	equ	0xFFE
  2110                           tosl	equ	0xFFD
  2111                           pclath	equ	0xFFA
  2112                           tblptru	equ	0xFF8
  2113                           prodh	equ	0xFF4
  2114                           prodl	equ	0xFF3
  2115                           intcon2	equ	0xFF1
  2116                           intcon3	equ	0xFF0
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           plusw1	equ	0xFE3
  2120                           indf2	equ	0xFDF
  2121                           postinc2	equ	0xFDE
  2122                           plusw2	equ	0xFDB
  2123                           fsr2h	equ	0xFDA
  2124                           fsr2l	equ	0xFD9
  2125                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      87
    BANK0           160      0       0

Pointer List with Targets:

    wait_pulse@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_empty@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    espi_master_receive@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    espi_master_send@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_send@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@buffer(COMRAM[34]), 

    wait_pulse@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 


Critical Paths under _main in COMRAM

    _main->_espi_master_send
    _espi_setup->_setup_spi
    _espi_master_send->_buffer_peek
    _espi_master_send->_buffer_pop
    _espi_master_send->_encode_data
    _espi_master_send->_wait_pulse
    _espi_master_receive->_wait_pulse
    _wait_pulse->_set_timer3

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0    4719
                                             18 COMRAM    34    34      0
                _espi_master_receive
                   _espi_master_send
                         _espi_setup
                       _setup_timer3
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _espi_master_send                                    12     6      6    2476
                                              6 COMRAM    12     6      6
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     644
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     267
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     345
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_master_receive                                 10     4      6    1987
                                              6 COMRAM    10     4      6
                       _buffer_empty
                        _buffer_push
                       _buffer_space
                        _decode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _wait_pulse                                           5     1      4     343
                                              2 COMRAM     4     0      4
                         _set_timer3 *
 ---------------------------------------------------------------------------------
 (3) _set_timer3                                           2     0      2      65
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _spi_send_get_byte                                    1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _send_delay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     417
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _buffer_empty                                         2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _espi_master_receive
     _buffer_empty
     _buffer_push
     _buffer_space
     _decode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
   _espi_master_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
   _espi_setup
     _setup_spi
   _setup_timer3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      57       1       91.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      57       5        0.0%
DATA                 0      0      57       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Aug 03 13:24:51 2015

                   _SSPSTATbits 000FC7                              l53 1B2C                              l45 1C54  
                            l47 1C40                              l48 1C50                             l122 1BD2  
                           l124 1BCA                             l154 1BA0                             u620 1B7A  
                           u608 1B8C                             u801 1D0E                             u947 1AFE  
 espi_master_receive@received_1 000F   espi_master_receive@received_2 0010                             tosl 000FFD  
                           wreg 000FE8                    __CFG_LVP$OFF 000000                            l1201 1CB8  
                          l1303 1F86                            l1217 1DD2                            l1313 1FB4  
                          l1321 1FCE                            l1181 1D6E                            l1173 1C00  
                          l1261 1E88                            l1253 1E70                            l1325 1FE2  
                          l1247 1E5C                            l1343 1D18                            l1169 1BF0  
                          l1267 1EB2                            l1269 1EC8                            l1297 1F58  
                          _TMR3 000FB2                            _main 1CF2                            fsr2h 000FDA  
                          indf2 000FDF                            fsr2l 000FD9                            prodh 000FF4  
                          prodl 000FF3                            start 0000           spi_send_get_byte@byte 0001  
                ??_buffer_count 0003                  ??_buffer_empty 0003                   __CFG_FOSC$IRC 000000  
                ??_buffer_space 0003                    ___param_bank 000010            setup_spi@SSPCON1_reg 0001  
                         ?_main 0001                           _T3CON 000FB1            __size_of_decode_data 003C  
           _espi_master_receive 1E2C                           pclath 000FFA                           plusw1 000FE3  
                         plusw2 000FDB                           status 000FD8            setup_spi@SSPSTAT_reg 0002  
      __end_of_espi_master_send 2000                buffer_pop@buffer 0001                 __initialization 1B4E  
                  __end_of_main 1D56            ?_espi_master_receive 0007                          ??_main 0013  
             _spi_send_get_byte 1B24                   __activetblptr 000002              ?_spi_send_get_byte 0001  
             buffer_peek@buffer 0001                 encode_data@data 0006             ??_spi_send_get_byte 0001  
                        _INT2IF 007F81                          _INTCON 000FF2                          _SSPBUF 000FC9  
               decode_data@data 0001            __size_of_encode_data 0046           ??_espi_master_receive 000D  
          __size_of_buffer_peek 0052            __size_of_buffer_push 0066       __end_of_spi_send_get_byte 1B38  
                        clear_0 1B54    espi_master_send@byte_to_send 000D            __end_of_buffer_count 1B24  
          __end_of_buffer_empty 1B80                 set_timer3@value 0001                          tblptru 000FF8  
         setup_timer3@T3CON_reg 0001            __end_of_buffer_space 1B4E                      __accesstop 0060  
       __end_of__initialization 1B5A                   ___rparam_used 000001                  __pcstackCOMRAM 0001  
            buffer_count@buffer 0001                  buffer_pop@byte 0005              buffer_empty@buffer 0001  
    __size_of_spi_send_get_byte 0014               buffer_push@buffer 0001              __size_of_setup_spi 003E  
                    _buffer_pop 1DBC                         _SSPCON1 000FC6                         _SSPSTAT 000FC7  
     espi_master_receive@buffer 0007               ?_espi_master_send 0007                         __Hparam 0000  
                       __Lparam 0000              ??_espi_master_send 000D                      _espi_setup 1BA8  
                    _dummy_byte 0057                         __pcinit 1B4E                       _ANSELbits 000F7E  
                       __ramtop 0100           __size_of_buffer_count 0012           __size_of_buffer_empty 001C  
                       __ptext0 1CF2                         __ptext1 1AF4                         __ptext2 1BA8  
                       __ptext3 1C1C                         __ptext4 1EE6                         __ptext5 1C5A  
                       __ptext6 1DBC                         __ptext7 1CA0                         __ptext8 1B12  
                       __ptext9 1E2C           __size_of_buffer_space 0016                   ??_decode_data 0005  
          end_of_initialization 1B5A                      _send_delay 1AFC                   __Lmediumconst 0000  
                  _buffer_count 1B12                    _buffer_empty 1B64               __end_of_setup_spi 1C5A  
   espi_master_send@timer_start 0009                    _buffer_space 1B38                      _set_timer3 1B06  
                       postinc0 000FEE                         postinc2 000FDE                      _wait_pulse 1B80  
                     _PORTCbits 000F82                   ?_setup_timer3 0001                       _TRISAbits 000F92  
                     _TRISBbits 000F93                       _TRISCbits 000F94                     ?_buffer_pop 0001  
           __end_of_decode_data 1C1C                   ??_encode_data 0005     __end_of_espi_master_receive 1EE6  
                    main@buffer 0013                   ??_buffer_peek 0003                   ??_buffer_push 0004  
                   ?_espi_setup 0001                 buffer_peek@byte 0005                  espi_setup@mode 0003  
                ??_setup_timer3 0001             start_initialization 1B4E                     ?_send_delay 0001  
            buffer_space@buffer 0001                 buffer_push@byte 0003             __end_of_encode_data 1CA0  
                   ?_set_timer3 0001             __size_of_buffer_pop 0070                     ?_wait_pulse 0003  
           __end_of_buffer_peek 1CF2             __end_of_buffer_push 1DBC                     _decode_data 1BE0  
                   __pbssCOMRAM 0035             __size_of_espi_setup 0038      espi_master_send@received_1 000F  
    espi_master_send@received_2 0010           wait_pulse@timer_start 0003               encode_data@byte_1 0001  
             encode_data@byte_2 0003             __size_of_send_delay 000A       __size_of_espi_master_send 011A  
           __size_of_set_timer3 000C             __size_of_wait_pulse 0028                        _LATAbits 000F89  
                      _LATCbits 000F8B                     _encode_data 1C5A                        _PIE2bits 000FA0  
          __end_of_setup_timer3 1AFC                        _PIR2bits 000FA1                     _buffer_peek 1CA0  
                   _buffer_push 1D56                       _timer3_up 000000                       main@F3971 0035  
                     _setup_spi 1C1C  espi_master_receive@timer_start 0009                    ??_buffer_pop 0003  
             decode_data@byte_1 0003               decode_data@byte_2 0004                     _INTCON2bits 000FF1  
                   _INTCON3bits 000FF0                        __Hrparam 0000                        __Lrparam 0000  
                  ??_espi_setup 0003                 wait_pulse@value 0001                 wait_pulse@timer 0005  
            __end_of_buffer_pop 1E2C                      ?_setup_spi 0001                      _ANSELHbits 000F7F  
                      __ptext10 1B80                        __ptext11 1B06                        __ptext12 1B24  
                      __ptext13 1AFC                        __ptext14 1BE0                        __ptext15 1B38  
                      __ptext16 1D56                        __ptext17 1B64                        __ptext18 0000  
            __end_of_espi_setup 1BE0                    ??_send_delay 0001                   __size_of_main 0064  
                  ??_set_timer3 0003    __size_of_espi_master_receive 00BA                    ??_wait_pulse 0007  
              _espi_master_send 1EE6              __end_of_send_delay 1B06                    ?_decode_data 0001  
      espi_master_receive@value 000E        espi_master_receive@timer 000B              __end_of_set_timer3 1B12  
         __size_of_setup_timer3 0008              __end_of_wait_pulse 1BA8                      _OSCCONbits 000FD3  
                   ??_setup_spi 0002                    _setup_timer3 1AF4     buffer_push@current_position 0005  
                   _SSPCON1bits 000FC6                    ?_encode_data 0001          espi_master_send@buffer 0007  
        espi_master_send@byte_1 0011          espi_master_send@byte_2 0012                   ?_buffer_count 0001  
                 ?_buffer_empty 0001           espi_master_send@timer 000B                    ?_buffer_peek 0001  
                 ?_buffer_space 0001                    ?_buffer_push 0001  
