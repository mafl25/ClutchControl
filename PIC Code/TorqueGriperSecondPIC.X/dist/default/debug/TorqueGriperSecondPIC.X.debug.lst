

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Aug 05 13:35:55 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           	psect	idataBANK0
    44  00150D                     __pidataBANK0:
    45                           	opt stack 0
    46                           
    47                           ;initializer for main@F3995
    48  00150D  55                 	db	85
    49  00150E  DD                 	db	221
    50  00150F  00                 	db	0
    51  0000                     _TMR0	set	4054
    52  0000                     _TMR3	set	4018
    53  0000                     _ANSELHbits	set	3967
    54  0000                     _ANSELbits	set	3966
    55  0000                     _CCP1CONbits	set	4029
    56  0000                     _CCPR1L	set	4030
    57  0000                     _INTCON	set	4082
    58  0000                     _INTCON2bits	set	4081
    59  0000                     _INTCON3bits	set	4080
    60  0000                     _INTCONbits	set	4082
    61  0000                     _LATAbits	set	3977
    62  0000                     _LATCbits	set	3979
    63  0000                     _OSCCONbits	set	4051
    64  0000                     _PIE2bits	set	4000
    65  0000                     _PIR2bits	set	4001
    66  0000                     _PR2	set	4043
    67  0000                     _PSTRCON	set	4025
    68  0000                     _PSTRCONbits	set	4025
    69  0000                     _SSPBUF	set	4041
    70  0000                     _SSPCON1	set	4038
    71  0000                     _SSPCON1bits	set	4038
    72  0000                     _SSPSTAT	set	4039
    73  0000                     _SSPSTATbits	set	4039
    74  0000                     _T0CON	set	4053
    75  0000                     _T2CONbits	set	4042
    76  0000                     _T3CON	set	4017
    77  0000                     _TRISAbits	set	3986
    78  0000                     _TRISBbits	set	3987
    79  0000                     _TRISCbits	set	3988
    80  0000                     _INT2IF	set	32641
    81                           
    82                           ; #config settings
    83  0000                     
    84                           	psect	cinit
    85  0015F4                     __pcinit:
    86                           	opt stack 0
    87  0015F4                     start_initialization:
    88                           	opt stack 0
    89  0015F4                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to BANK0 (68 bytes)
    93  0015F4  EE00  F0AB         	lfsr	0,__pbssBANK0
    94  0015F8  0E44               	movlw	68
    95  0015FA                     clear_0:
    96  0015FA  6AEE               	clrf	postinc0,c
    97  0015FC  06E8               	decf	wreg,f,c
    98  0015FE  E1FD               	bnz	clear_0
    99                           
   100                           ; Clear objects allocated to COMRAM (1 bytes)
   101  001600  6A16               	clrf	__pbssCOMRAM& (0+255),c
   102                           
   103                           ; Initialize objects allocated to BANK0 (3 bytes)
   104                           ; load TBLPTR registers with __pidataBANK0
   105  001602  0E0D               	movlw	low __pidataBANK0
   106  001604  6EF6               	movwf	tblptrl,c
   107  001606  0E15               	movlw	high __pidataBANK0
   108  001608  6EF7               	movwf	tblptrh,c
   109  00160A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   110  00160C  6EF8               	movwf	tblptru,c
   111  00160E  0009               	tblrd		*+	;fetch initializer
   112  001610  CFF5 F0EF          	movff	tablat,__pdataBANK0
   113  001614  0009               	tblrd		*+	;fetch initializer
   114  001616  CFF5 F0F0          	movff	tablat,__pdataBANK0+1
   115  00161A  0009               	tblrd		*+	;fetch initializer
   116  00161C  CFF5 F0F1          	movff	tablat,__pdataBANK0+2
   117  001620                     end_of_initialization:
   118                           	opt stack 0
   119  001620                     __end_of__initialization:
   120                           	opt stack 0
   121  001620  0E00               	movlw	low (__Lmediumconst shr (0+16))
   122  001622  6EF8               	movwf	tblptru,c
   123  001624  0100               	movlb	0
   124  001626  EF11  F00E         	goto	_main	;jump to C main() function
   125                           tblptru	equ	0xFF8
   126                           tblptrh	equ	0xFF7
   127                           tblptrl	equ	0xFF6
   128                           tablat	equ	0xFF5
   129                           postinc0	equ	0xFEE
   130                           wreg	equ	0xFE8
   131                           
   132                           	psect	bssCOMRAM
   133  000016                     __pbssCOMRAM:
   134                           	opt stack 0
   135  000016                     _dummy_byte:
   136                           	opt stack 0
   137  000016                     	ds	1
   138                           tblptru	equ	0xFF8
   139                           tblptrh	equ	0xFF7
   140                           tblptrl	equ	0xFF6
   141                           tablat	equ	0xFF5
   142                           postinc0	equ	0xFEE
   143                           wreg	equ	0xFE8
   144                           
   145                           	psect	bssBANK0
   146  0000AB                     __pbssBANK0:
   147                           	opt stack 0
   148  0000AB                     main@F3991:
   149                           	opt stack 0
   150  0000AB                     	ds	34
   151  0000CD                     main@F3993:
   152                           	opt stack 0
   153  0000CD                     	ds	34
   154                           tblptru	equ	0xFF8
   155                           tblptrh	equ	0xFF7
   156                           tblptrl	equ	0xFF6
   157                           tablat	equ	0xFF5
   158                           postinc0	equ	0xFEE
   159                           wreg	equ	0xFE8
   160                           
   161                           	psect	dataBANK0
   162  0000EF                     __pdataBANK0:
   163                           	opt stack 0
   164  0000EF                     main@F3995:
   165                           	opt stack 0
   166  0000EF                     	ds	3
   167                           tblptru	equ	0xFF8
   168                           tblptrh	equ	0xFF7
   169                           tblptrl	equ	0xFF6
   170                           tablat	equ	0xFF5
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	cstackBANK0
   175  000060                     __pcstackBANK0:
   176                           	opt stack 0
   177  000060                     main@name:
   178                           	opt stack 0
   179                           
   180                           ; 3 bytes @ 0x0
   181  000060                     	ds	3
   182  000063                     main@byte_1:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x3
   186  000063                     	ds	1
   187  000064                     main@byte_2:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x4
   191  000064                     	ds	1
   192  000065                     main@value:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0x5
   196  000065                     	ds	2
   197  000067                     main@send:
   198                           	opt stack 0
   199                           
   200                           ; 34 bytes @ 0x7
   201  000067                     	ds	34
   202  000089                     main@receive:
   203                           	opt stack 0
   204                           
   205                           ; 34 bytes @ 0x29
   206  000089                     	ds	34
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           postinc0	equ	0xFEE
   212                           wreg	equ	0xFE8
   213                           
   214                           	psect	cstackCOMRAM
   215  000001                     __pcstackCOMRAM:
   216                           	opt stack 0
   217  000001                     ?_buffer_pop:
   218                           	opt stack 0
   219  000001                     ?_buffer_peek:
   220                           	opt stack 0
   221  000001                     setup_spi@SSPCON1_reg:
   222                           	opt stack 0
   223  000001                     spi_send_get_byte@byte:
   224                           	opt stack 0
   225  000001                     setup_timer0@T0CON_reg:
   226                           	opt stack 0
   227  000001                     setup_timer3@T3CON_reg:
   228                           	opt stack 0
   229  000001                     selectOutput@toggle:
   230                           	opt stack 0
   231  000001                     buffer_count@buffer:
   232                           	opt stack 0
   233  000001                     buffer_space@buffer:
   234                           	opt stack 0
   235  000001                     buffer_full@buffer:
   236                           	opt stack 0
   237  000001                     buffer_push@buffer:
   238                           	opt stack 0
   239  000001                     buffer_pop@buffer:
   240                           	opt stack 0
   241  000001                     buffer_clear@buffer:
   242                           	opt stack 0
   243  000001                     buffer_peek@buffer:
   244                           	opt stack 0
   245  000001                     encode_data@byte_1:
   246                           	opt stack 0
   247  000001                     decode_data@data:
   248                           	opt stack 0
   249  000001                     set_timer0@value:
   250                           	opt stack 0
   251  000001                     set_timer3@value:
   252                           	opt stack 0
   253  000001                     setPulseWidth@width:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x0
   257  000001                     	ds	1
   258  000002                     ??_selectOutput:
   259  000002                     setup_spi@SSPSTAT_reg:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x1
   263  000002                     	ds	1
   264  000003                     ??_buffer_pop:
   265  000003                     ??_setPulseWidth:
   266  000003                     ??_buffer_peek:
   267  000003                     espi_setup@mode:
   268                           	opt stack 0
   269  000003                     buffer_push@byte:
   270                           	opt stack 0
   271  000003                     decode_data@byte_1:
   272                           	opt stack 0
   273  000003                     selectOutput@outputs:
   274                           	opt stack 0
   275  000003                     wait_pulse@timer_start:
   276                           	opt stack 0
   277  000003                     encode_data@byte_2:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x2
   281  000003                     	ds	1
   282  000004                     ??_buffer_push:
   283  000004                     decode_data@byte_2:
   284                           	opt stack 0
   285                           
   286                           ; 1 bytes @ 0x3
   287  000004                     	ds	1
   288  000005                     ??_decode_data:
   289  000005                     ??_encode_data:
   290  000005                     buffer_push@current_position:
   291                           	opt stack 0
   292  000005                     pmwSingleModeSetUp@valuePR2:
   293                           	opt stack 0
   294  000005                     wait_pulse@timer:
   295                           	opt stack 0
   296  000005                     buffer_pop@byte:
   297                           	opt stack 0
   298  000005                     buffer_peek@byte:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x4
   302  000005                     	ds	1
   303  000006                     encode_data@data:
   304                           	opt stack 0
   305  000006                     pmwSingleModeSetUp@scaler:
   306                           	opt stack 0
   307  000006                     load_buffer@buffer:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x5
   311  000006                     	ds	1
   312  000007                     wait_pulse@value:
   313                           	opt stack 0
   314  000007                     pmwSingleModeSetUp@outputs:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0x6
   318  000007                     	ds	1
   319  000008                     pmwSingleModeSetUp@polarity:
   320                           	opt stack 0
   321  000008                     load_buffer@str:
   322                           	opt stack 0
   323  000008                     espi_master_send@buffer:
   324                           	opt stack 0
   325  000008                     espi_master_receive@buffer:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x7
   329  000008                     	ds	2
   330  00000A                     load_buffer@size:
   331                           	opt stack 0
   332  00000A                     espi_master_send@timer_start:
   333                           	opt stack 0
   334  00000A                     espi_master_receive@timer_start:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x9
   338  00000A                     	ds	2
   339  00000C                     ??_load_buffer:
   340  00000C                     espi_master_send@timer:
   341                           	opt stack 0
   342  00000C                     espi_master_receive@timer:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0xB
   346  00000C                     	ds	1
   347  00000D                     load_buffer@i:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0xC
   351  00000D                     	ds	1
   352  00000E                     espi_master_send@received_1:
   353                           	opt stack 0
   354  00000E                     espi_master_receive@received_1:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0xD
   358  00000E                     	ds	1
   359  00000F                     espi_master_send@received_2:
   360                           	opt stack 0
   361  00000F                     espi_master_receive@received_2:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0xE
   365  00000F                     	ds	1
   366  000010                     espi_master_receive@value:
   367                           	opt stack 0
   368  000010                     espi_master_send@byte_to_send:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0xF
   372  000010                     	ds	2
   373  000012                     espi_master_send@byte_1:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x11
   377  000012                     	ds	1
   378  000013                     espi_master_send@byte_2:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0x12
   382  000013                     	ds	1
   383  000014                     ??_main:
   384                           
   385                           ; 0 bytes @ 0x13
   386  000014                     	ds	2
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           
   394 ;;
   395 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   396 ;;
   397 ;; *************** function _main *****************
   398 ;; Defined at:
   399 ;;		line 14 in file "main.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;		None
   402 ;; Auto vars:     Size  Location     Type
   403 ;;  byte_2          1    4[BANK0 ] unsigned char 
   404 ;;  byte_1          1    3[BANK0 ] unsigned char 
   405 ;;  value           2    5[BANK0 ] int 
   406 ;;  receive        34   41[BANK0 ] struct circular_buffer
   407 ;;  send           34    7[BANK0 ] struct circular_buffer
   408 ;;  name            3    0[BANK0 ] unsigned char [3]
   409 ;; Return value:  Size  Location     Type
   410 ;;                  2   40[None  ] int 
   411 ;; Registers used:
   412 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   413 ;; Tracked objects:
   414 ;;		On entry : 0/0
   415 ;;		On exit  : 0/0
   416 ;;		Unchanged: 0/0
   417 ;; Data sizes:     COMRAM   BANK0
   418 ;;      Params:         0       0
   419 ;;      Locals:         0      75
   420 ;;      Temps:          2       0
   421 ;;      Totals:         2      75
   422 ;;Total ram usage:       77 bytes
   423 ;; Hardware stack levels required when called:    3
   424 ;; This function calls:
   425 ;;		_buffer_clear
   426 ;;		_buffer_count
   427 ;;		_buffer_peek
   428 ;;		_buffer_pop
   429 ;;		_espi_master_receive
   430 ;;		_espi_master_send
   431 ;;		_espi_setup
   432 ;;		_load_buffer
   433 ;;		_pmwSingleModeSetUp
   434 ;;		_selectOutput
   435 ;;		_setPulseWidth
   436 ;;		_set_timer0
   437 ;;		_setup_timer0
   438 ;;		_setup_timer3
   439 ;;		_timer0_up
   440 ;; This function is called by:
   441 ;;		Startup code after reset
   442 ;; This function uses a non-reentrant model
   443 ;;
   444                           
   445                           	psect	text0
   446  001C22                     __ptext0:
   447                           	opt stack 0
   448  001C22                     _main:
   449                           	opt stack 28
   450                           
   451                           ;main.c: 15: OSCCONbits.IRCF = 0x07;
   452                           
   453                           ;incstack = 0
   454  001C22  88D3               	bsf	4051,4,c	;volatile
   455  001C24  8AD3               	bsf	4051,5,c	;volatile
   456  001C26  8CD3               	bsf	4051,6,c	;volatile
   457                           
   458                           ;main.c: 17: espi_setup(0x00);
   459  001C28  0E00               	movlw	0
   460  001C2A  EC15  F00B         	call	_espi_setup
   461                           
   462                           ;main.c: 18: setup_timer3(0x80 | 0x00 | 0x01);
   463  001C2E  0E81               	movlw	129
   464  001C30  EC8C  F00A         	call	_setup_timer3
   465                           
   466                           ;main.c: 19: setup_timer0(0x07 | 0x80);
   467  001C34  0E87               	movlw	135
   468  001C36  EC88  F00A         	call	_setup_timer0
   469                           
   470                           ;main.c: 20: pmwSingleModeSetUp(PACH_PBDH, 254, TMRP_1, 0x01 | 0x02);
   471  001C3A  0EFE               	movlw	254
   472  001C3C  6E05               	movwf	pmwSingleModeSetUp@valuePR2,c
   473  001C3E  0E00               	movlw	0
   474  001C40  6E06               	movwf	pmwSingleModeSetUp@scaler,c
   475  001C42  0E03               	movlw	3
   476  001C44  6E07               	movwf	pmwSingleModeSetUp@outputs,c
   477  001C46  0E00               	movlw	0
   478  001C48  EC63  F00D         	call	_pmwSingleModeSetUp
   479                           
   480                           ;main.c: 22: struct circular_buffer send = {0, 0, {0}};
   481  001C4C  EE20  F0AB         	lfsr	2,main@F3991
   482  001C50  EE10  F067         	lfsr	1,main@send
   483  001C54  0E21               	movlw	33
   484  001C56                     u1521:
   485  001C56  CFDB FFE3          	movff	plusw2,plusw1
   486  001C5A  06E8               	decf	wreg,f,c
   487  001C5C  E2FC               	bc	u1521
   488                           
   489                           ;main.c: 23: struct circular_buffer receive = {0, 0, {0}};
   490  001C5E  EE20  F0CD         	lfsr	2,main@F3993
   491  001C62  EE10  F089         	lfsr	1,main@receive
   492  001C66  0E21               	movlw	33
   493  001C68                     u1531:
   494  001C68  CFDB FFE3          	movff	plusw2,plusw1
   495  001C6C  06E8               	decf	wreg,f,c
   496  001C6E  E2FC               	bc	u1531
   497                           
   498                           ;main.c: 25: char name[3] = {0x55, 0xDD, 0x00};
   499  001C70  C0EF  F060         	movff	main@F3995,main@name
   500  001C74  C0F0  F061         	movff	main@F3995+1,main@name+1
   501  001C78  C0F1  F062         	movff	main@F3995+2,main@name+2
   502                           
   503                           ;main.c: 27: set_timer0(55000);
   504  001C7C  0ED6               	movlw	214
   505  001C7E  6E02               	movwf	set_timer0@value+1,c
   506  001C80  0ED8               	movlw	216
   507  001C82  6E01               	movwf	set_timer0@value,c
   508  001C84  EC9B  F00A         	call	_set_timer0	;wreg free
   509  001C88  D000               	goto	l1809
   510  001C8A                     l1809:
   511                           
   512                           ;main.c: 30: espi_master_receive(&receive, &set_timer3, &timer3_up);
   513  001C8A  0E89               	movlw	low main@receive
   514  001C8C  6E08               	movwf	espi_master_receive@buffer,c
   515  001C8E  0E00               	movlw	high main@receive
   516  001C90  6E09               	movwf	espi_master_receive@buffer+1,c
   517  001C92  0E2A               	movlw	low _set_timer3
   518  001C94  6E0A               	movwf	espi_master_receive@timer_start,c
   519  001C96  0E15               	movlw	high _set_timer3
   520  001C98  6E0B               	movwf	espi_master_receive@timer_start+1,c
   521  001C9A  0E42               	movlw	low _timer3_up
   522  001C9C  6E0C               	movwf	espi_master_receive@timer,c
   523  001C9E  0E15               	movlw	high _timer3_up
   524  001CA0  6E0D               	movwf	espi_master_receive@timer+1,c
   525  001CA2  EC10  F00D         	call	_espi_master_receive	;wreg free
   526                           
   527                           ;main.c: 31: int16_t value;
   528                           ;main.c: 33: while (buffer_count(&receive) >= 3) {
   529  001CA6  D058               	goto	l1825
   530  001CA8                     l1811:
   531                           
   532                           ;main.c: 34: uint8_t byte_1;
   533                           ;main.c: 35: uint8_t byte_2;
   534                           ;main.c: 36: value = buffer_pop(&receive);
   535  001CA8  0E89               	movlw	low main@receive
   536  001CAA  6E01               	movwf	buffer_pop@buffer,c
   537  001CAC  0E00               	movlw	high main@receive
   538  001CAE  6E02               	movwf	buffer_pop@buffer+1,c
   539  001CB0  ECF2  F00B         	call	_buffer_pop	;wreg free
   540  001CB4  C001  F065         	movff	?_buffer_pop,main@value
   541  001CB8  C002  F066         	movff	?_buffer_pop+1,main@value+1
   542                           
   543                           ;main.c: 38: switch (value) {
   544  001CBC  D03D               	goto	l1823
   545  001CBE                     l1813:
   546                           
   547                           ;main.c: 40: byte_1 = buffer_pop(&receive);
   548  001CBE  0E89               	movlw	low main@receive
   549  001CC0  6E01               	movwf	buffer_pop@buffer,c
   550  001CC2  0E00               	movlw	high main@receive
   551  001CC4  6E02               	movwf	buffer_pop@buffer+1,c
   552  001CC6  ECF2  F00B         	call	_buffer_pop	;wreg free
   553  001CCA  5001               	movf	?_buffer_pop,w,c
   554  001CCC  0100               	movlb	0	; () banked
   555  001CCE  6F63               	movwf	main@byte_1& (0+255),b
   556                           
   557                           ;main.c: 41: byte_2 = buffer_pop(&receive);
   558  001CD0  0E89               	movlw	low main@receive
   559  001CD2  6E01               	movwf	buffer_pop@buffer,c
   560  001CD4  0E00               	movlw	high main@receive
   561  001CD6  6E02               	movwf	buffer_pop@buffer+1,c
   562  001CD8  ECF2  F00B         	call	_buffer_pop	;wreg free
   563  001CDC  5001               	movf	?_buffer_pop,w,c
   564  001CDE  0100               	movlb	0	; () banked
   565  001CE0  6F64               	movwf	main@byte_2& (0+255),b
   566                           
   567                           ; BSR set to: 0
   568                           ;main.c: 42: setPulseWidth(byte_1 << 2 | byte_2);
   569  001CE2  0100               	movlb	0	; () banked
   570  001CE4  5164               	movf	main@byte_2& (0+255),w,b
   571  001CE6  C063  F014         	movff	main@byte_1,??_main
   572  001CEA  6A15               	clrf	(??_main+1)& (0+255),c
   573  001CEC  90D8               	bcf	status,0,c
   574  001CEE  3614               	rlcf	??_main,f,c
   575  001CF0  3615               	rlcf	??_main+1,f,c
   576  001CF2  90D8               	bcf	status,0,c
   577  001CF4  3614               	rlcf	??_main,f,c
   578  001CF6  3615               	rlcf	??_main+1,f,c
   579  001CF8  1014               	iorwf	??_main,w,c
   580  001CFA  6E01               	movwf	setPulseWidth@width,c
   581  001CFC  5015               	movf	??_main+1,w,c
   582  001CFE  6E02               	movwf	setPulseWidth@width+1,c
   583  001D00  ECE5  F00A         	call	_setPulseWidth	;wreg free
   584                           
   585                           ;main.c: 43: break;
   586  001D04  D029               	goto	l1825
   587  001D06                     l1817:
   588                           
   589                           ;main.c: 45: byte_1 = buffer_pop(&receive);
   590  001D06  0E89               	movlw	low main@receive
   591  001D08  6E01               	movwf	buffer_pop@buffer,c
   592  001D0A  0E00               	movlw	high main@receive
   593  001D0C  6E02               	movwf	buffer_pop@buffer+1,c
   594  001D0E  ECF2  F00B         	call	_buffer_pop	;wreg free
   595  001D12  5001               	movf	?_buffer_pop,w,c
   596  001D14  0100               	movlb	0	; () banked
   597  001D16  6F63               	movwf	main@byte_1& (0+255),b
   598                           
   599                           ;main.c: 46: byte_2 = buffer_pop(&receive);
   600  001D18  0E89               	movlw	low main@receive
   601  001D1A  6E01               	movwf	buffer_pop@buffer,c
   602  001D1C  0E00               	movlw	high main@receive
   603  001D1E  6E02               	movwf	buffer_pop@buffer+1,c
   604  001D20  ECF2  F00B         	call	_buffer_pop	;wreg free
   605  001D24  5001               	movf	?_buffer_pop,w,c
   606  001D26  0100               	movlb	0	; () banked
   607  001D28  6F64               	movwf	main@byte_2& (0+255),b
   608                           
   609                           ; BSR set to: 0
   610                           ;main.c: 47: selectOutput(byte_1, byte_2);
   611  001D2A  C064  F001         	movff	main@byte_2,selectOutput@toggle
   612  001D2E  0100               	movlb	0	; () banked
   613  001D30  5163               	movf	main@byte_1& (0+255),w,b
   614  001D32  ECBF  F00C         	call	_selectOutput
   615                           
   616                           ;main.c: 49: }
   617                           
   618                           ;main.c: 48: break;
   619  001D36  D010               	goto	l1825
   620  001D38                     l1823:
   621  001D38  C065  F014         	movff	main@value,??_main
   622  001D3C  C066  F015         	movff	main@value+1,??_main+1
   623                           
   624                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   625                           ; Switch size 1, requested type "space"
   626                           ; Number of cases is 1, Range of values is 0 to 0
   627                           ; switch strategies available:
   628                           ; Name         Instructions Cycles
   629                           ; simple_byte            4     3 (average)
   630                           ;	Chosen strategy is simple_byte
   631  001D40  5015               	movf	??_main+1,w,c
   632  001D42  0A00               	xorlw	0	; case 0
   633  001D44  A4D8               	btfss	status,2,c
   634  001D46  D008               	goto	l1825
   635                           
   636                           ; Switch size 1, requested type "space"
   637                           ; Number of cases is 2, Range of values is 170 to 172
   638                           ; switch strategies available:
   639                           ; Name         Instructions Cycles
   640                           ; simple_byte            7     4 (average)
   641                           ;	Chosen strategy is simple_byte
   642  001D48  5014               	movf	??_main,w,c
   643  001D4A  0AAA               	xorlw	170	; case 170
   644  001D4C  B4D8               	btfsc	status,2,c
   645  001D4E  D7DB               	goto	l1817
   646  001D50  0A06               	xorlw	6	; case 172
   647  001D52  B4D8               	btfsc	status,2,c
   648  001D54  D7B4               	goto	l1813
   649  001D56  D000               	goto	l1825
   650  001D58                     l1825:
   651  001D58  0E89               	movlw	low main@receive
   652  001D5A  6E01               	movwf	buffer_count@buffer,c
   653  001D5C  0E00               	movlw	high main@receive
   654  001D5E  6E02               	movwf	buffer_count@buffer+1,c
   655  001D60  ECB8  F00A         	call	_buffer_count	;wreg free
   656  001D64  6E14               	movwf	??_main& (0+255),c
   657  001D66  0E03               	movlw	3
   658  001D68  6014               	cpfslt	??_main,c
   659  001D6A  D79E               	goto	l1811
   660  001D6C  D000               	goto	l1827
   661  001D6E                     l1827:
   662                           
   663                           ;main.c: 50: }
   664                           ;main.c: 52: value = buffer_peek(&receive);
   665  001D6E  0E89               	movlw	low main@receive
   666  001D70  6E01               	movwf	buffer_peek@buffer,c
   667  001D72  0E00               	movlw	high main@receive
   668  001D74  6E02               	movwf	buffer_peek@buffer+1,c
   669  001D76  EC91  F00B         	call	_buffer_peek	;wreg free
   670  001D7A  C001  F065         	movff	?_buffer_peek,main@value
   671  001D7E  C002  F066         	movff	?_buffer_peek+1,main@value+1
   672                           
   673                           ;main.c: 53: if (value != 0xAC && value != 0xAA)
   674  001D82  0EAC               	movlw	172
   675  001D84  0100               	movlb	0	; () banked
   676  001D86  1965               	xorwf	main@value& (0+255),w,b
   677  001D88  0100               	movlb	0	; () banked
   678  001D8A  1166               	iorwf	(main@value+1)& (0+255),w,b
   679  001D8C  B4D8               	btfsc	status,2,c
   680  001D8E  D00E               	goto	l1835
   681                           
   682                           ; BSR set to: 0
   683  001D90  0EAA               	movlw	170
   684  001D92  0100               	movlb	0	; () banked
   685  001D94  1965               	xorwf	main@value& (0+255),w,b
   686  001D96  0100               	movlb	0	; () banked
   687  001D98  1166               	iorwf	(main@value+1)& (0+255),w,b
   688  001D9A  B4D8               	btfsc	status,2,c
   689  001D9C  D007               	goto	l1835
   690                           
   691                           ; BSR set to: 0
   692                           ;main.c: 54: buffer_clear(&receive);
   693  001D9E  0E89               	movlw	low main@receive
   694  001DA0  6E01               	movwf	buffer_clear@buffer,c
   695  001DA2  0E00               	movlw	high main@receive
   696  001DA4  6E02               	movwf	buffer_clear@buffer+1,c
   697  001DA6  ECAF  F00A         	call	_buffer_clear	;wreg free
   698  001DAA  D000               	goto	l1835
   699  001DAC                     l1835:
   700                           
   701                           ;main.c: 58: if (timer0_up()) {
   702  001DAC  ECA8  F00A         	call	_timer0_up	;wreg free
   703  001DB0  0900               	iorlw	0
   704  001DB2  B4D8               	btfsc	status,2,c
   705  001DB4  D76A               	goto	l1809
   706                           
   707                           ;main.c: 59: load_buffer(&send, name, 3);
   708  001DB6  0E67               	movlw	low main@send
   709  001DB8  6E06               	movwf	load_buffer@buffer,c
   710  001DBA  0E00               	movlw	high main@send
   711  001DBC  6E07               	movwf	load_buffer@buffer+1,c
   712  001DBE  0E60               	movlw	low main@name
   713  001DC0  6E08               	movwf	load_buffer@str,c
   714  001DC2  0E00               	movlw	high main@name
   715  001DC4  6E09               	movwf	load_buffer@str+1,c
   716  001DC6  0E00               	movlw	0
   717  001DC8  6E0B               	movwf	load_buffer@size+1,c
   718  001DCA  0E03               	movlw	3
   719  001DCC  6E0A               	movwf	load_buffer@size,c
   720  001DCE  EC6F  F00C         	call	_load_buffer	;wreg free
   721                           
   722                           ;main.c: 60: espi_master_send(&send, &set_timer3, &timer3_up);
   723  001DD2  0E67               	movlw	low main@send
   724  001DD4  6E08               	movwf	espi_master_send@buffer,c
   725  001DD6  0E00               	movlw	high main@send
   726  001DD8  6E09               	movwf	espi_master_send@buffer+1,c
   727  001DDA  0E2A               	movlw	low _set_timer3
   728  001DDC  6E0A               	movwf	espi_master_send@timer_start,c
   729  001DDE  0E15               	movlw	high _set_timer3
   730  001DE0  6E0B               	movwf	espi_master_send@timer_start+1,c
   731  001DE2  0E42               	movlw	low _timer3_up
   732  001DE4  6E0C               	movwf	espi_master_send@timer,c
   733  001DE6  0E15               	movlw	high _timer3_up
   734  001DE8  6E0D               	movwf	espi_master_send@timer+1,c
   735  001DEA  ECB7  F00D         	call	_espi_master_send	;wreg free
   736                           
   737                           ;main.c: 61: set_timer0(55000);
   738  001DEE  0ED6               	movlw	214
   739  001DF0  6E02               	movwf	set_timer0@value+1,c
   740  001DF2  0ED8               	movlw	216
   741  001DF4  6E01               	movwf	set_timer0@value,c
   742  001DF6  EC9B  F00A         	call	_set_timer0	;wreg free
   743  001DFA  D747               	goto	l1809
   744                           
   745                           ;main.c: 62: }
   746                           ;main.c: 63: }
   747                           ;main.c: 65: return 0;
   748                           ;	Return value of _main is never used
   749  001DFC  EF01  F000         	goto	start
   750  001E00                     __end_of_main:
   751                           	opt stack 0
   752                           tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           plusw1	equ	0xFE3
   759                           plusw2	equ	0xFDB
   760                           status	equ	0xFD8
   761                           
   762 ;; *************** function _timer0_up *****************
   763 ;; Defined at:
   764 ;;		line 22 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      unsigned char 
   771 ;; Registers used:
   772 ;;		wreg
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0
   778 ;;      Params:         0       0
   779 ;;      Locals:         0       0
   780 ;;      Temps:          0       0
   781 ;;      Totals:         0       0
   782 ;;Total ram usage:        0 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; This function calls:
   785 ;;		Nothing
   786 ;; This function is called by:
   787 ;;		_main
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           	psect	text1
   792  001550                     __ptext1:
   793                           	opt stack 0
   794  001550                     _timer0_up:
   795                           	opt stack 30
   796                           
   797                           ;timers_pic.c: 24: return (INTCONbits.TMR0IF) ? 1 : 0;
   798                           
   799                           ;incstack = 0
   800  001550  A4F2               	btfss	intcon,2,c	;volatile
   801  001552  D002               	goto	u1420
   802  001554  0E01               	movlw	1
   803  001556  0012               	return	
   804  001558                     u1420:
   805  001558  0E00               	movlw	0
   806  00155A  0012               	return	
   807  00155C  0012               	return		;funcret
   808  00155E                     __end_of_timer0_up:
   809                           	opt stack 0
   810                           tblptru	equ	0xFF8
   811                           tblptrh	equ	0xFF7
   812                           tblptrl	equ	0xFF6
   813                           tablat	equ	0xFF5
   814                           intcon	equ	0xFF2
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           plusw1	equ	0xFE3
   818                           plusw2	equ	0xFDB
   819                           status	equ	0xFD8
   820                           
   821 ;; *************** function _setup_timer3 *****************
   822 ;; Defined at:
   823 ;;		line 29 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;  T3CON_reg       1    wreg     unsigned char 
   826 ;; Auto vars:     Size  Location     Type
   827 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
   828 ;; Return value:  Size  Location     Type
   829 ;;		None               void
   830 ;; Registers used:
   831 ;;		wreg
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0
   837 ;;      Params:         0       0
   838 ;;      Locals:         1       0
   839 ;;      Temps:          0       0
   840 ;;      Totals:         1       0
   841 ;;Total ram usage:        1 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_main
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           	psect	text2
   851  001518                     __ptext2:
   852                           	opt stack 0
   853  001518                     _setup_timer3:
   854                           	opt stack 30
   855                           
   856                           ;incstack = 0
   857                           ;setup_timer3@T3CON_reg stored from wreg
   858  001518  6E01               	movwf	setup_timer3@T3CON_reg,c
   859                           
   860                           ;timers_pic.c: 31: T3CON = T3CON_reg;
   861  00151A  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
   862  00151E  0012               	return		;funcret
   863  001520                     __end_of_setup_timer3:
   864                           	opt stack 0
   865                           tblptru	equ	0xFF8
   866                           tblptrh	equ	0xFF7
   867                           tblptrl	equ	0xFF6
   868                           tablat	equ	0xFF5
   869                           intcon	equ	0xFF2
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           plusw1	equ	0xFE3
   873                           plusw2	equ	0xFDB
   874                           status	equ	0xFD8
   875                           
   876 ;; *************** function _setup_timer0 *****************
   877 ;; Defined at:
   878 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;  T0CON_reg       1    wreg     unsigned char 
   881 ;; Auto vars:     Size  Location     Type
   882 ;;  T0CON_reg       1    0[COMRAM] unsigned char 
   883 ;; Return value:  Size  Location     Type
   884 ;;		None               void
   885 ;; Registers used:
   886 ;;		wreg
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMRAM   BANK0
   892 ;;      Params:         0       0
   893 ;;      Locals:         1       0
   894 ;;      Temps:          0       0
   895 ;;      Totals:         1       0
   896 ;;Total ram usage:        1 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; This function calls:
   899 ;;		Nothing
   900 ;; This function is called by:
   901 ;;		_main
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text3
   906  001510                     __ptext3:
   907                           	opt stack 0
   908  001510                     _setup_timer0:
   909                           	opt stack 30
   910                           
   911                           ;incstack = 0
   912                           ;setup_timer0@T0CON_reg stored from wreg
   913  001510  6E01               	movwf	setup_timer0@T0CON_reg,c
   914                           
   915                           ;timers_pic.c: 5: T0CON = T0CON_reg;
   916  001512  C001  FFD5         	movff	setup_timer0@T0CON_reg,4053	;volatile
   917  001516  0012               	return		;funcret
   918  001518                     __end_of_setup_timer0:
   919                           	opt stack 0
   920                           tblptru	equ	0xFF8
   921                           tblptrh	equ	0xFF7
   922                           tblptrl	equ	0xFF6
   923                           tablat	equ	0xFF5
   924                           intcon	equ	0xFF2
   925                           postinc0	equ	0xFEE
   926                           wreg	equ	0xFE8
   927                           plusw1	equ	0xFE3
   928                           plusw2	equ	0xFDB
   929                           status	equ	0xFD8
   930                           
   931 ;; *************** function _set_timer0 *****************
   932 ;; Defined at:
   933 ;;		line 8 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;  value           2    0[COMRAM] int 
   936 ;; Auto vars:     Size  Location     Type
   937 ;;		None
   938 ;; Return value:  Size  Location     Type
   939 ;;		None               void
   940 ;; Registers used:
   941 ;;		None
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMRAM   BANK0
   947 ;;      Params:         2       0
   948 ;;      Locals:         0       0
   949 ;;      Temps:          0       0
   950 ;;      Totals:         2       0
   951 ;;Total ram usage:        2 bytes
   952 ;; Hardware stack levels used:    1
   953 ;; This function calls:
   954 ;;		Nothing
   955 ;; This function is called by:
   956 ;;		_main
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           	psect	text4
   961  001536                     __ptext4:
   962                           	opt stack 0
   963  001536                     _set_timer0:
   964                           	opt stack 30
   965                           
   966                           ;timers_pic.c: 10: INTCONbits.TMR0IF = 0;
   967                           
   968                           ;incstack = 0
   969  001536  94F2               	bcf	intcon,2,c	;volatile
   970                           
   971                           ;timers_pic.c: 11: TMR0 = value;
   972  001538  C001  FFD6         	movff	set_timer0@value,4054	;volatile
   973  00153C  C002  FFD7         	movff	set_timer0@value+1,4055	;volatile
   974  001540  0012               	return		;funcret
   975  001542                     __end_of_set_timer0:
   976                           	opt stack 0
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           intcon	equ	0xFF2
   982                           postinc0	equ	0xFEE
   983                           wreg	equ	0xFE8
   984                           plusw1	equ	0xFE3
   985                           plusw2	equ	0xFDB
   986                           status	equ	0xFD8
   987                           
   988 ;; *************** function _selectOutput *****************
   989 ;; Defined at:
   990 ;;		line 64 in file "../TorqueGriper.X/pwm.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  outputs         1    wreg     unsigned char 
   993 ;;  toggle          1    0[COMRAM] unsigned char 
   994 ;; Auto vars:     Size  Location     Type
   995 ;;  outputs         1    2[COMRAM] unsigned char 
   996 ;; Return value:  Size  Location     Type
   997 ;;		None               void
   998 ;; Registers used:
   999 ;;		wreg, status,2, status,0
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMRAM   BANK0
  1005 ;;      Params:         1       0
  1006 ;;      Locals:         1       0
  1007 ;;      Temps:          1       0
  1008 ;;      Totals:         3       0
  1009 ;;Total ram usage:        3 bytes
  1010 ;; Hardware stack levels used:    1
  1011 ;; This function calls:
  1012 ;;		Nothing
  1013 ;; This function is called by:
  1014 ;;		_main
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text5
  1019  00197E                     __ptext5:
  1020                           	opt stack 0
  1021  00197E                     _selectOutput:
  1022                           	opt stack 30
  1023                           
  1024                           ;incstack = 0
  1025                           ;selectOutput@outputs stored from wreg
  1026  00197E  6E03               	movwf	selectOutput@outputs,c
  1027                           
  1028                           ;pwm.c: 66: switch (outputs){
  1029  001980  D03D               	goto	l1727
  1030  001982                     l1715:
  1031                           
  1032                           ;pwm.c: 68: PSTRCON = 0xF0;
  1033  001982  0EF0               	movlw	240
  1034  001984  6EB9               	movwf	4025,c	;volatile
  1035                           
  1036                           ;pwm.c: 69: break;
  1037  001986  0012               	return	
  1038  001988                     l1717:
  1039                           
  1040                           ;pwm.c: 71: PSTRCONbits.STRA = (toggle) ? 1 : 0;
  1041  001988  5001               	movf	selectOutput@toggle,w,c
  1042  00198A  B4D8               	btfsc	status,2,c
  1043  00198C  D003               	goto	u1340
  1044  00198E  6A02               	clrf	??_selectOutput& (0+255),c
  1045  001990  2A02               	incf	??_selectOutput& (0+255),f,c
  1046  001992  D001               	goto	u1358
  1047  001994                     u1340:
  1048  001994  6A02               	clrf	??_selectOutput& (0+255),c
  1049  001996                     u1358:
  1050  001996  50B9               	movf	4025,w,c	;volatile
  1051  001998  1802               	xorwf	??_selectOutput,w,c
  1052  00199A  0BFE               	andlw	-2
  1053  00199C  1802               	xorwf	??_selectOutput,w,c
  1054  00199E  6EB9               	movwf	4025,c	;volatile
  1055                           
  1056                           ;pwm.c: 72: break;
  1057  0019A0  0012               	return	
  1058  0019A2                     l1719:
  1059                           
  1060                           ;pwm.c: 74: PSTRCONbits.STRB = (toggle) ? 1 : 0;
  1061  0019A2  5001               	movf	selectOutput@toggle,w,c
  1062  0019A4  B4D8               	btfsc	status,2,c
  1063  0019A6  D003               	goto	u1360
  1064  0019A8  6A02               	clrf	??_selectOutput& (0+255),c
  1065  0019AA  2A02               	incf	??_selectOutput& (0+255),f,c
  1066  0019AC  D001               	goto	u1378
  1067  0019AE                     u1360:
  1068  0019AE  6A02               	clrf	??_selectOutput& (0+255),c
  1069  0019B0                     u1378:
  1070  0019B0  4602               	rlncf	??_selectOutput,f,c
  1071  0019B2  50B9               	movf	4025,w,c	;volatile
  1072  0019B4  1802               	xorwf	??_selectOutput,w,c
  1073  0019B6  0BFD               	andlw	-3
  1074  0019B8  1802               	xorwf	??_selectOutput,w,c
  1075  0019BA  6EB9               	movwf	4025,c	;volatile
  1076                           
  1077                           ;pwm.c: 75: break;
  1078  0019BC  0012               	return	
  1079  0019BE                     l1721:
  1080                           
  1081                           ;pwm.c: 77: PSTRCONbits.STRC = (toggle) ? 1 : 0;
  1082  0019BE  5001               	movf	selectOutput@toggle,w,c
  1083  0019C0  B4D8               	btfsc	status,2,c
  1084  0019C2  D003               	goto	u1380
  1085  0019C4  6A02               	clrf	??_selectOutput& (0+255),c
  1086  0019C6  2A02               	incf	??_selectOutput& (0+255),f,c
  1087  0019C8  D001               	goto	u1398
  1088  0019CA                     u1380:
  1089  0019CA  6A02               	clrf	??_selectOutput& (0+255),c
  1090  0019CC                     u1398:
  1091  0019CC  4602               	rlncf	??_selectOutput,f,c
  1092  0019CE  4602               	rlncf	??_selectOutput,f,c
  1093  0019D0  50B9               	movf	4025,w,c	;volatile
  1094  0019D2  1802               	xorwf	??_selectOutput,w,c
  1095  0019D4  0BFB               	andlw	-5
  1096  0019D6  1802               	xorwf	??_selectOutput,w,c
  1097  0019D8  6EB9               	movwf	4025,c	;volatile
  1098                           
  1099                           ;pwm.c: 78: break;
  1100  0019DA  0012               	return	
  1101  0019DC                     l1723:
  1102                           
  1103                           ;pwm.c: 80: PSTRCONbits.STRD = (toggle) ? 1 : 0;
  1104  0019DC  5001               	movf	selectOutput@toggle,w,c
  1105  0019DE  B4D8               	btfsc	status,2,c
  1106  0019E0  D003               	goto	u1400
  1107  0019E2  6A02               	clrf	??_selectOutput& (0+255),c
  1108  0019E4  2A02               	incf	??_selectOutput& (0+255),f,c
  1109  0019E6  D001               	goto	u1418
  1110  0019E8                     u1400:
  1111  0019E8  6A02               	clrf	??_selectOutput& (0+255),c
  1112  0019EA                     u1418:
  1113  0019EA  4602               	rlncf	??_selectOutput,f,c
  1114  0019EC  4602               	rlncf	??_selectOutput,f,c
  1115  0019EE  4602               	rlncf	??_selectOutput,f,c
  1116  0019F0  50B9               	movf	4025,w,c	;volatile
  1117  0019F2  1802               	xorwf	??_selectOutput,w,c
  1118  0019F4  0BF7               	andlw	-9
  1119  0019F6  1802               	xorwf	??_selectOutput,w,c
  1120  0019F8  6EB9               	movwf	4025,c	;volatile
  1121                           
  1122                           ;pwm.c: 82: }
  1123                           
  1124                           ;pwm.c: 81: break;
  1125  0019FA  0012               	return	
  1126  0019FC                     l1727:
  1127  0019FC  5003               	movf	selectOutput@outputs,w,c
  1128                           
  1129                           ; Switch size 1, requested type "space"
  1130                           ; Number of cases is 5, Range of values is 0 to 8
  1131                           ; switch strategies available:
  1132                           ; Name         Instructions Cycles
  1133                           ; simple_byte           16     9 (average)
  1134                           ;	Chosen strategy is simple_byte
  1135  0019FE  0A00               	xorlw	0	; case 0
  1136  001A00  B4D8               	btfsc	status,2,c
  1137  001A02  D7BF               	goto	l1715
  1138  001A04  0A01               	xorlw	1	; case 1
  1139  001A06  B4D8               	btfsc	status,2,c
  1140  001A08  D7BF               	goto	l1717
  1141  001A0A  0A03               	xorlw	3	; case 2
  1142  001A0C  B4D8               	btfsc	status,2,c
  1143  001A0E  D7C9               	goto	l1719
  1144  001A10  0A06               	xorlw	6	; case 4
  1145  001A12  B4D8               	btfsc	status,2,c
  1146  001A14  D7D4               	goto	l1721
  1147  001A16  0A0C               	xorlw	12	; case 8
  1148  001A18  A4D8               	btfss	status,2,c
  1149  001A1A  0012               	return	
  1150  001A1C  D7DF               	goto	l1723
  1151  001A1E  0012               	return		;funcret
  1152  001A20                     __end_of_selectOutput:
  1153                           	opt stack 0
  1154                           tblptru	equ	0xFF8
  1155                           tblptrh	equ	0xFF7
  1156                           tblptrl	equ	0xFF6
  1157                           tablat	equ	0xFF5
  1158                           intcon	equ	0xFF2
  1159                           postinc0	equ	0xFEE
  1160                           wreg	equ	0xFE8
  1161                           plusw1	equ	0xFE3
  1162                           plusw2	equ	0xFDB
  1163                           status	equ	0xFD8
  1164                           
  1165 ;; *************** function _pmwSingleModeSetUp *****************
  1166 ;; Defined at:
  1167 ;;		line 3 in file "../TorqueGriper.X/pwm.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;  polarity        1    wreg     enum E3665
  1170 ;;  valuePR2        1    4[COMRAM] unsigned char 
  1171 ;;  scaler          1    5[COMRAM] enum E3671
  1172 ;;  outputs         1    6[COMRAM] unsigned char 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  polarity        1    7[COMRAM] enum E3665
  1175 ;; Return value:  Size  Location     Type
  1176 ;;		None               void
  1177 ;; Registers used:
  1178 ;;		wreg, status,2, status,0, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0
  1184 ;;      Params:         3       0
  1185 ;;      Locals:         1       0
  1186 ;;      Temps:          0       0
  1187 ;;      Totals:         4       0
  1188 ;;Total ram usage:        4 bytes
  1189 ;; Hardware stack levels used:    1
  1190 ;; Hardware stack levels required when called:    1
  1191 ;; This function calls:
  1192 ;;		_setPulseWidth
  1193 ;; This function is called by:
  1194 ;;		_main
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text6
  1199  001AC6                     __ptext6:
  1200                           	opt stack 0
  1201  001AC6                     _pmwSingleModeSetUp:
  1202                           	opt stack 29
  1203                           
  1204                           ;incstack = 0
  1205                           ;pmwSingleModeSetUp@polarity stored from wreg
  1206  001AC6  6E08               	movwf	pmwSingleModeSetUp@polarity,c
  1207                           
  1208                           ;pwm.c: 6: T2CONbits.TMR2ON = 1;
  1209  001AC8  84CA               	bsf	4042,2,c	;volatile
  1210                           
  1211                           ;pwm.c: 8: switch (scaler) {
  1212  001ACA  D009               	goto	l1655
  1213  001ACC                     l1649:
  1214                           
  1215                           ;pwm.c: 10: T2CONbits.T2CKPS = 0x00;
  1216  001ACC  0EFC               	movlw	-4
  1217  001ACE  16CA               	andwf	4042,f,c	;volatile
  1218                           
  1219                           ;pwm.c: 11: break;
  1220  001AD0  D011               	goto	l1657
  1221                           
  1222                           ;pwm.c: 12: case TMRP_4:
  1223  001AD2  D000               	goto	l1653
  1224  001AD4                     l1653:
  1225                           
  1226                           ;pwm.c: 16: T2CONbits.T2CKPS = 0x11;
  1227  001AD4  50CA               	movf	4042,w,c	;volatile
  1228  001AD6  0BFC               	andlw	-4
  1229  001AD8  0901               	iorlw	1
  1230  001ADA  6ECA               	movwf	4042,c	;volatile
  1231                           
  1232                           ;pwm.c: 17: }
  1233  001ADC  D00B               	goto	l1657
  1234  001ADE                     l1655:
  1235  001ADE  5006               	movf	pmwSingleModeSetUp@scaler,w,c
  1236                           
  1237                           ; Switch size 1, requested type "space"
  1238                           ; Number of cases is 3, Range of values is 0 to 2
  1239                           ; switch strategies available:
  1240                           ; Name         Instructions Cycles
  1241                           ; simple_byte           10     6 (average)
  1242                           ;	Chosen strategy is simple_byte
  1243  001AE0  0A00               	xorlw	0	; case 0
  1244  001AE2  B4D8               	btfsc	status,2,c
  1245  001AE4  D7F3               	goto	l1649
  1246  001AE6  0A01               	xorlw	1	; case 1
  1247  001AE8  B4D8               	btfsc	status,2,c
  1248  001AEA  D7F4               	goto	l1653
  1249  001AEC  0A03               	xorlw	3	; case 2
  1250  001AEE  B4D8               	btfsc	status,2,c
  1251  001AF0  D7F1               	goto	l1653
  1252  001AF2  D000               	goto	l1657
  1253  001AF4                     l1657:
  1254                           
  1255                           ;pwm.c: 19: CCP1CONbits.P1M = 0x00;
  1256  001AF4  0E3F               	movlw	-193
  1257  001AF6  16BD               	andwf	4029,f,c	;volatile
  1258                           
  1259                           ;pwm.c: 21: switch (polarity) {
  1260  001AF8  D012               	goto	l1665
  1261  001AFA                     l1659:
  1262                           
  1263                           ;pwm.c: 23: CCP1CONbits.CCP1M = 0b1100;
  1264  001AFA  50BD               	movf	4029,w,c	;volatile
  1265  001AFC  0BF0               	andlw	-16
  1266  001AFE  090C               	iorlw	12
  1267  001B00  D007               	goto	L2
  1268  001B02                     l1661:
  1269                           
  1270                           ;pwm.c: 26: CCP1CONbits.CCP1M = 0b1101;
  1271  001B02  50BD               	movf	4029,w,c	;volatile
  1272  001B04  0BF0               	andlw	-16
  1273  001B06  090D               	iorlw	13
  1274  001B08  D003               	goto	L2
  1275  001B0A                     l1663:
  1276                           
  1277                           ;pwm.c: 29: CCP1CONbits.CCP1M = 0b1110;
  1278  001B0A  50BD               	movf	4029,w,c	;volatile
  1279  001B0C  0BF0               	andlw	-16
  1280  001B0E  090E               	iorlw	14
  1281  001B10                     L2:
  1282  001B10  6EBD               	movwf	4029,c	;volatile
  1283                           
  1284                           ;pwm.c: 30: break;
  1285  001B12  D012               	goto	l382
  1286  001B14                     l385:
  1287                           
  1288                           ;pwm.c: 32: CCP1CONbits.CCP1M = 0b1111;
  1289  001B14  80BD               	bsf	4029,0,c	;volatile
  1290  001B16  82BD               	bsf	4029,1,c	;volatile
  1291  001B18  84BD               	bsf	4029,2,c	;volatile
  1292  001B1A  86BD               	bsf	4029,3,c	;volatile
  1293                           
  1294                           ;pwm.c: 33: }
  1295  001B1C  D00D               	goto	l382
  1296  001B1E                     l1665:
  1297  001B1E  5008               	movf	pmwSingleModeSetUp@polarity,w,c
  1298                           
  1299                           ; Switch size 1, requested type "space"
  1300                           ; Number of cases is 4, Range of values is 0 to 3
  1301                           ; switch strategies available:
  1302                           ; Name         Instructions Cycles
  1303                           ; simple_byte           13     7 (average)
  1304                           ;	Chosen strategy is simple_byte
  1305  001B20  0A00               	xorlw	0	; case 0
  1306  001B22  B4D8               	btfsc	status,2,c
  1307  001B24  D7EA               	goto	l1659
  1308  001B26  0A01               	xorlw	1	; case 1
  1309  001B28  B4D8               	btfsc	status,2,c
  1310  001B2A  D7EB               	goto	l1661
  1311  001B2C  0A03               	xorlw	3	; case 2
  1312  001B2E  B4D8               	btfsc	status,2,c
  1313  001B30  D7EC               	goto	l1663
  1314  001B32  0A01               	xorlw	1	; case 3
  1315  001B34  B4D8               	btfsc	status,2,c
  1316  001B36  D7EE               	goto	l385
  1317  001B38                     l382:
  1318                           
  1319                           ;pwm.c: 35: PSTRCONbits.STRSYNC = 1;
  1320  001B38  88B9               	bsf	4025,4,c	;volatile
  1321                           
  1322                           ;pwm.c: 37: if (outputs & 0x01) {
  1323  001B3A  A007               	btfss	pmwSingleModeSetUp@outputs,0,c
  1324  001B3C  D002               	goto	l386
  1325                           
  1326                           ;pwm.c: 38: LATCbits.LATC5 = 0;
  1327  001B3E  9A8B               	bcf	3979,5,c	;volatile
  1328                           
  1329                           ;pwm.c: 39: TRISCbits.RC5 = 0;
  1330  001B40  9A94               	bcf	3988,5,c	;volatile
  1331  001B42                     l386:
  1332                           
  1333                           ;pwm.c: 40: }
  1334                           ;pwm.c: 41: if (outputs & 0x02) {
  1335  001B42  A207               	btfss	pmwSingleModeSetUp@outputs,1,c
  1336  001B44  D002               	goto	l387
  1337                           
  1338                           ;pwm.c: 42: LATCbits.LATC4 = 0;
  1339  001B46  988B               	bcf	3979,4,c	;volatile
  1340                           
  1341                           ;pwm.c: 43: TRISCbits.RC4 = 0;
  1342  001B48  9894               	bcf	3988,4,c	;volatile
  1343  001B4A                     l387:
  1344                           
  1345                           ;pwm.c: 44: }
  1346                           ;pwm.c: 45: if (outputs & 0x04) {
  1347  001B4A  A407               	btfss	pmwSingleModeSetUp@outputs,2,c
  1348  001B4C  D002               	goto	l388
  1349                           
  1350                           ;pwm.c: 46: LATCbits.LATC3 = 0;
  1351  001B4E  968B               	bcf	3979,3,c	;volatile
  1352                           
  1353                           ;pwm.c: 47: TRISCbits.RC3 = 0;
  1354  001B50  9694               	bcf	3988,3,c	;volatile
  1355  001B52                     l388:
  1356                           
  1357                           ;pwm.c: 48: }
  1358                           ;pwm.c: 49: if (outputs & 0x08) {
  1359  001B52  A607               	btfss	pmwSingleModeSetUp@outputs,3,c
  1360  001B54  D003               	goto	l1675
  1361                           
  1362                           ;pwm.c: 50: LATCbits.LATC2 = 0;
  1363  001B56  948B               	bcf	3979,2,c	;volatile
  1364                           
  1365                           ;pwm.c: 51: TRISCbits.RC2 = 0;
  1366  001B58  9494               	bcf	3988,2,c	;volatile
  1367  001B5A  D000               	goto	l1675
  1368  001B5C                     l1675:
  1369                           
  1370                           ;pwm.c: 52: }
  1371                           ;pwm.c: 54: setPulseWidth(0);
  1372  001B5C  0E00               	movlw	0
  1373  001B5E  6E02               	movwf	setPulseWidth@width+1,c
  1374  001B60  0E00               	movlw	0
  1375  001B62  6E01               	movwf	setPulseWidth@width,c
  1376  001B64  ECE5  F00A         	call	_setPulseWidth	;wreg free
  1377                           
  1378                           ;pwm.c: 55: PR2 = valuePR2;
  1379  001B68  C005  FFCB         	movff	pmwSingleModeSetUp@valuePR2,4043	;volatile
  1380  001B6C  0012               	return		;funcret
  1381  001B6E                     __end_of_pmwSingleModeSetUp:
  1382                           	opt stack 0
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           intcon	equ	0xFF2
  1388                           postinc0	equ	0xFEE
  1389                           wreg	equ	0xFE8
  1390                           plusw1	equ	0xFE3
  1391                           plusw2	equ	0xFDB
  1392                           status	equ	0xFD8
  1393                           
  1394 ;; *************** function _setPulseWidth *****************
  1395 ;; Defined at:
  1396 ;;		line 58 in file "../TorqueGriper.X/pwm.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  width           2    0[COMRAM] unsigned int 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;		None
  1401 ;; Return value:  Size  Location     Type
  1402 ;;		None               void
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0
  1410 ;;      Params:         2       0
  1411 ;;      Locals:         0       0
  1412 ;;      Temps:          2       0
  1413 ;;      Totals:         4       0
  1414 ;;Total ram usage:        4 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; This function calls:
  1417 ;;		Nothing
  1418 ;; This function is called by:
  1419 ;;		_main
  1420 ;;		_pmwSingleModeSetUp
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text7
  1425  0015CA                     __ptext7:
  1426                           	opt stack 0
  1427  0015CA                     _setPulseWidth:
  1428                           	opt stack 30
  1429                           
  1430                           ;pwm.c: 60: CCP1CONbits.DC1B = width;
  1431                           
  1432                           ;incstack = 0
  1433  0015CA  C001  F003         	movff	setPulseWidth@width,??_setPulseWidth
  1434  0015CE  3A03               	swapf	??_setPulseWidth,f,c
  1435  0015D0  50BD               	movf	4029,w,c	;volatile
  1436  0015D2  1803               	xorwf	??_setPulseWidth,w,c
  1437  0015D4  0BCF               	andlw	-49
  1438  0015D6  1803               	xorwf	??_setPulseWidth,w,c
  1439  0015D8  6EBD               	movwf	4029,c	;volatile
  1440                           
  1441                           ;pwm.c: 61: CCPR1L = width >> 2;
  1442  0015DA  C001  F003         	movff	setPulseWidth@width,??_setPulseWidth
  1443  0015DE  C002  F004         	movff	setPulseWidth@width+1,??_setPulseWidth+1
  1444  0015E2  90D8               	bcf	status,0,c
  1445  0015E4  3204               	rrcf	??_setPulseWidth+1,f,c
  1446  0015E6  3203               	rrcf	??_setPulseWidth,f,c
  1447  0015E8  90D8               	bcf	status,0,c
  1448  0015EA  3204               	rrcf	??_setPulseWidth+1,f,c
  1449  0015EC  3203               	rrcf	??_setPulseWidth,f,c
  1450  0015EE  5003               	movf	??_setPulseWidth,w,c
  1451  0015F0  6EBE               	movwf	4030,c	;volatile
  1452  0015F2  0012               	return		;funcret
  1453  0015F4                     __end_of_setPulseWidth:
  1454                           	opt stack 0
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           intcon	equ	0xFF2
  1460                           postinc0	equ	0xFEE
  1461                           wreg	equ	0xFE8
  1462                           plusw1	equ	0xFE3
  1463                           plusw2	equ	0xFDB
  1464                           status	equ	0xFD8
  1465                           
  1466 ;; *************** function _load_buffer *****************
  1467 ;; Defined at:
  1468 ;;		line 68 in file "main.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;  buffer          2    5[COMRAM] PTR struct circular_buff
  1471 ;;		 -> main@send(34), 
  1472 ;;  str             2    7[COMRAM] PTR unsigned char 
  1473 ;;		 -> main@name(3), 
  1474 ;;  size            2    9[COMRAM] int 
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;  i               2   12[COMRAM] int 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      unsigned char 
  1479 ;; Registers used:
  1480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0
  1486 ;;      Params:         6       0
  1487 ;;      Locals:         2       0
  1488 ;;      Temps:          1       0
  1489 ;;      Totals:         9       0
  1490 ;;Total ram usage:        9 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    1
  1493 ;; This function calls:
  1494 ;;		_buffer_push
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text8
  1501  0018DE                     __ptext8:
  1502                           	opt stack 0
  1503  0018DE                     _load_buffer:
  1504                           	opt stack 29
  1505                           
  1506                           ;main.c: 70: int i;
  1507                           ;main.c: 71: if (size < 0) {
  1508                           
  1509                           ;incstack = 0
  1510  0018DE  AE0B               	btfss	load_buffer@size+1,7,c
  1511  0018E0  D026               	goto	l1747
  1512                           
  1513                           ;main.c: 72: for (i = 0; str[i] != 0; i++) {
  1514  0018E2  0E00               	movlw	0
  1515  0018E4  6E0E               	movwf	load_buffer@i+1,c
  1516  0018E6  0E00               	movlw	0
  1517  0018E8  6E0D               	movwf	load_buffer@i,c
  1518  0018EA  D016               	goto	l1745
  1519  0018EC                     l1739:
  1520                           
  1521                           ;main.c: 73: if (buffer_push(buffer, str[i]))
  1522  0018EC  C006  F001         	movff	load_buffer@buffer,buffer_push@buffer
  1523  0018F0  C007  F002         	movff	load_buffer@buffer+1,buffer_push@buffer+1
  1524  0018F4  500D               	movf	load_buffer@i,w,c
  1525  0018F6  2408               	addwf	load_buffer@str,w,c
  1526  0018F8  6ED9               	movwf	fsr2l,c
  1527  0018FA  500E               	movf	load_buffer@i+1,w,c
  1528  0018FC  2009               	addwfc	load_buffer@str+1,w,c
  1529  0018FE  6EDA               	movwf	fsr2h,c
  1530  001900  50DF               	movf	indf2,w,c
  1531  001902  6E03               	movwf	buffer_push@byte,c
  1532  001904  EC2F  F00C         	call	_buffer_push	;wreg free
  1533  001908  0900               	iorlw	0
  1534  00190A  A4D8               	btfss	status,2,c
  1535  00190C  0012               	return	
  1536  00190E  D001               	goto	l1743
  1537                           
  1538                           ;main.c: 74: return 0;
  1539                           ;	Return value of _load_buffer is never used
  1540  001910  0012               	return	
  1541  001912                     l1743:
  1542  001912  4A0D               	infsnz	load_buffer@i,f,c
  1543  001914  2A0E               	incf	load_buffer@i+1,f,c
  1544  001916  D000               	goto	l1745
  1545  001918                     l1745:
  1546  001918  500D               	movf	load_buffer@i,w,c
  1547  00191A  2408               	addwf	load_buffer@str,w,c
  1548  00191C  6ED9               	movwf	fsr2l,c
  1549  00191E  500E               	movf	load_buffer@i+1,w,c
  1550  001920  2009               	addwfc	load_buffer@str+1,w,c
  1551  001922  6EDA               	movwf	fsr2h,c
  1552  001924  50DF               	movf	indf2,w,c
  1553  001926  B4D8               	btfsc	status,2,c
  1554  001928  0012               	return	
  1555  00192A  D7E0               	goto	l1739
  1556                           
  1557                           ;main.c: 75: }
  1558                           ;main.c: 76: } else {
  1559  00192C  0012               	return	
  1560  00192E                     l1747:
  1561                           
  1562                           ;main.c: 77: for (i = 0; i < size; i++) {
  1563  00192E  0E00               	movlw	0
  1564  001930  6E0E               	movwf	load_buffer@i+1,c
  1565  001932  0E00               	movlw	0
  1566  001934  6E0D               	movwf	load_buffer@i,c
  1567  001936  D016               	goto	l1755
  1568  001938                     l1749:
  1569                           
  1570                           ;main.c: 78: if (buffer_push(buffer, str[i]))
  1571  001938  C006  F001         	movff	load_buffer@buffer,buffer_push@buffer
  1572  00193C  C007  F002         	movff	load_buffer@buffer+1,buffer_push@buffer+1
  1573  001940  500D               	movf	load_buffer@i,w,c
  1574  001942  2408               	addwf	load_buffer@str,w,c
  1575  001944  6ED9               	movwf	fsr2l,c
  1576  001946  500E               	movf	load_buffer@i+1,w,c
  1577  001948  2009               	addwfc	load_buffer@str+1,w,c
  1578  00194A  6EDA               	movwf	fsr2h,c
  1579  00194C  50DF               	movf	indf2,w,c
  1580  00194E  6E03               	movwf	buffer_push@byte,c
  1581  001950  EC2F  F00C         	call	_buffer_push	;wreg free
  1582  001954  0900               	iorlw	0
  1583  001956  A4D8               	btfss	status,2,c
  1584  001958  0012               	return	
  1585  00195A  D001               	goto	l1753
  1586                           
  1587                           ;main.c: 79: return 0;
  1588                           ;	Return value of _load_buffer is never used
  1589  00195C  0012               	return	
  1590  00195E                     l1753:
  1591  00195E  4A0D               	infsnz	load_buffer@i,f,c
  1592  001960  2A0E               	incf	load_buffer@i+1,f,c
  1593  001962  D000               	goto	l1755
  1594  001964                     l1755:
  1595  001964  500A               	movf	load_buffer@size,w,c
  1596  001966  5C0D               	subwf	load_buffer@i,w,c
  1597  001968  500E               	movf	load_buffer@i+1,w,c
  1598  00196A  0A80               	xorlw	128
  1599  00196C  6E0C               	movwf	??_load_buffer& (0+255),c
  1600  00196E  500B               	movf	load_buffer@size+1,w,c
  1601  001970  0A80               	xorlw	128
  1602  001972  580C               	subwfb	??_load_buffer& (0+255),w,c
  1603  001974  B0D8               	btfsc	status,0,c
  1604  001976  0012               	return	
  1605  001978  D7DF               	goto	l1749
  1606  00197A  0012               	return	
  1607                           
  1608                           ;main.c: 80: }
  1609                           ;main.c: 81: }
  1610                           ;main.c: 83: return 1;
  1611                           ;	Return value of _load_buffer is never used
  1612  00197C  0012               	return		;funcret
  1613  00197E                     __end_of_load_buffer:
  1614                           	opt stack 0
  1615                           tblptru	equ	0xFF8
  1616                           tblptrh	equ	0xFF7
  1617                           tblptrl	equ	0xFF6
  1618                           tablat	equ	0xFF5
  1619                           intcon	equ	0xFF2
  1620                           postinc0	equ	0xFEE
  1621                           wreg	equ	0xFE8
  1622                           plusw1	equ	0xFE3
  1623                           indf2	equ	0xFDF
  1624                           plusw2	equ	0xFDB
  1625                           fsr2h	equ	0xFDA
  1626                           fsr2l	equ	0xFD9
  1627                           status	equ	0xFD8
  1628                           
  1629 ;; *************** function _espi_setup *****************
  1630 ;; Defined at:
  1631 ;;		line 27 in file "../TorqueGriper.X/extended_spi.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  mode            1    wreg     unsigned char 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  mode            1    2[COMRAM] unsigned char 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;		None               void
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0
  1645 ;;      Params:         0       0
  1646 ;;      Locals:         1       0
  1647 ;;      Temps:          0       0
  1648 ;;      Totals:         1       0
  1649 ;;Total ram usage:        1 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    1
  1652 ;; This function calls:
  1653 ;;		_setup_spi
  1654 ;; This function is called by:
  1655 ;;		_main
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text9
  1660  00162A                     __ptext9:
  1661                           	opt stack 0
  1662  00162A                     _espi_setup:
  1663                           	opt stack 29
  1664                           
  1665                           ;incstack = 0
  1666                           ;espi_setup@mode stored from wreg
  1667  00162A  6E03               	movwf	espi_setup@mode,c
  1668                           
  1669                           ;extended_spi.c: 29: setup_spi(0, 0x20 | 0x10 | mode);
  1670  00162C  5003               	movf	espi_setup@mode,w,c
  1671  00162E  0930               	iorlw	48
  1672  001630  6E01               	movwf	setup_spi@SSPCON1_reg,c
  1673  001632  0E00               	movlw	0
  1674  001634  EC4F  F00B         	call	_setup_spi
  1675                           
  1676                           ;extended_spi.c: 31: ANSELbits.ANS2 = 0;
  1677  001638  947E               	bcf	3966,2,c	;volatile
  1678                           
  1679                           ;extended_spi.c: 32: ANSELHbits.ANS8 = 0;
  1680  00163A  907F               	bcf	3967,0,c	;volatile
  1681                           
  1682                           ;extended_spi.c: 34: if (mode == 0x04 || mode == 0x05) {
  1683  00163C  0E04               	movlw	4
  1684  00163E  1803               	xorwf	espi_setup@mode,w,c
  1685  001640  B4D8               	btfsc	status,2,c
  1686  001642  D004               	goto	l215
  1687  001644  0E05               	movlw	5
  1688  001646  1803               	xorwf	espi_setup@mode,w,c
  1689  001648  A4D8               	btfss	status,2,c
  1690  00164A  D004               	goto	l213
  1691  00164C                     l215:
  1692                           
  1693                           ;extended_spi.c: 35: TRISAbits.RA2 = 0;
  1694  00164C  9492               	bcf	3986,2,c	;volatile
  1695                           
  1696                           ;extended_spi.c: 36: LATAbits.LATA2 = 0;
  1697  00164E  9489               	bcf	3977,2,c	;volatile
  1698                           
  1699                           ;extended_spi.c: 37: TRISCbits.RC6 = 1;
  1700  001650  8C94               	bsf	3988,6,c	;volatile
  1701                           
  1702                           ;extended_spi.c: 38: } else {
  1703  001652  0012               	return	
  1704  001654                     l213:
  1705                           
  1706                           ;extended_spi.c: 39: TRISAbits.RA2 = 1;
  1707  001654  8492               	bsf	3986,2,c	;volatile
  1708                           
  1709                           ;extended_spi.c: 40: TRISCbits.RC6 = 0;
  1710  001656  9C94               	bcf	3988,6,c	;volatile
  1711                           
  1712                           ;extended_spi.c: 41: LATCbits.LATC6 = 0;
  1713  001658  9C8B               	bcf	3979,6,c	;volatile
  1714                           
  1715                           ;extended_spi.c: 42: INTCON2bits.INTEDG2 = 1;
  1716  00165A  88F1               	bsf	intcon2,4,c	;volatile
  1717                           
  1718                           ;extended_spi.c: 43: INTCON3bits.INT2E = 1;
  1719  00165C  88F0               	bsf	intcon3,4,c	;volatile
  1720  00165E  0012               	return	
  1721  001660  0012               	return		;funcret
  1722  001662                     __end_of_espi_setup:
  1723                           	opt stack 0
  1724                           tblptru	equ	0xFF8
  1725                           tblptrh	equ	0xFF7
  1726                           tblptrl	equ	0xFF6
  1727                           tablat	equ	0xFF5
  1728                           intcon	equ	0xFF2
  1729                           intcon2	equ	0xFF1
  1730                           intcon3	equ	0xFF0
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           plusw1	equ	0xFE3
  1734                           indf2	equ	0xFDF
  1735                           plusw2	equ	0xFDB
  1736                           fsr2h	equ	0xFDA
  1737                           fsr2l	equ	0xFD9
  1738                           status	equ	0xFD8
  1739                           
  1740 ;; *************** function _setup_spi *****************
  1741 ;; Defined at:
  1742 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  SSPSTAT_reg     1    wreg     unsigned char 
  1745 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;		None               void
  1750 ;; Registers used:
  1751 ;;		wreg, status,2, status,0
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0
  1757 ;;      Params:         1       0
  1758 ;;      Locals:         1       0
  1759 ;;      Temps:          0       0
  1760 ;;      Totals:         2       0
  1761 ;;Total ram usage:        2 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_espi_setup
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text10
  1771  00169E                     __ptext10:
  1772                           	opt stack 0
  1773  00169E                     _setup_spi:
  1774                           	opt stack 29
  1775                           
  1776                           ;incstack = 0
  1777                           ;setup_spi@SSPSTAT_reg stored from wreg
  1778  00169E  6E02               	movwf	setup_spi@SSPSTAT_reg,c
  1779                           
  1780                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
  1781  0016A0  9E94               	bcf	3988,7,c	;volatile
  1782                           
  1783                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
  1784  0016A2  947F               	bcf	3967,2,c	;volatile
  1785                           
  1786                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
  1787  0016A4  8893               	bsf	3987,4,c	;volatile
  1788                           
  1789                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
  1790  0016A6  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
  1791                           
  1792                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
  1793  0016AA  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
  1794                           
  1795                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
  1796  0016AE  50C6               	movf	4038,w,c	;volatile
  1797  0016B0  0B0F               	andlw	15
  1798  0016B2  0A05               	xorlw	5
  1799  0016B4  B4D8               	btfsc	status,2,c
  1800  0016B6  D005               	goto	l97
  1801  0016B8  50C6               	movf	4038,w,c	;volatile
  1802  0016BA  0B0F               	andlw	15
  1803  0016BC  0A04               	xorlw	4
  1804  0016BE  A4D8               	btfss	status,2,c
  1805  0016C0  D00A               	goto	l95
  1806  0016C2                     l97:
  1807                           
  1808                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
  1809  0016C2  8C93               	bsf	3987,6,c	;volatile
  1810                           
  1811                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
  1812  0016C4  50C6               	movf	4038,w,c	;volatile
  1813  0016C6  0B0F               	andlw	15
  1814  0016C8  0A04               	xorlw	4
  1815  0016CA  A4D8               	btfss	status,2,c
  1816  0016CC  D002               	goto	l98
  1817                           
  1818                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
  1819  0016CE  907F               	bcf	3967,0,c	;volatile
  1820                           
  1821                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
  1822  0016D0  8C94               	bsf	3988,6,c	;volatile
  1823  0016D2                     l98:
  1824                           
  1825                           ;spi_pic.c: 26: }
  1826                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
  1827  0016D2  9EC7               	bcf	4039,7,c	;volatile
  1828                           
  1829                           ;spi_pic.c: 28: } else {
  1830  0016D4  0012               	return	
  1831  0016D6                     l95:
  1832                           
  1833                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
  1834  0016D6  9C93               	bcf	3987,6,c	;volatile
  1835  0016D8  0012               	return	
  1836  0016DA  0012               	return		;funcret
  1837  0016DC                     __end_of_setup_spi:
  1838                           	opt stack 0
  1839                           tblptru	equ	0xFF8
  1840                           tblptrh	equ	0xFF7
  1841                           tblptrl	equ	0xFF6
  1842                           tablat	equ	0xFF5
  1843                           intcon	equ	0xFF2
  1844                           intcon2	equ	0xFF1
  1845                           intcon3	equ	0xFF0
  1846                           postinc0	equ	0xFEE
  1847                           wreg	equ	0xFE8
  1848                           plusw1	equ	0xFE3
  1849                           indf2	equ	0xFDF
  1850                           plusw2	equ	0xFDB
  1851                           fsr2h	equ	0xFDA
  1852                           fsr2l	equ	0xFD9
  1853                           status	equ	0xFD8
  1854                           
  1855 ;; *************** function _espi_master_send *****************
  1856 ;; Defined at:
  1857 ;;		line 138 in file "../TorqueGriper.X/extended_spi.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;  buffer          2    7[COMRAM] PTR struct circular_buff
  1860 ;;		 -> main@send(34), 
  1861 ;;  timer_start     2    9[COMRAM] PTR FTN(int ,)void 
  1862 ;;		 -> set_timer3(0), 
  1863 ;;  timer           2   11[COMRAM] PTR FTN()unsigned char 
  1864 ;;		 -> timer3_up(1), 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  byte_to_send    2   15[COMRAM] unsigned int 
  1867 ;;  byte_2          1   18[COMRAM] unsigned char 
  1868 ;;  byte_1          1   17[COMRAM] unsigned char 
  1869 ;;  received_2      1   14[COMRAM] unsigned char 
  1870 ;;  received_1      1   13[COMRAM] unsigned char 
  1871 ;; Return value:  Size  Location     Type
  1872 ;;		None               void
  1873 ;; Registers used:
  1874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0
  1880 ;;      Params:         6       0
  1881 ;;      Locals:         6       0
  1882 ;;      Temps:          0       0
  1883 ;;      Totals:        12       0
  1884 ;;Total ram usage:       12 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    2
  1887 ;; This function calls:
  1888 ;;		_buffer_count
  1889 ;;		_buffer_peek
  1890 ;;		_buffer_pop
  1891 ;;		_encode_data
  1892 ;;		_send_delay
  1893 ;;		_spi_send_get_byte
  1894 ;;		_wait_pulse
  1895 ;; This function is called by:
  1896 ;;		_main
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text11
  1901  001B6E                     __ptext11:
  1902                           	opt stack 0
  1903  001B6E                     _espi_master_send:
  1904                           	opt stack 28
  1905                           
  1906                           ;extended_spi.c: 142: if (buffer_count(buffer)) {
  1907                           
  1908                           ;incstack = 0
  1909  001B6E  C008  F001         	movff	espi_master_send@buffer,buffer_count@buffer
  1910  001B72  C009  F002         	movff	espi_master_send@buffer+1,buffer_count@buffer+1
  1911  001B76  ECB8  F00A         	call	_buffer_count	;wreg free
  1912  001B7A  0900               	iorlw	0
  1913  001B7C  B4D8               	btfsc	status,2,c
  1914  001B7E  0012               	return	
  1915                           
  1916                           ;extended_spi.c: 143: spi_send_get_byte(0x10);
  1917  001B80  0E10               	movlw	16
  1918  001B82  ECC1  F00A         	call	_spi_send_get_byte
  1919                           
  1920                           ;extended_spi.c: 145: wait_pulse(0x10, timer_start, timer);
  1921  001B86  C00A  F003         	movff	espi_master_send@timer_start,wait_pulse@timer_start
  1922  001B8A  C00B  F004         	movff	espi_master_send@timer_start+1,wait_pulse@timer_start+1
  1923  001B8E  C00C  F005         	movff	espi_master_send@timer,wait_pulse@timer
  1924  001B92  C00D  F006         	movff	espi_master_send@timer+1,wait_pulse@timer+1
  1925  001B96  0E10               	movlw	16
  1926  001B98  ECBA  F00B         	call	_wait_pulse
  1927  001B9C  D000               	goto	l1763
  1928  001B9E                     l1763:
  1929                           
  1930                           ;extended_spi.c: 154: byte_to_send = buffer_peek(buffer);
  1931  001B9E  C008  F001         	movff	espi_master_send@buffer,buffer_peek@buffer
  1932  001BA2  C009  F002         	movff	espi_master_send@buffer+1,buffer_peek@buffer+1
  1933  001BA6  EC91  F00B         	call	_buffer_peek	;wreg free
  1934  001BAA  C001  F010         	movff	?_buffer_peek,espi_master_send@byte_to_send
  1935  001BAE  C002  F011         	movff	?_buffer_peek+1,espi_master_send@byte_to_send+1
  1936                           
  1937                           ;extended_spi.c: 155: if (byte_to_send == -1)
  1938  001BB2  2810               	incf	espi_master_send@byte_to_send,w,c
  1939  001BB4  E105               	bnz	l1769
  1940  001BB6  2811               	incf	espi_master_send@byte_to_send+1,w,c
  1941  001BB8  B4D8               	btfsc	status,2,c
  1942  001BBA  D02C               	goto	l1789
  1943  001BBC  D001               	goto	l1769
  1944                           
  1945                           ;extended_spi.c: 156: break;
  1946  001BBE  D02A               	goto	l1789
  1947  001BC0                     l1769:
  1948                           
  1949                           ;extended_spi.c: 157: encode_data(byte_to_send, &byte_1, &byte_2);
  1950  001BC0  0E12               	movlw	low espi_master_send@byte_1
  1951  001BC2  6E01               	movwf	encode_data@byte_1,c
  1952  001BC4  0E00               	movlw	high espi_master_send@byte_1
  1953  001BC6  6E02               	movwf	encode_data@byte_1+1,c
  1954  001BC8  0E13               	movlw	low espi_master_send@byte_2
  1955  001BCA  6E03               	movwf	encode_data@byte_2,c
  1956  001BCC  0E00               	movlw	high espi_master_send@byte_2
  1957  001BCE  6E04               	movwf	encode_data@byte_2+1,c
  1958  001BD0  5010               	movf	espi_master_send@byte_to_send,w,c
  1959  001BD2  EC6E  F00B         	call	_encode_data
  1960                           
  1961                           ;extended_spi.c: 159: received_1 = spi_send_get_byte(byte_1);
  1962  001BD6  5012               	movf	espi_master_send@byte_1,w,c
  1963  001BD8  ECC1  F00A         	call	_spi_send_get_byte
  1964  001BDC  6E0E               	movwf	espi_master_send@received_1,c
  1965                           
  1966                           ;extended_spi.c: 160: send_delay();
  1967  001BDE  EC90  F00A         	call	_send_delay	;wreg free
  1968                           
  1969                           ;extended_spi.c: 161: if (received_1 == 0x30)
  1970  001BE2  0E30               	movlw	48
  1971  001BE4  180E               	xorwf	espi_master_send@received_1,w,c
  1972  001BE6  B4D8               	btfsc	status,2,c
  1973  001BE8  0012               	return	
  1974  001BEA  D001               	goto	l1779
  1975                           
  1976                           ;extended_spi.c: 162: return;
  1977  001BEC  0012               	return	
  1978  001BEE                     l1779:
  1979                           
  1980                           ;extended_spi.c: 164: received_2 = spi_send_get_byte(byte_2);
  1981  001BEE  5013               	movf	espi_master_send@byte_2,w,c
  1982  001BF0  ECC1  F00A         	call	_spi_send_get_byte
  1983  001BF4  6E0F               	movwf	espi_master_send@received_2,c
  1984                           
  1985                           ;extended_spi.c: 165: send_delay();
  1986  001BF6  EC90  F00A         	call	_send_delay	;wreg free
  1987                           
  1988                           ;extended_spi.c: 166: if (received_2 == 0x30)
  1989  001BFA  0E30               	movlw	48
  1990  001BFC  180F               	xorwf	espi_master_send@received_2,w,c
  1991  001BFE  B4D8               	btfsc	status,2,c
  1992  001C00  0012               	return	
  1993  001C02  D001               	goto	l1787
  1994                           
  1995                           ;extended_spi.c: 167: return;
  1996  001C04  0012               	return	
  1997  001C06                     l1787:
  1998                           
  1999                           ;extended_spi.c: 169: buffer_pop(buffer);
  2000  001C06  C008  F001         	movff	espi_master_send@buffer,buffer_pop@buffer
  2001  001C0A  C009  F002         	movff	espi_master_send@buffer+1,buffer_pop@buffer+1
  2002  001C0E  ECF2  F00B         	call	_buffer_pop	;wreg free
  2003  001C12  D7C5               	goto	l1763
  2004  001C14                     l1789:
  2005                           
  2006                           ;extended_spi.c: 170: }
  2007                           ;extended_spi.c: 172: spi_send_get_byte(0x30);
  2008  001C14  0E30               	movlw	48
  2009  001C16  ECC1  F00A         	call	_spi_send_get_byte
  2010                           
  2011                           ;extended_spi.c: 173: send_delay();
  2012  001C1A  EC90  F00A         	call	_send_delay	;wreg free
  2013  001C1E  0012               	return	
  2014  001C20  0012               	return		;funcret
  2015  001C22                     __end_of_espi_master_send:
  2016                           	opt stack 0
  2017                           tblptru	equ	0xFF8
  2018                           tblptrh	equ	0xFF7
  2019                           tblptrl	equ	0xFF6
  2020                           tablat	equ	0xFF5
  2021                           intcon	equ	0xFF2
  2022                           intcon2	equ	0xFF1
  2023                           intcon3	equ	0xFF0
  2024                           postinc0	equ	0xFEE
  2025                           wreg	equ	0xFE8
  2026                           plusw1	equ	0xFE3
  2027                           indf2	equ	0xFDF
  2028                           plusw2	equ	0xFDB
  2029                           fsr2h	equ	0xFDA
  2030                           fsr2l	equ	0xFD9
  2031                           status	equ	0xFD8
  2032                           
  2033 ;; *************** function _encode_data *****************
  2034 ;; Defined at:
  2035 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;  data            1    wreg     unsigned char 
  2038 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
  2039 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
  2040 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
  2041 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  data            1    5[COMRAM] unsigned char 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;		None               void
  2046 ;; Registers used:
  2047 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0
  2053 ;;      Params:         4       0
  2054 ;;      Locals:         1       0
  2055 ;;      Temps:          1       0
  2056 ;;      Totals:         6       0
  2057 ;;Total ram usage:        6 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; This function calls:
  2060 ;;		Nothing
  2061 ;; This function is called by:
  2062 ;;		_espi_master_send
  2063 ;;		_espi_slave_send
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text12
  2068  0016DC                     __ptext12:
  2069                           	opt stack 0
  2070  0016DC                     _encode_data:
  2071                           	opt stack 29
  2072                           
  2073                           ;incstack = 0
  2074                           ;encode_data@data stored from wreg
  2075  0016DC  6E06               	movwf	encode_data@data,c
  2076                           
  2077                           ;encoding.c: 5: *byte_1 = 0xA0;
  2078  0016DE  C001  FFD9         	movff	encode_data@byte_1,fsr2l
  2079  0016E2  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
  2080  0016E6  0EA0               	movlw	160
  2081  0016E8  6EDF               	movwf	indf2,c
  2082                           
  2083                           ;encoding.c: 6: *byte_2 = 0xA0;
  2084  0016EA  C003  FFD9         	movff	encode_data@byte_2,fsr2l
  2085  0016EE  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
  2086  0016F2  0EA0               	movlw	160
  2087  0016F4  6EDF               	movwf	indf2,c
  2088                           
  2089                           ;encoding.c: 8: *byte_1 |= data >> 4;
  2090  0016F6  C006  F005         	movff	encode_data@data,??_encode_data
  2091  0016FA  3A05               	swapf	??_encode_data,f,c
  2092  0016FC  0E0F               	movlw	15
  2093  0016FE  1605               	andwf	??_encode_data,f,c
  2094  001700  C001  FFD9         	movff	encode_data@byte_1,fsr2l
  2095  001704  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
  2096  001708  5005               	movf	??_encode_data,w,c
  2097  00170A  12DF               	iorwf	indf2,f,c
  2098                           
  2099                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
  2100  00170C  C006  F005         	movff	encode_data@data,??_encode_data
  2101  001710  0E0F               	movlw	15
  2102  001712  1605               	andwf	??_encode_data,f,c
  2103  001714  C003  FFD9         	movff	encode_data@byte_2,fsr2l
  2104  001718  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
  2105  00171C  5005               	movf	??_encode_data,w,c
  2106  00171E  12DF               	iorwf	indf2,f,c
  2107  001720  0012               	return		;funcret
  2108  001722                     __end_of_encode_data:
  2109                           	opt stack 0
  2110                           tblptru	equ	0xFF8
  2111                           tblptrh	equ	0xFF7
  2112                           tblptrl	equ	0xFF6
  2113                           tablat	equ	0xFF5
  2114                           intcon	equ	0xFF2
  2115                           intcon2	equ	0xFF1
  2116                           intcon3	equ	0xFF0
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           plusw1	equ	0xFE3
  2120                           indf2	equ	0xFDF
  2121                           plusw2	equ	0xFDB
  2122                           fsr2h	equ	0xFDA
  2123                           fsr2l	equ	0xFD9
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function _buffer_pop *****************
  2127 ;; Defined at:
  2128 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2131 ;;		 -> main@receive(34), main@send(34), 
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  byte            2    4[COMRAM] int 
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  2    0[COMRAM] int 
  2136 ;; Registers used:
  2137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMRAM   BANK0
  2143 ;;      Params:         2       0
  2144 ;;      Locals:         2       0
  2145 ;;      Temps:          2       0
  2146 ;;      Totals:         6       0
  2147 ;;Total ram usage:        6 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; This function calls:
  2150 ;;		Nothing
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;;		_espi_master_send
  2154 ;;		_espi_slave_send
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           	psect	text13
  2159  0017E4                     __ptext13:
  2160                           	opt stack 0
  2161  0017E4                     _buffer_pop:
  2162                           	opt stack 29
  2163                           
  2164                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
  2165                           
  2166                           ;incstack = 0
  2167  0017E4  EE20 F001          	lfsr	2,1
  2168  0017E8  5001               	movf	buffer_pop@buffer,w,c
  2169  0017EA  26D9               	addwf	fsr2l,f,c
  2170  0017EC  5002               	movf	buffer_pop@buffer+1,w,c
  2171  0017EE  22DA               	addwfc	fsr2h,f,c
  2172  0017F0  50DF               	movf	indf2,w,c
  2173  0017F2  A4D8               	btfss	status,2,c
  2174  0017F4  D003               	goto	l1537
  2175                           
  2176                           ;circular_buffer.c: 40: return -1;
  2177  0017F6  6801               	setf	?_buffer_pop,c
  2178  0017F8  6802               	setf	?_buffer_pop+1,c
  2179  0017FA  0012               	return	
  2180  0017FC                     l1537:
  2181                           
  2182                           ;circular_buffer.c: 41: }
  2183                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2184  0017FC  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2185  001800  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2186  001804  50DF               	movf	indf2,w,c
  2187  001806  6E03               	movwf	??_buffer_pop& (0+255),c
  2188  001808  5003               	movf	??_buffer_pop,w,c
  2189  00180A  0D01               	mullw	1
  2190  00180C  0E02               	movlw	2
  2191  00180E  26F3               	addwf	prodl,f,c
  2192  001810  0E00               	movlw	0
  2193  001812  22F4               	addwfc	prodh,f,c
  2194  001814  50F3               	movf	prodl,w,c
  2195  001816  2401               	addwf	buffer_pop@buffer,w,c
  2196  001818  6ED9               	movwf	fsr2l,c
  2197  00181A  50F4               	movf	prodh,w,c
  2198  00181C  2002               	addwfc	buffer_pop@buffer+1,w,c
  2199  00181E  6EDA               	movwf	fsr2h,c
  2200  001820  50DF               	movf	indf2,w,c
  2201  001822  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  2202  001824  5004               	movf	??_buffer_pop+1,w,c
  2203  001826  6E05               	movwf	buffer_pop@byte,c
  2204  001828  6A06               	clrf	buffer_pop@byte+1,c
  2205                           
  2206                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  2207  00182A  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2208  00182E  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2209  001832  50DF               	movf	indf2,w,c
  2210  001834  6E03               	movwf	??_buffer_pop& (0+255),c
  2211  001836  2803               	incf	??_buffer_pop,w,c
  2212  001838  0B1F               	andlw	31
  2213  00183A  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2214  00183E  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2215  001842  6EDF               	movwf	indf2,c
  2216                           
  2217                           ;circular_buffer.c: 45: buffer->count--;
  2218  001844  EE20 F001          	lfsr	2,1
  2219  001848  5001               	movf	buffer_pop@buffer,w,c
  2220  00184A  26D9               	addwf	fsr2l,f,c
  2221  00184C  5002               	movf	buffer_pop@buffer+1,w,c
  2222  00184E  22DA               	addwfc	fsr2h,f,c
  2223  001850  06DF               	decf	indf2,f,c
  2224                           
  2225                           ;circular_buffer.c: 47: return byte;
  2226  001852  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  2227  001856  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  2228  00185A  0012               	return	
  2229  00185C  0012               	return		;funcret
  2230  00185E                     __end_of_buffer_pop:
  2231                           	opt stack 0
  2232                           tblptru	equ	0xFF8
  2233                           tblptrh	equ	0xFF7
  2234                           tblptrl	equ	0xFF6
  2235                           tablat	equ	0xFF5
  2236                           prodh	equ	0xFF4
  2237                           prodl	equ	0xFF3
  2238                           intcon	equ	0xFF2
  2239                           intcon2	equ	0xFF1
  2240                           intcon3	equ	0xFF0
  2241                           postinc0	equ	0xFEE
  2242                           wreg	equ	0xFE8
  2243                           plusw1	equ	0xFE3
  2244                           indf2	equ	0xFDF
  2245                           plusw2	equ	0xFDB
  2246                           fsr2h	equ	0xFDA
  2247                           fsr2l	equ	0xFD9
  2248                           status	equ	0xFD8
  2249                           
  2250 ;; *************** function _buffer_peek *****************
  2251 ;; Defined at:
  2252 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2255 ;;		 -> main@receive(34), main@send(34), 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  byte            2    4[COMRAM] int 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  2    0[COMRAM] int 
  2260 ;; Registers used:
  2261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0
  2267 ;;      Params:         2       0
  2268 ;;      Locals:         2       0
  2269 ;;      Temps:          2       0
  2270 ;;      Totals:         6       0
  2271 ;;Total ram usage:        6 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_main
  2277 ;;		_espi_master_send
  2278 ;;		_espi_slave_send
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           	psect	text14
  2283  001722                     __ptext14:
  2284                           	opt stack 0
  2285  001722                     _buffer_peek:
  2286                           	opt stack 29
  2287                           
  2288                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
  2289                           
  2290                           ;incstack = 0
  2291  001722  EE20 F001          	lfsr	2,1
  2292  001726  5001               	movf	buffer_peek@buffer,w,c
  2293  001728  26D9               	addwf	fsr2l,f,c
  2294  00172A  5002               	movf	buffer_peek@buffer+1,w,c
  2295  00172C  22DA               	addwfc	fsr2h,f,c
  2296  00172E  50DF               	movf	indf2,w,c
  2297  001730  A4D8               	btfss	status,2,c
  2298  001732  D003               	goto	l1557
  2299                           
  2300                           ;circular_buffer.c: 58: return -1;
  2301  001734  6801               	setf	?_buffer_peek,c
  2302  001736  6802               	setf	?_buffer_peek+1,c
  2303  001738  0012               	return	
  2304  00173A                     l1557:
  2305                           
  2306                           ;circular_buffer.c: 59: }
  2307                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2308  00173A  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
  2309  00173E  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
  2310  001742  50DF               	movf	indf2,w,c
  2311  001744  6E03               	movwf	??_buffer_peek& (0+255),c
  2312  001746  5003               	movf	??_buffer_peek,w,c
  2313  001748  0D01               	mullw	1
  2314  00174A  0E02               	movlw	2
  2315  00174C  26F3               	addwf	prodl,f,c
  2316  00174E  0E00               	movlw	0
  2317  001750  22F4               	addwfc	prodh,f,c
  2318  001752  50F3               	movf	prodl,w,c
  2319  001754  2401               	addwf	buffer_peek@buffer,w,c
  2320  001756  6ED9               	movwf	fsr2l,c
  2321  001758  50F4               	movf	prodh,w,c
  2322  00175A  2002               	addwfc	buffer_peek@buffer+1,w,c
  2323  00175C  6EDA               	movwf	fsr2h,c
  2324  00175E  50DF               	movf	indf2,w,c
  2325  001760  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
  2326  001762  5004               	movf	??_buffer_peek+1,w,c
  2327  001764  6E05               	movwf	buffer_peek@byte,c
  2328  001766  6A06               	clrf	buffer_peek@byte+1,c
  2329                           
  2330                           ;circular_buffer.c: 63: return byte;
  2331  001768  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
  2332  00176C  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
  2333  001770  0012               	return	
  2334  001772  0012               	return		;funcret
  2335  001774                     __end_of_buffer_peek:
  2336                           	opt stack 0
  2337                           tblptru	equ	0xFF8
  2338                           tblptrh	equ	0xFF7
  2339                           tblptrl	equ	0xFF6
  2340                           tablat	equ	0xFF5
  2341                           prodh	equ	0xFF4
  2342                           prodl	equ	0xFF3
  2343                           intcon	equ	0xFF2
  2344                           intcon2	equ	0xFF1
  2345                           intcon3	equ	0xFF0
  2346                           postinc0	equ	0xFEE
  2347                           wreg	equ	0xFE8
  2348                           plusw1	equ	0xFE3
  2349                           indf2	equ	0xFDF
  2350                           plusw2	equ	0xFDB
  2351                           fsr2h	equ	0xFDA
  2352                           fsr2l	equ	0xFD9
  2353                           status	equ	0xFD8
  2354                           
  2355 ;; *************** function _buffer_count *****************
  2356 ;; Defined at:
  2357 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2360 ;;		 -> main@receive(34), main@send(34), 
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;		None
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      unsigned char 
  2365 ;; Registers used:
  2366 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMRAM   BANK0
  2372 ;;      Params:         2       0
  2373 ;;      Locals:         0       0
  2374 ;;      Temps:          0       0
  2375 ;;      Totals:         2       0
  2376 ;;Total ram usage:        2 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_main
  2382 ;;		_espi_master_send
  2383 ;;		_espi_slave_send
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text15
  2388  001570                     __ptext15:
  2389                           	opt stack 0
  2390  001570                     _buffer_count:
  2391                           	opt stack 29
  2392                           
  2393                           ;circular_buffer.c: 6: return buffer->count;
  2394                           
  2395                           ;incstack = 0
  2396  001570  EE20 F001          	lfsr	2,1
  2397  001574  5001               	movf	buffer_count@buffer,w,c
  2398  001576  26D9               	addwf	fsr2l,f,c
  2399  001578  5002               	movf	buffer_count@buffer+1,w,c
  2400  00157A  22DA               	addwfc	fsr2h,f,c
  2401  00157C  50DF               	movf	indf2,w,c
  2402  00157E  0012               	return	
  2403  001580  0012               	return		;funcret
  2404  001582                     __end_of_buffer_count:
  2405                           	opt stack 0
  2406                           tblptru	equ	0xFF8
  2407                           tblptrh	equ	0xFF7
  2408                           tblptrl	equ	0xFF6
  2409                           tablat	equ	0xFF5
  2410                           prodh	equ	0xFF4
  2411                           prodl	equ	0xFF3
  2412                           intcon	equ	0xFF2
  2413                           intcon2	equ	0xFF1
  2414                           intcon3	equ	0xFF0
  2415                           postinc0	equ	0xFEE
  2416                           wreg	equ	0xFE8
  2417                           plusw1	equ	0xFE3
  2418                           indf2	equ	0xFDF
  2419                           plusw2	equ	0xFDB
  2420                           fsr2h	equ	0xFDA
  2421                           fsr2l	equ	0xFD9
  2422                           status	equ	0xFD8
  2423                           
  2424 ;; *************** function _espi_master_receive *****************
  2425 ;; Defined at:
  2426 ;;		line 177 in file "../TorqueGriper.X/extended_spi.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;  buffer          2    7[COMRAM] PTR struct circular_buff
  2429 ;;		 -> main@receive(34), 
  2430 ;;  timer_start     2    9[COMRAM] PTR FTN(int ,)void 
  2431 ;;		 -> set_timer3(0), 
  2432 ;;  timer           2   11[COMRAM] PTR FTN()unsigned char 
  2433 ;;		 -> timer3_up(1), 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  value           1   15[COMRAM] unsigned char 
  2436 ;;  received_2      1   14[COMRAM] unsigned char 
  2437 ;;  received_1      1   13[COMRAM] unsigned char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;		None               void
  2440 ;; Registers used:
  2441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMRAM   BANK0
  2447 ;;      Params:         6       0
  2448 ;;      Locals:         3       0
  2449 ;;      Temps:          0       0
  2450 ;;      Totals:         9       0
  2451 ;;Total ram usage:        9 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    2
  2454 ;; This function calls:
  2455 ;;		_buffer_full
  2456 ;;		_buffer_push
  2457 ;;		_buffer_space
  2458 ;;		_decode_data
  2459 ;;		_send_delay
  2460 ;;		_spi_send_get_byte
  2461 ;;		_wait_pulse
  2462 ;; This function is called by:
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text16
  2468  001A20                     __ptext16:
  2469                           	opt stack 0
  2470  001A20                     _espi_master_receive:
  2471                           	opt stack 28
  2472                           
  2473                           ;extended_spi.c: 181: if (!buffer_full(buffer)) {
  2474                           
  2475                           ;incstack = 0
  2476  001A20  C008  F001         	movff	espi_master_receive@buffer,buffer_full@buffer
  2477  001A24  C009  F002         	movff	espi_master_receive@buffer+1,buffer_full@buffer+1
  2478  001A28  ECD6  F00A         	call	_buffer_full	;wreg free
  2479  001A2C  0900               	iorlw	0
  2480  001A2E  A4D8               	btfss	status,2,c
  2481  001A30  0012               	return	
  2482                           
  2483                           ;extended_spi.c: 182: spi_send_get_byte(0x20);
  2484  001A32  0E20               	movlw	32
  2485  001A34  ECC1  F00A         	call	_spi_send_get_byte
  2486                           
  2487                           ;extended_spi.c: 184: wait_pulse(0x20, timer_start, timer);
  2488  001A38  C00A  F003         	movff	espi_master_receive@timer_start,wait_pulse@timer_start
  2489  001A3C  C00B  F004         	movff	espi_master_receive@timer_start+1,wait_pulse@timer_start+1
  2490  001A40  C00C  F005         	movff	espi_master_receive@timer,wait_pulse@timer
  2491  001A44  C00D  F006         	movff	espi_master_receive@timer+1,wait_pulse@timer+1
  2492  001A48  0E20               	movlw	32
  2493  001A4A  ECBA  F00B         	call	_wait_pulse
  2494                           
  2495                           ;extended_spi.c: 186: uint8_t received_1;
  2496                           ;extended_spi.c: 187: uint8_t received_2;
  2497                           ;extended_spi.c: 188: uint8_t value;
  2498                           ;extended_spi.c: 190: while (buffer_space(buffer)) {
  2499  001A4E  D02B               	goto	l1707
  2500  001A50                     l1687:
  2501                           
  2502                           ;extended_spi.c: 191: received_1 = spi_send_get_byte(0xE0);
  2503  001A50  0EE0               	movlw	224
  2504  001A52  ECC1  F00A         	call	_spi_send_get_byte
  2505  001A56  6E0E               	movwf	espi_master_receive@received_1,c
  2506                           
  2507                           ;extended_spi.c: 192: send_delay();
  2508  001A58  EC90  F00A         	call	_send_delay	;wreg free
  2509                           
  2510                           ;extended_spi.c: 193: if (received_1 == 0x30)
  2511  001A5C  0E30               	movlw	48
  2512  001A5E  180E               	xorwf	espi_master_receive@received_1,w,c
  2513  001A60  B4D8               	btfsc	status,2,c
  2514  001A62  0012               	return	
  2515  001A64  D001               	goto	l1695
  2516                           
  2517                           ;extended_spi.c: 194: return;
  2518  001A66  0012               	return	
  2519  001A68                     l1695:
  2520                           
  2521                           ;extended_spi.c: 196: received_2 = spi_send_get_byte(0xE0);
  2522  001A68  0EE0               	movlw	224
  2523  001A6A  ECC1  F00A         	call	_spi_send_get_byte
  2524  001A6E  6E0F               	movwf	espi_master_receive@received_2,c
  2525                           
  2526                           ;extended_spi.c: 197: send_delay();
  2527  001A70  EC90  F00A         	call	_send_delay	;wreg free
  2528                           
  2529                           ;extended_spi.c: 198: if (received_2 == 0x30)
  2530  001A74  0E30               	movlw	48
  2531  001A76  180F               	xorwf	espi_master_receive@received_2,w,c
  2532  001A78  B4D8               	btfsc	status,2,c
  2533  001A7A  0012               	return	
  2534  001A7C  D001               	goto	l1703
  2535                           
  2536                           ;extended_spi.c: 199: return;
  2537  001A7E  0012               	return	
  2538  001A80                     l1703:
  2539                           
  2540                           ;extended_spi.c: 201: decode_data(&value, received_1, received_2);
  2541  001A80  0E10               	movlw	low espi_master_receive@value
  2542  001A82  6E01               	movwf	decode_data@data,c
  2543  001A84  0E00               	movlw	high espi_master_receive@value
  2544  001A86  6E02               	movwf	decode_data@data+1,c
  2545  001A88  C00E  F003         	movff	espi_master_receive@received_1,decode_data@byte_1
  2546  001A8C  C00F  F004         	movff	espi_master_receive@received_2,decode_data@byte_2
  2547  001A90  EC31  F00B         	call	_decode_data	;wreg free
  2548                           
  2549                           ;extended_spi.c: 202: buffer_push(buffer, value);
  2550  001A94  C008  F001         	movff	espi_master_receive@buffer,buffer_push@buffer
  2551  001A98  C009  F002         	movff	espi_master_receive@buffer+1,buffer_push@buffer+1
  2552  001A9C  C010  F003         	movff	espi_master_receive@value,buffer_push@byte
  2553  001AA0  EC2F  F00C         	call	_buffer_push	;wreg free
  2554  001AA4  D000               	goto	l1707
  2555  001AA6                     l1707:
  2556  001AA6  C008  F001         	movff	espi_master_receive@buffer,buffer_space@buffer
  2557  001AAA  C009  F002         	movff	espi_master_receive@buffer+1,buffer_space@buffer+1
  2558  001AAE  ECCB  F00A         	call	_buffer_space	;wreg free
  2559  001AB2  0900               	iorlw	0
  2560  001AB4  A4D8               	btfss	status,2,c
  2561  001AB6  D7CC               	goto	l1687
  2562                           
  2563                           ;extended_spi.c: 203: }
  2564                           ;extended_spi.c: 205: spi_send_get_byte(0x30);
  2565  001AB8  0E30               	movlw	48
  2566  001ABA  ECC1  F00A         	call	_spi_send_get_byte
  2567                           
  2568                           ;extended_spi.c: 206: send_delay();
  2569  001ABE  EC90  F00A         	call	_send_delay	;wreg free
  2570  001AC2  0012               	return	
  2571  001AC4  0012               	return		;funcret
  2572  001AC6                     __end_of_espi_master_receive:
  2573                           	opt stack 0
  2574                           tblptru	equ	0xFF8
  2575                           tblptrh	equ	0xFF7
  2576                           tblptrl	equ	0xFF6
  2577                           tablat	equ	0xFF5
  2578                           prodh	equ	0xFF4
  2579                           prodl	equ	0xFF3
  2580                           intcon	equ	0xFF2
  2581                           intcon2	equ	0xFF1
  2582                           intcon3	equ	0xFF0
  2583                           postinc0	equ	0xFEE
  2584                           wreg	equ	0xFE8
  2585                           plusw1	equ	0xFE3
  2586                           indf2	equ	0xFDF
  2587                           plusw2	equ	0xFDB
  2588                           fsr2h	equ	0xFDA
  2589                           fsr2l	equ	0xFD9
  2590                           status	equ	0xFD8
  2591                           
  2592 ;; *************** function _wait_pulse *****************
  2593 ;; Defined at:
  2594 ;;		line 125 in file "../TorqueGriper.X/extended_spi.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;  value           1    wreg     unsigned char 
  2597 ;;  timer_start     2    2[COMRAM] PTR FTN(int ,)void 
  2598 ;;		 -> set_timer3(0), 
  2599 ;;  timer           2    4[COMRAM] PTR FTN()unsigned char 
  2600 ;;		 -> timer3_up(1), 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  value           1    6[COMRAM] unsigned char 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;		None               void
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, pclat, tosl, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0
  2612 ;;      Params:         4       0
  2613 ;;      Locals:         1       0
  2614 ;;      Temps:          0       0
  2615 ;;      Totals:         5       0
  2616 ;;Total ram usage:        5 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    1
  2619 ;; This function calls:
  2620 ;;		_set_timer3
  2621 ;;		_spi_send_get_byte
  2622 ;;		_timer3_up
  2623 ;; This function is called by:
  2624 ;;		_espi_master_send
  2625 ;;		_espi_master_receive
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text17
  2630  001774                     __ptext17:
  2631                           	opt stack 0
  2632  001774                     _wait_pulse:
  2633                           	opt stack 28
  2634                           
  2635                           ;incstack = 0
  2636                           ;wait_pulse@value stored from wreg
  2637  001774  6E07               	movwf	wait_pulse@value,c
  2638                           
  2639                           ;extended_spi.c: 128: (*timer_start)(54335);
  2640  001776  0ED4               	movlw	212
  2641  001778  6E02               	movwf	set_timer3@value+1,c
  2642  00177A  0E3F               	movlw	63
  2643  00177C  6E01               	movwf	set_timer3@value,c
  2644  00177E  D801               	call	u1178
  2645  001780  D02D               	goto	l1627
  2646  001782                     u1178:
  2647  001782  0005               	push	
  2648  001784  6EFA               	movwf	pclath,c
  2649  001786  5003               	movf	wait_pulse@timer_start,w,c
  2650  001788  6EFD               	movwf	tosl,c
  2651  00178A  5004               	movf	wait_pulse@timer_start+1,w,c
  2652  00178C  6EFE               	movwf	tosh,c
  2653  00178E  50F8               	movf	tblptru,w,c
  2654  001790  6EFF               	movwf	tosu,c
  2655  001792  50FA               	movf	pclath,w,c
  2656  001794  0012               	return		;indir
  2657  001796                     l1621:
  2658                           
  2659                           ;extended_spi.c: 130: if ((*timer)()) {
  2660  001796  D801               	call	u1188
  2661  001798  D00A               	goto	u1189
  2662  00179A                     u1188:
  2663  00179A  0005               	push	
  2664  00179C  6EFA               	movwf	pclath,c
  2665  00179E  5005               	movf	wait_pulse@timer,w,c
  2666  0017A0  6EFD               	movwf	tosl,c
  2667  0017A2  5006               	movf	wait_pulse@timer+1,w,c
  2668  0017A4  6EFE               	movwf	tosh,c
  2669  0017A6  50F8               	movf	tblptru,w,c
  2670  0017A8  6EFF               	movwf	tosu,c
  2671  0017AA  50FA               	movf	pclath,w,c
  2672  0017AC  0012               	return		;indir
  2673  0017AE                     u1189:
  2674  0017AE  0900               	iorlw	0
  2675  0017B0  B4D8               	btfsc	status,2,c
  2676  0017B2  D014               	goto	l1627
  2677                           
  2678                           ;extended_spi.c: 131: spi_send_get_byte(value);
  2679  0017B4  5007               	movf	wait_pulse@value,w,c
  2680  0017B6  ECC1  F00A         	call	_spi_send_get_byte
  2681                           
  2682                           ;extended_spi.c: 132: (*timer_start)(54335);
  2683  0017BA  0ED4               	movlw	212
  2684  0017BC  6E02               	movwf	set_timer3@value+1,c
  2685  0017BE  0E3F               	movlw	63
  2686  0017C0  6E01               	movwf	set_timer3@value,c
  2687  0017C2  D801               	call	u1208
  2688  0017C4  D00B               	goto	l1627
  2689  0017C6                     u1208:
  2690  0017C6  0005               	push	
  2691  0017C8  6EFA               	movwf	pclath,c
  2692  0017CA  5003               	movf	wait_pulse@timer_start,w,c
  2693  0017CC  6EFD               	movwf	tosl,c
  2694  0017CE  5004               	movf	wait_pulse@timer_start+1,w,c
  2695  0017D0  6EFE               	movwf	tosh,c
  2696  0017D2  50F8               	movf	tblptru,w,c
  2697  0017D4  6EFF               	movwf	tosu,c
  2698  0017D6  50FA               	movf	pclath,w,c
  2699  0017D8  0012               	return		;indir
  2700  0017DA  D000               	goto	l1627
  2701  0017DC                     l1627:
  2702  0017DC  A2F0               	btfss	intcon3,1,c	;volatile
  2703  0017DE  D7DB               	goto	l1621
  2704                           
  2705                           ;extended_spi.c: 133: }
  2706                           ;extended_spi.c: 134: }
  2707                           ;extended_spi.c: 135: INT2IF = 0;
  2708  0017E0  92F0               	bcf	intcon3,1,c	;volatile
  2709  0017E2  0012               	return		;funcret
  2710  0017E4                     __end_of_wait_pulse:
  2711                           	opt stack 0
  2712                           tosu	equ	0xFFF
  2713                           tosh	equ	0xFFE
  2714                           tosl	equ	0xFFD
  2715                           pclath	equ	0xFFA
  2716                           tblptru	equ	0xFF8
  2717                           tblptrh	equ	0xFF7
  2718                           tblptrl	equ	0xFF6
  2719                           tablat	equ	0xFF5
  2720                           prodh	equ	0xFF4
  2721                           prodl	equ	0xFF3
  2722                           intcon	equ	0xFF2
  2723                           intcon2	equ	0xFF1
  2724                           intcon3	equ	0xFF0
  2725                           postinc0	equ	0xFEE
  2726                           wreg	equ	0xFE8
  2727                           plusw1	equ	0xFE3
  2728                           indf2	equ	0xFDF
  2729                           plusw2	equ	0xFDB
  2730                           fsr2h	equ	0xFDA
  2731                           fsr2l	equ	0xFD9
  2732                           status	equ	0xFD8
  2733                           
  2734 ;; *************** function _timer3_up *****************
  2735 ;; Defined at:
  2736 ;;		line 48 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      unsigned char 
  2743 ;; Registers used:
  2744 ;;		wreg
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0
  2750 ;;      Params:         0       0
  2751 ;;      Locals:         0       0
  2752 ;;      Temps:          0       0
  2753 ;;      Totals:         0       0
  2754 ;;Total ram usage:        0 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; This function calls:
  2757 ;;		Nothing
  2758 ;; This function is called by:
  2759 ;;		_main
  2760 ;;		_wait_pulse
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text18
  2765  001542                     __ptext18:
  2766                           	opt stack 0
  2767  001542                     _timer3_up:
  2768                           	opt stack 28
  2769                           
  2770                           ;timers_pic.c: 50: return (PIR2bits.TMR3IF) ? 1 : 0;
  2771                           
  2772                           ;incstack = 0
  2773  001542  A2A1               	btfss	4001,1,c	;volatile
  2774  001544  D002               	goto	u1060
  2775  001546  0E01               	movlw	1
  2776  001548  0012               	return	
  2777  00154A                     u1060:
  2778  00154A  0E00               	movlw	0
  2779  00154C  0012               	return	
  2780  00154E  0012               	return		;funcret
  2781  001550                     __end_of_timer3_up:
  2782                           	opt stack 0
  2783                           tosu	equ	0xFFF
  2784                           tosh	equ	0xFFE
  2785                           tosl	equ	0xFFD
  2786                           pclath	equ	0xFFA
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           intcon	equ	0xFF2
  2794                           intcon2	equ	0xFF1
  2795                           intcon3	equ	0xFF0
  2796                           postinc0	equ	0xFEE
  2797                           wreg	equ	0xFE8
  2798                           plusw1	equ	0xFE3
  2799                           indf2	equ	0xFDF
  2800                           plusw2	equ	0xFDB
  2801                           fsr2h	equ	0xFDA
  2802                           fsr2l	equ	0xFD9
  2803                           status	equ	0xFD8
  2804                           
  2805 ;; *************** function _spi_send_get_byte *****************
  2806 ;; Defined at:
  2807 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  byte            1    wreg     unsigned char 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  byte            1    0[COMRAM] unsigned char 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      unsigned char 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0
  2821 ;;      Params:         0       0
  2822 ;;      Locals:         1       0
  2823 ;;      Temps:          0       0
  2824 ;;      Totals:         1       0
  2825 ;;Total ram usage:        1 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_wait_pulse
  2831 ;;		_espi_master_send
  2832 ;;		_espi_master_receive
  2833 ;;		_spi_send_data
  2834 ;;		_spi_master_get_data
  2835 ;;		_espi_slave_receive
  2836 ;;		_espi_slave_send
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text19
  2841  001582                     __ptext19:
  2842                           	opt stack 0
  2843  001582                     _spi_send_get_byte:
  2844                           	opt stack 28
  2845                           
  2846                           ;incstack = 0
  2847                           ;spi_send_get_byte@byte stored from wreg
  2848  001582  6E01               	movwf	spi_send_get_byte@byte,c
  2849                           
  2850                           ;spi_pic.c: 35: SSPBUF = byte;
  2851  001584  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  2852                           
  2853                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  2854  001588  D000               	goto	l103
  2855  00158A                     l103:
  2856  00158A  A0C7               	btfss	4039,0,c	;volatile
  2857  00158C  D7FE               	goto	l103
  2858                           
  2859                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  2860  00158E  BEC6               	btfsc	4038,7,c	;volatile
  2861                           
  2862                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  2863  001590  9EC6               	bcf	4038,7,c	;volatile
  2864                           
  2865                           ;spi_pic.c: 39: return SSPBUF;
  2866  001592  50C9               	movf	4041,w,c	;volatile
  2867  001594  0012               	return		;funcret
  2868  001596                     __end_of_spi_send_get_byte:
  2869                           	opt stack 0
  2870                           tosu	equ	0xFFF
  2871                           tosh	equ	0xFFE
  2872                           tosl	equ	0xFFD
  2873                           pclath	equ	0xFFA
  2874                           tblptru	equ	0xFF8
  2875                           tblptrh	equ	0xFF7
  2876                           tblptrl	equ	0xFF6
  2877                           tablat	equ	0xFF5
  2878                           prodh	equ	0xFF4
  2879                           prodl	equ	0xFF3
  2880                           intcon	equ	0xFF2
  2881                           intcon2	equ	0xFF1
  2882                           intcon3	equ	0xFF0
  2883                           postinc0	equ	0xFEE
  2884                           wreg	equ	0xFE8
  2885                           plusw1	equ	0xFE3
  2886                           indf2	equ	0xFDF
  2887                           plusw2	equ	0xFDB
  2888                           fsr2h	equ	0xFDA
  2889                           fsr2l	equ	0xFD9
  2890                           status	equ	0xFD8
  2891                           
  2892 ;; *************** function _set_timer3 *****************
  2893 ;; Defined at:
  2894 ;;		line 34 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  value           2    0[COMRAM] int 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;		None               void
  2901 ;; Registers used:
  2902 ;;		None
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0
  2908 ;;      Params:         2       0
  2909 ;;      Locals:         0       0
  2910 ;;      Temps:          0       0
  2911 ;;      Totals:         2       0
  2912 ;;Total ram usage:        2 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; This function calls:
  2915 ;;		Nothing
  2916 ;; This function is called by:
  2917 ;;		_main
  2918 ;;		_wait_pulse
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text20
  2923  00152A                     __ptext20:
  2924                           	opt stack 0
  2925  00152A                     _set_timer3:
  2926                           	opt stack 28
  2927                           
  2928                           ;timers_pic.c: 36: PIR2bits.TMR3IF = 0;
  2929                           
  2930                           ;incstack = 0
  2931  00152A  92A1               	bcf	4001,1,c	;volatile
  2932                           
  2933                           ;timers_pic.c: 37: TMR3 = value;
  2934  00152C  C001  FFB2         	movff	set_timer3@value,4018	;volatile
  2935  001530  C002  FFB3         	movff	set_timer3@value+1,4019	;volatile
  2936  001534  0012               	return		;funcret
  2937  001536                     __end_of_set_timer3:
  2938                           	opt stack 0
  2939                           tosu	equ	0xFFF
  2940                           tosh	equ	0xFFE
  2941                           tosl	equ	0xFFD
  2942                           pclath	equ	0xFFA
  2943                           tblptru	equ	0xFF8
  2944                           tblptrh	equ	0xFF7
  2945                           tblptrl	equ	0xFF6
  2946                           tablat	equ	0xFF5
  2947                           prodh	equ	0xFF4
  2948                           prodl	equ	0xFF3
  2949                           intcon	equ	0xFF2
  2950                           intcon2	equ	0xFF1
  2951                           intcon3	equ	0xFF0
  2952                           postinc0	equ	0xFEE
  2953                           wreg	equ	0xFE8
  2954                           plusw1	equ	0xFE3
  2955                           indf2	equ	0xFDF
  2956                           plusw2	equ	0xFDB
  2957                           fsr2h	equ	0xFDA
  2958                           fsr2l	equ	0xFD9
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function _send_delay *****************
  2962 ;; Defined at:
  2963 ;;		line 22 in file "../TorqueGriper.X/extended_spi.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;		None
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;		None
  2968 ;; Return value:  Size  Location     Type
  2969 ;;		None               void
  2970 ;; Registers used:
  2971 ;;		wreg
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMRAM   BANK0
  2977 ;;      Params:         0       0
  2978 ;;      Locals:         0       0
  2979 ;;      Temps:          0       0
  2980 ;;      Totals:         0       0
  2981 ;;Total ram usage:        0 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; This function calls:
  2984 ;;		Nothing
  2985 ;; This function is called by:
  2986 ;;		_espi_master_send
  2987 ;;		_espi_master_receive
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text21
  2992  001520                     __ptext21:
  2993                           	opt stack 0
  2994  001520                     _send_delay:
  2995                           	opt stack 29
  2996                           
  2997                           ;extended_spi.c: 24: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2998                           
  2999                           ;incstack = 0
  3000  001520  0E06               	movlw	6
  3001  001522                     u1947:
  3002  001522  2EE8               	decfsz	wreg,f,c
  3003  001524  D7FE               	goto	u1947
  3004  001526  D000               	nop2		;nop
  3005  001528  0012               	return		;funcret
  3006  00152A                     __end_of_send_delay:
  3007                           	opt stack 0
  3008                           tosu	equ	0xFFF
  3009                           tosh	equ	0xFFE
  3010                           tosl	equ	0xFFD
  3011                           pclath	equ	0xFFA
  3012                           tblptru	equ	0xFF8
  3013                           tblptrh	equ	0xFF7
  3014                           tblptrl	equ	0xFF6
  3015                           tablat	equ	0xFF5
  3016                           prodh	equ	0xFF4
  3017                           prodl	equ	0xFF3
  3018                           intcon	equ	0xFF2
  3019                           intcon2	equ	0xFF1
  3020                           intcon3	equ	0xFF0
  3021                           postinc0	equ	0xFEE
  3022                           wreg	equ	0xFE8
  3023                           plusw1	equ	0xFE3
  3024                           indf2	equ	0xFDF
  3025                           plusw2	equ	0xFDB
  3026                           fsr2h	equ	0xFDA
  3027                           fsr2l	equ	0xFD9
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _decode_data *****************
  3031 ;; Defined at:
  3032 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  data            2    0[COMRAM] PTR unsigned char 
  3035 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  3036 ;;  byte_1          1    2[COMRAM] unsigned char 
  3037 ;;  byte_2          1    3[COMRAM] unsigned char 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;		None
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      char 
  3042 ;; Registers used:
  3043 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0
  3049 ;;      Params:         4       0
  3050 ;;      Locals:         0       0
  3051 ;;      Temps:          1       0
  3052 ;;      Totals:         5       0
  3053 ;;Total ram usage:        5 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		_espi_master_receive
  3059 ;;		_espi_slave_receive
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text22
  3064  001662                     __ptext22:
  3065                           	opt stack 0
  3066  001662                     _decode_data:
  3067                           	opt stack 29
  3068                           
  3069                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  3070                           
  3071                           ;incstack = 0
  3072  001662  5003               	movf	decode_data@byte_1,w,c
  3073  001664  0BF0               	andlw	240
  3074  001666  0AA0               	xorlw	160
  3075  001668  A4D8               	btfss	status,2,c
  3076  00166A  0012               	return	
  3077  00166C  D002               	goto	l1601
  3078                           
  3079                           ;encoding.c: 15: return -1;
  3080                           ;	Return value of _decode_data is never used
  3081  00166E  0012               	return	
  3082  001670  D008               	goto	l1605
  3083  001672                     l1601:
  3084                           
  3085                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  3086  001672  5004               	movf	decode_data@byte_2,w,c
  3087  001674  0BF0               	andlw	240
  3088  001676  0AA0               	xorlw	160
  3089  001678  A4D8               	btfss	status,2,c
  3090  00167A  0012               	return	
  3091  00167C  D002               	goto	l1605
  3092                           
  3093                           ;encoding.c: 17: return -2;
  3094                           ;	Return value of _decode_data is never used
  3095  00167E  0012               	return	
  3096  001680  D000               	goto	l1605
  3097  001682                     l1605:
  3098                           
  3099                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  3100  001682  C004  F005         	movff	decode_data@byte_2,??_decode_data
  3101  001686  0E0F               	movlw	15
  3102  001688  1605               	andwf	??_decode_data,f,c
  3103  00168A  3803               	swapf	decode_data@byte_1,w,c
  3104  00168C  0BF0               	andlw	240
  3105  00168E  1005               	iorwf	??_decode_data,w,c
  3106  001690  C001  FFD9         	movff	decode_data@data,fsr2l
  3107  001694  C002  FFDA         	movff	decode_data@data+1,fsr2h
  3108  001698  6EDF               	movwf	indf2,c
  3109  00169A  0012               	return	
  3110                           
  3111                           ;encoding.c: 21: return 0;
  3112                           ;	Return value of _decode_data is never used
  3113  00169C  0012               	return		;funcret
  3114  00169E                     __end_of_decode_data:
  3115                           	opt stack 0
  3116                           tosu	equ	0xFFF
  3117                           tosh	equ	0xFFE
  3118                           tosl	equ	0xFFD
  3119                           pclath	equ	0xFFA
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           intcon	equ	0xFF2
  3127                           intcon2	equ	0xFF1
  3128                           intcon3	equ	0xFF0
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           plusw1	equ	0xFE3
  3132                           indf2	equ	0xFDF
  3133                           plusw2	equ	0xFDB
  3134                           fsr2h	equ	0xFDA
  3135                           fsr2l	equ	0xFD9
  3136                           status	equ	0xFD8
  3137                           
  3138 ;; *************** function _buffer_space *****************
  3139 ;; Defined at:
  3140 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3143 ;;		 -> main@receive(34), 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;		None
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  1    wreg      unsigned char 
  3148 ;; Registers used:
  3149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0
  3155 ;;      Params:         2       0
  3156 ;;      Locals:         0       0
  3157 ;;      Temps:          0       0
  3158 ;;      Totals:         2       0
  3159 ;;Total ram usage:        2 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_espi_master_receive
  3165 ;;		_espi_slave_receive
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text23
  3170  001596                     __ptext23:
  3171                           	opt stack 0
  3172  001596                     _buffer_space:
  3173                           	opt stack 29
  3174                           
  3175                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  3176                           
  3177                           ;incstack = 0
  3178  001596  EE20 F001          	lfsr	2,1
  3179  00159A  5001               	movf	buffer_space@buffer,w,c
  3180  00159C  26D9               	addwf	fsr2l,f,c
  3181  00159E  5002               	movf	buffer_space@buffer+1,w,c
  3182  0015A0  22DA               	addwfc	fsr2h,f,c
  3183  0015A2  50DF               	movf	indf2,w,c
  3184  0015A4  0800               	sublw	0
  3185  0015A6  0F20               	addlw	32
  3186  0015A8  0012               	return	
  3187  0015AA  0012               	return		;funcret
  3188  0015AC                     __end_of_buffer_space:
  3189                           	opt stack 0
  3190                           tosu	equ	0xFFF
  3191                           tosh	equ	0xFFE
  3192                           tosl	equ	0xFFD
  3193                           pclath	equ	0xFFA
  3194                           tblptru	equ	0xFF8
  3195                           tblptrh	equ	0xFF7
  3196                           tblptrl	equ	0xFF6
  3197                           tablat	equ	0xFF5
  3198                           prodh	equ	0xFF4
  3199                           prodl	equ	0xFF3
  3200                           intcon	equ	0xFF2
  3201                           intcon2	equ	0xFF1
  3202                           intcon3	equ	0xFF0
  3203                           postinc0	equ	0xFEE
  3204                           wreg	equ	0xFE8
  3205                           plusw1	equ	0xFE3
  3206                           indf2	equ	0xFDF
  3207                           plusw2	equ	0xFDB
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _buffer_push *****************
  3213 ;; Defined at:
  3214 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  3217 ;;		 -> main@receive(34), main@send(34), 
  3218 ;;  byte            1    2[COMRAM] unsigned char 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  current_posi    1    4[COMRAM] unsigned char 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      unsigned char 
  3223 ;; Registers used:
  3224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0
  3230 ;;      Params:         3       0
  3231 ;;      Locals:         1       0
  3232 ;;      Temps:          1       0
  3233 ;;      Totals:         5       0
  3234 ;;Total ram usage:        5 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; This function calls:
  3237 ;;		Nothing
  3238 ;; This function is called by:
  3239 ;;		_load_buffer
  3240 ;;		_espi_master_receive
  3241 ;;		_espi_slave_receive
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text24
  3246  00185E                     __ptext24:
  3247                           	opt stack 0
  3248  00185E                     _buffer_push:
  3249                           	opt stack 29
  3250                           
  3251                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  3252                           
  3253                           ;incstack = 0
  3254  00185E  EE20 F001          	lfsr	2,1
  3255  001862  5001               	movf	buffer_push@buffer,w,c
  3256  001864  26D9               	addwf	fsr2l,f,c
  3257  001866  5002               	movf	buffer_push@buffer+1,w,c
  3258  001868  22DA               	addwfc	fsr2h,f,c
  3259  00186A  0E20               	movlw	32
  3260  00186C  18DE               	xorwf	postinc2,w,c
  3261  00186E  A4D8               	btfss	status,2,c
  3262  001870  D002               	goto	l1569
  3263                           
  3264                           ;circular_buffer.c: 27: return 0;
  3265  001872  0E00               	movlw	0
  3266  001874  0012               	return	
  3267  001876                     l1569:
  3268                           
  3269                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  3270                           ;circular_buffer.c: 30: & (0x20 - 1);
  3271  001876  EE20 F001          	lfsr	2,1
  3272  00187A  5001               	movf	buffer_push@buffer,w,c
  3273  00187C  26D9               	addwf	fsr2l,f,c
  3274  00187E  5002               	movf	buffer_push@buffer+1,w,c
  3275  001880  22DA               	addwfc	fsr2h,f,c
  3276  001882  50DF               	movf	indf2,w,c
  3277  001884  6E04               	movwf	??_buffer_push& (0+255),c
  3278  001886  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  3279  00188A  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  3280  00188E  50DF               	movf	indf2,w,c
  3281  001890  2404               	addwf	??_buffer_push,w,c
  3282  001892  0B1F               	andlw	31
  3283  001894  6E05               	movwf	buffer_push@current_position,c
  3284                           
  3285                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  3286  001896  5005               	movf	buffer_push@current_position,w,c
  3287  001898  0D01               	mullw	1
  3288  00189A  0E02               	movlw	2
  3289  00189C  26F3               	addwf	prodl,f,c
  3290  00189E  0E00               	movlw	0
  3291  0018A0  22F4               	addwfc	prodh,f,c
  3292  0018A2  50F3               	movf	prodl,w,c
  3293  0018A4  2401               	addwf	buffer_push@buffer,w,c
  3294  0018A6  6ED9               	movwf	fsr2l,c
  3295  0018A8  50F4               	movf	prodh,w,c
  3296  0018AA  2002               	addwfc	buffer_push@buffer+1,w,c
  3297  0018AC  6EDA               	movwf	fsr2h,c
  3298  0018AE  C003  FFDF         	movff	buffer_push@byte,indf2
  3299                           
  3300                           ;circular_buffer.c: 32: buffer->count++;
  3301  0018B2  EE20 F001          	lfsr	2,1
  3302  0018B6  5001               	movf	buffer_push@buffer,w,c
  3303  0018B8  26D9               	addwf	fsr2l,f,c
  3304  0018BA  5002               	movf	buffer_push@buffer+1,w,c
  3305  0018BC  22DA               	addwfc	fsr2h,f,c
  3306  0018BE  2ADF               	incf	indf2,f,c
  3307                           
  3308                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  3309  0018C0  EE20 F001          	lfsr	2,1
  3310  0018C4  5001               	movf	buffer_push@buffer,w,c
  3311  0018C6  26D9               	addwf	fsr2l,f,c
  3312  0018C8  5002               	movf	buffer_push@buffer+1,w,c
  3313  0018CA  22DA               	addwfc	fsr2h,f,c
  3314  0018CC  0E20               	movlw	32
  3315  0018CE  18DE               	xorwf	postinc2,w,c
  3316  0018D0  A4D8               	btfss	status,2,c
  3317  0018D2  D002               	goto	u1100
  3318  0018D4  0E01               	movlw	1
  3319  0018D6  0012               	return	
  3320  0018D8                     u1100:
  3321  0018D8  0E00               	movlw	0
  3322  0018DA  0012               	return	
  3323  0018DC  0012               	return		;funcret
  3324  0018DE                     __end_of_buffer_push:
  3325                           	opt stack 0
  3326                           tosu	equ	0xFFF
  3327                           tosh	equ	0xFFE
  3328                           tosl	equ	0xFFD
  3329                           pclath	equ	0xFFA
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           prodh	equ	0xFF4
  3335                           prodl	equ	0xFF3
  3336                           intcon	equ	0xFF2
  3337                           intcon2	equ	0xFF1
  3338                           intcon3	equ	0xFF0
  3339                           postinc0	equ	0xFEE
  3340                           wreg	equ	0xFE8
  3341                           plusw1	equ	0xFE3
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           plusw2	equ	0xFDB
  3345                           fsr2h	equ	0xFDA
  3346                           fsr2l	equ	0xFD9
  3347                           status	equ	0xFD8
  3348                           
  3349 ;; *************** function _buffer_full *****************
  3350 ;; Defined at:
  3351 ;;		line 19 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3354 ;;		 -> main@receive(34), 
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      unsigned char 
  3359 ;; Registers used:
  3360 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0
  3366 ;;      Params:         2       0
  3367 ;;      Locals:         0       0
  3368 ;;      Temps:          1       0
  3369 ;;      Totals:         3       0
  3370 ;;Total ram usage:        3 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; This function calls:
  3373 ;;		Nothing
  3374 ;; This function is called by:
  3375 ;;		_espi_master_receive
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text25
  3380  0015AC                     __ptext25:
  3381                           	opt stack 0
  3382  0015AC                     _buffer_full:
  3383                           	opt stack 29
  3384                           
  3385                           ;circular_buffer.c: 21: return (buffer->count == 0x20) ? 1 : 0;
  3386                           
  3387                           ;incstack = 0
  3388  0015AC  EE20 F001          	lfsr	2,1
  3389  0015B0  5001               	movf	buffer_full@buffer,w,c
  3390  0015B2  26D9               	addwf	fsr2l,f,c
  3391  0015B4  5002               	movf	buffer_full@buffer+1,w,c
  3392  0015B6  22DA               	addwfc	fsr2h,f,c
  3393  0015B8  0E20               	movlw	32
  3394  0015BA  18DE               	xorwf	postinc2,w,c
  3395  0015BC  A4D8               	btfss	status,2,c
  3396  0015BE  D002               	goto	u1220
  3397  0015C0  0E01               	movlw	1
  3398  0015C2  0012               	return	
  3399  0015C4                     u1220:
  3400  0015C4  0E00               	movlw	0
  3401  0015C6  0012               	return	
  3402  0015C8  0012               	return		;funcret
  3403  0015CA                     __end_of_buffer_full:
  3404                           	opt stack 0
  3405                           tosu	equ	0xFFF
  3406                           tosh	equ	0xFFE
  3407                           tosl	equ	0xFFD
  3408                           pclath	equ	0xFFA
  3409                           tblptru	equ	0xFF8
  3410                           tblptrh	equ	0xFF7
  3411                           tblptrl	equ	0xFF6
  3412                           tablat	equ	0xFF5
  3413                           prodh	equ	0xFF4
  3414                           prodl	equ	0xFF3
  3415                           intcon	equ	0xFF2
  3416                           intcon2	equ	0xFF1
  3417                           intcon3	equ	0xFF0
  3418                           postinc0	equ	0xFEE
  3419                           wreg	equ	0xFE8
  3420                           plusw1	equ	0xFE3
  3421                           indf2	equ	0xFDF
  3422                           postinc2	equ	0xFDE
  3423                           plusw2	equ	0xFDB
  3424                           fsr2h	equ	0xFDA
  3425                           fsr2l	equ	0xFD9
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _buffer_clear *****************
  3429 ;; Defined at:
  3430 ;;		line 50 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  3433 ;;		 -> main@receive(34), 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;		None
  3436 ;; Return value:  Size  Location     Type
  3437 ;;		None               void
  3438 ;; Registers used:
  3439 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0
  3445 ;;      Params:         2       0
  3446 ;;      Locals:         0       0
  3447 ;;      Temps:          0       0
  3448 ;;      Totals:         2       0
  3449 ;;Total ram usage:        2 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; This function calls:
  3452 ;;		Nothing
  3453 ;; This function is called by:
  3454 ;;		_main
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text26
  3459  00155E                     __ptext26:
  3460                           	opt stack 0
  3461  00155E                     _buffer_clear:
  3462                           	opt stack 30
  3463                           
  3464                           ;circular_buffer.c: 52: buffer->count = 0;
  3465                           
  3466                           ;incstack = 0
  3467  00155E  EE20 F001          	lfsr	2,1
  3468  001562  5001               	movf	buffer_clear@buffer,w,c
  3469  001564  26D9               	addwf	fsr2l,f,c
  3470  001566  5002               	movf	buffer_clear@buffer+1,w,c
  3471  001568  22DA               	addwfc	fsr2h,f,c
  3472  00156A  0E00               	movlw	0
  3473  00156C  6EDF               	movwf	indf2,c
  3474  00156E  0012               	return		;funcret
  3475  001570                     __end_of_buffer_clear:
  3476                           	opt stack 0
  3477  0000                     tosu	equ	0xFFF
  3478                           tosh	equ	0xFFE
  3479                           tosl	equ	0xFFD
  3480                           pclath	equ	0xFFA
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           intcon	equ	0xFF2
  3488                           intcon2	equ	0xFF1
  3489                           intcon3	equ	0xFF0
  3490                           postinc0	equ	0xFEE
  3491                           wreg	equ	0xFE8
  3492                           plusw1	equ	0xFE3
  3493                           indf2	equ	0xFDF
  3494                           postinc2	equ	0xFDE
  3495                           plusw2	equ	0xFDB
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           tosu	equ	0xFFF
  3500                           tosh	equ	0xFFE
  3501                           tosl	equ	0xFFD
  3502                           pclath	equ	0xFFA
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           prodh	equ	0xFF4
  3508                           prodl	equ	0xFF3
  3509                           intcon	equ	0xFF2
  3510                           intcon2	equ	0xFF1
  3511                           intcon3	equ	0xFF0
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           plusw1	equ	0xFE3
  3515                           indf2	equ	0xFDF
  3516                           postinc2	equ	0xFDE
  3517                           plusw2	equ	0xFDB
  3518                           fsr2h	equ	0xFDA
  3519                           fsr2l	equ	0xFD9
  3520                           status	equ	0xFD8
  3521                           
  3522                           	psect	text27
  3523  000000                     __ptext27:
  3524                           	opt stack 0
  3525                           tosu	equ	0xFFF
  3526                           tosh	equ	0xFFE
  3527                           tosl	equ	0xFFD
  3528                           pclath	equ	0xFFA
  3529                           tblptru	equ	0xFF8
  3530                           tblptrh	equ	0xFF7
  3531                           tblptrl	equ	0xFF6
  3532                           tablat	equ	0xFF5
  3533                           prodh	equ	0xFF4
  3534                           prodl	equ	0xFF3
  3535                           intcon	equ	0xFF2
  3536                           intcon2	equ	0xFF1
  3537                           intcon3	equ	0xFF0
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           plusw1	equ	0xFE3
  3541                           indf2	equ	0xFDF
  3542                           postinc2	equ	0xFDE
  3543                           plusw2	equ	0xFDB
  3544                           fsr2h	equ	0xFDA
  3545                           fsr2l	equ	0xFD9
  3546                           status	equ	0xFD8
  3547                           
  3548                           	psect	rparam
  3549  0000                     tosu	equ	0xFFF
  3550                           tosh	equ	0xFFE
  3551                           tosl	equ	0xFFD
  3552                           pclath	equ	0xFFA
  3553                           tblptru	equ	0xFF8
  3554                           tblptrh	equ	0xFF7
  3555                           tblptrl	equ	0xFF6
  3556                           tablat	equ	0xFF5
  3557                           prodh	equ	0xFF4
  3558                           prodl	equ	0xFF3
  3559                           intcon	equ	0xFF2
  3560                           intcon2	equ	0xFF1
  3561                           intcon3	equ	0xFF0
  3562                           postinc0	equ	0xFEE
  3563                           wreg	equ	0xFE8
  3564                           plusw1	equ	0xFE3
  3565                           indf2	equ	0xFDF
  3566                           postinc2	equ	0xFDE
  3567                           plusw2	equ	0xFDB
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     21      22
    BANK0           160     75     146

Pointer List with Targets:

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    buffer_clear@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    buffer_full@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    espi_master_receive@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    espi_master_send@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_send@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 

    wait_pulse@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    wait_pulse@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    load_buffer@str	PTR unsigned char  size(2) Largest target is 3
		 -> main@name(BANK0[3]), 

    load_buffer@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 


Critical Paths under _main in COMRAM

    _main->_espi_master_send
    _pmwSingleModeSetUp->_setPulseWidth
    _load_buffer->_buffer_push
    _espi_setup->_setup_spi
    _espi_master_send->_wait_pulse
    _espi_master_receive->_wait_pulse
    _wait_pulse->_set_timer3

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                77    77      0    9099
                                             19 COMRAM     2     2      0
                                              0 BANK0     75    75      0
                       _buffer_clear
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                _espi_master_receive
                   _espi_master_send
                         _espi_setup
                        _load_buffer
                 _pmwSingleModeSetUp
                       _selectOutput
                      _setPulseWidth
                         _set_timer0
                       _setup_timer0
                       _setup_timer3
                          _timer0_up
 ---------------------------------------------------------------------------------
 (1) _timer0_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _set_timer0                                           2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _selectOutput                                         3     2      1     174
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _pmwSingleModeSetUp                                   4     1      3     518
                                              4 COMRAM     4     1      3
                      _setPulseWidth
 ---------------------------------------------------------------------------------
 (1) _setPulseWidth                                        4     2      2     172
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _load_buffer                                          9     3      6    1127
                                              5 COMRAM     9     3      6
                        _buffer_push
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _espi_master_send                                    12     6      6    2663
                                              7 COMRAM    12     6      6
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     516
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     603
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     345
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     214
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_master_receive                                  9     3      6    2353
                                              7 COMRAM     9     3      6
                        _buffer_full
                        _buffer_push
                       _buffer_space
                        _decode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _wait_pulse                                           5     1      4     474
                                              2 COMRAM     5     1      4
                         _set_timer3 *
                  _spi_send_get_byte
                          _timer3_up *
 ---------------------------------------------------------------------------------
 (3) _timer3_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _spi_send_get_byte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _set_timer3                                           2     0      2     108
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _send_delay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     689
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _buffer_full                                          3     1      2      86
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _buffer_clear                                         2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buffer_clear
   _buffer_count
   _buffer_peek
   _buffer_pop
   _espi_master_receive
     _buffer_full
     _buffer_push
     _buffer_space
     _decode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
       _spi_send_get_byte *
       _timer3_up *
   _espi_master_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
       _spi_send_get_byte *
       _timer3_up *
   _espi_setup
     _setup_spi
   _load_buffer
     _buffer_push
   _pmwSingleModeSetUp
     _setPulseWidth
   _selectOutput
   _setPulseWidth
   _set_timer0
   _setup_timer0
   _setup_timer3
   _timer0_up

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     4B      92       3       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     15      16       1       23.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A8       4        0.0%
DATA                 0      0      A8       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Aug 05 13:35:55 2015

           ?_pmwSingleModeSetUp 0005                     _SSPSTATbits 000FC7                              l95 16D6  
                            l97 16C2                              l98 16D2                             l103 158A  
                           l213 1654                             l215 164C                             l382 1B38  
                           l385 1B14                             l386 1B42                             l387 1B4A  
                           l388 1B52                             _PR2 000FCB   espi_master_receive@received_1 000E  
 espi_master_receive@received_2 000F                             tosl 000FFD                             wreg 000FE8  
            buffer_clear@buffer 0001            ??_pmwSingleModeSetUp 0008                    __CFG_LVP$OFF 000000  
                          l1601 1672                            l1605 1682                            l1621 1796  
                          l1703 1A80                            l1537 17FC                            l1721 19BE  
                          l1627 17DC                            l1707 1AA6                            l1723 19DC  
                          l1715 1982                            l1811 1CA8                            l1557 173A  
                          l1661 1B02                            l1653 1AD4                            l1717 1988  
                          l1813 1CBE                            l1743 1912                            l1663 1B0A  
                          l1655 1ADE                            l1719 19A2                            l1727 19FC  
                          l1823 1D38                            l1569 1876                            l1753 195E  
                          l1745 1918                            l1665 1B1E                            l1657 1AF4  
                          l1649 1ACC                            l1817 1D06                            l1825 1D58  
                          l1809 1C8A                            l1763 1B9E                            l1755 1964  
                          l1739 18EC                            l1747 192E                            l1675 1B5C  
                          l1659 1AFA                            l1835 1DAC                            l1827 1D6E  
                          l1749 1938                            l1695 1A68                            l1687 1A50  
                          l1769 1BC0                            l1787 1C06                            l1779 1BEE  
                          l1789 1C14                            u1100 18D8                            u1220 15C4  
                          u1060 154A                            u1208 17C6                            u1400 19E8  
                          u1340 1994                            u1420 1558                            u1360 19AE  
                          u1521 1C56                            u1178 1782                            u1418 19EA  
                          u1531 1C68                            u1188 179A                            u1380 19CA  
                          u1189 17AE                            u1358 1996                            u1378 19B0  
                          u1398 19CC                            u1947 1522                            _TMR0 000FD6  
                          _TMR3 000FB2                     main@receive 0089                            _main 1C22  
                          fsr2h 000FDA                            indf2 000FDF                            fsr2l 000FD9  
                          prodh 000FF4                  ??_buffer_clear 0003                            prodl 000FF3  
                          start 0002           spi_send_get_byte@byte 0001                  ??_buffer_count 0003  
                 __CFG_FOSC$IRC 000000                  ??_buffer_space 0003                    ___param_bank 000010  
          setup_spi@SSPCON1_reg 0001                    ?_load_buffer 0006                           ?_main 0001  
                         _T0CON 000FD5                           _T3CON 000FB1            __size_of_decode_data 003C  
           _espi_master_receive 1A20                           pclath 000FFA                           tablat 000FF5  
                         plusw1 000FE3                           plusw2 000FDB                           status 000FD8  
          setup_spi@SSPSTAT_reg 0002        __end_of_espi_master_send 1C22                buffer_pop@buffer 0001  
               __initialization 15F4                    __end_of_main 1E00            ?_espi_master_receive 0008  
           selectOutput@outputs 0003                          ??_main 0014               _spi_send_get_byte 1582  
                 __activetblptr 000002              ?_spi_send_get_byte 0001               buffer_full@buffer 0001  
             buffer_peek@buffer 0001                 encode_data@data 0006                          _CCPR1L 000FBE  
         setup_timer0@T0CON_reg 0001             ??_spi_send_get_byte 0001                          _INT2IF 007F81  
                        _INTCON 000FF2                          _SSPBUF 000FC9           __end_of_setPulseWidth 15F4  
               decode_data@data 0001       pmwSingleModeSetUp@outputs 0007            __size_of_encode_data 0046  
               load_buffer@size 000A           ??_espi_master_receive 000E            __size_of_buffer_full 001E  
          __size_of_buffer_peek 0052            __size_of_buffer_push 0080       __end_of_spi_send_get_byte 1596  
                        clear_0 15FA    espi_master_send@byte_to_send 0010                 set_timer0@value 0001  
          __end_of_buffer_clear 1570            __end_of_buffer_count 1582                 set_timer3@value 0001  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
         setup_timer3@T3CON_reg 0001            __end_of_buffer_space 15AC                      __accesstop 0060  
       __end_of__initialization 1620                   ___rparam_used 000001                  __pcstackCOMRAM 0001  
                  __pidataBANK0 150D              buffer_count@buffer 0001                  buffer_pop@byte 0005  
          __size_of_load_buffer 00A0        pmwSingleModeSetUp@scaler 0006                      __pbssBANK0 00AB  
                 ?_selectOutput 0001      __size_of_spi_send_get_byte 0014               buffer_push@buffer 0001  
            __size_of_timer0_up 000E              __size_of_timer3_up 000E              __size_of_setup_spi 003E  
                    _buffer_pop 17E4     __size_of_pmwSingleModeSetUp 00A8                         _PSTRCON 000FB9  
                       _SSPCON1 000FC6                         _SSPSTAT 000FC7       espi_master_receive@buffer 0008  
             ?_espi_master_send 0008                         __Hparam 0000                         __Lparam 0000  
                  load_buffer@i 000D              ??_espi_master_send 000E                  ??_selectOutput 0002  
                    _espi_setup 162A                      _dummy_byte 0016           __size_of_buffer_clear 0012  
                       __pcinit 15F4                       _ANSELbits 000F7E                         __ramtop 0100  
         __size_of_buffer_count 0012                         __ptext0 1C22                         __ptext1 1550  
                       __ptext2 1518                         __ptext3 1510                         __ptext4 1536  
                       __ptext5 197E                         __ptext6 1AC6                         __ptext7 15CA  
                       __ptext8 18DE                         __ptext9 162A           __size_of_buffer_space 0016  
                     _T2CONbits 000FCA                   ??_decode_data 0005            end_of_initialization 1620  
                    _send_delay 1520                   __Lmediumconst 0000               __end_of_timer0_up 155E  
             __end_of_timer3_up 1550                    _buffer_clear 155E                    _buffer_count 1570  
             __end_of_setup_spi 16DC     espi_master_send@timer_start 000A                    _buffer_space 1596  
                    _set_timer0 1536                      _set_timer3 152A                         postinc0 000FEE  
                       postinc2 000FDE                      _wait_pulse 1774                   ?_setup_timer0 0001  
                 ?_setup_timer3 0001                       _TRISAbits 000F92                       _TRISBbits 000F93  
                     _TRISCbits 000F94                     ?_buffer_pop 0001             __end_of_decode_data 169E  
                 ??_encode_data 0005                     _CCP1CONbits 000FBD     __end_of_espi_master_receive 1AC6  
                    main@byte_1 0063                      main@byte_2 0064                   ??_buffer_full 0003  
                 ??_buffer_peek 0003                   ??_buffer_push 0004                     ?_espi_setup 0001  
               buffer_peek@byte 0005                  espi_setup@mode 0003                  ??_setup_timer0 0001  
                ??_setup_timer3 0001          __size_of_setPulseWidth 002A             start_initialization 15F4  
            selectOutput@toggle 0001            __end_of_selectOutput 1A20                     ?_send_delay 0001  
            buffer_space@buffer 0001                 buffer_push@byte 0003                  load_buffer@str 0008  
                   ?_set_timer0 0001             __end_of_encode_data 1722                     ?_set_timer3 0001  
           __size_of_buffer_pop 007A                     __pdataBANK0 00EF                     ?_wait_pulse 0003  
                 ??_load_buffer 000C             __end_of_buffer_full 15CA             __end_of_buffer_peek 1774  
           __end_of_buffer_push 18DE                     _decode_data 1662                     __pbssCOMRAM 0016  
                 __pcstackBANK0 0060             __size_of_espi_setup 0038                   _setPulseWidth 15CA  
    espi_master_send@received_1 000E      espi_master_send@received_2 000F           wait_pulse@timer_start 0003  
             encode_data@byte_1 0001               encode_data@byte_2 0003             __size_of_send_delay 000A  
     __size_of_espi_master_send 00B4      __end_of_pmwSingleModeSetUp 1B6E             __end_of_load_buffer 197E  
           __size_of_set_timer0 000C             __size_of_set_timer3 000C             __size_of_wait_pulse 0070  
                      _LATAbits 000F89                        _LATCbits 000F8B                     _encode_data 16DC  
                ?_setPulseWidth 0001                        _PIE2bits 000FA0            __end_of_setup_timer0 1518  
          __end_of_setup_timer3 1520                        _PIR2bits 000FA1                     _buffer_full 15AC  
                   _buffer_peek 1722                     _buffer_push 185E                       _timer0_up 1550  
                     _timer3_up 1542                       main@F3991 00AB                       main@F3993 00CD  
                     main@F3995 00EF                       _setup_spi 169E           __size_of_selectOutput 00A2  
                     main@value 0065  espi_master_receive@timer_start 000A                    ??_buffer_pop 0003  
             decode_data@byte_1 0003               decode_data@byte_2 0004                     _INTCON2bits 000FF1  
                   _INTCON3bits 000FF0               load_buffer@buffer 0006                        __Hrparam 0000  
                      __Lrparam 0000                      ?_timer0_up 0001                      ?_timer3_up 0001  
                  ??_espi_setup 0003                 wait_pulse@value 0007                 wait_pulse@timer 0005  
            __end_of_buffer_pop 185E                    _selectOutput 197E                      ?_setup_spi 0001  
                   _load_buffer 18DE                      _ANSELHbits 000F7F                        __ptext10 169E  
                      __ptext11 1B6E                        __ptext20 152A                        __ptext12 16DC  
                      __ptext21 1520                        __ptext13 17E4                        __ptext22 1662  
                      __ptext14 1722                        __ptext23 1596                        __ptext15 1570  
                      __ptext24 185E                        __ptext16 1A20                        __ptext25 15AC  
                      __ptext17 1774                        __ptext26 155E                        __ptext18 1542  
                      __ptext27 0000                        __ptext19 1582              __end_of_espi_setup 1662  
                  ??_send_delay 0001                 ??_setPulseWidth 0003                   __size_of_main 01DE  
                  ??_set_timer0 0003                    ??_set_timer3 0003    __size_of_espi_master_receive 00A6  
                  ??_wait_pulse 0007                        main@name 0060                        main@send 0067  
              _espi_master_send 1B6E              __end_of_send_delay 152A                      _INTCONbits 000FF2  
                  ?_decode_data 0001        espi_master_receive@value 0010        espi_master_receive@timer 000C  
            __end_of_set_timer0 1542              __end_of_set_timer3 1536           __size_of_setup_timer0 0008  
         __size_of_setup_timer3 0008              __end_of_wait_pulse 17E4                      _OSCCONbits 000FD3  
                   ??_timer0_up 0001                     ??_timer3_up 0001                     ??_setup_spi 0002  
            setPulseWidth@width 0001                     _PSTRCONbits 000FB9                    _setup_timer0 1510  
                  _setup_timer3 1518      pmwSingleModeSetUp@valuePR2 0005     buffer_push@current_position 0005  
                   _SSPCON1bits 000FC6      pmwSingleModeSetUp@polarity 0008              _pmwSingleModeSetUp 1AC6  
                  ?_encode_data 0001          espi_master_send@buffer 0008          espi_master_send@byte_1 0012  
        espi_master_send@byte_2 0013                   ?_buffer_clear 0001                   ?_buffer_count 0001  
         espi_master_send@timer 000C                    ?_buffer_full 0001                    ?_buffer_peek 0001  
                 ?_buffer_space 0001                    ?_buffer_push 0001  
