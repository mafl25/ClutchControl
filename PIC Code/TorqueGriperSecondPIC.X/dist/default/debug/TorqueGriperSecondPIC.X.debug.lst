

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Aug 06 14:15:27 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	idataCOMRAM
    48  00143C                     __pidataCOMRAM:
    49                           	opt stack 0
    50                           
    51                           ;initializer for _output_value
    52  00143C  01                 	db	1
    53  00143D  03                 	db	3
    54  00143E  02                 	db	2
    55  00143F  06                 	db	6
    56  001440  04                 	db	4
    57  001441  0C                 	db	12
    58  001442  08                 	db	8
    59  001443  09                 	db	9
    60                           
    61                           	psect	idataBANK0
    62  001429                     __pidataBANK0:
    63                           	opt stack 0
    64                           
    65                           ;initializer for main@F4009
    66  001429  55                 	db	85
    67  00142A  DD                 	db	221
    68  00142B  00                 	db	0
    69  0000                     _TMR0	set	4054
    70  0000                     _TMR1	set	4046
    71  0000                     _TMR3	set	4018
    72  0000                     _ANSELHbits	set	3967
    73  0000                     _ANSELbits	set	3966
    74  0000                     _CCP1CONbits	set	4029
    75  0000                     _CCPR1L	set	4030
    76  0000                     _INTCON	set	4082
    77  0000                     _INTCON2bits	set	4081
    78  0000                     _INTCON3bits	set	4080
    79  0000                     _INTCONbits	set	4082
    80  0000                     _LATAbits	set	3977
    81  0000                     _LATC	set	3979
    82  0000                     _LATCbits	set	3979
    83  0000                     _OSCCONbits	set	4051
    84  0000                     _PIE1bits	set	3997
    85  0000                     _PIE2bits	set	4000
    86  0000                     _PIR1bits	set	3998
    87  0000                     _PIR2bits	set	4001
    88  0000                     _PR2	set	4043
    89  0000                     _PSTRCON	set	4025
    90  0000                     _PSTRCONbits	set	4025
    91  0000                     _SSPBUF	set	4041
    92  0000                     _SSPCON1	set	4038
    93  0000                     _SSPCON1bits	set	4038
    94  0000                     _SSPSTAT	set	4039
    95  0000                     _SSPSTATbits	set	4039
    96  0000                     _T0CON	set	4053
    97  0000                     _T1CON	set	4045
    98  0000                     _T2CONbits	set	4042
    99  0000                     _T3CON	set	4017
   100  0000                     _TRISAbits	set	3986
   101  0000                     _TRISBbits	set	3987
   102  0000                     _TRISCbits	set	3988
   103  0000                     _INT2IF	set	32641
   104                           
   105                           ; #config settings
   106  0000                     
   107                           	psect	cinit
   108  0016AA                     __pcinit:
   109                           	opt stack 0
   110  0016AA                     start_initialization:
   111                           	opt stack 0
   112  0016AA                     __initialization:
   113                           	opt stack 0
   114                           
   115                           ; Clear objects allocated to BANK0 (68 bytes)
   116  0016AA  EE00  F0AE         	lfsr	0,__pbssBANK0
   117  0016AE  0E44               	movlw	68
   118  0016B0                     clear_0:
   119  0016B0  6AEE               	clrf	postinc0,c
   120  0016B2  06E8               	decf	wreg,f,c
   121  0016B4  E1FD               	bnz	clear_0
   122                           
   123                           ; Clear objects allocated to COMRAM (2 bytes)
   124  0016B6  6A1F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   125  0016B8  6A1E               	clrf	__pbssCOMRAM& (0+255),c
   126                           
   127                           ; Initialize objects allocated to BANK0 (3 bytes)
   128                           ; load TBLPTR registers with __pidataBANK0
   129  0016BA  0E29               	movlw	low __pidataBANK0
   130  0016BC  6EF6               	movwf	tblptrl,c
   131  0016BE  0E14               	movlw	high __pidataBANK0
   132  0016C0  6EF7               	movwf	tblptrh,c
   133  0016C2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   134  0016C4  6EF8               	movwf	tblptru,c
   135  0016C6  0009               	tblrd		*+	;fetch initializer
   136  0016C8  CFF5 F0F2          	movff	tablat,__pdataBANK0
   137  0016CC  0009               	tblrd		*+	;fetch initializer
   138  0016CE  CFF5 F0F3          	movff	tablat,__pdataBANK0+1
   139  0016D2  0009               	tblrd		*+	;fetch initializer
   140  0016D4  CFF5 F0F4          	movff	tablat,__pdataBANK0+2
   141                           
   142                           ; Initialize objects allocated to COMRAM (8 bytes)
   143                           ; load TBLPTR registers with __pidataCOMRAM
   144  0016D8  0E3C               	movlw	low __pidataCOMRAM
   145  0016DA  6EF6               	movwf	tblptrl,c
   146  0016DC  0E14               	movlw	high __pidataCOMRAM
   147  0016DE  6EF7               	movwf	tblptrh,c
   148  0016E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   149  0016E2  6EF8               	movwf	tblptru,c
   150  0016E4  EE00  F016         	lfsr	0,__pdataCOMRAM
   151  0016E8  EE10 F008          	lfsr	1,8
   152  0016EC                     copy_data0:
   153  0016EC  0009               	tblrd		*+
   154  0016EE  CFF5 FFEE          	movff	tablat,postinc0
   155  0016F2  50E5               	movf	postdec1,w,c
   156  0016F4  50E1               	movf	fsr1l,w,c
   157  0016F6  E1FA               	bnz	copy_data0
   158  0016F8                     end_of_initialization:
   159                           	opt stack 0
   160  0016F8                     __end_of__initialization:
   161                           	opt stack 0
   162  0016F8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   163  0016FA  6EF8               	movwf	tblptru,c
   164  0016FC  0100               	movlb	0
   165  0016FE  EFD8  F00D         	goto	_main	;jump to C main() function
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           postinc0	equ	0xFEE
   171                           wreg	equ	0xFE8
   172                           postdec1	equ	0xFE5
   173                           fsr1l	equ	0xFE1
   174                           
   175                           	psect	bssCOMRAM
   176  00001E                     __pbssCOMRAM:
   177                           	opt stack 0
   178  00001E                     _current_state:
   179                           	opt stack 0
   180  00001E                     	ds	1
   181  00001F                     _dummy_byte:
   182                           	opt stack 0
   183  00001F                     	ds	1
   184                           tblptru	equ	0xFF8
   185                           tblptrh	equ	0xFF7
   186                           tblptrl	equ	0xFF6
   187                           tablat	equ	0xFF5
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           postdec1	equ	0xFE5
   191                           fsr1l	equ	0xFE1
   192                           
   193                           	psect	dataCOMRAM
   194  000016                     __pdataCOMRAM:
   195                           	opt stack 0
   196  000016                     _output_value:
   197                           	opt stack 0
   198  000016                     	ds	8
   199                           tblptru	equ	0xFF8
   200                           tblptrh	equ	0xFF7
   201                           tblptrl	equ	0xFF6
   202                           tablat	equ	0xFF5
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           postdec1	equ	0xFE5
   206                           fsr1l	equ	0xFE1
   207                           
   208                           	psect	bssBANK0
   209  0000AE                     __pbssBANK0:
   210                           	opt stack 0
   211  0000AE                     main@F4005:
   212                           	opt stack 0
   213  0000AE                     	ds	34
   214  0000D0                     main@F4007:
   215                           	opt stack 0
   216  0000D0                     	ds	34
   217                           tblptru	equ	0xFF8
   218                           tblptrh	equ	0xFF7
   219                           tblptrl	equ	0xFF6
   220                           tablat	equ	0xFF5
   221                           postinc0	equ	0xFEE
   222                           wreg	equ	0xFE8
   223                           postdec1	equ	0xFE5
   224                           fsr1l	equ	0xFE1
   225                           
   226                           	psect	dataBANK0
   227  0000F2                     __pdataBANK0:
   228                           	opt stack 0
   229  0000F2                     main@F4009:
   230                           	opt stack 0
   231  0000F2                     	ds	3
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           postdec1	equ	0xFE5
   239                           fsr1l	equ	0xFE1
   240                           
   241                           	psect	cstackBANK0
   242  000060                     __pcstackBANK0:
   243                           	opt stack 0
   244  000060                     main@name:
   245                           	opt stack 0
   246                           
   247                           ; 3 bytes @ 0x0
   248  000060                     	ds	3
   249  000063                     main@value:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x3
   253  000063                     	ds	2
   254  000065                     main@right:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x5
   258  000065                     	ds	1
   259  000066                     main@continuous:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x6
   263  000066                     	ds	1
   264  000067                     main@byte_1:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x7
   268  000067                     	ds	1
   269  000068                     main@byte_2:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x8
   273  000068                     	ds	1
   274  000069                     main@count:
   275                           	opt stack 0
   276                           
   277                           ; 1 bytes @ 0x9
   278  000069                     	ds	1
   279  00006A                     main@send:
   280                           	opt stack 0
   281                           
   282                           ; 34 bytes @ 0xA
   283  00006A                     	ds	34
   284  00008C                     main@receive:
   285                           	opt stack 0
   286                           
   287                           ; 34 bytes @ 0x2C
   288  00008C                     	ds	34
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           postdec1	equ	0xFE5
   296                           fsr1l	equ	0xFE1
   297                           
   298                           	psect	cstackCOMRAM
   299  000001                     __pcstackCOMRAM:
   300                           	opt stack 0
   301  000001                     ??_step_forward:
   302  000001                     ??_step_backward:
   303  000001                     ?_buffer_pop:
   304                           	opt stack 0
   305  000001                     ?_buffer_peek:
   306                           	opt stack 0
   307  000001                     setup_spi@SSPCON1_reg:
   308                           	opt stack 0
   309  000001                     spi_send_get_byte@byte:
   310                           	opt stack 0
   311  000001                     setup_timer0@T0CON_reg:
   312                           	opt stack 0
   313  000001                     setup_timer3@T3CON_reg:
   314                           	opt stack 0
   315  000001                     selectOutput@toggle:
   316                           	opt stack 0
   317  000001                     buffer_count@buffer:
   318                           	opt stack 0
   319  000001                     buffer_space@buffer:
   320                           	opt stack 0
   321  000001                     buffer_full@buffer:
   322                           	opt stack 0
   323  000001                     buffer_push@buffer:
   324                           	opt stack 0
   325  000001                     buffer_pop@buffer:
   326                           	opt stack 0
   327  000001                     buffer_peek@buffer:
   328                           	opt stack 0
   329  000001                     encode_data@byte_1:
   330                           	opt stack 0
   331  000001                     decode_data@data:
   332                           	opt stack 0
   333  000001                     set_timer0@value:
   334                           	opt stack 0
   335  000001                     set_timer3@value:
   336                           	opt stack 0
   337  000001                     setPulseWidth@width:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x0
   341  000001                     	ds	1
   342  000002                     ??_selectOutput:
   343  000002                     setup_spi@SSPSTAT_reg:
   344                           	opt stack 0
   345                           
   346                           ; 1 bytes @ 0x1
   347  000002                     	ds	1
   348  000003                     ??_buffer_pop:
   349  000003                     ??_setPulseWidth:
   350  000003                     ??_buffer_peek:
   351  000003                     espi_setup@mode:
   352                           	opt stack 0
   353  000003                     buffer_push@byte:
   354                           	opt stack 0
   355  000003                     decode_data@byte_1:
   356                           	opt stack 0
   357  000003                     selectOutput@outputs:
   358                           	opt stack 0
   359  000003                     wait_pulse@timer_start:
   360                           	opt stack 0
   361  000003                     encode_data@byte_2:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x2
   365  000003                     	ds	1
   366  000004                     ??_buffer_push:
   367  000004                     decode_data@byte_2:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x3
   371  000004                     	ds	1
   372  000005                     ??_decode_data:
   373  000005                     ??_encode_data:
   374  000005                     buffer_push@current_position:
   375                           	opt stack 0
   376  000005                     pmwSingleModeSetUp@valuePR2:
   377                           	opt stack 0
   378  000005                     wait_pulse@timer:
   379                           	opt stack 0
   380  000005                     buffer_pop@byte:
   381                           	opt stack 0
   382  000005                     buffer_peek@byte:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x4
   386  000005                     	ds	1
   387  000006                     encode_data@data:
   388                           	opt stack 0
   389  000006                     pmwSingleModeSetUp@scaler:
   390                           	opt stack 0
   391  000006                     load_buffer@buffer:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x5
   395  000006                     	ds	1
   396  000007                     wait_pulse@value:
   397                           	opt stack 0
   398  000007                     pmwSingleModeSetUp@outputs:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x6
   402  000007                     	ds	1
   403  000008                     pmwSingleModeSetUp@polarity:
   404                           	opt stack 0
   405  000008                     load_buffer@str:
   406                           	opt stack 0
   407  000008                     espi_master_send@buffer:
   408                           	opt stack 0
   409  000008                     espi_master_receive@buffer:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x7
   413  000008                     	ds	2
   414  00000A                     load_buffer@size:
   415                           	opt stack 0
   416  00000A                     espi_master_send@timer_start:
   417                           	opt stack 0
   418  00000A                     espi_master_receive@timer_start:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x9
   422  00000A                     	ds	2
   423  00000C                     ??_load_buffer:
   424  00000C                     espi_master_send@timer:
   425                           	opt stack 0
   426  00000C                     espi_master_receive@timer:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0xB
   430  00000C                     	ds	1
   431  00000D                     load_buffer@i:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0xC
   435  00000D                     	ds	1
   436  00000E                     espi_master_send@received_1:
   437                           	opt stack 0
   438  00000E                     espi_master_receive@received_1:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0xD
   442  00000E                     	ds	1
   443  00000F                     espi_master_send@received_2:
   444                           	opt stack 0
   445  00000F                     espi_master_receive@received_2:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0xE
   449  00000F                     	ds	1
   450  000010                     espi_master_receive@value:
   451                           	opt stack 0
   452  000010                     espi_master_send@byte_to_send:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0xF
   456  000010                     	ds	2
   457  000012                     espi_master_send@byte_1:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x11
   461  000012                     	ds	1
   462  000013                     espi_master_send@byte_2:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x12
   466  000013                     	ds	1
   467  000014                     ??_main:
   468                           
   469                           ; 0 bytes @ 0x13
   470  000014                     	ds	2
   471                           tblptru	equ	0xFF8
   472                           tblptrh	equ	0xFF7
   473                           tblptrl	equ	0xFF6
   474                           tablat	equ	0xFF5
   475                           postinc0	equ	0xFEE
   476                           wreg	equ	0xFE8
   477                           postdec1	equ	0xFE5
   478                           fsr1l	equ	0xFE1
   479                           
   480 ;;
   481 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   482 ;;
   483 ;; *************** function _main *****************
   484 ;; Defined at:
   485 ;;		line 17 in file "main.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;  byte_2          1    8[BANK0 ] unsigned char 
   490 ;;  byte_1          1    7[BANK0 ] unsigned char 
   491 ;;  value           2    3[BANK0 ] int 
   492 ;;  receive        34   44[BANK0 ] struct circular_buffer
   493 ;;  send           34   10[BANK0 ] struct circular_buffer
   494 ;;  name            3    0[BANK0 ] unsigned char [3]
   495 ;;  count           1    9[BANK0 ] char 
   496 ;;  continuous      1    6[BANK0 ] unsigned char 
   497 ;;  right           1    5[BANK0 ] unsigned char 
   498 ;; Return value:  Size  Location     Type
   499 ;;                  2   42[None  ] int 
   500 ;; Registers used:
   501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0
   507 ;;      Params:         0       0
   508 ;;      Locals:         0      78
   509 ;;      Temps:          2       0
   510 ;;      Totals:         2      78
   511 ;;Total ram usage:       80 bytes
   512 ;; Hardware stack levels required when called:    3
   513 ;; This function calls:
   514 ;;		_buffer_count
   515 ;;		_buffer_pop
   516 ;;		_espi_master_receive
   517 ;;		_espi_master_send
   518 ;;		_espi_setup
   519 ;;		_load_buffer
   520 ;;		_pmwSingleModeSetUp
   521 ;;		_selectOutput
   522 ;;		_setPulseWidth
   523 ;;		_set_timer0
   524 ;;		_setup_timer0
   525 ;;		_setup_timer3
   526 ;;		_step_backward
   527 ;;		_step_forward
   528 ;;		_stepper_motor_setup
   529 ;;		_timer0_up
   530 ;; This function is called by:
   531 ;;		Startup code after reset
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535                           	psect	text0
   536  001BB0                     __ptext0:
   537                           	opt stack 0
   538  001BB0                     _main:
   539                           	opt stack 28
   540                           
   541                           ;main.c: 18: OSCCONbits.IRCF = 0x07;
   542                           
   543                           ;incstack = 0
   544  001BB0  88D3               	bsf	4051,4,c	;volatile
   545  001BB2  8AD3               	bsf	4051,5,c	;volatile
   546  001BB4  8CD3               	bsf	4051,6,c	;volatile
   547                           
   548                           ;main.c: 20: espi_setup(0x00);
   549  001BB6  0E00               	movlw	0
   550  001BB8  ECB0  F00A         	call	_espi_setup
   551                           
   552                           ;main.c: 21: setup_timer3(0x80 | 0x00 | 0x01);
   553  001BBC  0E81               	movlw	129
   554  001BBE  EC1A  F00A         	call	_setup_timer3
   555                           
   556                           ;main.c: 22: setup_timer0(0x02 | 0x80);
   557  001BC2  0E82               	movlw	130
   558  001BC4  EC16  F00A         	call	_setup_timer0
   559                           
   560                           ;main.c: 23: pmwSingleModeSetUp(PACH_PBDH, 254, TMRP_1, 0x01 | 0x02);
   561  001BC8  0EFE               	movlw	254
   562  001BCA  6E05               	movwf	pmwSingleModeSetUp@valuePR2,c
   563  001BCC  0E00               	movlw	0
   564  001BCE  6E06               	movwf	pmwSingleModeSetUp@scaler,c
   565  001BD0  0E03               	movlw	3
   566  001BD2  6E07               	movwf	pmwSingleModeSetUp@outputs,c
   567  001BD4  0E00               	movlw	0
   568  001BD6  EC2A  F00D         	call	_pmwSingleModeSetUp
   569                           
   570                           ;main.c: 24: stepper_motor_setup();
   571  001BDA  EC4A  F00A         	call	_stepper_motor_setup	;wreg free
   572                           
   573                           ;main.c: 26: struct circular_buffer send = {0, 0, {0}};
   574  001BDE  EE20  F0AE         	lfsr	2,main@F4005
   575  001BE2  EE10  F06A         	lfsr	1,main@send
   576  001BE6  0E21               	movlw	33
   577  001BE8                     u1571:
   578  001BE8  CFDB FFE3          	movff	plusw2,plusw1
   579  001BEC  06E8               	decf	wreg,f,c
   580  001BEE  E2FC               	bc	u1571
   581                           
   582                           ;main.c: 27: struct circular_buffer receive = {0, 0, {0}};
   583  001BF0  EE20  F0D0         	lfsr	2,main@F4007
   584  001BF4  EE10  F08C         	lfsr	1,main@receive
   585  001BF8  0E21               	movlw	33
   586  001BFA                     u1581:
   587  001BFA  CFDB FFE3          	movff	plusw2,plusw1
   588  001BFE  06E8               	decf	wreg,f,c
   589  001C00  E2FC               	bc	u1581
   590                           
   591                           ;main.c: 29: char name[3] = {0x55, 0xDD, 0x00};
   592  001C02  C0F2  F060         	movff	main@F4009,main@name
   593  001C06  C0F3  F061         	movff	main@F4009+1,main@name+1
   594  001C0A  C0F4  F062         	movff	main@F4009+2,main@name+2
   595                           
   596                           ;main.c: 30: int8_t count = 0;
   597  001C0E  0E00               	movlw	0
   598  001C10  0100               	movlb	0	; () banked
   599  001C12  6F69               	movwf	main@count& (0+255),b
   600                           
   601                           ; BSR set to: 0
   602                           ;main.c: 31: bool right = 1;
   603  001C14  0E01               	movlw	1
   604  001C16  0100               	movlb	0	; () banked
   605  001C18  6F65               	movwf	main@right& (0+255),b
   606                           
   607                           ; BSR set to: 0
   608                           ;main.c: 32: bool continuous = 0;
   609  001C1A  0E00               	movlw	0
   610  001C1C  0100               	movlb	0	; () banked
   611  001C1E  6F66               	movwf	main@continuous& (0+255),b
   612                           
   613                           ; BSR set to: 0
   614                           ;main.c: 34: set_timer0(65050);
   615  001C20  0EFE               	movlw	254
   616  001C22  6E02               	movwf	set_timer0@value+1,c
   617  001C24  0E1A               	movlw	26
   618  001C26  6E01               	movwf	set_timer0@value,c
   619  001C28  EC2D  F00A         	call	_set_timer0	;wreg free
   620  001C2C  D000               	goto	l1942
   621  001C2E                     l1942:
   622                           
   623                           ;main.c: 37: espi_master_receive(&receive, &set_timer3, &timer3_up);
   624  001C2E  0E8C               	movlw	low main@receive
   625  001C30  6E08               	movwf	espi_master_receive@buffer,c
   626  001C32  0E00               	movlw	high main@receive
   627  001C34  6E09               	movwf	espi_master_receive@buffer+1,c
   628  001C36  0E4E               	movlw	low _set_timer3
   629  001C38  6E0A               	movwf	espi_master_receive@timer_start,c
   630  001C3A  0E14               	movlw	high _set_timer3
   631  001C3C  6E0B               	movwf	espi_master_receive@timer_start+1,c
   632  001C3E  0E66               	movlw	low _timer3_up
   633  001C40  6E0C               	movwf	espi_master_receive@timer,c
   634  001C42  0E14               	movlw	high _timer3_up
   635  001C44  6E0D               	movwf	espi_master_receive@timer+1,c
   636  001C46  ECD7  F00C         	call	_espi_master_receive	;wreg free
   637                           
   638                           ;main.c: 38: int16_t value;
   639                           ;main.c: 40: while (buffer_count(&receive) >= 3) {
   640  001C4A  D088               	goto	l1968
   641  001C4C                     l1944:
   642                           
   643                           ;main.c: 41: value = buffer_pop(&receive);
   644  001C4C  0E8C               	movlw	low main@receive
   645  001C4E  6E01               	movwf	buffer_pop@buffer,c
   646  001C50  0E00               	movlw	high main@receive
   647  001C52  6E02               	movwf	buffer_pop@buffer+1,c
   648  001C54  ECB9  F00B         	call	_buffer_pop	;wreg free
   649  001C58  C001  F063         	movff	?_buffer_pop,main@value
   650  001C5C  C002  F064         	movff	?_buffer_pop+1,main@value+1
   651                           
   652                           ;main.c: 42: uint8_t byte_1;
   653                           ;main.c: 43: uint8_t byte_2;
   654                           ;main.c: 45: switch (value) {
   655  001C60  D067               	goto	l1966
   656  001C62                     l1946:
   657                           
   658                           ;main.c: 47: byte_1 = buffer_pop(&receive);
   659  001C62  0E8C               	movlw	low main@receive
   660  001C64  6E01               	movwf	buffer_pop@buffer,c
   661  001C66  0E00               	movlw	high main@receive
   662  001C68  6E02               	movwf	buffer_pop@buffer+1,c
   663  001C6A  ECB9  F00B         	call	_buffer_pop	;wreg free
   664  001C6E  5001               	movf	?_buffer_pop,w,c
   665  001C70  0100               	movlb	0	; () banked
   666  001C72  6F67               	movwf	main@byte_1& (0+255),b
   667                           
   668                           ;main.c: 48: byte_2 = buffer_pop(&receive);
   669  001C74  0E8C               	movlw	low main@receive
   670  001C76  6E01               	movwf	buffer_pop@buffer,c
   671  001C78  0E00               	movlw	high main@receive
   672  001C7A  6E02               	movwf	buffer_pop@buffer+1,c
   673  001C7C  ECB9  F00B         	call	_buffer_pop	;wreg free
   674  001C80  5001               	movf	?_buffer_pop,w,c
   675  001C82  0100               	movlb	0	; () banked
   676  001C84  6F68               	movwf	main@byte_2& (0+255),b
   677                           
   678                           ; BSR set to: 0
   679                           ;main.c: 49: setPulseWidth(byte_1 << 2 | byte_2);
   680  001C86  0100               	movlb	0	; () banked
   681  001C88  5168               	movf	main@byte_2& (0+255),w,b
   682  001C8A  C067  F014         	movff	main@byte_1,??_main
   683  001C8E  6A15               	clrf	(??_main+1)& (0+255),c
   684  001C90  90D8               	bcf	status,0,c
   685  001C92  3614               	rlcf	??_main,f,c
   686  001C94  3615               	rlcf	??_main+1,f,c
   687  001C96  90D8               	bcf	status,0,c
   688  001C98  3614               	rlcf	??_main,f,c
   689  001C9A  3615               	rlcf	??_main+1,f,c
   690  001C9C  1014               	iorwf	??_main,w,c
   691  001C9E  6E01               	movwf	setPulseWidth@width,c
   692  001CA0  5015               	movf	??_main+1,w,c
   693  001CA2  6E02               	movwf	setPulseWidth@width+1,c
   694  001CA4  EC9B  F00A         	call	_setPulseWidth	;wreg free
   695                           
   696                           ;main.c: 50: break;
   697  001CA8  D059               	goto	l1968
   698  001CAA                     l1950:
   699                           
   700                           ;main.c: 52: byte_1 = buffer_pop(&receive);
   701  001CAA  0E8C               	movlw	low main@receive
   702  001CAC  6E01               	movwf	buffer_pop@buffer,c
   703  001CAE  0E00               	movlw	high main@receive
   704  001CB0  6E02               	movwf	buffer_pop@buffer+1,c
   705  001CB2  ECB9  F00B         	call	_buffer_pop	;wreg free
   706  001CB6  5001               	movf	?_buffer_pop,w,c
   707  001CB8  0100               	movlb	0	; () banked
   708  001CBA  6F67               	movwf	main@byte_1& (0+255),b
   709                           
   710                           ;main.c: 53: byte_2 = buffer_pop(&receive);
   711  001CBC  0E8C               	movlw	low main@receive
   712  001CBE  6E01               	movwf	buffer_pop@buffer,c
   713  001CC0  0E00               	movlw	high main@receive
   714  001CC2  6E02               	movwf	buffer_pop@buffer+1,c
   715  001CC4  ECB9  F00B         	call	_buffer_pop	;wreg free
   716  001CC8  5001               	movf	?_buffer_pop,w,c
   717  001CCA  0100               	movlb	0	; () banked
   718  001CCC  6F68               	movwf	main@byte_2& (0+255),b
   719                           
   720                           ; BSR set to: 0
   721                           ;main.c: 54: selectOutput(byte_1, byte_2);
   722  001CCE  C068  F001         	movff	main@byte_2,selectOutput@toggle
   723  001CD2  0100               	movlb	0	; () banked
   724  001CD4  5167               	movf	main@byte_1& (0+255),w,b
   725  001CD6  EC86  F00C         	call	_selectOutput
   726                           
   727                           ;main.c: 55: break;
   728  001CDA  D040               	goto	l1968
   729  001CDC                     l1954:
   730                           
   731                           ;main.c: 57: right = buffer_pop(&receive);
   732  001CDC  0E8C               	movlw	low main@receive
   733  001CDE  6E01               	movwf	buffer_pop@buffer,c
   734  001CE0  0E00               	movlw	high main@receive
   735  001CE2  6E02               	movwf	buffer_pop@buffer+1,c
   736  001CE4  ECB9  F00B         	call	_buffer_pop	;wreg free
   737  001CE8  5001               	movf	?_buffer_pop,w,c
   738  001CEA  0100               	movlb	0	; () banked
   739  001CEC  6F65               	movwf	main@right& (0+255),b
   740                           
   741                           ;main.c: 58: count = buffer_pop(&receive);
   742  001CEE  0E8C               	movlw	low main@receive
   743  001CF0  6E01               	movwf	buffer_pop@buffer,c
   744  001CF2  0E00               	movlw	high main@receive
   745  001CF4  6E02               	movwf	buffer_pop@buffer+1,c
   746  001CF6  ECB9  F00B         	call	_buffer_pop	;wreg free
   747  001CFA  5001               	movf	?_buffer_pop,w,c
   748  001CFC  0100               	movlb	0	; () banked
   749  001CFE  6F69               	movwf	main@count& (0+255),b
   750                           
   751                           ; BSR set to: 0
   752                           ;main.c: 59: continuous = 0;
   753  001D00  0E00               	movlw	0
   754  001D02  D013               	goto	L1
   755  001D04                     l1958:
   756                           
   757                           ;main.c: 62: right = buffer_pop(&receive);
   758  001D04  0E8C               	movlw	low main@receive
   759  001D06  6E01               	movwf	buffer_pop@buffer,c
   760  001D08  0E00               	movlw	high main@receive
   761  001D0A  6E02               	movwf	buffer_pop@buffer+1,c
   762  001D0C  ECB9  F00B         	call	_buffer_pop	;wreg free
   763  001D10  5001               	movf	?_buffer_pop,w,c
   764  001D12  0100               	movlb	0	; () banked
   765  001D14  6F65               	movwf	main@right& (0+255),b
   766                           
   767                           ;main.c: 63: buffer_pop(&receive);
   768  001D16  0E8C               	movlw	low main@receive
   769  001D18  6E01               	movwf	buffer_pop@buffer,c
   770  001D1A  0E00               	movlw	high main@receive
   771  001D1C  6E02               	movwf	buffer_pop@buffer+1,c
   772  001D1E  ECB9  F00B         	call	_buffer_pop	;wreg free
   773                           
   774                           ;main.c: 64: count = 0;
   775  001D22  0E00               	movlw	0
   776  001D24  0100               	movlb	0	; () banked
   777  001D26  6F69               	movwf	main@count& (0+255),b
   778                           
   779                           ; BSR set to: 0
   780                           ;main.c: 65: continuous = 1;
   781  001D28  0E01               	movlw	1
   782  001D2A                     L1:
   783  001D2A  0100               	movlb	0	; () banked
   784  001D2C  6F66               	movwf	main@continuous& (0+255),b
   785                           
   786                           ; BSR set to: 0
   787                           ;main.c: 67: }
   788                           
   789                           ;main.c: 66: break;
   790  001D2E  D016               	goto	l1968
   791  001D30                     l1966:
   792  001D30  C063  F014         	movff	main@value,??_main
   793  001D34  C064  F015         	movff	main@value+1,??_main+1
   794                           
   795                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   796                           ; Switch size 1, requested type "space"
   797                           ; Number of cases is 1, Range of values is 0 to 0
   798                           ; switch strategies available:
   799                           ; Name         Instructions Cycles
   800                           ; simple_byte            4     3 (average)
   801                           ;	Chosen strategy is simple_byte
   802  001D38  5015               	movf	??_main+1,w,c
   803  001D3A  0A00               	xorlw	0	; case 0
   804  001D3C  A4D8               	btfss	status,2,c
   805  001D3E  D00E               	goto	l1968
   806                           
   807                           ; Switch size 1, requested type "space"
   808                           ; Number of cases is 4, Range of values is 170 to 187
   809                           ; switch strategies available:
   810                           ; Name         Instructions Cycles
   811                           ; simple_byte           13     7 (average)
   812                           ;	Chosen strategy is simple_byte
   813  001D40  5014               	movf	??_main,w,c
   814  001D42  0AAA               	xorlw	170	; case 170
   815  001D44  B4D8               	btfsc	status,2,c
   816  001D46  D7B1               	goto	l1950
   817  001D48  0A06               	xorlw	6	; case 172
   818  001D4A  B4D8               	btfsc	status,2,c
   819  001D4C  D78A               	goto	l1946
   820  001D4E  0A16               	xorlw	22	; case 186
   821  001D50  B4D8               	btfsc	status,2,c
   822  001D52  D7C4               	goto	l1954
   823  001D54  0A01               	xorlw	1	; case 187
   824  001D56  B4D8               	btfsc	status,2,c
   825  001D58  D7D5               	goto	l1958
   826  001D5A  D000               	goto	l1968
   827  001D5C                     l1968:
   828  001D5C  0E8C               	movlw	low main@receive
   829  001D5E  6E01               	movwf	buffer_count@buffer,c
   830  001D60  0E00               	movlw	high main@receive
   831  001D62  6E02               	movwf	buffer_count@buffer+1,c
   832  001D64  EC41  F00A         	call	_buffer_count	;wreg free
   833  001D68  6E14               	movwf	??_main& (0+255),c
   834  001D6A  0E03               	movlw	3
   835  001D6C  6014               	cpfslt	??_main,c
   836  001D6E  D76E               	goto	l1944
   837  001D70  D000               	goto	l1970
   838  001D72                     l1970:
   839                           
   840                           ;main.c: 68: }
   841                           ;main.c: 70: if (timer0_up()) {
   842  001D72  EC3A  F00A         	call	_timer0_up	;wreg free
   843  001D76  0900               	iorlw	0
   844  001D78  B4D8               	btfsc	status,2,c
   845  001D7A  D759               	goto	l1942
   846                           
   847                           ;main.c: 71: load_buffer(&send, name, 3);
   848  001D7C  0E6A               	movlw	low main@send
   849  001D7E  6E06               	movwf	load_buffer@buffer,c
   850  001D80  0E00               	movlw	high main@send
   851  001D82  6E07               	movwf	load_buffer@buffer+1,c
   852  001D84  0E60               	movlw	low main@name
   853  001D86  6E08               	movwf	load_buffer@str,c
   854  001D88  0E00               	movlw	high main@name
   855  001D8A  6E09               	movwf	load_buffer@str+1,c
   856  001D8C  0E00               	movlw	0
   857  001D8E  6E0B               	movwf	load_buffer@size+1,c
   858  001D90  0E03               	movlw	3
   859  001D92  6E0A               	movwf	load_buffer@size,c
   860  001D94  EC36  F00C         	call	_load_buffer	;wreg free
   861                           
   862                           ;main.c: 72: espi_master_send(&send, &set_timer3, &timer3_up);
   863  001D98  0E6A               	movlw	low main@send
   864  001D9A  6E08               	movwf	espi_master_send@buffer,c
   865  001D9C  0E00               	movlw	high main@send
   866  001D9E  6E09               	movwf	espi_master_send@buffer+1,c
   867  001DA0  0E4E               	movlw	low _set_timer3
   868  001DA2  6E0A               	movwf	espi_master_send@timer_start,c
   869  001DA4  0E14               	movlw	high _set_timer3
   870  001DA6  6E0B               	movwf	espi_master_send@timer_start+1,c
   871  001DA8  0E66               	movlw	low _timer3_up
   872  001DAA  6E0C               	movwf	espi_master_send@timer,c
   873  001DAC  0E14               	movlw	high _timer3_up
   874  001DAE  6E0D               	movwf	espi_master_send@timer+1,c
   875  001DB0  EC7E  F00D         	call	_espi_master_send	;wreg free
   876                           
   877                           ;main.c: 73: if (count || continuous) {
   878  001DB4  0100               	movlb	0	; () banked
   879  001DB6  5169               	movf	main@count& (0+255),w,b
   880  001DB8  0100               	movlb	0	; () banked
   881  001DBA  A4D8               	btfss	status,2,c
   882  001DBC  D005               	goto	l1980
   883                           
   884                           ; BSR set to: 0
   885  001DBE  0100               	movlb	0	; () banked
   886  001DC0  5166               	movf	main@continuous& (0+255),w,b
   887  001DC2  0100               	movlb	0	; () banked
   888  001DC4  B4D8               	btfsc	status,2,c
   889  001DC6  D013               	goto	l1990
   890  001DC8                     l1980:
   891                           
   892                           ; BSR set to: 0
   893                           ;main.c: 74: if (right)
   894  001DC8  0100               	movlb	0	; () banked
   895  001DCA  5165               	movf	main@right& (0+255),w,b
   896  001DCC  0100               	movlb	0	; () banked
   897  001DCE  B4D8               	btfsc	status,2,c
   898  001DD0  D003               	goto	l1984
   899                           
   900                           ; BSR set to: 0
   901                           ;main.c: 75: step_forward();
   902  001DD2  EC89  F00A         	call	_step_forward	;wreg free
   903  001DD6  D003               	goto	l1986
   904  001DD8                     l1984:
   905                           
   906                           ;main.c: 76: else
   907                           ;main.c: 77: step_backward();
   908  001DD8  EC77  F00A         	call	_step_backward	;wreg free
   909  001DDC  D000               	goto	l1986
   910  001DDE                     l1986:
   911                           
   912                           ;main.c: 79: if (count)
   913  001DDE  0100               	movlb	0	; () banked
   914  001DE0  5169               	movf	main@count& (0+255),w,b
   915  001DE2  0100               	movlb	0	; () banked
   916  001DE4  B4D8               	btfsc	status,2,c
   917  001DE6  D003               	goto	l1990
   918                           
   919                           ; BSR set to: 0
   920                           ;main.c: 80: count--;
   921  001DE8  0100               	movlb	0	; () banked
   922  001DEA  0769               	decf	main@count& (0+255),f,b
   923                           
   924                           ; BSR set to: 0
   925  001DEC  D000               	goto	l1990
   926  001DEE                     l1990:
   927                           
   928                           ; BSR set to: 0
   929                           ;main.c: 81: }
   930                           ;main.c: 82: set_timer0(60050);
   931  001DEE  0EEA               	movlw	234
   932  001DF0  6E02               	movwf	set_timer0@value+1,c
   933  001DF2  0E92               	movlw	146
   934  001DF4  6E01               	movwf	set_timer0@value,c
   935  001DF6  EC2D  F00A         	call	_set_timer0	;wreg free
   936  001DFA  D719               	goto	l1942
   937                           
   938                           ;main.c: 83: }
   939                           ;main.c: 84: }
   940                           ;main.c: 86: return 0;
   941                           ;	Return value of _main is never used
   942  001DFC  EF01  F000         	goto	start
   943  001E00                     __end_of_main:
   944                           	opt stack 0
   945                           tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           postinc0	equ	0xFEE
   950                           wreg	equ	0xFE8
   951                           postdec1	equ	0xFE5
   952                           plusw1	equ	0xFE3
   953                           fsr1l	equ	0xFE1
   954                           plusw2	equ	0xFDB
   955                           status	equ	0xFD8
   956                           
   957 ;; *************** function _timer0_up *****************
   958 ;; Defined at:
   959 ;;		line 22 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;                  1    wreg      unsigned char 
   966 ;; Registers used:
   967 ;;		wreg
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMRAM   BANK0
   973 ;;      Params:         0       0
   974 ;;      Locals:         0       0
   975 ;;      Temps:          0       0
   976 ;;      Totals:         0       0
   977 ;;Total ram usage:        0 bytes
   978 ;; Hardware stack levels used:    1
   979 ;; This function calls:
   980 ;;		Nothing
   981 ;; This function is called by:
   982 ;;		_main
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986                           	psect	text1
   987  001474                     __ptext1:
   988                           	opt stack 0
   989  001474                     _timer0_up:
   990                           	opt stack 30
   991                           
   992                           ;timers_pic.c: 24: return (INTCONbits.TMR0IF) ? 1 : 0;
   993                           
   994                           ;incstack = 0
   995  001474  A4F2               	btfss	intcon,2,c	;volatile
   996  001476  D002               	goto	u1470
   997  001478  0E01               	movlw	1
   998  00147A  0012               	return	
   999  00147C                     u1470:
  1000  00147C  0E00               	movlw	0
  1001  00147E  0012               	return	
  1002  001480  0012               	return		;funcret
  1003  001482                     __end_of_timer0_up:
  1004                           	opt stack 0
  1005                           tblptru	equ	0xFF8
  1006                           tblptrh	equ	0xFF7
  1007                           tblptrl	equ	0xFF6
  1008                           tablat	equ	0xFF5
  1009                           intcon	equ	0xFF2
  1010                           postinc0	equ	0xFEE
  1011                           wreg	equ	0xFE8
  1012                           postdec1	equ	0xFE5
  1013                           plusw1	equ	0xFE3
  1014                           fsr1l	equ	0xFE1
  1015                           plusw2	equ	0xFDB
  1016                           status	equ	0xFD8
  1017                           
  1018 ;; *************** function _stepper_motor_setup *****************
  1019 ;; Defined at:
  1020 ;;		line 7 in file "stepper_motor.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;		None
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;		None
  1025 ;; Return value:  Size  Location     Type
  1026 ;;		None               void
  1027 ;; Registers used:
  1028 ;;		None
  1029 ;; Tracked objects:
  1030 ;;		On entry : 0/0
  1031 ;;		On exit  : 0/0
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMRAM   BANK0
  1034 ;;      Params:         0       0
  1035 ;;      Locals:         0       0
  1036 ;;      Temps:          0       0
  1037 ;;      Totals:         0       0
  1038 ;;Total ram usage:        0 bytes
  1039 ;; Hardware stack levels used:    1
  1040 ;; This function calls:
  1041 ;;		Nothing
  1042 ;; This function is called by:
  1043 ;;		_main
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text2
  1048  001494                     __ptext2:
  1049                           	opt stack 0
  1050  001494                     _stepper_motor_setup:
  1051                           	opt stack 30
  1052                           
  1053                           ;stepper_motor.c: 9: LATCbits.LATC0 = 0;
  1054                           
  1055                           ;incstack = 0
  1056  001494  908B               	bcf	3979,0,c	;volatile
  1057                           
  1058                           ;stepper_motor.c: 10: LATCbits.LATC1 = 0;
  1059  001496  928B               	bcf	3979,1,c	;volatile
  1060                           
  1061                           ;stepper_motor.c: 11: LATCbits.LATC2 = 0;
  1062  001498  948B               	bcf	3979,2,c	;volatile
  1063                           
  1064                           ;stepper_motor.c: 12: LATCbits.LATC3 = 0;
  1065  00149A  968B               	bcf	3979,3,c	;volatile
  1066                           
  1067                           ;stepper_motor.c: 14: TRISCbits.RC0 = 0;
  1068  00149C  9094               	bcf	3988,0,c	;volatile
  1069                           
  1070                           ;stepper_motor.c: 15: TRISCbits.RC1 = 0;
  1071  00149E  9294               	bcf	3988,1,c	;volatile
  1072                           
  1073                           ;stepper_motor.c: 16: TRISCbits.RC2 = 0;
  1074  0014A0  9494               	bcf	3988,2,c	;volatile
  1075                           
  1076                           ;stepper_motor.c: 17: TRISCbits.RC3 = 0;
  1077  0014A2  9694               	bcf	3988,3,c	;volatile
  1078  0014A4  0012               	return		;funcret
  1079  0014A6                     __end_of_stepper_motor_setup:
  1080                           	opt stack 0
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           intcon	equ	0xFF2
  1086                           postinc0	equ	0xFEE
  1087                           wreg	equ	0xFE8
  1088                           postdec1	equ	0xFE5
  1089                           plusw1	equ	0xFE3
  1090                           fsr1l	equ	0xFE1
  1091                           plusw2	equ	0xFDB
  1092                           status	equ	0xFD8
  1093                           
  1094 ;; *************** function _step_forward *****************
  1095 ;; Defined at:
  1096 ;;		line 20 in file "stepper_motor.c"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;		None
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;		None
  1101 ;; Return value:  Size  Location     Type
  1102 ;;		None               void
  1103 ;; Registers used:
  1104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0
  1110 ;;      Params:         0       0
  1111 ;;      Locals:         0       0
  1112 ;;      Temps:          1       0
  1113 ;;      Totals:         1       0
  1114 ;;Total ram usage:        1 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; This function calls:
  1117 ;;		Nothing
  1118 ;; This function is called by:
  1119 ;;		_main
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123                           	psect	text3
  1124  001512                     __ptext3:
  1125                           	opt stack 0
  1126  001512                     _step_forward:
  1127                           	opt stack 30
  1128                           
  1129                           ;stepper_motor.c: 22: current_state++;
  1130                           
  1131                           ;incstack = 0
  1132  001512  2A1E               	incf	_current_state,f,c
  1133                           
  1134                           ;stepper_motor.c: 23: current_state &= 0x07;
  1135  001514  0E07               	movlw	7
  1136  001516  161E               	andwf	_current_state,f,c
  1137                           
  1138                           ;stepper_motor.c: 25: LATC = (LATC & 0xF0) | output_value[current_state];
  1139  001518  501E               	movf	_current_state,w,c
  1140  00151A  0D01               	mullw	1
  1141  00151C  0E16               	movlw	low _output_value
  1142  00151E  24F3               	addwf	prodl,w,c
  1143  001520  6ED9               	movwf	fsr2l,c
  1144  001522  0E00               	movlw	high _output_value
  1145  001524  20F4               	addwfc	prodh,w,c
  1146  001526  6EDA               	movwf	fsr2h,c
  1147  001528  50DF               	movf	indf2,w,c
  1148  00152A  6E01               	movwf	??_step_forward& (0+255),c
  1149  00152C  508B               	movf	3979,w,c	;volatile
  1150  00152E  0BF0               	andlw	240
  1151  001530  1001               	iorwf	??_step_forward,w,c
  1152  001532  6E8B               	movwf	3979,c	;volatile
  1153  001534  0012               	return		;funcret
  1154  001536                     __end_of_step_forward:
  1155                           	opt stack 0
  1156                           tblptru	equ	0xFF8
  1157                           tblptrh	equ	0xFF7
  1158                           tblptrl	equ	0xFF6
  1159                           tablat	equ	0xFF5
  1160                           prodh	equ	0xFF4
  1161                           prodl	equ	0xFF3
  1162                           intcon	equ	0xFF2
  1163                           postinc0	equ	0xFEE
  1164                           wreg	equ	0xFE8
  1165                           postdec1	equ	0xFE5
  1166                           plusw1	equ	0xFE3
  1167                           fsr1l	equ	0xFE1
  1168                           indf2	equ	0xFDF
  1169                           plusw2	equ	0xFDB
  1170                           fsr2h	equ	0xFDA
  1171                           fsr2l	equ	0xFD9
  1172                           status	equ	0xFD8
  1173                           
  1174 ;; *************** function _step_backward *****************
  1175 ;; Defined at:
  1176 ;;		line 28 in file "stepper_motor.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;		None
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;		None
  1181 ;; Return value:  Size  Location     Type
  1182 ;;		None               void
  1183 ;; Registers used:
  1184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0
  1190 ;;      Params:         0       0
  1191 ;;      Locals:         0       0
  1192 ;;      Temps:          1       0
  1193 ;;      Totals:         1       0
  1194 ;;Total ram usage:        1 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; This function calls:
  1197 ;;		Nothing
  1198 ;; This function is called by:
  1199 ;;		_main
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text4
  1204  0014EE                     __ptext4:
  1205                           	opt stack 0
  1206  0014EE                     _step_backward:
  1207                           	opt stack 30
  1208                           
  1209                           ;stepper_motor.c: 30: current_state--;
  1210                           
  1211                           ;incstack = 0
  1212  0014EE  061E               	decf	_current_state,f,c
  1213                           
  1214                           ;stepper_motor.c: 31: current_state &= 0x07;
  1215  0014F0  0E07               	movlw	7
  1216  0014F2  161E               	andwf	_current_state,f,c
  1217                           
  1218                           ;stepper_motor.c: 33: LATC = (LATC & 0xF0) | output_value[current_state];
  1219  0014F4  501E               	movf	_current_state,w,c
  1220  0014F6  0D01               	mullw	1
  1221  0014F8  0E16               	movlw	low _output_value
  1222  0014FA  24F3               	addwf	prodl,w,c
  1223  0014FC  6ED9               	movwf	fsr2l,c
  1224  0014FE  0E00               	movlw	high _output_value
  1225  001500  20F4               	addwfc	prodh,w,c
  1226  001502  6EDA               	movwf	fsr2h,c
  1227  001504  50DF               	movf	indf2,w,c
  1228  001506  6E01               	movwf	??_step_backward& (0+255),c
  1229  001508  508B               	movf	3979,w,c	;volatile
  1230  00150A  0BF0               	andlw	240
  1231  00150C  1001               	iorwf	??_step_backward,w,c
  1232  00150E  6E8B               	movwf	3979,c	;volatile
  1233  001510  0012               	return		;funcret
  1234  001512                     __end_of_step_backward:
  1235                           	opt stack 0
  1236                           tblptru	equ	0xFF8
  1237                           tblptrh	equ	0xFF7
  1238                           tblptrl	equ	0xFF6
  1239                           tablat	equ	0xFF5
  1240                           prodh	equ	0xFF4
  1241                           prodl	equ	0xFF3
  1242                           intcon	equ	0xFF2
  1243                           postinc0	equ	0xFEE
  1244                           wreg	equ	0xFE8
  1245                           postdec1	equ	0xFE5
  1246                           plusw1	equ	0xFE3
  1247                           fsr1l	equ	0xFE1
  1248                           indf2	equ	0xFDF
  1249                           plusw2	equ	0xFDB
  1250                           fsr2h	equ	0xFDA
  1251                           fsr2l	equ	0xFD9
  1252                           status	equ	0xFD8
  1253                           
  1254 ;; *************** function _setup_timer3 *****************
  1255 ;; Defined at:
  1256 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;  T3CON_reg       1    wreg     unsigned char 
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;  T3CON_reg       1    0[COMRAM] unsigned char 
  1261 ;; Return value:  Size  Location     Type
  1262 ;;		None               void
  1263 ;; Registers used:
  1264 ;;		wreg
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0
  1270 ;;      Params:         0       0
  1271 ;;      Locals:         1       0
  1272 ;;      Temps:          0       0
  1273 ;;      Totals:         1       0
  1274 ;;Total ram usage:        1 bytes
  1275 ;; Hardware stack levels used:    1
  1276 ;; This function calls:
  1277 ;;		Nothing
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text5
  1284  001434                     __ptext5:
  1285                           	opt stack 0
  1286  001434                     _setup_timer3:
  1287                           	opt stack 30
  1288                           
  1289                           ;incstack = 0
  1290                           ;setup_timer3@T3CON_reg stored from wreg
  1291  001434  6E01               	movwf	setup_timer3@T3CON_reg,c
  1292                           
  1293                           ;timers_pic.c: 57: T3CON = T3CON_reg;
  1294  001436  C001  FFB1         	movff	setup_timer3@T3CON_reg,4017	;volatile
  1295  00143A  0012               	return		;funcret
  1296  00143C                     __end_of_setup_timer3:
  1297                           	opt stack 0
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           prodh	equ	0xFF4
  1303                           prodl	equ	0xFF3
  1304                           intcon	equ	0xFF2
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           postdec1	equ	0xFE5
  1308                           plusw1	equ	0xFE3
  1309                           fsr1l	equ	0xFE1
  1310                           indf2	equ	0xFDF
  1311                           plusw2	equ	0xFDB
  1312                           fsr2h	equ	0xFDA
  1313                           fsr2l	equ	0xFD9
  1314                           status	equ	0xFD8
  1315                           
  1316 ;; *************** function _setup_timer0 *****************
  1317 ;; Defined at:
  1318 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  T0CON_reg       1    wreg     unsigned char 
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  T0CON_reg       1    0[COMRAM] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;		None               void
  1325 ;; Registers used:
  1326 ;;		wreg
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMRAM   BANK0
  1332 ;;      Params:         0       0
  1333 ;;      Locals:         1       0
  1334 ;;      Temps:          0       0
  1335 ;;      Totals:         1       0
  1336 ;;Total ram usage:        1 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_main
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text6
  1346  00142C                     __ptext6:
  1347                           	opt stack 0
  1348  00142C                     _setup_timer0:
  1349                           	opt stack 30
  1350                           
  1351                           ;incstack = 0
  1352                           ;setup_timer0@T0CON_reg stored from wreg
  1353  00142C  6E01               	movwf	setup_timer0@T0CON_reg,c
  1354                           
  1355                           ;timers_pic.c: 5: T0CON = T0CON_reg;
  1356  00142E  C001  FFD5         	movff	setup_timer0@T0CON_reg,4053	;volatile
  1357  001432  0012               	return		;funcret
  1358  001434                     __end_of_setup_timer0:
  1359                           	opt stack 0
  1360                           tblptru	equ	0xFF8
  1361                           tblptrh	equ	0xFF7
  1362                           tblptrl	equ	0xFF6
  1363                           tablat	equ	0xFF5
  1364                           prodh	equ	0xFF4
  1365                           prodl	equ	0xFF3
  1366                           intcon	equ	0xFF2
  1367                           postinc0	equ	0xFEE
  1368                           wreg	equ	0xFE8
  1369                           postdec1	equ	0xFE5
  1370                           plusw1	equ	0xFE3
  1371                           fsr1l	equ	0xFE1
  1372                           indf2	equ	0xFDF
  1373                           plusw2	equ	0xFDB
  1374                           fsr2h	equ	0xFDA
  1375                           fsr2l	equ	0xFD9
  1376                           status	equ	0xFD8
  1377                           
  1378 ;; *************** function _set_timer0 *****************
  1379 ;; Defined at:
  1380 ;;		line 8 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  value           2    0[COMRAM] int 
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;		None
  1385 ;; Return value:  Size  Location     Type
  1386 ;;		None               void
  1387 ;; Registers used:
  1388 ;;		None
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMRAM   BANK0
  1394 ;;      Params:         2       0
  1395 ;;      Locals:         0       0
  1396 ;;      Temps:          0       0
  1397 ;;      Totals:         2       0
  1398 ;;Total ram usage:        2 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_main
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text7
  1408  00145A                     __ptext7:
  1409                           	opt stack 0
  1410  00145A                     _set_timer0:
  1411                           	opt stack 30
  1412                           
  1413                           ;timers_pic.c: 10: INTCONbits.TMR0IF = 0;
  1414                           
  1415                           ;incstack = 0
  1416  00145A  94F2               	bcf	intcon,2,c	;volatile
  1417                           
  1418                           ;timers_pic.c: 11: TMR0 = value;
  1419  00145C  C001  FFD6         	movff	set_timer0@value,4054	;volatile
  1420  001460  C002  FFD7         	movff	set_timer0@value+1,4055	;volatile
  1421  001464  0012               	return		;funcret
  1422  001466                     __end_of_set_timer0:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           prodh	equ	0xFF4
  1429                           prodl	equ	0xFF3
  1430                           intcon	equ	0xFF2
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           postdec1	equ	0xFE5
  1434                           plusw1	equ	0xFE3
  1435                           fsr1l	equ	0xFE1
  1436                           indf2	equ	0xFDF
  1437                           plusw2	equ	0xFDB
  1438                           fsr2h	equ	0xFDA
  1439                           fsr2l	equ	0xFD9
  1440                           status	equ	0xFD8
  1441                           
  1442 ;; *************** function _selectOutput *****************
  1443 ;; Defined at:
  1444 ;;		line 64 in file "../TorqueGriper.X/pwm.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  outputs         1    wreg     unsigned char 
  1447 ;;  toggle          1    0[COMRAM] unsigned char 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  outputs         1    2[COMRAM] unsigned char 
  1450 ;; Return value:  Size  Location     Type
  1451 ;;		None               void
  1452 ;; Registers used:
  1453 ;;		wreg, status,2, status,0
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMRAM   BANK0
  1459 ;;      Params:         1       0
  1460 ;;      Locals:         1       0
  1461 ;;      Temps:          1       0
  1462 ;;      Totals:         3       0
  1463 ;;Total ram usage:        3 bytes
  1464 ;; Hardware stack levels used:    1
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_main
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text8
  1473  00190C                     __ptext8:
  1474                           	opt stack 0
  1475  00190C                     _selectOutput:
  1476                           	opt stack 30
  1477                           
  1478                           ;incstack = 0
  1479                           ;selectOutput@outputs stored from wreg
  1480  00190C  6E03               	movwf	selectOutput@outputs,c
  1481                           
  1482                           ;pwm.c: 66: switch (outputs){
  1483  00190E  D03D               	goto	l1842
  1484  001910                     l1830:
  1485                           
  1486                           ;pwm.c: 68: PSTRCON = 0xF0;
  1487  001910  0EF0               	movlw	240
  1488  001912  6EB9               	movwf	4025,c	;volatile
  1489                           
  1490                           ;pwm.c: 69: break;
  1491  001914  0012               	return	
  1492  001916                     l1832:
  1493                           
  1494                           ;pwm.c: 71: PSTRCONbits.STRA = (toggle) ? 1 : 0;
  1495  001916  5001               	movf	selectOutput@toggle,w,c
  1496  001918  B4D8               	btfsc	status,2,c
  1497  00191A  D003               	goto	u1390
  1498  00191C  6A02               	clrf	??_selectOutput& (0+255),c
  1499  00191E  2A02               	incf	??_selectOutput& (0+255),f,c
  1500  001920  D001               	goto	u1408
  1501  001922                     u1390:
  1502  001922  6A02               	clrf	??_selectOutput& (0+255),c
  1503  001924                     u1408:
  1504  001924  50B9               	movf	4025,w,c	;volatile
  1505  001926  1802               	xorwf	??_selectOutput,w,c
  1506  001928  0BFE               	andlw	-2
  1507  00192A  1802               	xorwf	??_selectOutput,w,c
  1508  00192C  6EB9               	movwf	4025,c	;volatile
  1509                           
  1510                           ;pwm.c: 72: break;
  1511  00192E  0012               	return	
  1512  001930                     l1834:
  1513                           
  1514                           ;pwm.c: 74: PSTRCONbits.STRB = (toggle) ? 1 : 0;
  1515  001930  5001               	movf	selectOutput@toggle,w,c
  1516  001932  B4D8               	btfsc	status,2,c
  1517  001934  D003               	goto	u1410
  1518  001936  6A02               	clrf	??_selectOutput& (0+255),c
  1519  001938  2A02               	incf	??_selectOutput& (0+255),f,c
  1520  00193A  D001               	goto	u1428
  1521  00193C                     u1410:
  1522  00193C  6A02               	clrf	??_selectOutput& (0+255),c
  1523  00193E                     u1428:
  1524  00193E  4602               	rlncf	??_selectOutput,f,c
  1525  001940  50B9               	movf	4025,w,c	;volatile
  1526  001942  1802               	xorwf	??_selectOutput,w,c
  1527  001944  0BFD               	andlw	-3
  1528  001946  1802               	xorwf	??_selectOutput,w,c
  1529  001948  6EB9               	movwf	4025,c	;volatile
  1530                           
  1531                           ;pwm.c: 75: break;
  1532  00194A  0012               	return	
  1533  00194C                     l1836:
  1534                           
  1535                           ;pwm.c: 77: PSTRCONbits.STRC = (toggle) ? 1 : 0;
  1536  00194C  5001               	movf	selectOutput@toggle,w,c
  1537  00194E  B4D8               	btfsc	status,2,c
  1538  001950  D003               	goto	u1430
  1539  001952  6A02               	clrf	??_selectOutput& (0+255),c
  1540  001954  2A02               	incf	??_selectOutput& (0+255),f,c
  1541  001956  D001               	goto	u1448
  1542  001958                     u1430:
  1543  001958  6A02               	clrf	??_selectOutput& (0+255),c
  1544  00195A                     u1448:
  1545  00195A  4602               	rlncf	??_selectOutput,f,c
  1546  00195C  4602               	rlncf	??_selectOutput,f,c
  1547  00195E  50B9               	movf	4025,w,c	;volatile
  1548  001960  1802               	xorwf	??_selectOutput,w,c
  1549  001962  0BFB               	andlw	-5
  1550  001964  1802               	xorwf	??_selectOutput,w,c
  1551  001966  6EB9               	movwf	4025,c	;volatile
  1552                           
  1553                           ;pwm.c: 78: break;
  1554  001968  0012               	return	
  1555  00196A                     l1838:
  1556                           
  1557                           ;pwm.c: 80: PSTRCONbits.STRD = (toggle) ? 1 : 0;
  1558  00196A  5001               	movf	selectOutput@toggle,w,c
  1559  00196C  B4D8               	btfsc	status,2,c
  1560  00196E  D003               	goto	u1450
  1561  001970  6A02               	clrf	??_selectOutput& (0+255),c
  1562  001972  2A02               	incf	??_selectOutput& (0+255),f,c
  1563  001974  D001               	goto	u1468
  1564  001976                     u1450:
  1565  001976  6A02               	clrf	??_selectOutput& (0+255),c
  1566  001978                     u1468:
  1567  001978  4602               	rlncf	??_selectOutput,f,c
  1568  00197A  4602               	rlncf	??_selectOutput,f,c
  1569  00197C  4602               	rlncf	??_selectOutput,f,c
  1570  00197E  50B9               	movf	4025,w,c	;volatile
  1571  001980  1802               	xorwf	??_selectOutput,w,c
  1572  001982  0BF7               	andlw	-9
  1573  001984  1802               	xorwf	??_selectOutput,w,c
  1574  001986  6EB9               	movwf	4025,c	;volatile
  1575                           
  1576                           ;pwm.c: 82: }
  1577                           
  1578                           ;pwm.c: 81: break;
  1579  001988  0012               	return	
  1580  00198A                     l1842:
  1581  00198A  5003               	movf	selectOutput@outputs,w,c
  1582                           
  1583                           ; Switch size 1, requested type "space"
  1584                           ; Number of cases is 5, Range of values is 0 to 8
  1585                           ; switch strategies available:
  1586                           ; Name         Instructions Cycles
  1587                           ; simple_byte           16     9 (average)
  1588                           ;	Chosen strategy is simple_byte
  1589  00198C  0A00               	xorlw	0	; case 0
  1590  00198E  B4D8               	btfsc	status,2,c
  1591  001990  D7BF               	goto	l1830
  1592  001992  0A01               	xorlw	1	; case 1
  1593  001994  B4D8               	btfsc	status,2,c
  1594  001996  D7BF               	goto	l1832
  1595  001998  0A03               	xorlw	3	; case 2
  1596  00199A  B4D8               	btfsc	status,2,c
  1597  00199C  D7C9               	goto	l1834
  1598  00199E  0A06               	xorlw	6	; case 4
  1599  0019A0  B4D8               	btfsc	status,2,c
  1600  0019A2  D7D4               	goto	l1836
  1601  0019A4  0A0C               	xorlw	12	; case 8
  1602  0019A6  A4D8               	btfss	status,2,c
  1603  0019A8  0012               	return	
  1604  0019AA  D7DF               	goto	l1838
  1605  0019AC  0012               	return		;funcret
  1606  0019AE                     __end_of_selectOutput:
  1607                           	opt stack 0
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           prodh	equ	0xFF4
  1613                           prodl	equ	0xFF3
  1614                           intcon	equ	0xFF2
  1615                           postinc0	equ	0xFEE
  1616                           wreg	equ	0xFE8
  1617                           postdec1	equ	0xFE5
  1618                           plusw1	equ	0xFE3
  1619                           fsr1l	equ	0xFE1
  1620                           indf2	equ	0xFDF
  1621                           plusw2	equ	0xFDB
  1622                           fsr2h	equ	0xFDA
  1623                           fsr2l	equ	0xFD9
  1624                           status	equ	0xFD8
  1625                           
  1626 ;; *************** function _pmwSingleModeSetUp *****************
  1627 ;; Defined at:
  1628 ;;		line 3 in file "../TorqueGriper.X/pwm.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;  polarity        1    wreg     enum E3665
  1631 ;;  valuePR2        1    4[COMRAM] unsigned char 
  1632 ;;  scaler          1    5[COMRAM] enum E3671
  1633 ;;  outputs         1    6[COMRAM] unsigned char 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  polarity        1    7[COMRAM] enum E3665
  1636 ;; Return value:  Size  Location     Type
  1637 ;;		None               void
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0
  1645 ;;      Params:         3       0
  1646 ;;      Locals:         1       0
  1647 ;;      Temps:          0       0
  1648 ;;      Totals:         4       0
  1649 ;;Total ram usage:        4 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    1
  1652 ;; This function calls:
  1653 ;;		_setPulseWidth
  1654 ;; This function is called by:
  1655 ;;		_main
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text9
  1660  001A54                     __ptext9:
  1661                           	opt stack 0
  1662  001A54                     _pmwSingleModeSetUp:
  1663                           	opt stack 29
  1664                           
  1665                           ;incstack = 0
  1666                           ;pmwSingleModeSetUp@polarity stored from wreg
  1667  001A54  6E08               	movwf	pmwSingleModeSetUp@polarity,c
  1668                           
  1669                           ;pwm.c: 6: T2CONbits.TMR2ON = 1;
  1670  001A56  84CA               	bsf	4042,2,c	;volatile
  1671                           
  1672                           ;pwm.c: 8: switch (scaler) {
  1673  001A58  D009               	goto	l1768
  1674  001A5A                     l1762:
  1675                           
  1676                           ;pwm.c: 10: T2CONbits.T2CKPS = 0x00;
  1677  001A5A  0EFC               	movlw	-4
  1678  001A5C  16CA               	andwf	4042,f,c	;volatile
  1679                           
  1680                           ;pwm.c: 11: break;
  1681  001A5E  D011               	goto	l1770
  1682                           
  1683                           ;pwm.c: 12: case TMRP_4:
  1684  001A60  D000               	goto	l1766
  1685  001A62                     l1766:
  1686                           
  1687                           ;pwm.c: 16: T2CONbits.T2CKPS = 0x11;
  1688  001A62  50CA               	movf	4042,w,c	;volatile
  1689  001A64  0BFC               	andlw	-4
  1690  001A66  0901               	iorlw	1
  1691  001A68  6ECA               	movwf	4042,c	;volatile
  1692                           
  1693                           ;pwm.c: 17: }
  1694  001A6A  D00B               	goto	l1770
  1695  001A6C                     l1768:
  1696  001A6C  5006               	movf	pmwSingleModeSetUp@scaler,w,c
  1697                           
  1698                           ; Switch size 1, requested type "space"
  1699                           ; Number of cases is 3, Range of values is 0 to 2
  1700                           ; switch strategies available:
  1701                           ; Name         Instructions Cycles
  1702                           ; simple_byte           10     6 (average)
  1703                           ;	Chosen strategy is simple_byte
  1704  001A6E  0A00               	xorlw	0	; case 0
  1705  001A70  B4D8               	btfsc	status,2,c
  1706  001A72  D7F3               	goto	l1762
  1707  001A74  0A01               	xorlw	1	; case 1
  1708  001A76  B4D8               	btfsc	status,2,c
  1709  001A78  D7F4               	goto	l1766
  1710  001A7A  0A03               	xorlw	3	; case 2
  1711  001A7C  B4D8               	btfsc	status,2,c
  1712  001A7E  D7F1               	goto	l1766
  1713  001A80  D000               	goto	l1770
  1714  001A82                     l1770:
  1715                           
  1716                           ;pwm.c: 19: CCP1CONbits.P1M = 0x00;
  1717  001A82  0E3F               	movlw	-193
  1718  001A84  16BD               	andwf	4029,f,c	;volatile
  1719                           
  1720                           ;pwm.c: 21: switch (polarity) {
  1721  001A86  D012               	goto	l1778
  1722  001A88                     l1772:
  1723                           
  1724                           ;pwm.c: 23: CCP1CONbits.CCP1M = 0b1100;
  1725  001A88  50BD               	movf	4029,w,c	;volatile
  1726  001A8A  0BF0               	andlw	-16
  1727  001A8C  090C               	iorlw	12
  1728  001A8E  D007               	goto	L3
  1729  001A90                     l1774:
  1730                           
  1731                           ;pwm.c: 26: CCP1CONbits.CCP1M = 0b1101;
  1732  001A90  50BD               	movf	4029,w,c	;volatile
  1733  001A92  0BF0               	andlw	-16
  1734  001A94  090D               	iorlw	13
  1735  001A96  D003               	goto	L3
  1736  001A98                     l1776:
  1737                           
  1738                           ;pwm.c: 29: CCP1CONbits.CCP1M = 0b1110;
  1739  001A98  50BD               	movf	4029,w,c	;volatile
  1740  001A9A  0BF0               	andlw	-16
  1741  001A9C  090E               	iorlw	14
  1742  001A9E                     L3:
  1743  001A9E  6EBD               	movwf	4029,c	;volatile
  1744                           
  1745                           ;pwm.c: 30: break;
  1746  001AA0  D012               	goto	l412
  1747  001AA2                     l415:
  1748                           
  1749                           ;pwm.c: 32: CCP1CONbits.CCP1M = 0b1111;
  1750  001AA2  80BD               	bsf	4029,0,c	;volatile
  1751  001AA4  82BD               	bsf	4029,1,c	;volatile
  1752  001AA6  84BD               	bsf	4029,2,c	;volatile
  1753  001AA8  86BD               	bsf	4029,3,c	;volatile
  1754                           
  1755                           ;pwm.c: 33: }
  1756  001AAA  D00D               	goto	l412
  1757  001AAC                     l1778:
  1758  001AAC  5008               	movf	pmwSingleModeSetUp@polarity,w,c
  1759                           
  1760                           ; Switch size 1, requested type "space"
  1761                           ; Number of cases is 4, Range of values is 0 to 3
  1762                           ; switch strategies available:
  1763                           ; Name         Instructions Cycles
  1764                           ; simple_byte           13     7 (average)
  1765                           ;	Chosen strategy is simple_byte
  1766  001AAE  0A00               	xorlw	0	; case 0
  1767  001AB0  B4D8               	btfsc	status,2,c
  1768  001AB2  D7EA               	goto	l1772
  1769  001AB4  0A01               	xorlw	1	; case 1
  1770  001AB6  B4D8               	btfsc	status,2,c
  1771  001AB8  D7EB               	goto	l1774
  1772  001ABA  0A03               	xorlw	3	; case 2
  1773  001ABC  B4D8               	btfsc	status,2,c
  1774  001ABE  D7EC               	goto	l1776
  1775  001AC0  0A01               	xorlw	1	; case 3
  1776  001AC2  B4D8               	btfsc	status,2,c
  1777  001AC4  D7EE               	goto	l415
  1778  001AC6                     l412:
  1779                           
  1780                           ;pwm.c: 35: PSTRCONbits.STRSYNC = 1;
  1781  001AC6  88B9               	bsf	4025,4,c	;volatile
  1782                           
  1783                           ;pwm.c: 37: if (outputs & 0x01) {
  1784  001AC8  A007               	btfss	pmwSingleModeSetUp@outputs,0,c
  1785  001ACA  D002               	goto	l416
  1786                           
  1787                           ;pwm.c: 38: LATCbits.LATC5 = 0;
  1788  001ACC  9A8B               	bcf	3979,5,c	;volatile
  1789                           
  1790                           ;pwm.c: 39: TRISCbits.RC5 = 0;
  1791  001ACE  9A94               	bcf	3988,5,c	;volatile
  1792  001AD0                     l416:
  1793                           
  1794                           ;pwm.c: 40: }
  1795                           ;pwm.c: 41: if (outputs & 0x02) {
  1796  001AD0  A207               	btfss	pmwSingleModeSetUp@outputs,1,c
  1797  001AD2  D002               	goto	l417
  1798                           
  1799                           ;pwm.c: 42: LATCbits.LATC4 = 0;
  1800  001AD4  988B               	bcf	3979,4,c	;volatile
  1801                           
  1802                           ;pwm.c: 43: TRISCbits.RC4 = 0;
  1803  001AD6  9894               	bcf	3988,4,c	;volatile
  1804  001AD8                     l417:
  1805                           
  1806                           ;pwm.c: 44: }
  1807                           ;pwm.c: 45: if (outputs & 0x04) {
  1808  001AD8  A407               	btfss	pmwSingleModeSetUp@outputs,2,c
  1809  001ADA  D002               	goto	l418
  1810                           
  1811                           ;pwm.c: 46: LATCbits.LATC3 = 0;
  1812  001ADC  968B               	bcf	3979,3,c	;volatile
  1813                           
  1814                           ;pwm.c: 47: TRISCbits.RC3 = 0;
  1815  001ADE  9694               	bcf	3988,3,c	;volatile
  1816  001AE0                     l418:
  1817                           
  1818                           ;pwm.c: 48: }
  1819                           ;pwm.c: 49: if (outputs & 0x08) {
  1820  001AE0  A607               	btfss	pmwSingleModeSetUp@outputs,3,c
  1821  001AE2  D003               	goto	l1788
  1822                           
  1823                           ;pwm.c: 50: LATCbits.LATC2 = 0;
  1824  001AE4  948B               	bcf	3979,2,c	;volatile
  1825                           
  1826                           ;pwm.c: 51: TRISCbits.RC2 = 0;
  1827  001AE6  9494               	bcf	3988,2,c	;volatile
  1828  001AE8  D000               	goto	l1788
  1829  001AEA                     l1788:
  1830                           
  1831                           ;pwm.c: 52: }
  1832                           ;pwm.c: 54: setPulseWidth(0);
  1833  001AEA  0E00               	movlw	0
  1834  001AEC  6E02               	movwf	setPulseWidth@width+1,c
  1835  001AEE  0E00               	movlw	0
  1836  001AF0  6E01               	movwf	setPulseWidth@width,c
  1837  001AF2  EC9B  F00A         	call	_setPulseWidth	;wreg free
  1838                           
  1839                           ;pwm.c: 55: PR2 = valuePR2;
  1840  001AF6  C005  FFCB         	movff	pmwSingleModeSetUp@valuePR2,4043	;volatile
  1841  001AFA  0012               	return		;funcret
  1842  001AFC                     __end_of_pmwSingleModeSetUp:
  1843                           	opt stack 0
  1844                           tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           prodh	equ	0xFF4
  1849                           prodl	equ	0xFF3
  1850                           intcon	equ	0xFF2
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           postdec1	equ	0xFE5
  1854                           plusw1	equ	0xFE3
  1855                           fsr1l	equ	0xFE1
  1856                           indf2	equ	0xFDF
  1857                           plusw2	equ	0xFDB
  1858                           fsr2h	equ	0xFDA
  1859                           fsr2l	equ	0xFD9
  1860                           status	equ	0xFD8
  1861                           
  1862 ;; *************** function _setPulseWidth *****************
  1863 ;; Defined at:
  1864 ;;		line 58 in file "../TorqueGriper.X/pwm.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;  width           2    0[COMRAM] unsigned int 
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;		None
  1869 ;; Return value:  Size  Location     Type
  1870 ;;		None               void
  1871 ;; Registers used:
  1872 ;;		wreg, status,2, status,0
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0
  1878 ;;      Params:         2       0
  1879 ;;      Locals:         0       0
  1880 ;;      Temps:          2       0
  1881 ;;      Totals:         4       0
  1882 ;;Total ram usage:        4 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; This function calls:
  1885 ;;		Nothing
  1886 ;; This function is called by:
  1887 ;;		_main
  1888 ;;		_pmwSingleModeSetUp
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text10
  1893  001536                     __ptext10:
  1894                           	opt stack 0
  1895  001536                     _setPulseWidth:
  1896                           	opt stack 30
  1897                           
  1898                           ;pwm.c: 60: CCP1CONbits.DC1B = width;
  1899                           
  1900                           ;incstack = 0
  1901  001536  C001  F003         	movff	setPulseWidth@width,??_setPulseWidth
  1902  00153A  3A03               	swapf	??_setPulseWidth,f,c
  1903  00153C  50BD               	movf	4029,w,c	;volatile
  1904  00153E  1803               	xorwf	??_setPulseWidth,w,c
  1905  001540  0BCF               	andlw	-49
  1906  001542  1803               	xorwf	??_setPulseWidth,w,c
  1907  001544  6EBD               	movwf	4029,c	;volatile
  1908                           
  1909                           ;pwm.c: 61: CCPR1L = width >> 2;
  1910  001546  C001  F003         	movff	setPulseWidth@width,??_setPulseWidth
  1911  00154A  C002  F004         	movff	setPulseWidth@width+1,??_setPulseWidth+1
  1912  00154E  90D8               	bcf	status,0,c
  1913  001550  3204               	rrcf	??_setPulseWidth+1,f,c
  1914  001552  3203               	rrcf	??_setPulseWidth,f,c
  1915  001554  90D8               	bcf	status,0,c
  1916  001556  3204               	rrcf	??_setPulseWidth+1,f,c
  1917  001558  3203               	rrcf	??_setPulseWidth,f,c
  1918  00155A  5003               	movf	??_setPulseWidth,w,c
  1919  00155C  6EBE               	movwf	4030,c	;volatile
  1920  00155E  0012               	return		;funcret
  1921  001560                     __end_of_setPulseWidth:
  1922                           	opt stack 0
  1923                           tblptru	equ	0xFF8
  1924                           tblptrh	equ	0xFF7
  1925                           tblptrl	equ	0xFF6
  1926                           tablat	equ	0xFF5
  1927                           prodh	equ	0xFF4
  1928                           prodl	equ	0xFF3
  1929                           intcon	equ	0xFF2
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           postdec1	equ	0xFE5
  1933                           plusw1	equ	0xFE3
  1934                           fsr1l	equ	0xFE1
  1935                           indf2	equ	0xFDF
  1936                           plusw2	equ	0xFDB
  1937                           fsr2h	equ	0xFDA
  1938                           fsr2l	equ	0xFD9
  1939                           status	equ	0xFD8
  1940                           
  1941 ;; *************** function _load_buffer *****************
  1942 ;; Defined at:
  1943 ;;		line 89 in file "main.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;  buffer          2    5[COMRAM] PTR struct circular_buff
  1946 ;;		 -> main@send(34), 
  1947 ;;  str             2    7[COMRAM] PTR unsigned char 
  1948 ;;		 -> main@name(3), 
  1949 ;;  size            2    9[COMRAM] int 
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  i               2   12[COMRAM] int 
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      unsigned char 
  1954 ;; Registers used:
  1955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0
  1961 ;;      Params:         6       0
  1962 ;;      Locals:         2       0
  1963 ;;      Temps:          1       0
  1964 ;;      Totals:         9       0
  1965 ;;Total ram usage:        9 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    1
  1968 ;; This function calls:
  1969 ;;		_buffer_push
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text11
  1976  00186C                     __ptext11:
  1977                           	opt stack 0
  1978  00186C                     _load_buffer:
  1979                           	opt stack 29
  1980                           
  1981                           ;main.c: 91: int i;
  1982                           ;main.c: 92: if (size < 0) {
  1983                           
  1984                           ;incstack = 0
  1985  00186C  AE0B               	btfss	load_buffer@size+1,7,c
  1986  00186E  D026               	goto	l1860
  1987                           
  1988                           ;main.c: 93: for (i = 0; str[i] != 0; i++) {
  1989  001870  0E00               	movlw	0
  1990  001872  6E0E               	movwf	load_buffer@i+1,c
  1991  001874  0E00               	movlw	0
  1992  001876  6E0D               	movwf	load_buffer@i,c
  1993  001878  D016               	goto	l1858
  1994  00187A                     l1852:
  1995                           
  1996                           ;main.c: 94: if (buffer_push(buffer, str[i]))
  1997  00187A  C006  F001         	movff	load_buffer@buffer,buffer_push@buffer
  1998  00187E  C007  F002         	movff	load_buffer@buffer+1,buffer_push@buffer+1
  1999  001882  500D               	movf	load_buffer@i,w,c
  2000  001884  2408               	addwf	load_buffer@str,w,c
  2001  001886  6ED9               	movwf	fsr2l,c
  2002  001888  500E               	movf	load_buffer@i+1,w,c
  2003  00188A  2009               	addwfc	load_buffer@str+1,w,c
  2004  00188C  6EDA               	movwf	fsr2h,c
  2005  00188E  50DF               	movf	indf2,w,c
  2006  001890  6E03               	movwf	buffer_push@byte,c
  2007  001892  ECF6  F00B         	call	_buffer_push	;wreg free
  2008  001896  0900               	iorlw	0
  2009  001898  A4D8               	btfss	status,2,c
  2010  00189A  0012               	return	
  2011  00189C  D001               	goto	l1856
  2012                           
  2013                           ;main.c: 95: return 0;
  2014                           ;	Return value of _load_buffer is never used
  2015  00189E  0012               	return	
  2016  0018A0                     l1856:
  2017  0018A0  4A0D               	infsnz	load_buffer@i,f,c
  2018  0018A2  2A0E               	incf	load_buffer@i+1,f,c
  2019  0018A4  D000               	goto	l1858
  2020  0018A6                     l1858:
  2021  0018A6  500D               	movf	load_buffer@i,w,c
  2022  0018A8  2408               	addwf	load_buffer@str,w,c
  2023  0018AA  6ED9               	movwf	fsr2l,c
  2024  0018AC  500E               	movf	load_buffer@i+1,w,c
  2025  0018AE  2009               	addwfc	load_buffer@str+1,w,c
  2026  0018B0  6EDA               	movwf	fsr2h,c
  2027  0018B2  50DF               	movf	indf2,w,c
  2028  0018B4  B4D8               	btfsc	status,2,c
  2029  0018B6  0012               	return	
  2030  0018B8  D7E0               	goto	l1852
  2031                           
  2032                           ;main.c: 96: }
  2033                           ;main.c: 97: } else {
  2034  0018BA  0012               	return	
  2035  0018BC                     l1860:
  2036                           
  2037                           ;main.c: 98: for (i = 0; i < size; i++) {
  2038  0018BC  0E00               	movlw	0
  2039  0018BE  6E0E               	movwf	load_buffer@i+1,c
  2040  0018C0  0E00               	movlw	0
  2041  0018C2  6E0D               	movwf	load_buffer@i,c
  2042  0018C4  D016               	goto	l1868
  2043  0018C6                     l1862:
  2044                           
  2045                           ;main.c: 99: if (buffer_push(buffer, str[i]))
  2046  0018C6  C006  F001         	movff	load_buffer@buffer,buffer_push@buffer
  2047  0018CA  C007  F002         	movff	load_buffer@buffer+1,buffer_push@buffer+1
  2048  0018CE  500D               	movf	load_buffer@i,w,c
  2049  0018D0  2408               	addwf	load_buffer@str,w,c
  2050  0018D2  6ED9               	movwf	fsr2l,c
  2051  0018D4  500E               	movf	load_buffer@i+1,w,c
  2052  0018D6  2009               	addwfc	load_buffer@str+1,w,c
  2053  0018D8  6EDA               	movwf	fsr2h,c
  2054  0018DA  50DF               	movf	indf2,w,c
  2055  0018DC  6E03               	movwf	buffer_push@byte,c
  2056  0018DE  ECF6  F00B         	call	_buffer_push	;wreg free
  2057  0018E2  0900               	iorlw	0
  2058  0018E4  A4D8               	btfss	status,2,c
  2059  0018E6  0012               	return	
  2060  0018E8  D001               	goto	l1866
  2061                           
  2062                           ;main.c: 100: return 0;
  2063                           ;	Return value of _load_buffer is never used
  2064  0018EA  0012               	return	
  2065  0018EC                     l1866:
  2066  0018EC  4A0D               	infsnz	load_buffer@i,f,c
  2067  0018EE  2A0E               	incf	load_buffer@i+1,f,c
  2068  0018F0  D000               	goto	l1868
  2069  0018F2                     l1868:
  2070  0018F2  500A               	movf	load_buffer@size,w,c
  2071  0018F4  5C0D               	subwf	load_buffer@i,w,c
  2072  0018F6  500E               	movf	load_buffer@i+1,w,c
  2073  0018F8  0A80               	xorlw	128
  2074  0018FA  6E0C               	movwf	??_load_buffer& (0+255),c
  2075  0018FC  500B               	movf	load_buffer@size+1,w,c
  2076  0018FE  0A80               	xorlw	128
  2077  001900  580C               	subwfb	??_load_buffer& (0+255),w,c
  2078  001902  B0D8               	btfsc	status,0,c
  2079  001904  0012               	return	
  2080  001906  D7DF               	goto	l1862
  2081  001908  0012               	return	
  2082                           
  2083                           ;main.c: 101: }
  2084                           ;main.c: 102: }
  2085                           ;main.c: 104: return 1;
  2086                           ;	Return value of _load_buffer is never used
  2087  00190A  0012               	return		;funcret
  2088  00190C                     __end_of_load_buffer:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           prodh	equ	0xFF4
  2095                           prodl	equ	0xFF3
  2096                           intcon	equ	0xFF2
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           postdec1	equ	0xFE5
  2100                           plusw1	equ	0xFE3
  2101                           fsr1l	equ	0xFE1
  2102                           indf2	equ	0xFDF
  2103                           plusw2	equ	0xFDB
  2104                           fsr2h	equ	0xFDA
  2105                           fsr2l	equ	0xFD9
  2106                           status	equ	0xFD8
  2107                           
  2108 ;; *************** function _espi_setup *****************
  2109 ;; Defined at:
  2110 ;;		line 27 in file "../TorqueGriper.X/extended_spi.c"
  2111 ;; Parameters:    Size  Location     Type
  2112 ;;  mode            1    wreg     unsigned char 
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;  mode            1    2[COMRAM] unsigned char 
  2115 ;; Return value:  Size  Location     Type
  2116 ;;		None               void
  2117 ;; Registers used:
  2118 ;;		wreg, status,2, status,0, cstack
  2119 ;; Tracked objects:
  2120 ;;		On entry : 0/0
  2121 ;;		On exit  : 0/0
  2122 ;;		Unchanged: 0/0
  2123 ;; Data sizes:     COMRAM   BANK0
  2124 ;;      Params:         0       0
  2125 ;;      Locals:         1       0
  2126 ;;      Temps:          0       0
  2127 ;;      Totals:         1       0
  2128 ;;Total ram usage:        1 bytes
  2129 ;; Hardware stack levels used:    1
  2130 ;; Hardware stack levels required when called:    1
  2131 ;; This function calls:
  2132 ;;		_setup_spi
  2133 ;; This function is called by:
  2134 ;;		_main
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text12
  2139  001560                     __ptext12:
  2140                           	opt stack 0
  2141  001560                     _espi_setup:
  2142                           	opt stack 29
  2143                           
  2144                           ;incstack = 0
  2145                           ;espi_setup@mode stored from wreg
  2146  001560  6E03               	movwf	espi_setup@mode,c
  2147                           
  2148                           ;extended_spi.c: 29: setup_spi(0, 0x20 | 0x10 | mode);
  2149  001562  5003               	movf	espi_setup@mode,w,c
  2150  001564  0930               	iorlw	48
  2151  001566  6E01               	movwf	setup_spi@SSPCON1_reg,c
  2152  001568  0E00               	movlw	0
  2153  00156A  ECEA  F00A         	call	_setup_spi
  2154                           
  2155                           ;extended_spi.c: 31: ANSELbits.ANS2 = 0;
  2156  00156E  947E               	bcf	3966,2,c	;volatile
  2157                           
  2158                           ;extended_spi.c: 32: ANSELHbits.ANS8 = 0;
  2159  001570  907F               	bcf	3967,0,c	;volatile
  2160                           
  2161                           ;extended_spi.c: 34: if (mode == 0x04 || mode == 0x05) {
  2162  001572  0E04               	movlw	4
  2163  001574  1803               	xorwf	espi_setup@mode,w,c
  2164  001576  B4D8               	btfsc	status,2,c
  2165  001578  D004               	goto	l224
  2166  00157A  0E05               	movlw	5
  2167  00157C  1803               	xorwf	espi_setup@mode,w,c
  2168  00157E  A4D8               	btfss	status,2,c
  2169  001580  D004               	goto	l222
  2170  001582                     l224:
  2171                           
  2172                           ;extended_spi.c: 35: TRISAbits.RA2 = 0;
  2173  001582  9492               	bcf	3986,2,c	;volatile
  2174                           
  2175                           ;extended_spi.c: 36: LATAbits.LATA2 = 0;
  2176  001584  9489               	bcf	3977,2,c	;volatile
  2177                           
  2178                           ;extended_spi.c: 37: TRISCbits.RC6 = 1;
  2179  001586  8C94               	bsf	3988,6,c	;volatile
  2180                           
  2181                           ;extended_spi.c: 38: } else {
  2182  001588  0012               	return	
  2183  00158A                     l222:
  2184                           
  2185                           ;extended_spi.c: 39: TRISAbits.RA2 = 1;
  2186  00158A  8492               	bsf	3986,2,c	;volatile
  2187                           
  2188                           ;extended_spi.c: 40: TRISCbits.RC6 = 0;
  2189  00158C  9C94               	bcf	3988,6,c	;volatile
  2190                           
  2191                           ;extended_spi.c: 41: LATCbits.LATC6 = 0;
  2192  00158E  9C8B               	bcf	3979,6,c	;volatile
  2193                           
  2194                           ;extended_spi.c: 42: INTCON2bits.INTEDG2 = 1;
  2195  001590  88F1               	bsf	intcon2,4,c	;volatile
  2196                           
  2197                           ;extended_spi.c: 43: INTCON3bits.INT2E = 1;
  2198  001592  88F0               	bsf	intcon3,4,c	;volatile
  2199  001594  0012               	return	
  2200  001596  0012               	return		;funcret
  2201  001598                     __end_of_espi_setup:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           tblptrh	equ	0xFF7
  2205                           tblptrl	equ	0xFF6
  2206                           tablat	equ	0xFF5
  2207                           prodh	equ	0xFF4
  2208                           prodl	equ	0xFF3
  2209                           intcon	equ	0xFF2
  2210                           intcon2	equ	0xFF1
  2211                           intcon3	equ	0xFF0
  2212                           postinc0	equ	0xFEE
  2213                           wreg	equ	0xFE8
  2214                           postdec1	equ	0xFE5
  2215                           plusw1	equ	0xFE3
  2216                           fsr1l	equ	0xFE1
  2217                           indf2	equ	0xFDF
  2218                           plusw2	equ	0xFDB
  2219                           fsr2h	equ	0xFDA
  2220                           fsr2l	equ	0xFD9
  2221                           status	equ	0xFD8
  2222                           
  2223 ;; *************** function _setup_spi *****************
  2224 ;; Defined at:
  2225 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;  SSPSTAT_reg     1    wreg     unsigned char 
  2228 ;;  SSPCON1_reg     1    0[COMRAM] unsigned char 
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;  SSPSTAT_reg     1    1[COMRAM] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;		None               void
  2233 ;; Registers used:
  2234 ;;		wreg, status,2, status,0
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0
  2240 ;;      Params:         1       0
  2241 ;;      Locals:         1       0
  2242 ;;      Temps:          0       0
  2243 ;;      Totals:         2       0
  2244 ;;Total ram usage:        2 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; This function calls:
  2247 ;;		Nothing
  2248 ;; This function is called by:
  2249 ;;		_espi_setup
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           	psect	text13
  2254  0015D4                     __ptext13:
  2255                           	opt stack 0
  2256  0015D4                     _setup_spi:
  2257                           	opt stack 29
  2258                           
  2259                           ;incstack = 0
  2260                           ;setup_spi@SSPSTAT_reg stored from wreg
  2261  0015D4  6E02               	movwf	setup_spi@SSPSTAT_reg,c
  2262                           
  2263                           ;spi_pic.c: 14: TRISCbits.RC7 = 0;
  2264  0015D6  9E94               	bcf	3988,7,c	;volatile
  2265                           
  2266                           ;spi_pic.c: 15: ANSELHbits.ANS10 = 0;
  2267  0015D8  947F               	bcf	3967,2,c	;volatile
  2268                           
  2269                           ;spi_pic.c: 16: TRISBbits.RB4 = 1;
  2270  0015DA  8893               	bsf	3987,4,c	;volatile
  2271                           
  2272                           ;spi_pic.c: 18: SSPSTAT = SSPSTAT_reg;
  2273  0015DC  C002  FFC7         	movff	setup_spi@SSPSTAT_reg,4039	;volatile
  2274                           
  2275                           ;spi_pic.c: 19: SSPCON1 = SSPCON1_reg;
  2276  0015E0  C001  FFC6         	movff	setup_spi@SSPCON1_reg,4038	;volatile
  2277                           
  2278                           ;spi_pic.c: 21: if (SSPCON1bits.SSPM == 0x05 || SSPCON1bits.SSPM == 0x04) {
  2279  0015E4  50C6               	movf	4038,w,c	;volatile
  2280  0015E6  0B0F               	andlw	15
  2281  0015E8  0A05               	xorlw	5
  2282  0015EA  B4D8               	btfsc	status,2,c
  2283  0015EC  D005               	goto	l106
  2284  0015EE  50C6               	movf	4038,w,c	;volatile
  2285  0015F0  0B0F               	andlw	15
  2286  0015F2  0A04               	xorlw	4
  2287  0015F4  A4D8               	btfss	status,2,c
  2288  0015F6  D00A               	goto	l104
  2289  0015F8                     l106:
  2290                           
  2291                           ;spi_pic.c: 22: TRISBbits.RB6 = 1;
  2292  0015F8  8C93               	bsf	3987,6,c	;volatile
  2293                           
  2294                           ;spi_pic.c: 23: if (SSPCON1bits.SSPM == 0x04) {
  2295  0015FA  50C6               	movf	4038,w,c	;volatile
  2296  0015FC  0B0F               	andlw	15
  2297  0015FE  0A04               	xorlw	4
  2298  001600  A4D8               	btfss	status,2,c
  2299  001602  D002               	goto	l107
  2300                           
  2301                           ;spi_pic.c: 24: ANSELHbits.ANS8 = 0;
  2302  001604  907F               	bcf	3967,0,c	;volatile
  2303                           
  2304                           ;spi_pic.c: 25: TRISCbits.RC6 = 1;
  2305  001606  8C94               	bsf	3988,6,c	;volatile
  2306  001608                     l107:
  2307                           
  2308                           ;spi_pic.c: 26: }
  2309                           ;spi_pic.c: 27: SSPSTATbits.SMP = 0;
  2310  001608  9EC7               	bcf	4039,7,c	;volatile
  2311                           
  2312                           ;spi_pic.c: 28: } else {
  2313  00160A  0012               	return	
  2314  00160C                     l104:
  2315                           
  2316                           ;spi_pic.c: 29: TRISBbits.RB6 = 0;
  2317  00160C  9C93               	bcf	3987,6,c	;volatile
  2318  00160E  0012               	return	
  2319  001610  0012               	return		;funcret
  2320  001612                     __end_of_setup_spi:
  2321                           	opt stack 0
  2322                           tblptru	equ	0xFF8
  2323                           tblptrh	equ	0xFF7
  2324                           tblptrl	equ	0xFF6
  2325                           tablat	equ	0xFF5
  2326                           prodh	equ	0xFF4
  2327                           prodl	equ	0xFF3
  2328                           intcon	equ	0xFF2
  2329                           intcon2	equ	0xFF1
  2330                           intcon3	equ	0xFF0
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           plusw1	equ	0xFE3
  2335                           fsr1l	equ	0xFE1
  2336                           indf2	equ	0xFDF
  2337                           plusw2	equ	0xFDB
  2338                           fsr2h	equ	0xFDA
  2339                           fsr2l	equ	0xFD9
  2340                           status	equ	0xFD8
  2341                           
  2342 ;; *************** function _espi_master_send *****************
  2343 ;; Defined at:
  2344 ;;		line 138 in file "../TorqueGriper.X/extended_spi.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;  buffer          2    7[COMRAM] PTR struct circular_buff
  2347 ;;		 -> main@send(34), 
  2348 ;;  timer_start     2    9[COMRAM] PTR FTN(int ,)void 
  2349 ;;		 -> set_timer3(0), 
  2350 ;;  timer           2   11[COMRAM] PTR FTN()unsigned char 
  2351 ;;		 -> timer3_up(1), 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  byte_to_send    2   15[COMRAM] unsigned int 
  2354 ;;  byte_2          1   18[COMRAM] unsigned char 
  2355 ;;  byte_1          1   17[COMRAM] unsigned char 
  2356 ;;  received_2      1   14[COMRAM] unsigned char 
  2357 ;;  received_1      1   13[COMRAM] unsigned char 
  2358 ;; Return value:  Size  Location     Type
  2359 ;;		None               void
  2360 ;; Registers used:
  2361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMRAM   BANK0
  2367 ;;      Params:         6       0
  2368 ;;      Locals:         6       0
  2369 ;;      Temps:          0       0
  2370 ;;      Totals:        12       0
  2371 ;;Total ram usage:       12 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    2
  2374 ;; This function calls:
  2375 ;;		_buffer_count
  2376 ;;		_buffer_peek
  2377 ;;		_buffer_pop
  2378 ;;		_encode_data
  2379 ;;		_send_delay
  2380 ;;		_spi_send_get_byte
  2381 ;;		_wait_pulse
  2382 ;; This function is called by:
  2383 ;;		_main
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text14
  2388  001AFC                     __ptext14:
  2389                           	opt stack 0
  2390  001AFC                     _espi_master_send:
  2391                           	opt stack 28
  2392                           
  2393                           ;extended_spi.c: 142: if (buffer_count(buffer)) {
  2394                           
  2395                           ;incstack = 0
  2396  001AFC  C008  F001         	movff	espi_master_send@buffer,buffer_count@buffer
  2397  001B00  C009  F002         	movff	espi_master_send@buffer+1,buffer_count@buffer+1
  2398  001B04  EC41  F00A         	call	_buffer_count	;wreg free
  2399  001B08  0900               	iorlw	0
  2400  001B0A  B4D8               	btfsc	status,2,c
  2401  001B0C  0012               	return	
  2402                           
  2403                           ;extended_spi.c: 143: spi_send_get_byte(0x10);
  2404  001B0E  0E10               	movlw	16
  2405  001B10  EC53  F00A         	call	_spi_send_get_byte
  2406                           
  2407                           ;extended_spi.c: 145: wait_pulse(0x10, timer_start, timer);
  2408  001B14  C00A  F003         	movff	espi_master_send@timer_start,wait_pulse@timer_start
  2409  001B18  C00B  F004         	movff	espi_master_send@timer_start+1,wait_pulse@timer_start+1
  2410  001B1C  C00C  F005         	movff	espi_master_send@timer,wait_pulse@timer
  2411  001B20  C00D  F006         	movff	espi_master_send@timer+1,wait_pulse@timer+1
  2412  001B24  0E10               	movlw	16
  2413  001B26  EC81  F00B         	call	_wait_pulse
  2414  001B2A  D000               	goto	l1876
  2415  001B2C                     l1876:
  2416                           
  2417                           ;extended_spi.c: 154: byte_to_send = buffer_peek(buffer);
  2418  001B2C  C008  F001         	movff	espi_master_send@buffer,buffer_peek@buffer
  2419  001B30  C009  F002         	movff	espi_master_send@buffer+1,buffer_peek@buffer+1
  2420  001B34  EC2C  F00B         	call	_buffer_peek	;wreg free
  2421  001B38  C001  F010         	movff	?_buffer_peek,espi_master_send@byte_to_send
  2422  001B3C  C002  F011         	movff	?_buffer_peek+1,espi_master_send@byte_to_send+1
  2423                           
  2424                           ;extended_spi.c: 155: if (byte_to_send == -1)
  2425  001B40  2810               	incf	espi_master_send@byte_to_send,w,c
  2426  001B42  E105               	bnz	l1882
  2427  001B44  2811               	incf	espi_master_send@byte_to_send+1,w,c
  2428  001B46  B4D8               	btfsc	status,2,c
  2429  001B48  D02C               	goto	l1902
  2430  001B4A  D001               	goto	l1882
  2431                           
  2432                           ;extended_spi.c: 156: break;
  2433  001B4C  D02A               	goto	l1902
  2434  001B4E                     l1882:
  2435                           
  2436                           ;extended_spi.c: 157: encode_data(byte_to_send, &byte_1, &byte_2);
  2437  001B4E  0E12               	movlw	low espi_master_send@byte_1
  2438  001B50  6E01               	movwf	encode_data@byte_1,c
  2439  001B52  0E00               	movlw	high espi_master_send@byte_1
  2440  001B54  6E02               	movwf	encode_data@byte_1+1,c
  2441  001B56  0E13               	movlw	low espi_master_send@byte_2
  2442  001B58  6E03               	movwf	encode_data@byte_2,c
  2443  001B5A  0E00               	movlw	high espi_master_send@byte_2
  2444  001B5C  6E04               	movwf	encode_data@byte_2+1,c
  2445  001B5E  5010               	movf	espi_master_send@byte_to_send,w,c
  2446  001B60  EC09  F00B         	call	_encode_data
  2447                           
  2448                           ;extended_spi.c: 159: received_1 = spi_send_get_byte(byte_1);
  2449  001B64  5012               	movf	espi_master_send@byte_1,w,c
  2450  001B66  EC53  F00A         	call	_spi_send_get_byte
  2451  001B6A  6E0E               	movwf	espi_master_send@received_1,c
  2452                           
  2453                           ;extended_spi.c: 160: send_delay();
  2454  001B6C  EC22  F00A         	call	_send_delay	;wreg free
  2455                           
  2456                           ;extended_spi.c: 161: if (received_1 == 0x30)
  2457  001B70  0E30               	movlw	48
  2458  001B72  180E               	xorwf	espi_master_send@received_1,w,c
  2459  001B74  B4D8               	btfsc	status,2,c
  2460  001B76  0012               	return	
  2461  001B78  D001               	goto	l1892
  2462                           
  2463                           ;extended_spi.c: 162: return;
  2464  001B7A  0012               	return	
  2465  001B7C                     l1892:
  2466                           
  2467                           ;extended_spi.c: 164: received_2 = spi_send_get_byte(byte_2);
  2468  001B7C  5013               	movf	espi_master_send@byte_2,w,c
  2469  001B7E  EC53  F00A         	call	_spi_send_get_byte
  2470  001B82  6E0F               	movwf	espi_master_send@received_2,c
  2471                           
  2472                           ;extended_spi.c: 165: send_delay();
  2473  001B84  EC22  F00A         	call	_send_delay	;wreg free
  2474                           
  2475                           ;extended_spi.c: 166: if (received_2 == 0x30)
  2476  001B88  0E30               	movlw	48
  2477  001B8A  180F               	xorwf	espi_master_send@received_2,w,c
  2478  001B8C  B4D8               	btfsc	status,2,c
  2479  001B8E  0012               	return	
  2480  001B90  D001               	goto	l1900
  2481                           
  2482                           ;extended_spi.c: 167: return;
  2483  001B92  0012               	return	
  2484  001B94                     l1900:
  2485                           
  2486                           ;extended_spi.c: 169: buffer_pop(buffer);
  2487  001B94  C008  F001         	movff	espi_master_send@buffer,buffer_pop@buffer
  2488  001B98  C009  F002         	movff	espi_master_send@buffer+1,buffer_pop@buffer+1
  2489  001B9C  ECB9  F00B         	call	_buffer_pop	;wreg free
  2490  001BA0  D7C5               	goto	l1876
  2491  001BA2                     l1902:
  2492                           
  2493                           ;extended_spi.c: 170: }
  2494                           ;extended_spi.c: 172: spi_send_get_byte(0x30);
  2495  001BA2  0E30               	movlw	48
  2496  001BA4  EC53  F00A         	call	_spi_send_get_byte
  2497                           
  2498                           ;extended_spi.c: 173: send_delay();
  2499  001BA8  EC22  F00A         	call	_send_delay	;wreg free
  2500  001BAC  0012               	return	
  2501  001BAE  0012               	return		;funcret
  2502  001BB0                     __end_of_espi_master_send:
  2503                           	opt stack 0
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           intcon	equ	0xFF2
  2511                           intcon2	equ	0xFF1
  2512                           intcon3	equ	0xFF0
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           postdec1	equ	0xFE5
  2516                           plusw1	equ	0xFE3
  2517                           fsr1l	equ	0xFE1
  2518                           indf2	equ	0xFDF
  2519                           plusw2	equ	0xFDB
  2520                           fsr2h	equ	0xFDA
  2521                           fsr2l	equ	0xFD9
  2522                           status	equ	0xFD8
  2523                           
  2524 ;; *************** function _encode_data *****************
  2525 ;; Defined at:
  2526 ;;		line 3 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;  data            1    wreg     unsigned char 
  2529 ;;  byte_1          2    0[COMRAM] PTR unsigned char 
  2530 ;;		 -> espi_master_send@byte_1(1), espi_slave_send@byte_1(1), 
  2531 ;;  byte_2          2    2[COMRAM] PTR unsigned char 
  2532 ;;		 -> espi_master_send@byte_2(1), espi_slave_send@byte_2(1), 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  data            1    5[COMRAM] unsigned char 
  2535 ;; Return value:  Size  Location     Type
  2536 ;;		None               void
  2537 ;; Registers used:
  2538 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMRAM   BANK0
  2544 ;;      Params:         4       0
  2545 ;;      Locals:         1       0
  2546 ;;      Temps:          1       0
  2547 ;;      Totals:         6       0
  2548 ;;Total ram usage:        6 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; This function calls:
  2551 ;;		Nothing
  2552 ;; This function is called by:
  2553 ;;		_espi_master_send
  2554 ;;		_espi_slave_send
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	text15
  2559  001612                     __ptext15:
  2560                           	opt stack 0
  2561  001612                     _encode_data:
  2562                           	opt stack 29
  2563                           
  2564                           ;incstack = 0
  2565                           ;encode_data@data stored from wreg
  2566  001612  6E06               	movwf	encode_data@data,c
  2567                           
  2568                           ;encoding.c: 5: *byte_1 = 0xA0;
  2569  001614  C001  FFD9         	movff	encode_data@byte_1,fsr2l
  2570  001618  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
  2571  00161C  0EA0               	movlw	160
  2572  00161E  6EDF               	movwf	indf2,c
  2573                           
  2574                           ;encoding.c: 6: *byte_2 = 0xA0;
  2575  001620  C003  FFD9         	movff	encode_data@byte_2,fsr2l
  2576  001624  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
  2577  001628  0EA0               	movlw	160
  2578  00162A  6EDF               	movwf	indf2,c
  2579                           
  2580                           ;encoding.c: 8: *byte_1 |= data >> 4;
  2581  00162C  C006  F005         	movff	encode_data@data,??_encode_data
  2582  001630  3A05               	swapf	??_encode_data,f,c
  2583  001632  0E0F               	movlw	15
  2584  001634  1605               	andwf	??_encode_data,f,c
  2585  001636  C001  FFD9         	movff	encode_data@byte_1,fsr2l
  2586  00163A  C002  FFDA         	movff	encode_data@byte_1+1,fsr2h
  2587  00163E  5005               	movf	??_encode_data,w,c
  2588  001640  12DF               	iorwf	indf2,f,c
  2589                           
  2590                           ;encoding.c: 9: *byte_2 |= (data & 0x0F);
  2591  001642  C006  F005         	movff	encode_data@data,??_encode_data
  2592  001646  0E0F               	movlw	15
  2593  001648  1605               	andwf	??_encode_data,f,c
  2594  00164A  C003  FFD9         	movff	encode_data@byte_2,fsr2l
  2595  00164E  C004  FFDA         	movff	encode_data@byte_2+1,fsr2h
  2596  001652  5005               	movf	??_encode_data,w,c
  2597  001654  12DF               	iorwf	indf2,f,c
  2598  001656  0012               	return		;funcret
  2599  001658                     __end_of_encode_data:
  2600                           	opt stack 0
  2601                           tblptru	equ	0xFF8
  2602                           tblptrh	equ	0xFF7
  2603                           tblptrl	equ	0xFF6
  2604                           tablat	equ	0xFF5
  2605                           prodh	equ	0xFF4
  2606                           prodl	equ	0xFF3
  2607                           intcon	equ	0xFF2
  2608                           intcon2	equ	0xFF1
  2609                           intcon3	equ	0xFF0
  2610                           postinc0	equ	0xFEE
  2611                           wreg	equ	0xFE8
  2612                           postdec1	equ	0xFE5
  2613                           plusw1	equ	0xFE3
  2614                           fsr1l	equ	0xFE1
  2615                           indf2	equ	0xFDF
  2616                           plusw2	equ	0xFDB
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _buffer_pop *****************
  2622 ;; Defined at:
  2623 ;;		line 37 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  2626 ;;		 -> main@receive(34), main@send(34), 
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;  byte            2    4[COMRAM] int 
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  2    0[COMRAM] int 
  2631 ;; Registers used:
  2632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMRAM   BANK0
  2638 ;;      Params:         2       0
  2639 ;;      Locals:         2       0
  2640 ;;      Temps:          2       0
  2641 ;;      Totals:         6       0
  2642 ;;Total ram usage:        6 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; This function calls:
  2645 ;;		Nothing
  2646 ;; This function is called by:
  2647 ;;		_main
  2648 ;;		_espi_master_send
  2649 ;;		_espi_slave_send
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text16
  2654  001772                     __ptext16:
  2655                           	opt stack 0
  2656  001772                     _buffer_pop:
  2657                           	opt stack 29
  2658                           
  2659                           ;circular_buffer.c: 39: if (buffer->count <= 0) {
  2660                           
  2661                           ;incstack = 0
  2662  001772  EE20 F001          	lfsr	2,1
  2663  001776  5001               	movf	buffer_pop@buffer,w,c
  2664  001778  26D9               	addwf	fsr2l,f,c
  2665  00177A  5002               	movf	buffer_pop@buffer+1,w,c
  2666  00177C  22DA               	addwfc	fsr2h,f,c
  2667  00177E  50DF               	movf	indf2,w,c
  2668  001780  A4D8               	btfss	status,2,c
  2669  001782  D003               	goto	l1650
  2670                           
  2671                           ;circular_buffer.c: 40: return -1;
  2672  001784  6801               	setf	?_buffer_pop,c
  2673  001786  6802               	setf	?_buffer_pop+1,c
  2674  001788  0012               	return	
  2675  00178A                     l1650:
  2676                           
  2677                           ;circular_buffer.c: 41: }
  2678                           ;circular_buffer.c: 43: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2679  00178A  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2680  00178E  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2681  001792  50DF               	movf	indf2,w,c
  2682  001794  6E03               	movwf	??_buffer_pop& (0+255),c
  2683  001796  5003               	movf	??_buffer_pop,w,c
  2684  001798  0D01               	mullw	1
  2685  00179A  0E02               	movlw	2
  2686  00179C  26F3               	addwf	prodl,f,c
  2687  00179E  0E00               	movlw	0
  2688  0017A0  22F4               	addwfc	prodh,f,c
  2689  0017A2  50F3               	movf	prodl,w,c
  2690  0017A4  2401               	addwf	buffer_pop@buffer,w,c
  2691  0017A6  6ED9               	movwf	fsr2l,c
  2692  0017A8  50F4               	movf	prodh,w,c
  2693  0017AA  2002               	addwfc	buffer_pop@buffer+1,w,c
  2694  0017AC  6EDA               	movwf	fsr2h,c
  2695  0017AE  50DF               	movf	indf2,w,c
  2696  0017B0  6E04               	movwf	(??_buffer_pop+1)& (0+255),c
  2697  0017B2  5004               	movf	??_buffer_pop+1,w,c
  2698  0017B4  6E05               	movwf	buffer_pop@byte,c
  2699  0017B6  6A06               	clrf	buffer_pop@byte+1,c
  2700                           
  2701                           ;circular_buffer.c: 44: buffer->position = (buffer->position + 1) & (0x20 - 1);
  2702  0017B8  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2703  0017BC  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2704  0017C0  50DF               	movf	indf2,w,c
  2705  0017C2  6E03               	movwf	??_buffer_pop& (0+255),c
  2706  0017C4  2803               	incf	??_buffer_pop,w,c
  2707  0017C6  0B1F               	andlw	31
  2708  0017C8  C001  FFD9         	movff	buffer_pop@buffer,fsr2l
  2709  0017CC  C002  FFDA         	movff	buffer_pop@buffer+1,fsr2h
  2710  0017D0  6EDF               	movwf	indf2,c
  2711                           
  2712                           ;circular_buffer.c: 45: buffer->count--;
  2713  0017D2  EE20 F001          	lfsr	2,1
  2714  0017D6  5001               	movf	buffer_pop@buffer,w,c
  2715  0017D8  26D9               	addwf	fsr2l,f,c
  2716  0017DA  5002               	movf	buffer_pop@buffer+1,w,c
  2717  0017DC  22DA               	addwfc	fsr2h,f,c
  2718  0017DE  06DF               	decf	indf2,f,c
  2719                           
  2720                           ;circular_buffer.c: 47: return byte;
  2721  0017E0  C005  F001         	movff	buffer_pop@byte,?_buffer_pop
  2722  0017E4  C006  F002         	movff	buffer_pop@byte+1,?_buffer_pop+1
  2723  0017E8  0012               	return	
  2724  0017EA  0012               	return		;funcret
  2725  0017EC                     __end_of_buffer_pop:
  2726                           	opt stack 0
  2727                           tblptru	equ	0xFF8
  2728                           tblptrh	equ	0xFF7
  2729                           tblptrl	equ	0xFF6
  2730                           tablat	equ	0xFF5
  2731                           prodh	equ	0xFF4
  2732                           prodl	equ	0xFF3
  2733                           intcon	equ	0xFF2
  2734                           intcon2	equ	0xFF1
  2735                           intcon3	equ	0xFF0
  2736                           postinc0	equ	0xFEE
  2737                           wreg	equ	0xFE8
  2738                           postdec1	equ	0xFE5
  2739                           plusw1	equ	0xFE3
  2740                           fsr1l	equ	0xFE1
  2741                           indf2	equ	0xFDF
  2742                           plusw2	equ	0xFDB
  2743                           fsr2h	equ	0xFDA
  2744                           fsr2l	equ	0xFD9
  2745                           status	equ	0xFD8
  2746                           
  2747 ;; *************** function _buffer_peek *****************
  2748 ;; Defined at:
  2749 ;;		line 55 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2752 ;;		 -> main@send(34), 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  byte            2    4[COMRAM] int 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  2    0[COMRAM] int 
  2757 ;; Registers used:
  2758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0
  2764 ;;      Params:         2       0
  2765 ;;      Locals:         2       0
  2766 ;;      Temps:          2       0
  2767 ;;      Totals:         6       0
  2768 ;;Total ram usage:        6 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_espi_master_send
  2774 ;;		_espi_slave_send
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text17
  2779  001658                     __ptext17:
  2780                           	opt stack 0
  2781  001658                     _buffer_peek:
  2782                           	opt stack 29
  2783                           
  2784                           ;circular_buffer.c: 57: if (buffer->count <= 0) {
  2785                           
  2786                           ;incstack = 0
  2787  001658  EE20 F001          	lfsr	2,1
  2788  00165C  5001               	movf	buffer_peek@buffer,w,c
  2789  00165E  26D9               	addwf	fsr2l,f,c
  2790  001660  5002               	movf	buffer_peek@buffer+1,w,c
  2791  001662  22DA               	addwfc	fsr2h,f,c
  2792  001664  50DF               	movf	indf2,w,c
  2793  001666  A4D8               	btfss	status,2,c
  2794  001668  D003               	goto	l1720
  2795                           
  2796                           ;circular_buffer.c: 58: return -1;
  2797  00166A  6801               	setf	?_buffer_peek,c
  2798  00166C  6802               	setf	?_buffer_peek+1,c
  2799  00166E  0012               	return	
  2800  001670                     l1720:
  2801                           
  2802                           ;circular_buffer.c: 59: }
  2803                           ;circular_buffer.c: 61: int16_t byte = (buffer->data[buffer->position]) & 0xFF;
  2804  001670  C001  FFD9         	movff	buffer_peek@buffer,fsr2l
  2805  001674  C002  FFDA         	movff	buffer_peek@buffer+1,fsr2h
  2806  001678  50DF               	movf	indf2,w,c
  2807  00167A  6E03               	movwf	??_buffer_peek& (0+255),c
  2808  00167C  5003               	movf	??_buffer_peek,w,c
  2809  00167E  0D01               	mullw	1
  2810  001680  0E02               	movlw	2
  2811  001682  26F3               	addwf	prodl,f,c
  2812  001684  0E00               	movlw	0
  2813  001686  22F4               	addwfc	prodh,f,c
  2814  001688  50F3               	movf	prodl,w,c
  2815  00168A  2401               	addwf	buffer_peek@buffer,w,c
  2816  00168C  6ED9               	movwf	fsr2l,c
  2817  00168E  50F4               	movf	prodh,w,c
  2818  001690  2002               	addwfc	buffer_peek@buffer+1,w,c
  2819  001692  6EDA               	movwf	fsr2h,c
  2820  001694  50DF               	movf	indf2,w,c
  2821  001696  6E04               	movwf	(??_buffer_peek+1)& (0+255),c
  2822  001698  5004               	movf	??_buffer_peek+1,w,c
  2823  00169A  6E05               	movwf	buffer_peek@byte,c
  2824  00169C  6A06               	clrf	buffer_peek@byte+1,c
  2825                           
  2826                           ;circular_buffer.c: 63: return byte;
  2827  00169E  C005  F001         	movff	buffer_peek@byte,?_buffer_peek
  2828  0016A2  C006  F002         	movff	buffer_peek@byte+1,?_buffer_peek+1
  2829  0016A6  0012               	return	
  2830  0016A8  0012               	return		;funcret
  2831  0016AA                     __end_of_buffer_peek:
  2832                           	opt stack 0
  2833                           tblptru	equ	0xFF8
  2834                           tblptrh	equ	0xFF7
  2835                           tblptrl	equ	0xFF6
  2836                           tablat	equ	0xFF5
  2837                           prodh	equ	0xFF4
  2838                           prodl	equ	0xFF3
  2839                           intcon	equ	0xFF2
  2840                           intcon2	equ	0xFF1
  2841                           intcon3	equ	0xFF0
  2842                           postinc0	equ	0xFEE
  2843                           wreg	equ	0xFE8
  2844                           postdec1	equ	0xFE5
  2845                           plusw1	equ	0xFE3
  2846                           fsr1l	equ	0xFE1
  2847                           indf2	equ	0xFDF
  2848                           plusw2	equ	0xFDB
  2849                           fsr2h	equ	0xFDA
  2850                           fsr2l	equ	0xFD9
  2851                           status	equ	0xFD8
  2852                           
  2853 ;; *************** function _buffer_count *****************
  2854 ;; Defined at:
  2855 ;;		line 4 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  buffer          2    0[COMRAM] PTR const struct circula
  2858 ;;		 -> main@receive(34), main@send(34), 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;		None
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      unsigned char 
  2863 ;; Registers used:
  2864 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMRAM   BANK0
  2870 ;;      Params:         2       0
  2871 ;;      Locals:         0       0
  2872 ;;      Temps:          0       0
  2873 ;;      Totals:         2       0
  2874 ;;Total ram usage:        2 bytes
  2875 ;; Hardware stack levels used:    1
  2876 ;; This function calls:
  2877 ;;		Nothing
  2878 ;; This function is called by:
  2879 ;;		_main
  2880 ;;		_espi_master_send
  2881 ;;		_espi_slave_send
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text18
  2886  001482                     __ptext18:
  2887                           	opt stack 0
  2888  001482                     _buffer_count:
  2889                           	opt stack 29
  2890                           
  2891                           ;circular_buffer.c: 6: return buffer->count;
  2892                           
  2893                           ;incstack = 0
  2894  001482  EE20 F001          	lfsr	2,1
  2895  001486  5001               	movf	buffer_count@buffer,w,c
  2896  001488  26D9               	addwf	fsr2l,f,c
  2897  00148A  5002               	movf	buffer_count@buffer+1,w,c
  2898  00148C  22DA               	addwfc	fsr2h,f,c
  2899  00148E  50DF               	movf	indf2,w,c
  2900  001490  0012               	return	
  2901  001492  0012               	return		;funcret
  2902  001494                     __end_of_buffer_count:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           intcon2	equ	0xFF1
  2912                           intcon3	equ	0xFF0
  2913                           postinc0	equ	0xFEE
  2914                           wreg	equ	0xFE8
  2915                           postdec1	equ	0xFE5
  2916                           plusw1	equ	0xFE3
  2917                           fsr1l	equ	0xFE1
  2918                           indf2	equ	0xFDF
  2919                           plusw2	equ	0xFDB
  2920                           fsr2h	equ	0xFDA
  2921                           fsr2l	equ	0xFD9
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function _espi_master_receive *****************
  2925 ;; Defined at:
  2926 ;;		line 177 in file "../TorqueGriper.X/extended_spi.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  buffer          2    7[COMRAM] PTR struct circular_buff
  2929 ;;		 -> main@receive(34), 
  2930 ;;  timer_start     2    9[COMRAM] PTR FTN(int ,)void 
  2931 ;;		 -> set_timer3(0), 
  2932 ;;  timer           2   11[COMRAM] PTR FTN()unsigned char 
  2933 ;;		 -> timer3_up(1), 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  value           1   15[COMRAM] unsigned char 
  2936 ;;  received_2      1   14[COMRAM] unsigned char 
  2937 ;;  received_1      1   13[COMRAM] unsigned char 
  2938 ;; Return value:  Size  Location     Type
  2939 ;;		None               void
  2940 ;; Registers used:
  2941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0
  2947 ;;      Params:         6       0
  2948 ;;      Locals:         3       0
  2949 ;;      Temps:          0       0
  2950 ;;      Totals:         9       0
  2951 ;;Total ram usage:        9 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    2
  2954 ;; This function calls:
  2955 ;;		_buffer_full
  2956 ;;		_buffer_push
  2957 ;;		_buffer_space
  2958 ;;		_decode_data
  2959 ;;		_send_delay
  2960 ;;		_spi_send_get_byte
  2961 ;;		_wait_pulse
  2962 ;; This function is called by:
  2963 ;;		_main
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text19
  2968  0019AE                     __ptext19:
  2969                           	opt stack 0
  2970  0019AE                     _espi_master_receive:
  2971                           	opt stack 28
  2972                           
  2973                           ;extended_spi.c: 181: if (!buffer_full(buffer)) {
  2974                           
  2975                           ;incstack = 0
  2976  0019AE  C008  F001         	movff	espi_master_receive@buffer,buffer_full@buffer
  2977  0019B2  C009  F002         	movff	espi_master_receive@buffer+1,buffer_full@buffer+1
  2978  0019B6  EC68  F00A         	call	_buffer_full	;wreg free
  2979  0019BA  0900               	iorlw	0
  2980  0019BC  A4D8               	btfss	status,2,c
  2981  0019BE  0012               	return	
  2982                           
  2983                           ;extended_spi.c: 182: spi_send_get_byte(0x20);
  2984  0019C0  0E20               	movlw	32
  2985  0019C2  EC53  F00A         	call	_spi_send_get_byte
  2986                           
  2987                           ;extended_spi.c: 184: wait_pulse(0x20, timer_start, timer);
  2988  0019C6  C00A  F003         	movff	espi_master_receive@timer_start,wait_pulse@timer_start
  2989  0019CA  C00B  F004         	movff	espi_master_receive@timer_start+1,wait_pulse@timer_start+1
  2990  0019CE  C00C  F005         	movff	espi_master_receive@timer,wait_pulse@timer
  2991  0019D2  C00D  F006         	movff	espi_master_receive@timer+1,wait_pulse@timer+1
  2992  0019D6  0E20               	movlw	32
  2993  0019D8  EC81  F00B         	call	_wait_pulse
  2994                           
  2995                           ;extended_spi.c: 186: uint8_t received_1;
  2996                           ;extended_spi.c: 187: uint8_t received_2;
  2997                           ;extended_spi.c: 188: uint8_t value;
  2998                           ;extended_spi.c: 190: while (buffer_space(buffer)) {
  2999  0019DC  D02B               	goto	l1822
  3000  0019DE                     l1802:
  3001                           
  3002                           ;extended_spi.c: 191: received_1 = spi_send_get_byte(0xE0);
  3003  0019DE  0EE0               	movlw	224
  3004  0019E0  EC53  F00A         	call	_spi_send_get_byte
  3005  0019E4  6E0E               	movwf	espi_master_receive@received_1,c
  3006                           
  3007                           ;extended_spi.c: 192: send_delay();
  3008  0019E6  EC22  F00A         	call	_send_delay	;wreg free
  3009                           
  3010                           ;extended_spi.c: 193: if (received_1 == 0x30)
  3011  0019EA  0E30               	movlw	48
  3012  0019EC  180E               	xorwf	espi_master_receive@received_1,w,c
  3013  0019EE  B4D8               	btfsc	status,2,c
  3014  0019F0  0012               	return	
  3015  0019F2  D001               	goto	l1810
  3016                           
  3017                           ;extended_spi.c: 194: return;
  3018  0019F4  0012               	return	
  3019  0019F6                     l1810:
  3020                           
  3021                           ;extended_spi.c: 196: received_2 = spi_send_get_byte(0xE0);
  3022  0019F6  0EE0               	movlw	224
  3023  0019F8  EC53  F00A         	call	_spi_send_get_byte
  3024  0019FC  6E0F               	movwf	espi_master_receive@received_2,c
  3025                           
  3026                           ;extended_spi.c: 197: send_delay();
  3027  0019FE  EC22  F00A         	call	_send_delay	;wreg free
  3028                           
  3029                           ;extended_spi.c: 198: if (received_2 == 0x30)
  3030  001A02  0E30               	movlw	48
  3031  001A04  180F               	xorwf	espi_master_receive@received_2,w,c
  3032  001A06  B4D8               	btfsc	status,2,c
  3033  001A08  0012               	return	
  3034  001A0A  D001               	goto	l1818
  3035                           
  3036                           ;extended_spi.c: 199: return;
  3037  001A0C  0012               	return	
  3038  001A0E                     l1818:
  3039                           
  3040                           ;extended_spi.c: 201: decode_data(&value, received_1, received_2);
  3041  001A0E  0E10               	movlw	low espi_master_receive@value
  3042  001A10  6E01               	movwf	decode_data@data,c
  3043  001A12  0E00               	movlw	high espi_master_receive@value
  3044  001A14  6E02               	movwf	decode_data@data+1,c
  3045  001A16  C00E  F003         	movff	espi_master_receive@received_1,decode_data@byte_1
  3046  001A1A  C00F  F004         	movff	espi_master_receive@received_2,decode_data@byte_2
  3047  001A1E  ECCC  F00A         	call	_decode_data	;wreg free
  3048                           
  3049                           ;extended_spi.c: 202: buffer_push(buffer, value);
  3050  001A22  C008  F001         	movff	espi_master_receive@buffer,buffer_push@buffer
  3051  001A26  C009  F002         	movff	espi_master_receive@buffer+1,buffer_push@buffer+1
  3052  001A2A  C010  F003         	movff	espi_master_receive@value,buffer_push@byte
  3053  001A2E  ECF6  F00B         	call	_buffer_push	;wreg free
  3054  001A32  D000               	goto	l1822
  3055  001A34                     l1822:
  3056  001A34  C008  F001         	movff	espi_master_receive@buffer,buffer_space@buffer
  3057  001A38  C009  F002         	movff	espi_master_receive@buffer+1,buffer_space@buffer+1
  3058  001A3C  EC5D  F00A         	call	_buffer_space	;wreg free
  3059  001A40  0900               	iorlw	0
  3060  001A42  A4D8               	btfss	status,2,c
  3061  001A44  D7CC               	goto	l1802
  3062                           
  3063                           ;extended_spi.c: 203: }
  3064                           ;extended_spi.c: 205: spi_send_get_byte(0x30);
  3065  001A46  0E30               	movlw	48
  3066  001A48  EC53  F00A         	call	_spi_send_get_byte
  3067                           
  3068                           ;extended_spi.c: 206: send_delay();
  3069  001A4C  EC22  F00A         	call	_send_delay	;wreg free
  3070  001A50  0012               	return	
  3071  001A52  0012               	return		;funcret
  3072  001A54                     __end_of_espi_master_receive:
  3073                           	opt stack 0
  3074                           tblptru	equ	0xFF8
  3075                           tblptrh	equ	0xFF7
  3076                           tblptrl	equ	0xFF6
  3077                           tablat	equ	0xFF5
  3078                           prodh	equ	0xFF4
  3079                           prodl	equ	0xFF3
  3080                           intcon	equ	0xFF2
  3081                           intcon2	equ	0xFF1
  3082                           intcon3	equ	0xFF0
  3083                           postinc0	equ	0xFEE
  3084                           wreg	equ	0xFE8
  3085                           postdec1	equ	0xFE5
  3086                           plusw1	equ	0xFE3
  3087                           fsr1l	equ	0xFE1
  3088                           indf2	equ	0xFDF
  3089                           plusw2	equ	0xFDB
  3090                           fsr2h	equ	0xFDA
  3091                           fsr2l	equ	0xFD9
  3092                           status	equ	0xFD8
  3093                           
  3094 ;; *************** function _wait_pulse *****************
  3095 ;; Defined at:
  3096 ;;		line 125 in file "../TorqueGriper.X/extended_spi.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;  value           1    wreg     unsigned char 
  3099 ;;  timer_start     2    2[COMRAM] PTR FTN(int ,)void 
  3100 ;;		 -> set_timer3(0), 
  3101 ;;  timer           2    4[COMRAM] PTR FTN()unsigned char 
  3102 ;;		 -> timer3_up(1), 
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;  value           1    6[COMRAM] unsigned char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;		None               void
  3107 ;; Registers used:
  3108 ;;		wreg, status,2, pclat, tosl, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0
  3114 ;;      Params:         4       0
  3115 ;;      Locals:         1       0
  3116 ;;      Temps:          0       0
  3117 ;;      Totals:         5       0
  3118 ;;Total ram usage:        5 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    1
  3121 ;; This function calls:
  3122 ;;		_set_timer3
  3123 ;;		_spi_send_get_byte
  3124 ;;		_timer3_up
  3125 ;; This function is called by:
  3126 ;;		_espi_master_send
  3127 ;;		_espi_master_receive
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text20
  3132  001702                     __ptext20:
  3133                           	opt stack 0
  3134  001702                     _wait_pulse:
  3135                           	opt stack 28
  3136                           
  3137                           ;incstack = 0
  3138                           ;wait_pulse@value stored from wreg
  3139  001702  6E07               	movwf	wait_pulse@value,c
  3140                           
  3141                           ;extended_spi.c: 128: (*timer_start)(54335);
  3142  001704  0ED4               	movlw	212
  3143  001706  6E02               	movwf	set_timer3@value+1,c
  3144  001708  0E3F               	movlw	63
  3145  00170A  6E01               	movwf	set_timer3@value,c
  3146  00170C  D801               	call	u1228
  3147  00170E  D02D               	goto	l1740
  3148  001710                     u1228:
  3149  001710  0005               	push	
  3150  001712  6EFA               	movwf	pclath,c
  3151  001714  5003               	movf	wait_pulse@timer_start,w,c
  3152  001716  6EFD               	movwf	tosl,c
  3153  001718  5004               	movf	wait_pulse@timer_start+1,w,c
  3154  00171A  6EFE               	movwf	tosh,c
  3155  00171C  50F8               	movf	tblptru,w,c
  3156  00171E  6EFF               	movwf	tosu,c
  3157  001720  50FA               	movf	pclath,w,c
  3158  001722  0012               	return		;indir
  3159  001724                     l1734:
  3160                           
  3161                           ;extended_spi.c: 130: if ((*timer)()) {
  3162  001724  D801               	call	u1238
  3163  001726  D00A               	goto	u1239
  3164  001728                     u1238:
  3165  001728  0005               	push	
  3166  00172A  6EFA               	movwf	pclath,c
  3167  00172C  5005               	movf	wait_pulse@timer,w,c
  3168  00172E  6EFD               	movwf	tosl,c
  3169  001730  5006               	movf	wait_pulse@timer+1,w,c
  3170  001732  6EFE               	movwf	tosh,c
  3171  001734  50F8               	movf	tblptru,w,c
  3172  001736  6EFF               	movwf	tosu,c
  3173  001738  50FA               	movf	pclath,w,c
  3174  00173A  0012               	return		;indir
  3175  00173C                     u1239:
  3176  00173C  0900               	iorlw	0
  3177  00173E  B4D8               	btfsc	status,2,c
  3178  001740  D014               	goto	l1740
  3179                           
  3180                           ;extended_spi.c: 131: spi_send_get_byte(value);
  3181  001742  5007               	movf	wait_pulse@value,w,c
  3182  001744  EC53  F00A         	call	_spi_send_get_byte
  3183                           
  3184                           ;extended_spi.c: 132: (*timer_start)(54335);
  3185  001748  0ED4               	movlw	212
  3186  00174A  6E02               	movwf	set_timer3@value+1,c
  3187  00174C  0E3F               	movlw	63
  3188  00174E  6E01               	movwf	set_timer3@value,c
  3189  001750  D801               	call	u1258
  3190  001752  D00B               	goto	l1740
  3191  001754                     u1258:
  3192  001754  0005               	push	
  3193  001756  6EFA               	movwf	pclath,c
  3194  001758  5003               	movf	wait_pulse@timer_start,w,c
  3195  00175A  6EFD               	movwf	tosl,c
  3196  00175C  5004               	movf	wait_pulse@timer_start+1,w,c
  3197  00175E  6EFE               	movwf	tosh,c
  3198  001760  50F8               	movf	tblptru,w,c
  3199  001762  6EFF               	movwf	tosu,c
  3200  001764  50FA               	movf	pclath,w,c
  3201  001766  0012               	return		;indir
  3202  001768  D000               	goto	l1740
  3203  00176A                     l1740:
  3204  00176A  A2F0               	btfss	intcon3,1,c	;volatile
  3205  00176C  D7DB               	goto	l1734
  3206                           
  3207                           ;extended_spi.c: 133: }
  3208                           ;extended_spi.c: 134: }
  3209                           ;extended_spi.c: 135: INT2IF = 0;
  3210  00176E  92F0               	bcf	intcon3,1,c	;volatile
  3211  001770  0012               	return		;funcret
  3212  001772                     __end_of_wait_pulse:
  3213                           	opt stack 0
  3214                           tosu	equ	0xFFF
  3215                           tosh	equ	0xFFE
  3216                           tosl	equ	0xFFD
  3217                           pclath	equ	0xFFA
  3218                           tblptru	equ	0xFF8
  3219                           tblptrh	equ	0xFF7
  3220                           tblptrl	equ	0xFF6
  3221                           tablat	equ	0xFF5
  3222                           prodh	equ	0xFF4
  3223                           prodl	equ	0xFF3
  3224                           intcon	equ	0xFF2
  3225                           intcon2	equ	0xFF1
  3226                           intcon3	equ	0xFF0
  3227                           postinc0	equ	0xFEE
  3228                           wreg	equ	0xFE8
  3229                           postdec1	equ	0xFE5
  3230                           plusw1	equ	0xFE3
  3231                           fsr1l	equ	0xFE1
  3232                           indf2	equ	0xFDF
  3233                           plusw2	equ	0xFDB
  3234                           fsr2h	equ	0xFDA
  3235                           fsr2l	equ	0xFD9
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function _timer3_up *****************
  3239 ;; Defined at:
  3240 ;;		line 74 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;		None
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;		None
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      unsigned char 
  3247 ;; Registers used:
  3248 ;;		wreg
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0
  3254 ;;      Params:         0       0
  3255 ;;      Locals:         0       0
  3256 ;;      Temps:          0       0
  3257 ;;      Totals:         0       0
  3258 ;;Total ram usage:        0 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; This function calls:
  3261 ;;		Nothing
  3262 ;; This function is called by:
  3263 ;;		_main
  3264 ;;		_wait_pulse
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text21
  3269  001466                     __ptext21:
  3270                           	opt stack 0
  3271  001466                     _timer3_up:
  3272                           	opt stack 28
  3273                           
  3274                           ;timers_pic.c: 76: return (PIR2bits.TMR3IF) ? 1 : 0;
  3275                           
  3276                           ;incstack = 0
  3277  001466  A2A1               	btfss	4001,1,c	;volatile
  3278  001468  D002               	goto	u1110
  3279  00146A  0E01               	movlw	1
  3280  00146C  0012               	return	
  3281  00146E                     u1110:
  3282  00146E  0E00               	movlw	0
  3283  001470  0012               	return	
  3284  001472  0012               	return		;funcret
  3285  001474                     __end_of_timer3_up:
  3286                           	opt stack 0
  3287                           tosu	equ	0xFFF
  3288                           tosh	equ	0xFFE
  3289                           tosl	equ	0xFFD
  3290                           pclath	equ	0xFFA
  3291                           tblptru	equ	0xFF8
  3292                           tblptrh	equ	0xFF7
  3293                           tblptrl	equ	0xFF6
  3294                           tablat	equ	0xFF5
  3295                           prodh	equ	0xFF4
  3296                           prodl	equ	0xFF3
  3297                           intcon	equ	0xFF2
  3298                           intcon2	equ	0xFF1
  3299                           intcon3	equ	0xFF0
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           postdec1	equ	0xFE5
  3303                           plusw1	equ	0xFE3
  3304                           fsr1l	equ	0xFE1
  3305                           indf2	equ	0xFDF
  3306                           plusw2	equ	0xFDB
  3307                           fsr2h	equ	0xFDA
  3308                           fsr2l	equ	0xFD9
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _spi_send_get_byte *****************
  3312 ;; Defined at:
  3313 ;;		line 33 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/spi_pic.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  byte            1    wreg     unsigned char 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  byte            1    0[COMRAM] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      unsigned char 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0
  3327 ;;      Params:         0       0
  3328 ;;      Locals:         1       0
  3329 ;;      Temps:          0       0
  3330 ;;      Totals:         1       0
  3331 ;;Total ram usage:        1 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_wait_pulse
  3337 ;;		_espi_master_send
  3338 ;;		_espi_master_receive
  3339 ;;		_spi_send_data
  3340 ;;		_spi_master_get_data
  3341 ;;		_espi_slave_receive
  3342 ;;		_espi_slave_send
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text22
  3347  0014A6                     __ptext22:
  3348                           	opt stack 0
  3349  0014A6                     _spi_send_get_byte:
  3350                           	opt stack 28
  3351                           
  3352                           ;incstack = 0
  3353                           ;spi_send_get_byte@byte stored from wreg
  3354  0014A6  6E01               	movwf	spi_send_get_byte@byte,c
  3355                           
  3356                           ;spi_pic.c: 35: SSPBUF = byte;
  3357  0014A8  C001  FFC9         	movff	spi_send_get_byte@byte,4041	;volatile
  3358                           
  3359                           ;spi_pic.c: 36: while (!SSPSTATbits.BF);
  3360  0014AC  D000               	goto	l112
  3361  0014AE                     l112:
  3362  0014AE  A0C7               	btfss	4039,0,c	;volatile
  3363  0014B0  D7FE               	goto	l112
  3364                           
  3365                           ;spi_pic.c: 37: if (SSPCON1bits.WCOL)
  3366  0014B2  BEC6               	btfsc	4038,7,c	;volatile
  3367                           
  3368                           ;spi_pic.c: 38: SSPCON1bits.WCOL = 0;
  3369  0014B4  9EC6               	bcf	4038,7,c	;volatile
  3370                           
  3371                           ;spi_pic.c: 39: return SSPBUF;
  3372  0014B6  50C9               	movf	4041,w,c	;volatile
  3373  0014B8  0012               	return		;funcret
  3374  0014BA                     __end_of_spi_send_get_byte:
  3375                           	opt stack 0
  3376                           tosu	equ	0xFFF
  3377                           tosh	equ	0xFFE
  3378                           tosl	equ	0xFFD
  3379                           pclath	equ	0xFFA
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           prodh	equ	0xFF4
  3385                           prodl	equ	0xFF3
  3386                           intcon	equ	0xFF2
  3387                           intcon2	equ	0xFF1
  3388                           intcon3	equ	0xFF0
  3389                           postinc0	equ	0xFEE
  3390                           wreg	equ	0xFE8
  3391                           postdec1	equ	0xFE5
  3392                           plusw1	equ	0xFE3
  3393                           fsr1l	equ	0xFE1
  3394                           indf2	equ	0xFDF
  3395                           plusw2	equ	0xFDB
  3396                           fsr2h	equ	0xFDA
  3397                           fsr2l	equ	0xFD9
  3398                           status	equ	0xFD8
  3399                           
  3400 ;; *************** function _set_timer3 *****************
  3401 ;; Defined at:
  3402 ;;		line 60 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/timers_pic.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  value           2    0[COMRAM] int 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;		None
  3407 ;; Return value:  Size  Location     Type
  3408 ;;		None               void
  3409 ;; Registers used:
  3410 ;;		None
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMRAM   BANK0
  3416 ;;      Params:         2       0
  3417 ;;      Locals:         0       0
  3418 ;;      Temps:          0       0
  3419 ;;      Totals:         2       0
  3420 ;;Total ram usage:        2 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; This function calls:
  3423 ;;		Nothing
  3424 ;; This function is called by:
  3425 ;;		_main
  3426 ;;		_wait_pulse
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text23
  3431  00144E                     __ptext23:
  3432                           	opt stack 0
  3433  00144E                     _set_timer3:
  3434                           	opt stack 28
  3435                           
  3436                           ;timers_pic.c: 62: PIR2bits.TMR3IF = 0;
  3437                           
  3438                           ;incstack = 0
  3439  00144E  92A1               	bcf	4001,1,c	;volatile
  3440                           
  3441                           ;timers_pic.c: 63: TMR3 = value;
  3442  001450  C001  FFB2         	movff	set_timer3@value,4018	;volatile
  3443  001454  C002  FFB3         	movff	set_timer3@value+1,4019	;volatile
  3444  001458  0012               	return		;funcret
  3445  00145A                     __end_of_set_timer3:
  3446                           	opt stack 0
  3447                           tosu	equ	0xFFF
  3448                           tosh	equ	0xFFE
  3449                           tosl	equ	0xFFD
  3450                           pclath	equ	0xFFA
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           intcon	equ	0xFF2
  3458                           intcon2	equ	0xFF1
  3459                           intcon3	equ	0xFF0
  3460                           postinc0	equ	0xFEE
  3461                           wreg	equ	0xFE8
  3462                           postdec1	equ	0xFE5
  3463                           plusw1	equ	0xFE3
  3464                           fsr1l	equ	0xFE1
  3465                           indf2	equ	0xFDF
  3466                           plusw2	equ	0xFDB
  3467                           fsr2h	equ	0xFDA
  3468                           fsr2l	equ	0xFD9
  3469                           status	equ	0xFD8
  3470                           
  3471 ;; *************** function _send_delay *****************
  3472 ;; Defined at:
  3473 ;;		line 22 in file "../TorqueGriper.X/extended_spi.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;		None
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;		None
  3478 ;; Return value:  Size  Location     Type
  3479 ;;		None               void
  3480 ;; Registers used:
  3481 ;;		wreg
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0
  3487 ;;      Params:         0       0
  3488 ;;      Locals:         0       0
  3489 ;;      Temps:          0       0
  3490 ;;      Totals:         0       0
  3491 ;;Total ram usage:        0 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_espi_master_send
  3497 ;;		_espi_master_receive
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text24
  3502  001444                     __ptext24:
  3503                           	opt stack 0
  3504  001444                     _send_delay:
  3505                           	opt stack 29
  3506                           
  3507                           ;extended_spi.c: 24: _delay((unsigned long)((5)*(16000000/4000000.0)));
  3508                           
  3509                           ;incstack = 0
  3510  001444  0E06               	movlw	6
  3511  001446                     u2017:
  3512  001446  2EE8               	decfsz	wreg,f,c
  3513  001448  D7FE               	goto	u2017
  3514  00144A  D000               	nop2		;nop
  3515  00144C  0012               	return		;funcret
  3516  00144E                     __end_of_send_delay:
  3517                           	opt stack 0
  3518                           tosu	equ	0xFFF
  3519                           tosh	equ	0xFFE
  3520                           tosl	equ	0xFFD
  3521                           pclath	equ	0xFFA
  3522                           tblptru	equ	0xFF8
  3523                           tblptrh	equ	0xFF7
  3524                           tblptrl	equ	0xFF6
  3525                           tablat	equ	0xFF5
  3526                           prodh	equ	0xFF4
  3527                           prodl	equ	0xFF3
  3528                           intcon	equ	0xFF2
  3529                           intcon2	equ	0xFF1
  3530                           intcon3	equ	0xFF0
  3531                           postinc0	equ	0xFEE
  3532                           wreg	equ	0xFE8
  3533                           postdec1	equ	0xFE5
  3534                           plusw1	equ	0xFE3
  3535                           fsr1l	equ	0xFE1
  3536                           indf2	equ	0xFDF
  3537                           plusw2	equ	0xFDB
  3538                           fsr2h	equ	0xFDA
  3539                           fsr2l	equ	0xFD9
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _decode_data *****************
  3543 ;; Defined at:
  3544 ;;		line 12 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/encoding.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  data            2    0[COMRAM] PTR unsigned char 
  3547 ;;		 -> espi_master_receive@value(1), espi_slave_receive@value(1), 
  3548 ;;  byte_1          1    2[COMRAM] unsigned char 
  3549 ;;  byte_2          1    3[COMRAM] unsigned char 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;		None
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      char 
  3554 ;; Registers used:
  3555 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0
  3561 ;;      Params:         4       0
  3562 ;;      Locals:         0       0
  3563 ;;      Temps:          1       0
  3564 ;;      Totals:         5       0
  3565 ;;Total ram usage:        5 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; This function calls:
  3568 ;;		Nothing
  3569 ;; This function is called by:
  3570 ;;		_espi_master_receive
  3571 ;;		_espi_slave_receive
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text25
  3576  001598                     __ptext25:
  3577                           	opt stack 0
  3578  001598                     _decode_data:
  3579                           	opt stack 29
  3580                           
  3581                           ;encoding.c: 14: if ((byte_1 & 0xF0) != 0xA0)
  3582                           
  3583                           ;incstack = 0
  3584  001598  5003               	movf	decode_data@byte_1,w,c
  3585  00159A  0BF0               	andlw	240
  3586  00159C  0AA0               	xorlw	160
  3587  00159E  A4D8               	btfss	status,2,c
  3588  0015A0  0012               	return	
  3589  0015A2  D002               	goto	l1704
  3590                           
  3591                           ;encoding.c: 15: return -1;
  3592                           ;	Return value of _decode_data is never used
  3593  0015A4  0012               	return	
  3594  0015A6  D008               	goto	l1708
  3595  0015A8                     l1704:
  3596                           
  3597                           ;encoding.c: 16: else if ((byte_2 & 0xF0) != 0xA0)
  3598  0015A8  5004               	movf	decode_data@byte_2,w,c
  3599  0015AA  0BF0               	andlw	240
  3600  0015AC  0AA0               	xorlw	160
  3601  0015AE  A4D8               	btfss	status,2,c
  3602  0015B0  0012               	return	
  3603  0015B2  D002               	goto	l1708
  3604                           
  3605                           ;encoding.c: 17: return -2;
  3606                           ;	Return value of _decode_data is never used
  3607  0015B4  0012               	return	
  3608  0015B6  D000               	goto	l1708
  3609  0015B8                     l1708:
  3610                           
  3611                           ;encoding.c: 19: *data = (byte_1 << 4) | (byte_2 & 0x0F);
  3612  0015B8  C004  F005         	movff	decode_data@byte_2,??_decode_data
  3613  0015BC  0E0F               	movlw	15
  3614  0015BE  1605               	andwf	??_decode_data,f,c
  3615  0015C0  3803               	swapf	decode_data@byte_1,w,c
  3616  0015C2  0BF0               	andlw	240
  3617  0015C4  1005               	iorwf	??_decode_data,w,c
  3618  0015C6  C001  FFD9         	movff	decode_data@data,fsr2l
  3619  0015CA  C002  FFDA         	movff	decode_data@data+1,fsr2h
  3620  0015CE  6EDF               	movwf	indf2,c
  3621  0015D0  0012               	return	
  3622                           
  3623                           ;encoding.c: 21: return 0;
  3624                           ;	Return value of _decode_data is never used
  3625  0015D2  0012               	return		;funcret
  3626  0015D4                     __end_of_decode_data:
  3627                           	opt stack 0
  3628                           tosu	equ	0xFFF
  3629                           tosh	equ	0xFFE
  3630                           tosl	equ	0xFFD
  3631                           pclath	equ	0xFFA
  3632                           tblptru	equ	0xFF8
  3633                           tblptrh	equ	0xFF7
  3634                           tblptrl	equ	0xFF6
  3635                           tablat	equ	0xFF5
  3636                           prodh	equ	0xFF4
  3637                           prodl	equ	0xFF3
  3638                           intcon	equ	0xFF2
  3639                           intcon2	equ	0xFF1
  3640                           intcon3	equ	0xFF0
  3641                           postinc0	equ	0xFEE
  3642                           wreg	equ	0xFE8
  3643                           postdec1	equ	0xFE5
  3644                           plusw1	equ	0xFE3
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           plusw2	equ	0xFDB
  3648                           fsr2h	equ	0xFDA
  3649                           fsr2l	equ	0xFD9
  3650                           status	equ	0xFD8
  3651                           
  3652 ;; *************** function _buffer_space *****************
  3653 ;; Defined at:
  3654 ;;		line 9 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3657 ;;		 -> main@receive(34), 
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;		None
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  1    wreg      unsigned char 
  3662 ;; Registers used:
  3663 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMRAM   BANK0
  3669 ;;      Params:         2       0
  3670 ;;      Locals:         0       0
  3671 ;;      Temps:          0       0
  3672 ;;      Totals:         2       0
  3673 ;;Total ram usage:        2 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; This function calls:
  3676 ;;		Nothing
  3677 ;; This function is called by:
  3678 ;;		_espi_master_receive
  3679 ;;		_espi_slave_receive
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text26
  3684  0014BA                     __ptext26:
  3685                           	opt stack 0
  3686  0014BA                     _buffer_space:
  3687                           	opt stack 29
  3688                           
  3689                           ;circular_buffer.c: 11: return 0x20 - buffer->count;
  3690                           
  3691                           ;incstack = 0
  3692  0014BA  EE20 F001          	lfsr	2,1
  3693  0014BE  5001               	movf	buffer_space@buffer,w,c
  3694  0014C0  26D9               	addwf	fsr2l,f,c
  3695  0014C2  5002               	movf	buffer_space@buffer+1,w,c
  3696  0014C4  22DA               	addwfc	fsr2h,f,c
  3697  0014C6  50DF               	movf	indf2,w,c
  3698  0014C8  0800               	sublw	0
  3699  0014CA  0F20               	addlw	32
  3700  0014CC  0012               	return	
  3701  0014CE  0012               	return		;funcret
  3702  0014D0                     __end_of_buffer_space:
  3703                           	opt stack 0
  3704                           tosu	equ	0xFFF
  3705                           tosh	equ	0xFFE
  3706                           tosl	equ	0xFFD
  3707                           pclath	equ	0xFFA
  3708                           tblptru	equ	0xFF8
  3709                           tblptrh	equ	0xFF7
  3710                           tblptrl	equ	0xFF6
  3711                           tablat	equ	0xFF5
  3712                           prodh	equ	0xFF4
  3713                           prodl	equ	0xFF3
  3714                           intcon	equ	0xFF2
  3715                           intcon2	equ	0xFF1
  3716                           intcon3	equ	0xFF0
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           postdec1	equ	0xFE5
  3720                           plusw1	equ	0xFE3
  3721                           fsr1l	equ	0xFE1
  3722                           indf2	equ	0xFDF
  3723                           plusw2	equ	0xFDB
  3724                           fsr2h	equ	0xFDA
  3725                           fsr2l	equ	0xFD9
  3726                           status	equ	0xFD8
  3727                           
  3728 ;; *************** function _buffer_push *****************
  3729 ;; Defined at:
  3730 ;;		line 24 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;  buffer          2    0[COMRAM] PTR struct circular_buff
  3733 ;;		 -> main@receive(34), main@send(34), 
  3734 ;;  byte            1    2[COMRAM] unsigned char 
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;  current_posi    1    4[COMRAM] unsigned char 
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  1    wreg      unsigned char 
  3739 ;; Registers used:
  3740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMRAM   BANK0
  3746 ;;      Params:         3       0
  3747 ;;      Locals:         1       0
  3748 ;;      Temps:          1       0
  3749 ;;      Totals:         5       0
  3750 ;;Total ram usage:        5 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; This function calls:
  3753 ;;		Nothing
  3754 ;; This function is called by:
  3755 ;;		_load_buffer
  3756 ;;		_espi_master_receive
  3757 ;;		_espi_slave_receive
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text27
  3762  0017EC                     __ptext27:
  3763                           	opt stack 0
  3764  0017EC                     _buffer_push:
  3765                           	opt stack 29
  3766                           
  3767                           ;circular_buffer.c: 26: if (buffer->count == 0x20)
  3768                           
  3769                           ;incstack = 0
  3770  0017EC  EE20 F001          	lfsr	2,1
  3771  0017F0  5001               	movf	buffer_push@buffer,w,c
  3772  0017F2  26D9               	addwf	fsr2l,f,c
  3773  0017F4  5002               	movf	buffer_push@buffer+1,w,c
  3774  0017F6  22DA               	addwfc	fsr2h,f,c
  3775  0017F8  0E20               	movlw	32
  3776  0017FA  18DE               	xorwf	postinc2,w,c
  3777  0017FC  A4D8               	btfss	status,2,c
  3778  0017FE  D002               	goto	l1672
  3779                           
  3780                           ;circular_buffer.c: 27: return 0;
  3781  001800  0E00               	movlw	0
  3782  001802  0012               	return	
  3783  001804                     l1672:
  3784                           
  3785                           ;circular_buffer.c: 29: uint8_t current_position = (buffer->position + buffer->count)
  3786                           ;circular_buffer.c: 30: & (0x20 - 1);
  3787  001804  EE20 F001          	lfsr	2,1
  3788  001808  5001               	movf	buffer_push@buffer,w,c
  3789  00180A  26D9               	addwf	fsr2l,f,c
  3790  00180C  5002               	movf	buffer_push@buffer+1,w,c
  3791  00180E  22DA               	addwfc	fsr2h,f,c
  3792  001810  50DF               	movf	indf2,w,c
  3793  001812  6E04               	movwf	??_buffer_push& (0+255),c
  3794  001814  C001  FFD9         	movff	buffer_push@buffer,fsr2l
  3795  001818  C002  FFDA         	movff	buffer_push@buffer+1,fsr2h
  3796  00181C  50DF               	movf	indf2,w,c
  3797  00181E  2404               	addwf	??_buffer_push,w,c
  3798  001820  0B1F               	andlw	31
  3799  001822  6E05               	movwf	buffer_push@current_position,c
  3800                           
  3801                           ;circular_buffer.c: 31: buffer->data[current_position] = byte;
  3802  001824  5005               	movf	buffer_push@current_position,w,c
  3803  001826  0D01               	mullw	1
  3804  001828  0E02               	movlw	2
  3805  00182A  26F3               	addwf	prodl,f,c
  3806  00182C  0E00               	movlw	0
  3807  00182E  22F4               	addwfc	prodh,f,c
  3808  001830  50F3               	movf	prodl,w,c
  3809  001832  2401               	addwf	buffer_push@buffer,w,c
  3810  001834  6ED9               	movwf	fsr2l,c
  3811  001836  50F4               	movf	prodh,w,c
  3812  001838  2002               	addwfc	buffer_push@buffer+1,w,c
  3813  00183A  6EDA               	movwf	fsr2h,c
  3814  00183C  C003  FFDF         	movff	buffer_push@byte,indf2
  3815                           
  3816                           ;circular_buffer.c: 32: buffer->count++;
  3817  001840  EE20 F001          	lfsr	2,1
  3818  001844  5001               	movf	buffer_push@buffer,w,c
  3819  001846  26D9               	addwf	fsr2l,f,c
  3820  001848  5002               	movf	buffer_push@buffer+1,w,c
  3821  00184A  22DA               	addwfc	fsr2h,f,c
  3822  00184C  2ADF               	incf	indf2,f,c
  3823                           
  3824                           ;circular_buffer.c: 34: return (buffer->count == 0x20) ? 1 : 0;
  3825  00184E  EE20 F001          	lfsr	2,1
  3826  001852  5001               	movf	buffer_push@buffer,w,c
  3827  001854  26D9               	addwf	fsr2l,f,c
  3828  001856  5002               	movf	buffer_push@buffer+1,w,c
  3829  001858  22DA               	addwfc	fsr2h,f,c
  3830  00185A  0E20               	movlw	32
  3831  00185C  18DE               	xorwf	postinc2,w,c
  3832  00185E  A4D8               	btfss	status,2,c
  3833  001860  D002               	goto	u1140
  3834  001862  0E01               	movlw	1
  3835  001864  0012               	return	
  3836  001866                     u1140:
  3837  001866  0E00               	movlw	0
  3838  001868  0012               	return	
  3839  00186A  0012               	return		;funcret
  3840  00186C                     __end_of_buffer_push:
  3841                           	opt stack 0
  3842                           tosu	equ	0xFFF
  3843                           tosh	equ	0xFFE
  3844                           tosl	equ	0xFFD
  3845                           pclath	equ	0xFFA
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           intcon	equ	0xFF2
  3853                           intcon2	equ	0xFF1
  3854                           intcon3	equ	0xFF0
  3855                           postinc0	equ	0xFEE
  3856                           wreg	equ	0xFE8
  3857                           postdec1	equ	0xFE5
  3858                           plusw1	equ	0xFE3
  3859                           fsr1l	equ	0xFE1
  3860                           indf2	equ	0xFDF
  3861                           postinc2	equ	0xFDE
  3862                           plusw2	equ	0xFDB
  3863                           fsr2h	equ	0xFDA
  3864                           fsr2l	equ	0xFD9
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _buffer_full *****************
  3868 ;; Defined at:
  3869 ;;		line 19 in file "C:/Users/Manuel/Documents/PICLibrary/PICLibraries.X/circular_buffer.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  buffer          2    0[COMRAM] PTR const struct circula
  3872 ;;		 -> main@receive(34), 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;		None
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      unsigned char 
  3877 ;; Registers used:
  3878 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0
  3884 ;;      Params:         2       0
  3885 ;;      Locals:         0       0
  3886 ;;      Temps:          1       0
  3887 ;;      Totals:         3       0
  3888 ;;Total ram usage:        3 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_espi_master_receive
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text28
  3898  0014D0                     __ptext28:
  3899                           	opt stack 0
  3900  0014D0                     _buffer_full:
  3901                           	opt stack 29
  3902                           
  3903                           ;circular_buffer.c: 21: return (buffer->count == 0x20) ? 1 : 0;
  3904                           
  3905                           ;incstack = 0
  3906  0014D0  EE20 F001          	lfsr	2,1
  3907  0014D4  5001               	movf	buffer_full@buffer,w,c
  3908  0014D6  26D9               	addwf	fsr2l,f,c
  3909  0014D8  5002               	movf	buffer_full@buffer+1,w,c
  3910  0014DA  22DA               	addwfc	fsr2h,f,c
  3911  0014DC  0E20               	movlw	32
  3912  0014DE  18DE               	xorwf	postinc2,w,c
  3913  0014E0  A4D8               	btfss	status,2,c
  3914  0014E2  D002               	goto	u1270
  3915  0014E4  0E01               	movlw	1
  3916  0014E6  0012               	return	
  3917  0014E8                     u1270:
  3918  0014E8  0E00               	movlw	0
  3919  0014EA  0012               	return	
  3920  0014EC  0012               	return		;funcret
  3921  0014EE                     __end_of_buffer_full:
  3922                           	opt stack 0
  3923  0000                     tosu	equ	0xFFF
  3924                           tosh	equ	0xFFE
  3925                           tosl	equ	0xFFD
  3926                           pclath	equ	0xFFA
  3927                           tblptru	equ	0xFF8
  3928                           tblptrh	equ	0xFF7
  3929                           tblptrl	equ	0xFF6
  3930                           tablat	equ	0xFF5
  3931                           prodh	equ	0xFF4
  3932                           prodl	equ	0xFF3
  3933                           intcon	equ	0xFF2
  3934                           intcon2	equ	0xFF1
  3935                           intcon3	equ	0xFF0
  3936                           postinc0	equ	0xFEE
  3937                           wreg	equ	0xFE8
  3938                           postdec1	equ	0xFE5
  3939                           plusw1	equ	0xFE3
  3940                           fsr1l	equ	0xFE1
  3941                           indf2	equ	0xFDF
  3942                           postinc2	equ	0xFDE
  3943                           plusw2	equ	0xFDB
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           tosu	equ	0xFFF
  3948                           tosh	equ	0xFFE
  3949                           tosl	equ	0xFFD
  3950                           pclath	equ	0xFFA
  3951                           tblptru	equ	0xFF8
  3952                           tblptrh	equ	0xFF7
  3953                           tblptrl	equ	0xFF6
  3954                           tablat	equ	0xFF5
  3955                           prodh	equ	0xFF4
  3956                           prodl	equ	0xFF3
  3957                           intcon	equ	0xFF2
  3958                           intcon2	equ	0xFF1
  3959                           intcon3	equ	0xFF0
  3960                           postinc0	equ	0xFEE
  3961                           wreg	equ	0xFE8
  3962                           postdec1	equ	0xFE5
  3963                           plusw1	equ	0xFE3
  3964                           fsr1l	equ	0xFE1
  3965                           indf2	equ	0xFDF
  3966                           postinc2	equ	0xFDE
  3967                           plusw2	equ	0xFDB
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972                           	psect	text29
  3973  000000                     __ptext29:
  3974                           	opt stack 0
  3975                           tosu	equ	0xFFF
  3976                           tosh	equ	0xFFE
  3977                           tosl	equ	0xFFD
  3978                           pclath	equ	0xFFA
  3979                           tblptru	equ	0xFF8
  3980                           tblptrh	equ	0xFF7
  3981                           tblptrl	equ	0xFF6
  3982                           tablat	equ	0xFF5
  3983                           prodh	equ	0xFF4
  3984                           prodl	equ	0xFF3
  3985                           intcon	equ	0xFF2
  3986                           intcon2	equ	0xFF1
  3987                           intcon3	equ	0xFF0
  3988                           postinc0	equ	0xFEE
  3989                           wreg	equ	0xFE8
  3990                           postdec1	equ	0xFE5
  3991                           plusw1	equ	0xFE3
  3992                           fsr1l	equ	0xFE1
  3993                           indf2	equ	0xFDF
  3994                           postinc2	equ	0xFDE
  3995                           plusw2	equ	0xFDB
  3996                           fsr2h	equ	0xFDA
  3997                           fsr2l	equ	0xFD9
  3998                           status	equ	0xFD8
  3999                           
  4000                           	psect	rparam
  4001  0000                     tosu	equ	0xFFF
  4002                           tosh	equ	0xFFE
  4003                           tosl	equ	0xFFD
  4004                           pclath	equ	0xFFA
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           intcon	equ	0xFF2
  4012                           intcon2	equ	0xFF1
  4013                           intcon3	equ	0xFF0
  4014                           postinc0	equ	0xFEE
  4015                           wreg	equ	0xFE8
  4016                           postdec1	equ	0xFE5
  4017                           plusw1	equ	0xFE3
  4018                           fsr1l	equ	0xFE1
  4019                           indf2	equ	0xFDF
  4020                           postinc2	equ	0xFDE
  4021                           plusw2	equ	0xFDB
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     21      31
    BANK0           160     78     149

Pointer List with Targets:

    decode_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_receive@value(COMRAM[1]), espi_slave_receive@value(COMRAM[1]), 

    encode_data@byte_2	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_2(COMRAM[1]), espi_slave_send@byte_2(COMRAM[1]), 

    encode_data@byte_1	PTR unsigned char  size(2) Largest target is 1
		 -> espi_master_send@byte_1(COMRAM[1]), espi_slave_send@byte_1(COMRAM[1]), 

    buffer_peek@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 

    buffer_pop@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    buffer_push@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    buffer_full@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    buffer_space@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    buffer_count@buffer	PTR const struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), main@send(BANK0[34]), 

    espi_master_receive@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_receive@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_receive@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@receive(BANK0[34]), 

    espi_master_send@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    espi_master_send@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    espi_master_send@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 

    wait_pulse@timer	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> timer3_up(), 

    wait_pulse@timer_start	PTR FTN(int ,)void  size(2) Largest target is 0
		 -> set_timer3(), 

    load_buffer@str	PTR unsigned char  size(2) Largest target is 3
		 -> main@name(BANK0[3]), 

    load_buffer@buffer	PTR struct circular_buffer size(2) Largest target is 34
		 -> main@send(BANK0[34]), 


Critical Paths under _main in COMRAM

    _main->_espi_master_send
    _pmwSingleModeSetUp->_setPulseWidth
    _load_buffer->_buffer_push
    _espi_setup->_setup_spi
    _espi_master_send->_wait_pulse
    _espi_master_receive->_wait_pulse
    _wait_pulse->_set_timer3

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                80    80      0    9208
                                             19 COMRAM     2     2      0
                                              0 BANK0     78    78      0
                       _buffer_count
                         _buffer_pop
                _espi_master_receive
                   _espi_master_send
                         _espi_setup
                        _load_buffer
                 _pmwSingleModeSetUp
                       _selectOutput
                      _setPulseWidth
                         _set_timer0
                       _setup_timer0
                       _setup_timer3
                      _step_backward
                       _step_forward
                _stepper_motor_setup
                          _timer0_up
 ---------------------------------------------------------------------------------
 (1) _timer0_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stepper_motor_setup                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _step_forward                                         1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _step_backward                                        1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_timer3                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _set_timer0                                           2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _selectOutput                                         3     2      1     174
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _pmwSingleModeSetUp                                   4     1      3     518
                                              4 COMRAM     4     1      3
                      _setPulseWidth
 ---------------------------------------------------------------------------------
 (1) _setPulseWidth                                        4     2      2     172
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _load_buffer                                          9     3      6    1127
                                              5 COMRAM     9     3      6
                        _buffer_push
 ---------------------------------------------------------------------------------
 (1) _espi_setup                                           1     1      0     174
                                              2 COMRAM     1     1      0
                          _setup_spi
 ---------------------------------------------------------------------------------
 (2) _setup_spi                                            2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _espi_master_send                                    12     6      6    2855
                                              7 COMRAM    12     6      6
                       _buffer_count
                        _buffer_peek
                         _buffer_pop
                        _encode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _encode_data                                          6     2      4     516
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _buffer_pop                                           6     4      2     859
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_peek                                          6     4      2     281
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _buffer_count                                         2     0      2     214
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _espi_master_receive                                  9     3      6    2353
                                              7 COMRAM     9     3      6
                        _buffer_full
                        _buffer_push
                       _buffer_space
                        _decode_data
                         _send_delay
                  _spi_send_get_byte
                         _wait_pulse
 ---------------------------------------------------------------------------------
 (2) _wait_pulse                                           5     1      4     474
                                              2 COMRAM     5     1      4
                         _set_timer3 *
                  _spi_send_get_byte
                          _timer3_up *
 ---------------------------------------------------------------------------------
 (3) _timer3_up                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _spi_send_get_byte                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _set_timer3                                           2     0      2     108
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _send_delay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _decode_data                                          5     1      4     494
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _buffer_space                                         2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _buffer_push                                          5     2      3     689
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _buffer_full                                          3     1      2      86
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buffer_count
   _buffer_pop
   _espi_master_receive
     _buffer_full
     _buffer_push
     _buffer_space
     _decode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
       _spi_send_get_byte *
       _timer3_up *
   _espi_master_send
     _buffer_count
     _buffer_peek
     _buffer_pop
     _encode_data
     _send_delay
     _spi_send_get_byte
     _wait_pulse
       _set_timer3 *
       _spi_send_get_byte *
       _timer3_up *
   _espi_setup
     _setup_spi
   _load_buffer
     _buffer_push
   _pmwSingleModeSetUp
     _setPulseWidth
   _selectOutput
   _setPulseWidth
   _set_timer0
   _setup_timer0
   _setup_timer3
   _step_backward
   _step_forward
   _stepper_motor_setup
   _timer0_up

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     4E      95       3       93.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     15      1F       1       32.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B4       4        0.0%
DATA                 0      0      B4       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Aug 06 14:15:27 2015

           ?_pmwSingleModeSetUp 0005                     _SSPSTATbits 000FC7                             l112 14AE  
                           l104 160C                             l106 15F8                             l107 1608  
                           l222 158A                             l224 1582                             l412 1AC6  
                           l415 1AA2                             l416 1AD0                             l417 1AD8  
                           l418 1AE0                             _PR2 000FCB   espi_master_receive@received_1 000E  
 espi_master_receive@received_2 000F                             prod 000FF3                             tosl 000FFD  
                           wreg 000FE8            ??_pmwSingleModeSetUp 0008                    __CFG_LVP$OFF 000000  
                          l1704 15A8                            l1720 1670                            l1810 19F6  
                          l1802 19DE                            l1650 178A                            l1708 15B8  
                          l1740 176A                            l1900 1B94                            l1734 1724  
                          l1822 1A34                            l1902 1BA2                            l1830 1910  
                          l1672 1804                            l1832 1916                            l1818 1A0E  
                          l1770 1A82                            l1762 1A5A                            l1834 1930  
                          l1842 198A                            l1852 187A                            l1860 18BC  
                          l1772 1A88                            l1836 194C                            l1862 18C6  
                          l1774 1A90                            l1766 1A62                            l1838 196A  
                          l1950 1CAA                            l1942 1C2E                            l1856 18A0  
                          l1776 1A98                            l1768 1A6C                            l1944 1C4C  
                          l1882 1B4E                            l1866 18EC                            l1858 18A6  
                          l1778 1AAC                            l1970 1D72                            l1954 1CDC  
                          l1946 1C62                            l1892 1B7C                            l1876 1B2C  
                          l1868 18F2                            l1788 1AEA                            l1980 1DC8  
                          l1990 1DEE                            l1958 1D04                            l1966 1D30  
                          l1984 1DD8                            l1968 1D5C                            l1986 1DDE  
                          u1110 146E                            u1140 1866                            u2017 1446  
                          u1410 193C                            u1228 1710                            u1270 14E8  
                          u1238 1728                            u1430 1958                            u1239 173C  
                          _LATC 000F8B                            u1408 1924                            u1258 1754  
                          u1450 1976                            u1428 193E                            u1390 1922  
                          u1470 147C                            u1448 195A                            u1571 1BE8  
                          u1468 1978                            u1581 1BFA                    _step_forward 1512  
                          _TMR0 000FD6                            _TMR1 000FCE                            _TMR3 000FB2  
                   main@receive 008C                            _main 1BB0                            fsr2h 000FDA  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                 _step_backward 14EE                            prodh 000FF4                            prodl 000FF3  
                          start 0002           spi_send_get_byte@byte 0001                  ??_buffer_count 0003  
                 __CFG_FOSC$IRC 000000                  ??_buffer_space 0003                    ___param_bank 000010  
          setup_spi@SSPCON1_reg 0001                    ?_load_buffer 0006                           ?_main 0001  
                         _T0CON 000FD5                           _T1CON 000FCD                           _T3CON 000FB1  
          __size_of_decode_data 003C                    _output_value 0016             _espi_master_receive 19AE  
                         pclath 000FFA                           tablat 000FF5                           plusw1 000FE3  
                         plusw2 000FDB                           status 000FD8            setup_spi@SSPSTAT_reg 0002  
                ?_step_backward 0001        __end_of_espi_master_send 1BB0                buffer_pop@buffer 0001  
               __initialization 16AA                    __end_of_main 1E00            ?_espi_master_receive 0008  
           selectOutput@outputs 0003                          ??_main 0014               _spi_send_get_byte 14A6  
                 __activetblptr 000002              ?_spi_send_get_byte 0001               buffer_full@buffer 0001  
             buffer_peek@buffer 0001                 encode_data@data 0006                          _CCPR1L 000FBE  
         setup_timer0@T0CON_reg 0001             ??_spi_send_get_byte 0001                          _INT2IF 007F81  
                __CFG_WDTEN$OFF 000000                          _INTCON 000FF2                          _SSPBUF 000FC9  
         __end_of_setPulseWidth 1560                 decode_data@data 0001       pmwSingleModeSetUp@outputs 0007  
          __size_of_encode_data 0046                 load_buffer@size 000A           ??_espi_master_receive 000E  
          __size_of_buffer_full 001E            __size_of_buffer_peek 0052            __size_of_buffer_push 0080  
     __end_of_spi_send_get_byte 14BA                          clear_0 16B0    espi_master_send@byte_to_send 0010  
                  __pdataCOMRAM 0016                 set_timer0@value 0001            __end_of_buffer_count 1494  
               set_timer3@value 0001                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8           setup_timer3@T3CON_reg 0001            __end_of_buffer_space 14D0  
   __end_of_stepper_motor_setup 14A6                 ??_step_backward 0001                      __accesstop 0060  
       __end_of__initialization 16F8                   ___rparam_used 000001                  __pcstackCOMRAM 0001  
                  __pidataBANK0 1429              buffer_count@buffer 0001                  buffer_pop@byte 0005  
          __size_of_load_buffer 00A0        pmwSingleModeSetUp@scaler 0006                      __pbssBANK0 00AE  
                 _current_state 001E                   ?_selectOutput 0001      __size_of_spi_send_get_byte 0014  
                main@continuous 0066               buffer_push@buffer 0001              __size_of_timer0_up 000E  
            __size_of_timer3_up 000E              __size_of_setup_spi 003E                      _buffer_pop 1772  
   __size_of_pmwSingleModeSetUp 00A8                         _PSTRCON 000FB9                         _SSPCON1 000FC6  
                       _SSPSTAT 000FC7       espi_master_receive@buffer 0008               ?_espi_master_send 0008  
                       __Hparam 0000                         __Lparam 0000                    load_buffer@i 000D  
            ??_espi_master_send 000E                  ??_selectOutput 0002                      _espi_setup 1560  
                    _dummy_byte 001F                         __pcinit 16AA                       _ANSELbits 000F7E  
                       __ramtop 0100           __size_of_buffer_count 0012                         __ptext0 1BB0  
                       __ptext1 1474                         __ptext2 1494                         __ptext3 1512  
                       __ptext4 14EE                         __ptext5 1434                         __ptext6 142C  
                       __ptext7 145A                         __ptext8 190C                         __ptext9 1A54  
         __size_of_buffer_space 0016                       _T2CONbits 000FCA                   ??_decode_data 0005  
          end_of_initialization 16F8                      _send_delay 1444                   __Lmediumconst 0000  
             __end_of_timer0_up 1482               __end_of_timer3_up 1474                    _buffer_count 1482  
             __end_of_setup_spi 1612     espi_master_send@timer_start 000A                    _buffer_space 14BA  
                    _set_timer0 145A                      _set_timer3 144E                         postdec1 000FE5  
                       postinc0 000FEE                         postinc2 000FDE                      _wait_pulse 1702  
                 ?_setup_timer0 0001                   ?_setup_timer3 0001                       _TRISAbits 000F92  
                     _TRISBbits 000F93                       _TRISCbits 000F94                     ?_buffer_pop 0001  
           __end_of_decode_data 15D4                   ??_encode_data 0005                     _CCP1CONbits 000FBD  
   __end_of_espi_master_receive 1A54                      main@byte_1 0067                      main@byte_2 0068  
                 ??_buffer_full 0003                   ??_buffer_peek 0003                   ??_buffer_push 0004  
                   ?_espi_setup 0001                 buffer_peek@byte 0005                   __pidataCOMRAM 143C  
                espi_setup@mode 0003                  ??_setup_timer0 0001                  ??_setup_timer3 0001  
        __size_of_setPulseWidth 002A             start_initialization 16AA              selectOutput@toggle 0001  
                 ?_step_forward 0001            __end_of_selectOutput 19AE                     ?_send_delay 0001  
            buffer_space@buffer 0001           __end_of_step_backward 1512    __size_of_stepper_motor_setup 0012  
               buffer_push@byte 0003                  load_buffer@str 0008                     ?_set_timer0 0001  
           __end_of_encode_data 1658                     ?_set_timer3 0001             __size_of_buffer_pop 007A  
                   __pdataBANK0 00F2                     ?_wait_pulse 0003                   ??_load_buffer 000C  
           __end_of_buffer_full 14EE             __end_of_buffer_peek 16AA             __end_of_buffer_push 186C  
                   _decode_data 1598                     __pbssCOMRAM 001E                   __pcstackBANK0 0060  
                ??_step_forward 0001             __size_of_espi_setup 0038                   _setPulseWidth 1536  
    espi_master_send@received_1 000E      espi_master_send@received_2 000F           wait_pulse@timer_start 0003  
             encode_data@byte_1 0001               encode_data@byte_2 0003             __size_of_send_delay 000A  
     __size_of_espi_master_send 00B4      __end_of_pmwSingleModeSetUp 1AFC             __end_of_load_buffer 190C  
           __size_of_set_timer0 000C             __size_of_set_timer3 000C             __size_of_wait_pulse 0070  
                      _LATAbits 000F89                        _LATCbits 000F8B                     _encode_data 1612  
                ?_setPulseWidth 0001                        _PIE1bits 000F9D                        _PIE2bits 000FA0  
          __end_of_setup_timer0 1434            __end_of_setup_timer3 143C                        _PIR1bits 000F9E  
                      _PIR2bits 000FA1                     _buffer_full 14D0                     _buffer_peek 1658  
                   _buffer_push 17EC                       _timer0_up 1474                       _timer3_up 1466  
                     main@F4005 00AE                       main@F4007 00D0                       main@F4009 00F2  
                     _setup_spi 15D4                       main@count 0069           __size_of_selectOutput 00A2  
                     main@right 0065                       main@value 0063  espi_master_receive@timer_start 000A  
                  ??_buffer_pop 0003               decode_data@byte_1 0003               decode_data@byte_2 0004  
                   _INTCON2bits 000FF1                     _INTCON3bits 000FF0                       copy_data0 16EC  
             load_buffer@buffer 0006                        __Hrparam 0000                        __Lrparam 0000  
                    ?_timer0_up 0001                      ?_timer3_up 0001                    ??_espi_setup 0003  
               wait_pulse@value 0007                 wait_pulse@timer 0005              __end_of_buffer_pop 17EC  
          __end_of_step_forward 1536                    _selectOutput 190C                      ?_setup_spi 0001  
                   _load_buffer 186C             _stepper_motor_setup 1494                      _ANSELHbits 000F7F  
                      __ptext10 1536                        __ptext11 186C                        __ptext20 1702  
                      __ptext12 1560                        __ptext21 1466                        __ptext13 15D4  
                      __ptext22 14A6                        __ptext14 1AFC                        __ptext23 144E  
                      __ptext15 1612                        __ptext24 1444                        __ptext16 1772  
                      __ptext25 1598                        __ptext17 1658                        __ptext26 14BA  
                      __ptext18 1482                        __ptext27 17EC                        __ptext19 19AE  
                      __ptext28 14D0                        __ptext29 0000              __end_of_espi_setup 1598  
                  ??_send_delay 0001                 ??_setPulseWidth 0003            ?_stepper_motor_setup 0001  
                 __size_of_main 0250                    ??_set_timer0 0003                    ??_set_timer3 0003  
  __size_of_espi_master_receive 00A6                    ??_wait_pulse 0007                        main@name 0060  
                      main@send 006A                _espi_master_send 1AFC              __end_of_send_delay 144E  
                    _INTCONbits 000FF2                    ?_decode_data 0001        espi_master_receive@value 0010  
      espi_master_receive@timer 000C              __end_of_set_timer0 1466              __end_of_set_timer3 145A  
         __size_of_setup_timer0 0008           __size_of_setup_timer3 0008           ??_stepper_motor_setup 0001  
            __end_of_wait_pulse 1772                      _OSCCONbits 000FD3                     ??_timer0_up 0001  
                   ??_timer3_up 0001                     ??_setup_spi 0002              setPulseWidth@width 0001  
        __size_of_step_backward 0024                     _PSTRCONbits 000FB9                    _setup_timer0 142C  
                  _setup_timer3 1434      pmwSingleModeSetUp@valuePR2 0005     buffer_push@current_position 0005  
                   _SSPCON1bits 000FC6      pmwSingleModeSetUp@polarity 0008              _pmwSingleModeSetUp 1A54  
                  ?_encode_data 0001          espi_master_send@buffer 0008          espi_master_send@byte_1 0012  
        espi_master_send@byte_2 0013           __size_of_step_forward 0024                   ?_buffer_count 0001  
         espi_master_send@timer 000C                    ?_buffer_full 0001                    ?_buffer_peek 0001  
                 ?_buffer_space 0001                    ?_buffer_push 0001  
